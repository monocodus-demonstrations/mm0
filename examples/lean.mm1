delimiter $ ( [ $ $ ] ) , $;
provable sort prov;
term and: prov > prov > prov;
axiom and_left: $ and p q $ > $ p $;
axiom and_right: $ and p q $ > $ q $;
axiom mk_and: $ p $ > $ q $ > $ and p q $;

sort level;
term l_0: level; prefix l_0: $L0$ prec max;
term l_S: level > level;
term l_max: level > level > level;
term l_imax: level > level > level;
def l_1: level = $ l_S L0 $; prefix l_1: $L1$ prec max;

term l_subst {u: level} (A: level u) (e: level) (B: level): prov;
notation l_subst (x A e B) = ($l_subst:$:0) A ($[$:0) e ($/$:0) x ($]$:0) ($=$:1) B;
axiom l_subst_var (e: level u): $ l_subst: u [e / u] = e $;
axiom l_subst_nf (e: level u): $ l_subst: v [e / u] = v $;
axiom l_subst_S (A A2 e: level u):
  $ l_subst: A [e / u] = A2 $ >
  $ l_subst: l_S A [e / u] = l_S A2 $;
axiom l_subst_max (A B A2 B2 e: level u):
  $ l_subst: A [e / u] = A2 $ >
  $ l_subst: B [e / u] = B2 $ >
  $ l_subst: l_max A B [e / u] = l_max A2 B2 $;
axiom l_subst_imax (A B A2 B2 e: level u):
  $ l_subst: A [e / u] = A2 $ >
  $ l_subst: B [e / u] = B2 $ >
  $ l_subst: l_imax A B [e / u] = l_imax A2 B2 $;

term l_pl: level > level > level > level > prov;
notation l_pl (u v a b) = u ($+l$:0) a ($<=$:0) v ($+l$:0) b: 0 lassoc;
def l_le (a b: level): prov = $ a +l L0 <= b +l L0 $;
infixl l_le: $<=l$ prec 0;
term l_eq: level > level > prov;
infixl l_eq: $=l$ prec 0;
axiom l_eq_le: $ u <=l v $ > $ v <=l u $ > $ u =l v $;
axiom l_pl_S_S: $ u +l a <= v +l b $ > $ u +l (l_S a) <= v +l (l_S b) $;
axiom l_pl_id: $ u <=l v $ > $ u +l a <= v +l a $;
axiom l_pl_0_0: $ L0 +l L0 <= u +l a $;
axiom l_pl_id_0: $ u +l L0 <= u +l a $;
theorem l_le_refl: $ u <=l u $ = 'l_pl_id_0;
axiom l_pl_S_left: $ u +l l_S a <= v +l b $ > $ l_S u +l a <= v +l b $;
axiom l_pl_S_right: $ u +l a <= v +l l_S b $ > $ u +l a <= l_S v +l b $;
axiom l_pl_max_right_1: $ u +l a <= v +l b $ > $ u +l a <= l_max v w +l b $;
axiom l_pl_max_right_2: $ u +l a <= w +l b $ > $ u +l a <= l_max v w +l b $;
axiom l_pl_max_left: $ u +l a <= w +l b $ > $ v +l a <= w +l b $ > $ l_max u v +l a <= w +l b $;
axiom l_pl_imax_0_left: $ L0 +l a <= v +l b $ > $ l_imax u L0 +l a <= v +l b $;
axiom l_pl_imax_S_left: $ l_max u (l_S v) +l a <= w +l b $ > $ l_imax u (l_S v) +l a <= w +l b $;
axiom l_pl_imax_imax_left:
  $ l_max (l_imax u w) (l_imax v w) +l a <= x +l b $ >
  $ l_imax u (l_imax v w) +l a <= x +l b $;
axiom l_pl_imax_imax_right:
  $ x +l a <= l_max (l_imax u w) (l_imax v w) +l b $ >
  $ x +l a <= l_imax u (l_imax v w) +l b $;
axiom l_pl_imax_max_left:
  $ l_max (l_imax u v) (l_imax u w) +l a <= x +l b $ >
  $ l_imax u (l_max v w) +l a <= x +l b $;
axiom l_pl_imax_max_right:
  $ x +l a <= l_max (l_imax u v) (l_imax u w) +l b $ >
  $ x +l a <= l_imax u (l_max v w) +l b $;
axiom l_pl_cases (u v u0 v0 uS vS: level x):
  $ l_subst: u [L0 / x] = u0 $ >
  $ l_subst: v [L0 / x] = v0 $ >
  $ u0 +l a <= v0 +l b $ >
  $ l_subst: u [l_S x / x] = uS $ >
  $ l_subst: v [l_S x / x] = vS $ >
  $ uS +l a <= vS +l b $ >
  $ u +l a <= v +l b $;

sort expr;
term Sort: level > expr;
def Prop = $ Sort L0 $;
def Type = $ Sort L1 $;

term app: expr > expr > expr;
infixl app: $@$ prec 100;
term lambda {x: expr} (t: expr) (e: expr x): expr;
notation lambda (x t e) = ($\.$:2) x ($:$:1) t ($,$:1) e;
term Pi {x: expr} (t: expr) (e: expr x): expr;
notation Pi (x t A) = ($A.$:2) x ($:$:1) t ($,$:1) A;

def imp (A B: expr): expr = $ A. x : A, B $;
infixr imp: $->$ prec 5;

sort ctx;
term nil: ctx;
term cons (G: ctx) {x: expr} (t: expr): ctx;
notation cons (G x t) = G ($,$:1) x ($:$:1) t: 1 lassoc;

term subst {x: expr} (A: expr x) (e: expr) (B: expr): prov;
notation subst (x A e B) = ($subst:$:0) A ($[$:0) e ($/$:0) x ($]$:0) ($=$:1) B;

axiom subst_var (e: expr x): $ subst: x [e / x] = e $;
axiom subst_nf (A: expr) (e: expr x): $ subst: A [e / x] = A $;
axiom subst_app (A B e A2 B2: expr x):
  $ subst: A [e / x] = A2 $ >
  $ subst: B [e / x] = B2 $ >
  $ subst: (A @ B) [e / x] = (A2 @ B2) $;
axiom subst_lambda_1 (t A e: expr x):
  $ subst: (\. x : t, A) [e / x] = (\. x : t, A) $;
axiom subst_lambda (t A t2 A2: expr x y) (e: expr x):
  $ subst: t [e / x] = t2 $ >
  $ subst: A [e / x] = A2 $ >
  $ subst: (\. y : t, A) [e / x] = (\. y : t2, A2) $;
axiom subst_lambda_alpha (t A e B: expr x y) (A2: expr x y z):
  $ subst: A [z / y] = A2 $ >
  $ subst: (\. z : t, A2) [e / x] = B $ >
  $ subst: (\. y : t, A) [e / x] = B $;
axiom subst_Pi_1 (t A e: expr x):
  $ subst: (A. x : t, A) [e / x] = (A. x : t, A) $;
axiom subst_Pi (t A t2 A2: expr x y) (e: expr x):
  $ subst: t [e / x] = t2 $ >
  $ subst: A [e / x] = A2 $ >
  $ subst: (A. y : t, A) [e / x] = (A. y : t2, A2) $;
axiom subst_Pi_alpha (t A e B: expr x y) (A2: expr x y z):
  $ subst: A [z / y] = A2 $ >
  $ subst: (A. z : t, A2) [e / x] = B $ >
  $ subst: (A. y : t, A) [e / x] = B $;
theorem subst_imp (A B A2 B2 e: expr x)
  (h1: $ subst: A [e / x] = A2 $)
  (h2: $ subst: B [e / x] = B2 $):
  $ subst: (A -> B) [e / x] = (A2 -> B2) $ =
'(!! subst_Pi _ y h1 h2);

term ty: ctx > expr > expr > prov;
notation ty (G x t) = G ($|-$:0) x ($:$:1) t: 0 lassoc;

axiom ty_cons: $ G |- A : Sort u $ > $ G |- e : B $ > $ G, x : t |- e : B $;
axiom ty_var: $ G |- A : Sort u $ > $ G, x : t |- x : t $;
axiom ty_univ: $ nil |- Sort u : Sort (l_S u) $;
axiom ty_app: $ G |- f : A. x : A, B $ > $ G |- e : A $ >
  $ subst: B [e / x] = C $ > $ G |- f @ e : C $;
axiom ty_lambda: $ G, x : A |- e : B $ > $ G |- \. x : A, e : A. x : A, B $;
axiom ty_Pi:
  $ G |- A : Sort u $ >
  $ G, x : A |- B : Sort v $ >
  $ G |- A. x : A, B : Sort (l_imax u v) $;

term conv: ctx > expr > expr > prov;
notation conv (G a b) = G ($|=$:0) a ($=$:1) b: 0 lassoc;
axiom ty_conv: $ G |- e : A $ > $ G |= A = B $ > $ G |- e : B $;

def conv_ty (G: ctx) (a b A: expr): prov =
$ and (and (G |- a : A) (G |- b : A)) (G |= a = b) $;
notation conv_ty (G a b t) = G ($|=:$:0) a ($=$:1) b ($:$:1) t: 0 lassoc;

axiom conv_refl: $ G |- e : A $ > $ G |= e = e $;
axiom conv_symm: $ G |= a = b $ > $ G |= b = a $;
axiom conv_trans: $ G |= a = b $ > $ G |= b = c $ > $ G |= a = c $;
axiom conv_sort: $ u =l v $ > $ G |= Sort u = Sort v $;
axiom conv_app:
  $ G |=: e1 = e2 : A. x : A, B $ >
  $ G |=: f1 = f2 : A $ >
  $ G |= f1 @ e1 = f2 @ e2 $;
axiom conv_lambda:
  $ G |= A1 = A2 $ >
  $ G, x : A1 |= e1 = e2 $ >
  $ G |= \. x : A1, e1 = \. x : A2, e2 $;
axiom conv_Pi:
  $ G |= A1 = A2 $ >
  $ G, x : A1 |= e1 = e2 $ >
  $ G |= A. x : A1, e1 = A. x : A2, e2 $;
axiom conv_beta (e e2 e3: expr x):
  $ G, x : A |- e : B $ > $ G |- e2 : A $ >
  $ subst: e [e2 / x] = e3 $ >
  $ G |= (\. x : A, e) @ e2 = e3 $;
axiom conv_eta (e A B: expr y):
  $ G |- e : A. y : A, B $ >
  $ G |= \. x : A, e @ x = e $;
axiom proof_irrel:
  $ G |- p : Prop $ >
  $ G |- h1 : p $ > $ G |- h2 : p $ > $ G |= h1 = h2 $;

term let {x: expr} (t e: expr) (a: expr x): expr;
axiom ty_let:
  $ G |- e : A $ >
  $ subst: e2 [e / x] = e3 $ >
  $ G |- e3 : B $ >
  $ G |- let x A e e2 : B $;
axiom conv_zeta:
  $ G |- e : A $ >
  $ subst: e2 [e / x] = e3 $ >
  $ G |- e3 : B $ >
  $ G |= let x A e e2 = e3 $;

sort indspec;
term K0: indspec;
term KS: expr > indspec > indspec;
def K1 (e: expr) = $ KS e K0 $;

term Ind_ty (F: expr) (l: level): prov;
axiom Ind_ty_0: $ Ind_ty (Sort l) l $;
axiom Ind_ty_S (A F: expr x): $ Ind_ty F l $ > $ Ind_ty (A. x : A, F) l $;

term ty_app_ts (G: ctx) (t F e: expr): prov;
axiom ty_app_ts_0: $ ty_app_ts G t (Sort l) t $;
axiom ty_app_ts_S:
  $ G |- e : A $ >
  $ subst: F [e / x] = F2 $ >
  $ ty_app_ts G (t @ e) F2 e2 $ >
  $ ty_app_ts G t (A. x : A, F) e2 $;

term ctorR (G: ctx) (t F A: expr): prov;
axiom ctorR_0: $ ty_app_ts G t F A $ > $ ctorR G t F A $;
axiom ctorR_S (F B: expr x):
  $ Ind_ty F l $ >
  $ G |- A : Sort l2 $ >
  $ l_imax l2 l <=l l $ >
  $ ctorR (G, x : A) t F B $ >
  $ ctorR G t F (A. x : A, B) $;

term ctor (G: ctx) (t F A: expr): prov;
axiom ctor_app: $ ty_app_ts G t F e $ > $ ctor G t F e $;
axiom ctor_Pi:
  $ Ind_ty F l $ >
  $ G |- A : Sort l2 $ >
  $ l2 <=l l $ >
  $ ctor (G, x : A) t F B $ >
  $ ctor G t F (A. x : A, B) $;
axiom ctor_rec:
  $ ctorR G t F A $ >
  $ ctor G t F B $ >
  $ ctor G t F (A -> B) $;

term spec (G: ctx) (t F: expr) (K: indspec): prov;
axiom spec_K0: $ Ind_ty F u $ > $ spec G t F K0 $;
axiom spec_KS:
  $ ctor G t F A $ > $ spec G t F K $ >
  $ spec G t F (KS A K) $;
theorem spec_K1 (h1: $ ctor G t F A $) (h2: $ Ind_ty F u $):
  $ spec G t F (K1 A) $ = '(spec_KS h1 @ spec_K0 h2);

term Ind {x: expr} (e: expr) (K: indspec x): expr;
sort cidx;
term c0: cidx;
term cS: cidx > cidx;
term Ctor (c: cidx) {x: expr} (e: expr) (K: indspec x): expr;
term Rec (l: level) {x: expr} (e: expr) (K: indspec x): expr;

term cty: cidx > indspec > expr > prov;
axiom cty_0: $ cty c0 (KS e K) e $;
axiom cty_S: $ cty c K e $ > $ cty (cS c) (KS a K) e $;

axiom ty_Ind (K: indspec t): $ spec G t F K $ > $ G |- Ind t F K : F $;
axiom ty_Ctor (K: indspec x):
  $ spec G t F K $ >
  $ cty c K A $ >
  $ subst: A [Ind t F K / t] = B $ >
  $ G |- Ctor c x e K : B $;

term LE_mem {x: expr} (e: expr): prov;
axiom LE_mem_0 (f: expr x): $ LE_mem x (f @ x) $;
axiom LE_mem_S (f: expr x): $ LE_mem x f $ > $ LE_mem x (f @ e) $;
term LE_mem_Pi {x: expr} (e: expr): prov;
axiom LE_mem_Pi_0: $ LE_mem x e $ > $ LE_mem_Pi x e $;
axiom LE_mem_Pi_S (A B: expr x y): $ LE_mem_Pi x B $ > $ LE_mem_Pi x (A. y : A, B) $;

term LE_ctor (G: ctx) (t F e: expr): prov;
axiom LE_ctor_app: $ ty_app_ts G t F e $ > $ LE_ctor G t F e $;
axiom LE_ctor_Pi_Prop:
  $ G |- A : Prop $ >
  $ LE_ctor (G, x : A) t F B $ >
  $ LE_ctor G t F (A. x : A, B) $;
axiom LE_ctor_rec:
  $ ctorR G t F A $ >
  $ LE_ctor G t F B $ >
  $ LE_ctor G t F (A -> B) $;
axiom LE_ctor_Pi_mem:
  $ LE_mem_Pi x B $ >
  $ LE_ctor (G, x : A) t F B $ >
  $ LE_ctor G t F (A. x : A, B) $;
axiom LE_ctor_mem:
  $ ctorR G t F A $ >
  $ LE_ctor G t F B $ >
  $ LE_ctor G t F (A -> B) $;

term LE (G: ctx) (t F: expr) (K: indspec) (l: level): prov;
axiom LE_Prop: $ LE G t F K L0 $;
axiom LE_0: $ LE G t F K0 u $;
axiom LE_Type: $ Ind_ty F l $ > $ L1 <=l l $ > $ LE G t F K u $;
axiom LE_1: $ LE_ctor G t F e $ > $ LE G t F (K1 e) u $;

term Rec_kappa (u: level) (t F e: expr): prov;
axiom Rec_kappa_0: $ Rec_kappa u P (Sort l) (P -> Sort u) $;
axiom Rec_kappa_S:
  $ Rec_kappa u (P @ x) B e $ >
  $ Rec_kappa u P (A. x : A, B) (A. x : A, e) $;

term Rec_app (t C A e: expr): prov;
axiom Rec_app_0: $ Rec_app t C t C $;
axiom Rec_app_S:
  $ Rec_app t C A e $ >
  $ Rec_app t C (A @ x) (e @ x) $;

term Rec_delta (t C u A e: expr): prov;
axiom Rec_delta_0:
  $ Rec_app t C A e $ >
  $ Rec_delta t C u A (e @ u) $;
axiom Rec_delta_S (C u B e: expr x):
  $ Rec_delta t C (u @ x) B e $ >
  $ Rec_delta t C u (A. x : A, B) (A. x : A, e) $;

term Rec_beta {t: expr} (T C c A e1 e2 e3: expr t): prov;
axiom Rec_beta_app (T C c A A2 e1 e: expr t):
  $ Rec_app T C A2 e $ >
  $ subst: A [T / t] = A2 $ >
  $ Rec_beta t T C c A e1 e1 (e @ c) $;
axiom Rec_beta_Pi (A A2 C c B e1 e2 e3: expr x t):
  $ subst: A [T / t] = A2 $ >
  $ Rec_beta t T C (c @ x) B e1 e2 e3 $ >
  $ Rec_beta t T C c (A. x : A, B) (A. x : A2, e1) e2 e3 $;
axiom Rec_beta_rec (A A2 C c B e1 e2 e3: expr u t):
  $ Rec_delta T C u A2 D $ >
  $ subst: A [T / t] = A2 $ >
  $ Rec_beta t T C (c @ u) B e1 e2 e3 $ >
  $ Rec_beta t T C c (A -> B) (A. u : A2, e1) e2 (D -> e3) $;

term Rec_alpha (t F C e: expr): prov;
axiom Rec_alpha_0: $ Rec_alpha P (Sort l) C (A. z : P, C @ z) $;
axiom Rec_alpha_S (e: expr):
  $ Rec_alpha (P @ x) B (C @ x) e $ >
  $ Rec_alpha P (A. x : A, B) C (A. x : A, e) $;

term Rec_epsilon {t: expr} (F: expr) (L: indspec t)
  (C: expr t) (c: cidx) (K: indspec t) (e: expr t): prov;
axiom Rec_epsilon_0:
  $ Rec_alpha (Ind t F L) F C e $ >
  $ Rec_epsilon t F L C c K0 e $;
axiom Rec_epsilon_S:
  $ Rec_beta t (Ind t F L) C (Ctor c t F L) a A e2 e2 $ >
  $ Rec_epsilon t F L C (cS c) K e $ >
  $ Rec_epsilon t F L C c (KS a K) (A -> e) $;

axiom ty_Rec (e: expr C):
  $ spec G t F K $ >
  $ LE G t F K u $ >
  $ Rec_kappa u (Ind t F K) F ka $ >
  $ Rec_epsilon t F K C c0 K e $ >
  $ G |- Rec u t F K : A. C : ka, e $;

term iota_delta (t C u A e: expr): prov;
axiom iota_delta_0:
  $ Rec_app t C A e $ >
  $ iota_delta t C u A (e @ u) $;
axiom iota_delta_S (C u B e: expr x):
  $ iota_delta t C (u @ x) B e $ >
  $ iota_delta t C u (A. x : A, B) (\. x : A, e) $;

term iota_beta (G: ctx) {t: expr} (C c A e r1 r2 v1 v2: expr t): prov;
axiom iota_beta_app (C c A e r v: expr t):
  $ Rec_app t C A e $ >
  $ iota_beta G t C c A (e @ c) r r v v $;
axiom iota_beta_Pi (C c B e r1 r2 v1 v2: expr x t):
  $ iota_beta G t C (c @ x) B e (r1 @ x) r2 v1 v2 $ >
  $ iota_beta G t C c (A. x : A, B) e r1 r2 v1 v2 $;
axiom iota_beta_rec (A C c B e r1 r2 v1 v2: expr u t):
  $ iota_delta t C u A v $ >
  $ iota_beta G t C (c @ u) B e (r1 @ u) r2 (v1 @ v) v2 $ >
  $ iota_beta G t C c (A -> B) e r1 r2 v1 v2 $;

term iota_epsilon2 (G: ctx) (t F: expr) (L: indspec t)
  (C: expr) (c: cidx) (K: indspec) (R e: expr): prov;
axiom iota_epsilon2_0:
  $ iota_epsilon2 G t F L C c K0 R R $;
axiom iota_epsilon2_S:
  $ Rec_beta t (Ind t F L) C (Ctor c t F L) a A r r $ >
  $ G |- x : A $ >
  $ iota_epsilon2 G t F L C (cS c) K (R @ x) e $ >
  $ iota_epsilon2 G t F L C c (KS a K) R e $;
theorem iota_epsilon2_1
  (h1: $ Rec_beta t (Ind t F L) C (Ctor c t F L) a A r r $)
  (h2: $ G |- x : A $):
  $ iota_epsilon2 G t F L C c (K1 a) R (R @ x) $ =
'(iota_epsilon2_S h1 h2 iota_epsilon2_0);

term iota_epsilon (G: ctx) (t F: expr) (L: indspec t)
  (C: expr) (c: cidx) (K: indspec) (R e1 e2: expr): prov;
axiom iota_epsilon_0:
  $ Rec_beta t (Ind t F L) C (Ctor c t F L) a A r r $ >
  $ G |- e : A $ >
  $ iota_beta G t R2 (Ctor c t F L) a e1 e v v e2 $ >
  $ iota_epsilon2 G t F L C (cS c) K (R @ x) R2 $ >
  $ iota_epsilon G t F L C c (KS a K) R e1 e2 $;
axiom iota_epsilon_S:
  $ Rec_beta t (Ind t F L) C (Ctor c t F L) a A r r $ >
  $ G |- x : A $ >
  $ iota_epsilon G t F L C (cS c) K (R @ x) e1 e2 $ >
  $ iota_epsilon G t F L C c (KS a K) R e1 e2 $;

axiom conv_iota:
  $ spec G t F K $ >
  $ LE G t F K u $ >
  $ Rec_kappa u (Ind t F K) F ka $ >
  $ G |- C : ka $ >
  $ iota_epsilon G t F K C c0 K (Rec u t F K @ C) e1 e2 $ >
  $ G |= e1 = e2 $;

def eq (u: level) = $ \. A : Sort u, \. a : A, Ind t (A -> Prop)
  (K1 (t @ a)) $;

term quot: level > expr;
axiom ty_quot: $ nil |- quot u : A. A : Sort u, (A -> A -> Prop) -> Sort u $;

term quot_mk: level > expr;
axiom ty_quot_mk: $ nil |- quot_mk u :
  A. A : Sort u, A. r : A -> A -> Prop, A -> quot u @ A @ r $;

term quot_sound: level > expr;
axiom ty_quot_sound: $ nil |- quot_sound u :
  A. A : Sort u, A. r : A -> A -> Prop, A. a : A, A. b : A,
  r @ a @ b ->
  eq u @ (quot u @ A @ r)
    @ (quot_mk u @ A @ r @ a)
    @ (quot_mk u @ A @ r @ b) $;

term quot_lift: level > level > expr;
axiom ty_quot_lift: $ nil |- quot_lift u v :
  A. A : Sort u, A. r : A -> A -> Prop, A. B : Sort v, A. f : A -> B,
  (A. a : A, A. b : A, r @ a @ b -> eq v @ B @ (f @ a) @ (f @ b)) ->
  quot u @ A @ r -> B $;

axiom quot_iota:
  $ G |- A : Sort u $ >
  $ G |- r : A -> A -> Prop $ >
  $ G |- B : Sort v $ >
  $ G |- f : A -> B $ >
  $ G |- H : A. a : A, A. b : A, r @ a @ b -> eq v @ B @ (f @ a) @ (f @ b) $ >
  $ G |= quot_lift u v @ A @ r @ B @ f @ H @ (quot_mk u @ A @ r @ a) = f @ a $;

def iff (p q: expr): expr = $ Ind t Prop
  (K1 ((p -> q) -> (q -> p) -> t)) $;
infixl iff: $<->$ prec 6;

term propext: expr;
axiom ty_propext:
  $ nil |- propext : A. p : Prop, A. q : Prop, (p <-> q) -> eq L1 @ Prop @ p @ q $;

def nonempty (u: level): expr = $ \. A : Sort u, Ind t Prop
  (K1 (A -> t)) $;

term choice: level > expr;
axiom ty_choice: $ nil |- choice u : A. A : Sort u, nonempty u @ A -> A $;

-- ---------------------------

def nat_spec (t: expr) = $ KS t (K1 (t -> t)) $;
def nat = $ Ind t Type (nat_spec t) $;
def nat_zero = $ Ctor c0 t Type (nat_spec t) $;
def nat_succ = $ Ctor (cS c0) t Type (nat_spec t) $;
def nat_rec (u: level) = $ Rec u t Type (nat_spec t) $;

theorem nat_spec_spec: $ spec G t Type (nat_spec t) $ =
'(spec_KS (ctor_app ty_app_ts_0) @
  spec_KS (ctor_rec (ctorR_0 ty_app_ts_0) (ctor_app ty_app_ts_0)) @
  spec_K0 Ind_ty_0);

theorem ty_nat: $ nil |- nat : Type $ =
'(ty_Ind @ ! nat_spec_spec _ t);

theorem ty_nat_zero: $ nil |- nat_zero : nat $ =
'(ty_Ctor (! nat_spec_spec _ t) cty_0 subst_var);

theorem ty_nat_succ: $ nil |- nat_succ : nat -> nat $ =
'(ty_Ctor (! nat_spec_spec _ t) (cty_S cty_0) @
  subst_imp subst_var subst_var);

theorem ty_nat_rec: $ nil |- nat_rec u : A. C : nat -> Sort u,
  C @ nat_zero ->
  (A. n : nat, C @ n -> C @ (nat_succ @ n)) ->
  (A. x : nat, C @ x) $ =
'(ty_Rec (! nat_spec_spec _ t) (LE_Type Ind_ty_0 l_le_refl)
  Rec_kappa_0 @
  Rec_epsilon_S (Rec_beta_app Rec_app_0 subst_var) @
  Rec_epsilon_S (Rec_beta_rec (Rec_delta_0 Rec_app_0) subst_var @
    Rec_beta_app Rec_app_0 subst_var) @
  Rec_epsilon_0 Rec_alpha_0);

theorem nat_zero_iota
  (h1: $ G |- C : nat -> Sort u $)
  (h2: $ G |- z : C @ nat_zero $)
  (h3: $ G |- s : A. n : nat, C @ n -> C @ (nat_succ @ n) $):
  $ G |= nat_rec u @ C @ z @ s @ nat_zero = z $ =
'(conv_iota (! nat_spec_spec _ t) (LE_Type Ind_ty_0 l_le_refl)
  Rec_kappa_0 h1 @
  iota_epsilon_0 (Rec_beta_app Rec_app_0 subst_var) h2
    (iota_beta_app Rec_app_0) @
  iota_epsilon2_1 (Rec_beta_rec (Rec_delta_0 Rec_app_0) subst_var @
    Rec_beta_app Rec_app_0 subst_var) @
  h3);

theorem nat_succ_iota
  (h1: $ G |- C : nat -> Sort u $)
  (h2: $ G |- z : C @ nat_zero $)
  (h3: $ G |- s : A. n : nat, C @ n -> C @ (nat_succ @ n) $):
  $ G |= nat_rec u @ C @ z @ s @ (nat_succ @ x) =
         s @ x @ (nat_rec u @ C @ z @ s @ x) $ =
'(conv_iota (! nat_spec_spec _ t) (LE_Type Ind_ty_0 l_le_refl)
  Rec_kappa_0 h1 @
  iota_epsilon_S (Rec_beta_app Rec_app_0 subst_var) h2 @
  iota_epsilon_0 (Rec_beta_rec (Rec_delta_0 Rec_app_0) subst_var @
    Rec_beta_app Rec_app_0 subst_var) h3
  (iota_beta_rec (iota_delta_0 Rec_app_0)
    (iota_beta_app Rec_app_0))
  iota_epsilon2_0);
