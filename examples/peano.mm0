delimiter $ ( ) ~ { } , $;
strict provable sort wff;
term im (ph ps: wff): wff; infixr im: $->$ prec 25;
term not (ph: wff): wff; prefix not: $~$ prec 41;

axiom ax_1 (ph ps: wff): $ ph -> ps -> ph $;
axiom ax_2 (ph ps ch: wff): $ (ph -> ps -> ch) -> (ph -> ps) -> ph -> ch $;
axiom ax_3 (ph ps: wff): $ (~ph -> ~ps) -> ps -> ph $;
axiom ax_mp (ph ps: wff): $ ph -> ps $ > $ ph $ > $ ps $;

def an (a b: wff): wff = $ ~(a -> ~b) $;
infixl an: $/\$ prec 34;

def iff (a b: wff): wff = $ (a -> b) /\ (b -> a) $;
infixl iff: $<->$ prec 20;

def or (a b: wff): wff = $ ~a -> b $;
infixl or: $\/$ prec 30;

def ifp (p a b: wff): wff;
theorem ifppos (p a b: wff): $ p -> (ifp p a b <-> a) $;
theorem ifpneg (p a b: wff): $ ~p -> (ifp p a b <-> b) $;

term wtru: wff; prefix wtru: $T.$ prec max;
axiom tru: $ T. $;
def fal: wff = $ ~T. $; prefix fal: $F.$ prec max;

sort nat;
term al {x: nat} (ph: wff x): wff; prefix al: $A.$ prec 41;

def ex {x: nat} (ph: wff x): wff = $ ~(A. x ~ph) $;
prefix ex: $E.$ prec 41;

term eq (a b: nat): wff; infixl eq: $=$ prec 50;

axiom ax_gen {x: nat} (ph: wff x): $ ph $ > $ A. x ph $;
axiom ax_4 {x: nat} (ph ps: wff x): $ A. x (ph -> ps) -> A. x ph -> A. x ps $;
axiom ax_5 {x: nat} (ph: wff): $ ph -> A. x ph $;
axiom ax_6 (a: nat) {x: nat}: $ E. x x = a $;
axiom ax_7 (a b c: nat): $ a = b -> a = c -> b = c $;
axiom ax_10 {x: nat} (ph: wff x): $ ~(A. x ph) -> A. x ~ (A. x ph) $;
axiom ax_11 {x y: nat} (ph: wff x y): $ A. x A. y ph -> A. y A. x ph $;
axiom ax_12 {x: nat} (a: nat) (ph: wff x): $ x = a -> ph -> A. x (x = a -> ph) $;

def ne (a b: nat): wff = $ ~ a = b $; infixl ne: $!=$ prec 50;

def sb (a: nat) {x .y: nat} (ph: wff x): wff =
  $ A. y (y = a -> A. x (x = y -> ph)) $;
notation sb (a: nat) {x: nat} (ph: wff x): wff =
  ($[$:41) a ($/$:0) x ($]$:0) ph;

strict sort set;
term ab {x: nat} (p: wff x): set;
notation ab {x: nat} (p: wff x): set = (${$:max) x ($|$:0) p ($}$:0);
term el (a: nat) (A: set): wff; infixl el: $e.$ prec 50;
axiom elab (a: nat) {x: nat} (p: wff x):
  $ a e. {x | p} <-> [ a / x ] p $;
axiom ax_8 (a b: nat) (A: set): $ a = b -> a e. A -> b e. A $;

def eqs (A B: set) {.x: nat}: wff = $ A. x (x e. A <-> x e. B) $;
infixl eqs: $==$ prec 50;

def subset (A B: set) (.x: nat): wff = $ A. x (x e. A -> x e. B) $;
infixl subset: $C_$ prec 50;

def Inter (A B: set) (.x: nat): set = $ {x | x e. A /\ x e. B} $;
infixl Inter: $i^i$ prec 70;

def Union (A B: set) (.x: nat): set = $ {x | x e. A \/ x e. B} $;
infixl Union: $u.$ prec 65;

def Compl (A: set) (.x: nat): set = $ {x | ~x e. A} $;

def Univ (.x: nat): set = $ {x | T.} $; prefix Univ: $_V$ prec max;

def sbs (a: nat) {x .y: nat} (A: set x): set = $ {y | [ a / x ] y e. A} $;
notation sbs (a: nat) {x: nat} (A: set x): set =
  ($S[$:99) a ($/$:0) x ($]$:0) A;

term d0: nat; prefix d0: $0$ prec max;
term suc (n: nat): nat;

def d1:  nat = $suc 0$; prefix d1:  $1$  prec max;
def d2:  nat = $suc 1$; prefix d2:  $2$  prec max;
def d3:  nat = $suc 2$; prefix d3:  $3$  prec max;
def d4:  nat = $suc 3$; prefix d4:  $4$  prec max;
def d5:  nat = $suc 4$; prefix d5:  $5$  prec max;
def d6:  nat = $suc 5$; prefix d6:  $6$  prec max;
def d7:  nat = $suc 6$; prefix d7:  $7$  prec max;
def d8:  nat = $suc 7$; prefix d8:  $8$  prec max;
def d9:  nat = $suc 8$; prefix d9:  $9$  prec max;
def d10: nat = $suc 9$; prefix d10: $10$ prec max;

axiom peano1 (a: nat): $ suc a != 0 $;
axiom peano2 (a b: nat): $ suc a = suc b <-> a = b $;
axiom peano5 {x: nat} (ph: wff x):
  $ [ 0 / x ] ph -> A. x (ph -> [ suc x / x ] ph) -> A. x ph $;

term the (A: set): nat;
axiom theid {x: nat} (A: set) (a: nat): $ A == {x | x = a} -> the A = a $;
axiom the0 {x y: nat} (A: set): $ ~E. y A == {x | x = y} -> the A = 0 $;

def sbn (a: nat) {x .y: nat} (b: nat x): nat = $ the {y | [ a / x ] y = b} $;
notation sbn (a: nat) {x: nat} (b: nat x): nat =
  ($N[$:99) a ($/$:0) x ($]$:0) b;

term add (a b: nat): nat; infixl add: $+$ prec 64;
term mul (a b: nat): nat; infixl mul: $*$ prec 70;

axiom addeq (a b c d: nat): $ a = b -> c = d -> a + c = b + d $;
axiom muleq (a b c d: nat): $ a = b -> c = d -> a * c = b * d $;
axiom add0 (a: nat): $ a + 0 = a $;
axiom addS (a b: nat): $ a + suc b = suc (a + b) $;
axiom mul0 (a: nat): $ a * 0 = 0 $;
axiom mulS (a b: nat): $ a * suc b = a * b + a $;

def sub (a b: nat) {.x: nat}: nat = $ the {x | b + x = a} $;
infixl sub: $-$ prec 64;

def le (a b .x: nat): wff = $ E. x a + x = b $;
infixl le: $<=$ prec 50;

def lt (a b: nat): wff = $ suc a <= b $;
infixl lt: $<$ prec 50;

def finite (A: set) (.n .x: nat): wff = $ E. n A. x (x e. A -> x < n) $;

def if (p: wff) (a b: nat): nat;
theorem ifpos (p: wff) (a b: nat): $ p -> if p a b = a $;
theorem ifneg (p: wff) (a b: nat): $ ~p -> if p a b = b $;

def true (n: nat): wff = $ n != 0 $;
def bool (n: nat): wff = $ n < 2 $;
def nat (p: wff): nat = $ if p 1 0 $;

def min (a b: nat): nat = $ if (a < b) a b $;
def max (a b: nat): nat = $ if (a < b) b a $;

def div (a b: nat): nat; infixl div: $//$ prec 70;
def mod (a b: nat): nat; infixl mod: $%$ prec 70;
theorem div0 (a: nat): $ a // 0 = 0 $;
theorem divmod (a b: nat): $ b * (a // b) + a % b = a $;
theorem modlt (a b: nat): $ b != 0 -> a % b < b $;

def dvd (a b .c: nat): wff = $ E. c c * a = b $;

def b0 (n: nat): nat = $ n + n $;
def b1 (n: nat): nat = $ suc (b0 n) $;
def odd (n: nat): wff = $ n % 2 = 1 $;

def pr (a b: nat): nat = $ (a + b) * suc (a + b) // 2 + b $;
infixr pr: $<>$ prec 55;
def fst (a: nat): nat;
def snd (a: nat): nat;

theorem pr0: $ 0 <> 0 = 0 $;
theorem fstpr (a b: nat): $ fst (a <> b) = a $;
theorem sndpr (a b: nat): $ snd (a <> b) = b $;
theorem fstsnd (a: nat): $ fst a <> snd a = a $;

def pi11 (n: nat): nat = $ fst (fst n) $;
def pi12 (n: nat): nat = $ snd (fst n) $;
def pi21 (n: nat): nat = $ fst (snd n) $;
def pi22 (n: nat): nat = $ snd (snd n) $;
def pi221 (n: nat): nat = $ fst (pi22 n) $;
def pi222 (n: nat): nat = $ snd (pi22 n) $;

def isfun (A: set) (.a .b .b2: nat): wff =
$ A. a A. b A. b2 (a <> b e. A -> a <> b2 e. A -> b = b2) $;

def sab {x .z: nat} (A: set x): set =
$ {z | snd z e. S[ fst z / x ] A} $;
notation sab {x: nat} (A: set x): set = ($S\$:100) x ($,$:0) A;

-- Indexed disjoint union, a restricted version of S\
def xab {x .z: nat} (A: set) (B: set x): set =
$ {z | fst z e. A /\ snd z e. S[ fst z / x ] B} $;
notation xab {x: nat} (A: set) (B: set x): set =
  ($X\$:100) x ($e.$:50) A ($,$:0) B;

def opab {x y .z: nat} (p: wff x y): set =
$ {z | E. x E. y (z = x <> y /\ p)} $;

def Xp (A B: set) (.x .y: nat): set = $ opab x y (x e. A /\ y e. B) $;

def Dom (A: set) (.x .y: nat): set = $ {x | E. y x <> y e. A} $;
def Ran (A: set) (.x .y: nat): set = $ {y | E. x x <> y e. A} $;

def Im (F A: set) (.x .y: nat): set = $ {y | E. x (x e. A /\ x <> y e. F)} $;
infixl Im: $''$ prec 80;

def cnv (A: set) (.x .y: nat): set = $ opab x y (y <> x e. A) $;

def comp (F G: set) (.x .y .z: nat): set =
$ opab x z (E. y (x <> y e. G /\ y <> z e. F)) $;
infixr comp: $o.$ prec 91;

def res (A B: set): set = $ A i^i Xp B _V $;
infixl res: $|`$ prec 54;

def lam {x .p: nat} (a: nat x): set = $ {p | E. x p = x <> a} $;
notation lam {x: nat} (a: nat x): set = ($\$:53) x ($,$:0) a;

def app (F: set) (x .y: nat): nat = $ the {y | x <> y e. F} $;
infixl app: $@$ prec 200;

def case (A B: set) (.n: nat): set =
  $ \ n, if (odd n) (B @ (n // 2)) (A @ (n // 2)) $;
theorem casel (A B: set) (n: nat): $ case A B @ (b0 n) = A @ n $;
theorem caser (A B: set) (n: nat): $ case A B @ (b1 n) = B @ n $;

def Sum (A B: set): set;
theorem Suml (A B: set) (n: nat): $ b0 n e. Sum A B <-> n e. A $;
theorem Sumr (A B: set) (n: nat): $ b1 n e. Sum A B <-> n e. B $;

def rec (z: nat) (S: set) (n: nat): nat;
theorem rec0 (z: nat) (S: set): $ rec z S 0 = z $;
theorem recS (z: nat) (S: set) (n: nat):
  $ rec z S (suc n) = S @ rec z S n $;

def obind (a: nat) (F: set): nat;
theorem obind0 (F: set): $ obind 0 F = 0 $;
theorem obindS (n: nat) (F: set): $ obind (suc n) F = F @ n $;

def pow (a b: nat): nat; infixr pow: $^$ prec 81;
theorem pow0 (a: nat): $ a ^ 0 = 1 $;
theorem powS (a b: nat): $ a ^ suc b = a * a ^ b $;

def shl (a n: nat): nat = $ a * 2 ^ n $;
def shr (a n: nat): nat = $ a // 2 ^ n $;

def nel (a b: nat): wff = $ odd (shr b a) $;
def ns (a .x: nat): set = $ {x | nel x a} $; coercion ns: nat > set;
theorem axext (a b: nat): $ a == b -> a = b $;
theorem ellt (a b: nat): $ a e. b -> a < b $;
theorem nel0 (a: nat): $ ~ a e. 0 $;

def lower (A: set) (.n: nat): nat = $ the {n | n == A} $;
theorem eqlower (A: set): $ finite A <-> A == lower A $;

def sn (a: nat): nat;
theorem elsn (a b: nat): $ a e. sn b <-> a = b $;

def ins (a b: nat): nat; infixr ins: $;$ prec 85;
theorem elins (a b c: nat): $ a e. ins b c <-> a = b \/ a e. c $;

def upto (n: nat): nat = $ 2 ^ n - 1 $;
theorem elupto (k n: nat): $ k e. upto n <-> k < n $;

def Bool: nat = $ 0 ; sn 1 $;
def Option (A: set) (.n: nat): set = $ {n | n = 0 \/ n - 1 e. A} $;

def Power (A: set) (.x: nat): set = $ {x | x C_ A} $;
def power (a: nat): nat = $ lower (Power a) $;

def sUnion (A: set) (.x .y: nat): set = $ {x | E. y (x e. y /\ y e. A)} $;

def cons (a b: nat): nat = $ suc (a <> b) $; infixr cons: $:$ prec 91;

def sep (n: nat) (A: set): nat;
theorem elsep (n: nat) (A: set) (a: nat):
  $ a e. sep n A <-> a e. n /\ a e. A $;

def Arrow (A B: set) (.f: nat): set =
$ {f | isfun f /\ Dom f == A /\ Ran f C_ B} $;

def write (F: set) (a b .x .y: nat): set =
  $ opab x y (ifp (x = a) (y = b) (x <> y e. F)) $;
theorem writeEq (F: set) (a b: nat): $ write F a b @ a = b $;
theorem writeNe (F: set) (a b x: nat): $ x != a -> write F a b @ x = F @ x $;

def srec (S: set) (n: nat): nat;
theorem srecval {i: nat} (S: set) (n: nat):
  $ srec S n = S @ lower ((\ i, srec S i) |` upto n) $;

def srecp (A: set) (n: nat): wff;
theorem srecpval {i: nat} (A: set) (n: nat):
  $ srecp A n <-> n <> sep (upto n) {i | srecp A i} e. A $;

def card (s: nat): nat;
theorem card0: $ card 0 = 0 $;
theorem cardS (a s: nat): $ ~a e. s -> card (a ; s) = suc (card s) $;

def lrec (z: nat) (S: set) (n: nat): nat;
theorem lrec0 (z: nat) (S: set): $ lrec z S 0 = z $;
theorem lrecS (z: nat) (S: set) (a b: nat):
  $ lrec z S (a : b) = S @ (a <> b <> lrec z S b) $;

def lmems (l: nat): nat;
theorem lmems0: $ lmems 0 = 0 $;
theorem lmemsS (a l: nat): $ lmems (a : l) = a ; lmems l $;

def lmem (a l: nat): wff = $ a e. lmems l $; infixl lmem: $IN$ prec 50;

def all (A: set) (l: nat): wff = $ lmems l C_ A $;

def List (A: set) (.n: nat): set = $ {n | all A n} $;

def len (l: nat): nat;
theorem len0: $ len 0 = 0 $;
theorem lenS (a b: nat): $ len (a : b) = suc (len b) $;

def Array (A: set) (n .l: nat): set = $ {l | l e. List A /\ len l = n} $;

def append (l1 l2: nat): nat; infixl append: $++$ prec 84;
theorem append0 (a: nat): $ 0 ++ a = a $;
theorem appendS (a b c: nat): $ (a : b) ++ c = a : (b ++ c) $;

def snoc (l a: nat): nat; infixl snoc: $|>$ prec 84;
theorem snoc0 (a: nat): $ 0 |> a = a : 0 $;
theorem snocS (a b c: nat): $ (a : b) |> c = a : (b |> c) $;
theorem snoclt (a b: nat): $ a < a |> b $;

def nth (n l: nat): nat;
theorem nth0 (n: nat): $ nth n 0 = 0 $;
theorem nthZ (a l: nat): $ nth 0 (a : l) = suc a $;
theorem nthS (n a l: nat): $ nth (suc n) (a : l) = nth n l $;

def repeat (a n: nat): nat;
theorem repeat0 (a: nat): $ repeat a 0 = 0 $;
theorem repeatS (a n: nat): $ repeat a (suc n) = a : repeat a n $;

def sublistAt (n L1 L2 .l .r: nat): wff =
$ E. l E. r (L1 = l ++ L2 ++ r /\ len l = n) $;

-- map : (A -> B) -> list A -> list B
def map (F: set) (l: nat): nat;
theorem map0 (F: set): $ map F 0 = 0 $;
theorem mapS (F: set) (a l: nat):
  $ map F (a : l) = F @ a : map F l $;

-- ljoin : list (list A) -> list A
def ljoin (L: nat): nat;
theorem ljoin0: $ ljoin 0 = 0 $;
theorem ljoinS (l L: nat): $ ljoin (l : L) = l ++ ljoin L $;
