(sort wff strict provable)

(term im ((ph wff ()) (ps wff ())) (wff ()))

(term not ((ph wff ())) (wff ()))

(axiom ax_1 ((ph wff ()) (ps wff ())) ()
  (im ph (im ps ph)))

(axiom ax_2 ((ph wff ()) (ps wff ()) (ch wff ())) ()
  (im (im ph (im ps ch)) (im (im ph ps) (im ph ch))))

(axiom ax_3 ((ph wff ()) (ps wff ())) ()
  (im (im (not ph) (not ps)) (im ps ph)))

(axiom ax_mp ((ph wff ()) (ps wff ()))
  ((im ph ps)
   ph)
  ps)

(local theorem a1i ((a wff ()) (b wff ()))
  ((h b))
  (im a b)
()
(ax_mp (b (im a b))
  (ax_1 (b a))
  h))

(local theorem a2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im (im a b) (im a c))
()
(ax_mp ((im a (im b c)) (im (im a b) (im a c)))
  (ax_2 (a b c))
  h))

(local theorem mpd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im a (im b c))))
  (im a c)
()
(ax_mp ((im a b) (im a c))
  (ax_mp ((im a (im b c)) (im (im a b) (im a c)))
    (ax_2 (a b c))
    h2)
  h1))

(local theorem mpi ((a wff ()) (b wff ()) (c wff ()))
  ((h1 b)
   (h2 (im a (im b c))))
  (im a c)
()
(mpd (a b c)
  (a1i (a b)
    h1)
  h2))

(local theorem id ((a wff ())) ()
  (im a a)
()
(mpd (a (im a a) a)
  (ax_1 (a a))
  (ax_1 (a (im a a)))))

(local theorem idd ((a wff ()) (b wff ())) ()
  (im a (im b b))
()
(a1i (a (im b b))
  (id (b))))

(local theorem syl ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im b c))
   (h2 (im a b)))
  (im a c)
()
(mpd (a b c)
  h2
  (a1i (a (im b c))
    h1)))

(local theorem rsyl ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im b c)))
  (im a c)
()
(syl (a b c)
  h2
  h1))

(local theorem a1d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a b)))
  (im a (im c b))
()
(syl (a b (im c b))
  (ax_1 (b c))
  h))

(local theorem a2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b (im c d)))))
  (im a (im (im b c) (im b d)))
()
(syl (a (im b (im c d)) (im (im b c) (im b d)))
  (ax_2 (b c d))
  h))

(local theorem a3d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im (not b) (not c)))))
  (im a (im c b))
()
(syl (a (im (not b) (not c)) (im c b))
  (ax_3 (b c))
  h))

(local theorem sylc ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im b (im c d)))
   (h1 (im a b))
   (h2 (im a c)))
  (im a d)
()
(mpd (a c d)
  h2
  (syl (a b (im c d))
    h
    h1)))

(local theorem syld ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(mpd (a (im b c) (im b d))
  h1
  (a2d (a b c d)
    (a1d (a (im c d) b)
      h2))))

(local theorem syl5 ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im b c))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(syld (a b c d)
  (a1i (a (im b c))
    h1)
  h2))

(local theorem syl6 ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im c d))
   (h2 (im a (im b c))))
  (im a (im b d))
()
(syld (a b c d)
  h2
  (a1i (a (im c d))
    h1)))

(local theorem imim2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im b c) (im (im a b) (im a c)))
()
(a2d ((im b c) a b c)
  (ax_1 ((im b c) a))))

(local theorem imim2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (im b c)))
  (im (im a b) (im a c))
()
(ax_mp ((im b c) (im (im a b) (im a c)))
  (imim2 (a b c))
  h))

(local theorem imim2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im c d))))
  (im a (im (im b c) (im b d)))
()
(syl (a (im c d) (im (im b c) (im b d)))
  (imim2 (b c d))
  h))

(local theorem absurd ((a wff ()) (b wff ())) ()
  (im (not a) (im a b))
()
(a3d ((not a) b a)
  (ax_1 ((not a) (not b)))))

(local theorem com12 ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im b (im a c))
()
(syl (b (im a b) (im a c))
  (a2i (a b c)
    h)
  (ax_1 (b a))))

(local theorem com23 ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b (im c d)))))
  (im a (im c (im b d)))
()
(syl (a (im b (im c d)) (im c (im b d)))
  (com12 (c (im b (im c d)) (im b d))
    (imim2d (c b (im c d) d)
      (com12 ((im c d) c d)
        (id ((im c d))))))
  h))

(local theorem absurdr ((a wff ()) (b wff ())) ()
  (im a (im (not a) b))
()
(com12 ((not a) a b)
  (absurd (a b))))

(local theorem imim1 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a b) (im (im b c) (im a c)))
()
(com12 ((im b c) (im a b) (im a c))
  (imim2 (a b c))))

(local theorem imim1i ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a b)))
  (im (im b c) (im a c))
()
(ax_mp ((im a b) (im (im b c) (im a c)))
  (imim1 (a b c))
  h))

(local theorem imim1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b c))))
  (im a (im (im c d) (im b d)))
()
(syl (a (im b c) (im (im c d) (im b d)))
  (imim1 (b c d))
  h))

(local theorem imimd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im d e))))
  (im a (im (im c d) (im b e)))
()
(syld (a (im c d) (im b d) (im b e))
  (imim1d (a b c d)
    h1)
  (imim2d (a b d e)
    h2)))

(local theorem imim ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (im a b) (im (im c d) (im (im b c) (im a d))))
()
(syl5 ((im a b) (im c d) (im (im b c) (im b d)) (im (im b c) (im a d)))
  (imim2 (b c d))
  (imim2d ((im a b) (im b c) (im b d) (im a d))
    (imim1 (a b d)))))

(local theorem imidm ((a wff ()) (b wff ())) ()
  (im (im a (im a b)) (im a b))
()
(a2i (a (im a b) b)
  (com12 ((im a b) a b)
    (id ((im a b))))))

(local theorem contra ((a wff ())) ()
  (im (im (not a) a) a)
()
(ax_mp ((im (im (not a) a) (im (im (not a) a) a)) (im (im (not a) a) a))
  (imidm ((im (not a) a) a))
  (a3d ((im (not a) a) a (im (not a) a))
    (a2i ((not a) a (not (im (not a) a)))
      (absurd (a (not (im (not a) a))))))))

(local theorem dne ((a wff ())) ()
  (im (not (not a)) a)
()
(syl ((not (not a)) (im (not a) a) a)
  (contra (a))
  (absurd ((not a) a))))

(local theorem inot ((a wff ())) ()
  (im (im a (not a)) (not a))
()
(syl ((im a (not a)) (im (not (not a)) (not a)) (not a))
  (contra ((not a)))
  (ax_mp ((im (not (not a)) a) (im (im a (not a)) (im (not (not a)) (not a))))
    (imim1 ((not (not a)) a (not a)))
    (dne (a)))))

(local theorem con2 ((a wff ()) (b wff ())) ()
  (im (im a (not b)) (im b (not a)))
()
(a3d ((im a (not b)) (not a) b)
  (syl5 ((im a (not b)) (not (not a)) a (not b))
    (dne (a))
    (id ((im a (not b)))))))

(local theorem notnot1 ((a wff ())) ()
  (im a (not (not a)))
()
(ax_mp ((im (not a) (not a)) (im a (not (not a))))
  (con2 ((not a) a))
  (id ((not a)))))

(local theorem con3 ((a wff ()) (b wff ())) ()
  (im (im a b) (im (not b) (not a)))
()
(syl ((im a b) (im a (not (not b))) (im (not b) (not a)))
  (con2 (a (not b)))
  (imim2i (a b (not (not b)))
    (notnot1 (b)))))

(local theorem con1 ((a wff ()) (b wff ())) ()
  (im (im (not a) b) (im (not b) a))
()
(a3d ((im (not a) b) a (not b))
  (imim2i ((not a) b (not (not b)))
    (notnot1 (b)))))

(local theorem cases ((a wff ()) (b wff ()))
  ((h1 (im a b))
   (h2 (im (not a) b)))
  b
()
(ax_mp ((im (not b) b) b)
  (contra (b))
  (syl ((not b) a b)
    h1
    (ax_mp ((im (not a) b) (im (not b) a))
      (con1 (a b))
      h2))))

(local theorem casesd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im (not b) c))))
  (im a c)
()
(cases (b (im a c))
  (com12 (a b c)
    h1)
  (com12 (a (not b) c)
    h2)))

(local theorem con1d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im (not b) c))))
  (im a (im (not c) b))
()
(syl (a (im (not b) c) (im (not c) b))
  (con1 (b c))
  h))

(local theorem con2d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b (not c)))))
  (im a (im c (not b)))
()
(syl (a (im b (not c)) (im c (not b)))
  (con2 (b c))
  h))

(local theorem con3d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im a (im (not c) (not b)))
()
(syl (a (im b c) (im (not c) (not b)))
  (con3 (b c))
  h))

(local theorem con4d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im (not b) (not c)))))
  (im a (im c b))
()
(syl (a (im (not b) (not c)) (im c b))
  (ax_3 (b c))
  h))

(local theorem mt ((a wff ()) (b wff ()))
  ((h1 (im b a))
   (h2 (not a)))
  (not b)
()
(ax_mp ((not a) (not b))
  (ax_mp ((im b a) (im (not a) (not b)))
    (con3 (b a))
    h1)
  h2))

(local theorem mt2 ((a wff ()) (b wff ()))
  ((h1 (im b (not a)))
   (h2 a))
  (not b)
()
(ax_mp (a (not b))
  (ax_mp ((im b (not a)) (im a (not b)))
    (con2 (b a))
    h1)
  h2))

(local theorem mtd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (not b)))
   (h2 (im a (im c b))))
  (im a (not c))
()
(mpd (a (not b) (not c))
  h1
  (con3d (a c b)
    h2)))

(local theorem mt2d ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a c))
   (h2 (im a (im b (not c)))))
  (im a (not b))
()
(sylc (a (im b (not c)) c (not b))
  (con2 (b c))
  h2
  h1))

(local theorem eimd ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a b))
   (h2 (im a (im c d))))
  (im a (im (im b c) d))
()
(syld (a (im b c) c d)
  (rsyl (a b (im (im b c) c))
    h1
    (com12 ((im b c) b c)
      (id ((im b c)))))
  h2))

(def an ((a wff ()) (b wff ())) (wff ())
()
(not (im a (not b))))

(local theorem anl ((a wff ()) (b wff ())) ()
  (im (an a b) a)
()
(:conv (im (an a b) a)
  (im
    (:unfold an (a b) ()
      (not (im a (not b))))
    a)
  (ax_mp ((im (not a) (im a (not b))) (im (not (im a (not b))) a))
    (con1 (a (im a (not b))))
    (absurd (a (not b))))))

(local theorem anr ((a wff ()) (b wff ())) ()
  (im (an a b) b)
()
(:conv (im (an a b) b)
  (im
    (:unfold an (a b) ()
      (not (im a (not b))))
    b)
  (ax_mp ((im (not b) (im a (not b))) (im (not (im a (not b))) b))
    (con1 (b (im a (not b))))
    (ax_1 ((not b) a)))))

(local theorem ian ((a wff ()) (b wff ())) ()
  (im a (im b (an a b)))
()
(:conv (im a (im b (an a b)))
  (im
    a
    (im
      b
      (:unfold an (a b) ()
        (not (im a (not b))))))
  (con2d (a (im a (not b)) b)
    (com12 ((im a (not b)) a (not b))
      (id ((im a (not b))))))))

(local theorem iand ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im a c)))
  (im a (an b c))
()
(sylc (a b c (an b c))
  (ian (b c))
  h1
  h2))

(local theorem anld ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (an b c))))
  (im a b)
()
(syl (a (an b c) b)
  (anl (b c))
  h))

(local theorem anrd ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (an b c))))
  (im a c)
()
(syl (a (an b c) c)
  (anr (b c))
  h))

(local theorem iani ((a wff ()) (b wff ()))
  ((h1 a)
   (h2 b))
  (an a b)
()
(ax_mp (b (an a b))
  (ax_mp (a (im b (an a b)))
    (ian (a b))
    h1)
  h2))

(local theorem anwl ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a c)))
  (im (an a b) c)
()
(syl ((an a b) a c)
  h
  (anl (a b))))

(local theorem anwr ((a wff ()) (b wff ()) (c wff ()))
  ((h (im b c)))
  (im (an a b) c)
()
(syl ((an a b) b c)
  h
  (anr (a b))))

(local theorem anll ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an (an a b) c) a)
()
(anwl ((an a b) c a)
  (anl (a b))))

(local theorem anlr ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an (an a b) c) b)
()
(anwl ((an a b) c b)
  (anr (a b))))

(local theorem anrl ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an a (an b c)) b)
()
(anwr (a (an b c) b)
  (anl (b c))))

(local theorem anrr ((a wff ()) (b wff ()) (c wff ())) ()
  (im (an a (an b c)) c)
()
(anwr (a (an b c) c)
  (anr (b c))))

(local theorem anwll ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a d)))
  (im (an (an a b) c) d)
()
(anwl ((an a b) c d)
  (anwl (a b d)
    h)))

(local theorem anw3l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h (im a e)))
  (im (an (an (an a b) c) d) e)
()
(anwll ((an a b) c d e)
  (anwl (a b e)
    h)))

(local theorem anw4l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()) (f wff ()))
  ((h (im a f)))
  (im (an (an (an (an a b) c) d) e) f)
()
(anw3l ((an a b) c d e f)
  (anwl (a b f)
    h)))

(local theorem an3l ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (an (an (an a b) c) d) a)
()
(anwll ((an a b) c d a)
  (anl (a b))))

(local theorem anllr ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (an (an (an a b) c) d) b)
()
(anwll ((an a b) c d b)
  (anr (a b))))

(local theorem an4l ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ())) ()
  (im (an (an (an (an a b) c) d) e) a)
()
(anwl ((an (an (an a b) c) d) e a)
  (an3l (a b c d))))

(local theorem an3lr ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ())) ()
  (im (an (an (an (an a b) c) d) e) b)
()
(anwl ((an (an (an a b) c) d) e b)
  (anllr (a b c d))))

(local theorem imp ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im (an a b) c)
()
(sylc ((an a b) a b c)
  h
  (anl (a b))
  (anr (a b))))

(local theorem exp ((a wff ()) (b wff ()) (c wff ()))
  ((h (im (an a b) c)))
  (im a (im b c))
()
(syl6 (a b (an a b) c)
  h
  (ian (a b))))

(local theorem impcom ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (im b c))))
  (im (an b a) c)
()
(imp (b a c)
  (com12 (a b c)
    h)))

(local theorem expcom ((a wff ()) (b wff ()) (c wff ()))
  ((h (im (an a b) c)))
  (im b (im a c))
()
(com12 (a b c)
  (exp (a b c)
    h)))

(local theorem syla ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im (im b c) d))
   (h2 (im (an a b) c)))
  (im a d)
()
(syl (a (im b c) d)
  h1
  (exp (a b c)
    h2)))

(local theorem sylan ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an b c) d))
   (h1 (im a b))
   (h2 (im a c)))
  (im a d)
()
(syl (a (an b c) d)
  h
  (iand (a b c)
    h1
    h2)))

(local theorem animd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im d e))))
  (im a (im (an b d) (an c e)))
()
(exp (a (an b d) (an c e))
  (iand ((an a (an b d)) c e)
    (imp (a (an b d) c)
      (syl5 (a (an b d) b c)
        (anl (b d))
        h1))
    (imp (a (an b d) e)
      (syl5 (a (an b d) d e)
        (anr (b d))
        h2)))))

(local theorem anim1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b c))))
  (im a (im (an b d) (an c d)))
()
(animd (a b c d d)
  h
  (idd (a d))))

(local theorem anim2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im c d))))
  (im a (im (an b c) (an b d)))
()
(animd (a b b c d)
  (idd (a b))
  h))

(local theorem anim1 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a b) (im (an a c) (an b c)))
()
(anim1d ((im a b) a b c)
  (id ((im a b)))))

(local theorem anim2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im b c) (im (an a b) (an a c)))
()
(anim2d ((im b c) a b c)
  (id ((im b c)))))

(local theorem anim ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (im a b) (im (im c d) (im (an a c) (an b d))))
()
(exp ((im a b) (im c d) (im (an a c) (an b d)))
  (syld ((an (im a b) (im c d)) (an a c) (an b c) (an b d))
    (anim1d ((an (im a b) (im c d)) a b c)
      (anl ((im a b) (im c d))))
    (anim2d ((an (im a b) (im c d)) b c d)
      (anr ((im a b) (im c d)))))))

(local theorem anim2a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a (im b c)) (im (an a b) (an a c)))
()
(:let H1 (anrl ((im a (im b c)) a b))
(exp ((im a (im b c)) (an a b) (an a c))
  (iand ((an (im a (im b c)) (an a b)) a c)
    H1
    (mpd ((an (im a (im b c)) (an a b)) b c)
      (anrr ((im a (im b c)) a b))
      (mpd ((an (im a (im b c)) (an a b)) a (im b c))
        H1
        (anl ((im a (im b c)) (an a b)))))))))

(local theorem ancom ((a wff ()) (b wff ())) ()
  (im (an a b) (an b a))
()
(iand ((an a b) b a)
  (anr (a b))
  (anl (a b))))

(local theorem an32s ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im (an (an a b) c) d)))
  (im (an (an a c) b) d)
()
(sylan ((an (an a c) b) (an a b) c d)
  h
  (iand ((an (an a c) b) a b)
    (anll (a c b))
    (anr ((an a c) b)))
  (anlr (a c b))))

(local theorem casesda ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im (an a b) c))
   (h2 (im (an a (not b)) c)))
  (im a c)
()
(casesd (a b c)
  (exp (a b c)
    h1)
  (exp (a (not b) c)
    h2)))

(local theorem inotda ((a wff ()) (b wff ()))
  ((h (im (an a b) (not b))))
  (im a (not b))
()
(syla (a b (not b) (not b))
  (inot (b))
  h))

(local theorem mpand ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im (an a b) c)))
  (im a c)
()
(mpd (a b c)
  h1
  (exp (a b c)
    h2)))

(local theorem mtand ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (not b)))
   (h2 (im (an a c) b)))
  (im a (not c))
()
(mtd (a b c)
  h1
  (exp (a c b)
    h2)))

(local theorem mtani ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (not b))
   (h2 (im (an a c) b)))
  (im a (not c))
()
(mtand (a b c)
  (a1i (a (not b))
    h1)
  h2))

(def iff ((a wff ()) (b wff ())) (wff ())
()
(an (im a b) (im b a)))

(local theorem bi1 ((a wff ()) (b wff ())) ()
  (im (iff a b) (im a b))
()
(:conv (im (iff a b) (im a b))
  (im
    (:unfold iff (a b) ()
      (an (im a b) (im b a)))
    (im a b))
  (anl ((im a b) (im b a)))))

(local theorem bi1i ((a wff ()) (b wff ()))
  ((h (iff a b)))
  (im a b)
()
(ax_mp ((iff a b) (im a b))
  (bi1 (a b))
  h))

(local theorem bi1d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im a (im b c))
()
(syl (a (iff b c) (im b c))
  (bi1 (b c))
  h))

(local theorem bi1a ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im (an a b) c)
()
(imp (a b c)
  (bi1d (a b c)
    h)))

(local theorem bi2 ((a wff ()) (b wff ())) ()
  (im (iff a b) (im b a))
()
(:conv (im (iff a b) (im b a))
  (im
    (:unfold iff (a b) ()
      (an (im a b) (im b a)))
    (im b a))
  (anr ((im a b) (im b a)))))

(local theorem bi2i ((a wff ()) (b wff ()))
  ((h (iff a b)))
  (im b a)
()
(ax_mp ((iff a b) (im b a))
  (bi2 (a b))
  h))

(local theorem bi2d ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im a (im c b))
()
(syl (a (iff b c) (im c b))
  (bi2 (b c))
  h))

(local theorem bi2a ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im (an a c) b)
()
(imp (a c b)
  (bi2d (a b c)
    h)))

(local theorem ibii ((a wff ()) (b wff ()))
  ((h1 (im a b))
   (h2 (im b a)))
  (iff a b)
()
(:conv (iff a b)
  (:unfold iff (a b) ()
    (an (im a b) (im b a)))
  (iani ((im a b) (im b a))
    h1
    h2)))

(local theorem ibid ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im c b))))
  (im a (iff b c))
()
(:conv (im a (iff b c))
  (im
    a
    (:unfold iff (b c) ()
      (an (im b c) (im c b))))
  (iand (a (im b c) (im c b))
    h1
    h2)))

(local theorem ibida ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im (an a b) c))
   (h2 (im (an a c) b)))
  (im a (iff b c))
()
(ibid (a b c)
  (exp (a b c)
    h1)
  (exp (a c b)
    h2)))

(local theorem biid ((a wff ())) ()
  (iff a a)
()
(:let H1 (id (a))
(ibii (a a)
  H1
  H1)))

(local theorem biidd ((a wff ()) (b wff ())) ()
  (im a (iff b b))
()
(a1i (a (iff b b))
  (biid (b))))

(local theorem mpbi ((a wff ()) (b wff ()))
  ((h1 (iff a b))
   (h2 a))
  b
()
(ax_mp (a b)
  (bi1i (a b)
    h1)
  h2))

(local theorem mpbir ((a wff ()) (b wff ()))
  ((h1 (iff b a))
   (h2 a))
  b
()
(ax_mp (a b)
  (bi2i (b a)
    h1)
  h2))

(local theorem mpbid ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a b)))
  (im a c)
()
(mpd (a b c)
  h2
  (bi1d (a b c)
    h1)))

(local theorem mpbird ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (iff c b)))
   (h2 (im a b)))
  (im a c)
()
(mpd (a b c)
  h2
  (bi2d (a c b)
    h1)))

(local theorem mpbii ((a wff ()) (b wff ()) (c wff ()))
  ((h1 b)
   (h2 (im a (iff b c))))
  (im a c)
()
(mpbid (a b c)
  h2
  (a1i (a b)
    h1)))

(local theorem mpbiri ((a wff ()) (b wff ()) (c wff ()))
  ((h1 b)
   (h2 (im a (iff c b))))
  (im a c)
()
(mpbird (a b c)
  h2
  (a1i (a b)
    h1)))

(local theorem mtbi ((a wff ()) (b wff ()))
  ((h1 (iff a b))
   (h2 (not a)))
  (not b)
()
(mt (a b)
  (ax_mp ((iff a b) (im b a))
    (bi2 (a b))
    h1)
  h2))

(local theorem mtbir ((a wff ()) (b wff ()))
  ((h1 (iff b a))
   (h2 (not a)))
  (not b)
()
(mt (a b)
  (ax_mp ((iff b a) (im b a))
    (bi1 (b a))
    h1)
  h2))

(local theorem mtbid ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (not b))))
  (im a (not c))
()
(mtd (a b c)
  h2
  (bi2d (a b c)
    h1)))

(local theorem mtbird ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (iff c b)))
   (h2 (im a (not b))))
  (im a (not c))
()
(mtd (a b c)
  h2
  (bi1d (a c b)
    h1)))

(local theorem con1b ((a wff ()) (b wff ())) ()
  (im (iff (not a) b) (iff (not b) a))
()
(ibid ((iff (not a) b) (not b) a)
  (con1d ((iff (not a) b) a b)
    (bi1 ((not a) b)))
  (con2d ((iff (not a) b) b a)
    (bi2 ((not a) b)))))

(local theorem con2b ((a wff ()) (b wff ())) ()
  (im (iff a (not b)) (iff b (not a)))
()
(ibid ((iff a (not b)) b (not a))
  (con2d ((iff a (not b)) a b)
    (bi1 (a (not b))))
  (con1d ((iff a (not b)) b a)
    (bi2 (a (not b))))))

(local theorem con3b ((a wff ()) (b wff ())) ()
  (im (iff a b) (iff (not a) (not b)))
()
(ibid ((iff a b) (not a) (not b))
  (con3d ((iff a b) b a)
    (bi2 (a b)))
  (con3d ((iff a b) a b)
    (bi1 (a b)))))

(local theorem con4b ((a wff ()) (b wff ())) ()
  (im (iff (not a) (not b)) (iff a b))
()
(ibid ((iff (not a) (not b)) a b)
  (con4d ((iff (not a) (not b)) b a)
    (bi2 ((not a) (not b))))
  (con4d ((iff (not a) (not b)) a b)
    (bi1 ((not a) (not b))))))

(local theorem con1bb ((a wff ()) (b wff ())) ()
  (iff (iff (not a) b) (iff (not b) a))
()
(ibii ((iff (not a) b) (iff (not b) a))
  (con1b (a b))
  (con1b (b a))))

(local theorem con2bb ((a wff ()) (b wff ())) ()
  (iff (iff a (not b)) (iff b (not a)))
()
(ibii ((iff a (not b)) (iff b (not a)))
  (con2b (a b))
  (con2b (b a))))

(local theorem con3bb ((a wff ()) (b wff ())) ()
  (iff (iff a b) (iff (not a) (not b)))
()
(ibii ((iff a b) (iff (not a) (not b)))
  (con3b (a b))
  (con4b (a b))))

(local theorem notnot ((a wff ())) ()
  (iff a (not (not a)))
()
(ibii (a (not (not a)))
  (notnot1 (a))
  (dne (a))))

(local theorem bithd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a b))
   (h2 (im a c)))
  (im a (iff b c))
()
(ibid (a b c)
  (a1d (a c b)
    h2)
  (a1d (a b c)
    h1)))

(local theorem binthd ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a (not b)))
   (h2 (im a (not c))))
  (im a (iff b c))
()
(syl (a (iff (not b) (not c)) (iff b c))
  (con4b (b c))
  (bithd (a (not b) (not c))
    h1
    h2)))

(local theorem bith ((a wff ()) (b wff ())) ()
  (im a (im b (iff a b)))
()
(exp (a b (iff a b))
  (bithd ((an a b) a b)
    (anl (a b))
    (anr (a b)))))

(local theorem binth ((a wff ()) (b wff ())) ()
  (im (not a) (im (not b) (iff a b)))
()
(exp ((not a) (not b) (iff a b))
  (binthd ((an (not a) (not b)) a b)
    (anl ((not a) (not b)))
    (anr ((not a) (not b))))))

(local theorem bicom ((a wff ()) (b wff ())) ()
  (im (iff a b) (iff b a))
()
(ibid ((iff a b) b a)
  (bi2 (a b))
  (bi1 (a b))))

(local theorem bicomd ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im a (iff c b))
()
(syl (a (iff b c) (iff c b))
  (bicom (b c))
  h))

(local theorem bitrd ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff c d))))
  (im a (iff b d))
()
(ibid (a b d)
  (syld (a b c d)
    (bi1d (a b c)
      h1)
    (bi1d (a c d)
      h2))
  (syld (a d c b)
    (bi2d (a c d)
      h2)
    (bi2d (a b c)
      h1))))

(local theorem bitr3d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff c b)))
   (h2 (im a (iff c d))))
  (im a (iff b d))
()
(bitrd (a b c d)
  (bicomd (a c b)
    h1)
  h2))

(local theorem bitr4d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff d c))))
  (im a (iff b d))
()
(bitrd (a b c d)
  h1
  (bicomd (a d c)
    h2)))

(local theorem bitr ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff a b) (im (iff b c) (iff a c)))
()
(exp ((iff a b) (iff b c) (iff a c))
  (bitrd ((an (iff a b) (iff b c)) a b c)
    (anl ((iff a b) (iff b c)))
    (anr ((iff a b) (iff b c))))))

(local theorem bitr3 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff b a) (im (iff b c) (iff a c)))
()
(exp ((iff b a) (iff b c) (iff a c))
  (bitr3d ((an (iff b a) (iff b c)) a b c)
    (anl ((iff b a) (iff b c)))
    (anr ((iff b a) (iff b c))))))

(local theorem bitr4 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff a b) (im (iff c b) (iff a c)))
()
(exp ((iff a b) (iff c b) (iff a c))
  (bitr4d ((an (iff a b) (iff c b)) a b c)
    (anl ((iff a b) (iff c b)))
    (anr ((iff a b) (iff c b))))))

(local theorem sylib ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (iff b c))
   (h2 (im a b)))
  (im a c)
()
(syl (a b c)
  (bi1i (b c)
    h1)
  h2))

(local theorem sylibr ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (iff c b))
   (h2 (im a b)))
  (im a c)
()
(syl (a b c)
  (bi2i (c b)
    h1)
  h2))

(local theorem sylbi ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (iff a b))
   (h2 (im b c)))
  (im a c)
()
(syl (a b c)
  h2
  (bi1i (a b)
    h1)))

(local theorem sylbir ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (iff b a))
   (h2 (im b c)))
  (im a c)
()
(syl (a b c)
  h2
  (bi2i (b a)
    h1)))

(local theorem syl5bb ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff b c))
   (h2 (im a (iff c d))))
  (im a (iff b d))
()
(bitrd (a b c d)
  (a1i (a (iff b c))
    h1)
  h2))

(local theorem syl5bbr ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c b))
   (h2 (im a (iff c d))))
  (im a (iff b d))
()
(syl5bb (a b c d)
  (ax_mp ((iff c b) (iff b c))
    (bicom (c b))
    h1)
  h2))

(local theorem syl6bb ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c d))
   (h2 (im a (iff b c))))
  (im a (iff b d))
()
(bitrd (a b c d)
  h2
  (a1i (a (iff c d))
    h1)))

(local theorem syl6bbr ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff d c))
   (h2 (im a (iff b c))))
  (im a (iff b d))
()
(syl6bb (a b c d)
  (ax_mp ((iff d c) (iff c d))
    (bicom (d c))
    h1)
  h2))

(local theorem syl5bi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff b c))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(syl5 (a b c d)
  (ax_mp ((iff b c) (im b c))
    (bi1 (b c))
    h1)
  h2))

(local theorem syl5bir ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c b))
   (h2 (im a (im c d))))
  (im a (im b d))
()
(syl5bi (a b c d)
  (ax_mp ((iff c b) (iff b c))
    (bicom (c b))
    h1)
  h2))

(local theorem syl6ib ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c d))
   (h2 (im a (im b c))))
  (im a (im b d))
()
(syl6 (a b c d)
  (ax_mp ((iff c d) (im c d))
    (bi1 (c d))
    h1)
  h2))

(local theorem syl6ibr ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff d c))
   (h2 (im a (im b c))))
  (im a (im b d))
()
(syl6 (a b c d)
  (ax_mp ((iff d c) (im c d))
    (bi2 (d c))
    h1)
  h2))

(local theorem syl5ibrcom ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im c (iff b d)))
   (h2 (im a d)))
  (im a (im c b))
()
(com12 (c a b)
  (syl5 (c a d b)
    h2
    (bi2d (c b d)
      h1))))

(local theorem bitr3g ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (iff b d))
   (h2 (iff c e))
   (h (im a (iff b c))))
  (im a (iff d e))
()
(syl5bb (a d b e)
  (ax_mp ((iff b d) (iff d b))
    (bicom (b d))
    h1)
  (syl6bb (a b c e)
    h2
    h)))

(local theorem bitr4g ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (iff d b))
   (h2 (iff e c))
   (h (im a (iff b c))))
  (im a (iff d e))
()
(syl5bb (a d b e)
  h1
  (syl6bb (a b c e)
    (ax_mp ((iff e c) (iff c e))
      (bicom (e c))
      h2)
    h)))

(local theorem bitr3gi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff a c))
   (h2 (iff b d))
   (h (iff a b)))
  (iff c d)
()
(ax_mp ((iff a d) (iff c d))
  (ax_mp ((iff a c) (im (iff a d) (iff c d)))
    (bitr3 (c a d))
    h1)
  (ax_mp ((iff b d) (iff a d))
    (ax_mp ((iff a b) (im (iff b d) (iff a d)))
      (bitr (a b d))
      h)
    h2)))

(local theorem bitr4gi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff c a))
   (h2 (iff d b))
   (h (iff a b)))
  (iff c d)
()
(ax_mp ((iff a d) (iff c d))
  (ax_mp ((iff c a) (im (iff a d) (iff c d)))
    (bitr (c a d))
    h1)
  (ax_mp ((iff d b) (iff a d))
    (ax_mp ((iff a b) (im (iff d b) (iff a d)))
      (bitr4 (a b d))
      h)
    h2)))

(local theorem impbi ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im (an a b) c)
()
(imp (a b c)
  (bi1d (a b c)
    h)))

(local theorem impbir ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff c b))))
  (im (an a b) c)
()
(imp (a b c)
  (bi2d (a c b)
    h)))

(local theorem ancomb ((a wff ()) (b wff ())) ()
  (iff (an a b) (an b a))
()
(ibii ((an a b) (an b a))
  (ancom (a b))
  (ancom (b a))))

(local theorem anass ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an (an a b) c) (an a (an b c)))
()
(ibii ((an (an a b) c) (an a (an b c)))
  (iand ((an (an a b) c) a (an b c))
    (anll (a b c))
    (ax_mp ((im (an a b) b) (im (an (an a b) c) (an b c)))
      (anim1 ((an a b) b c))
      (anr (a b))))
  (iand ((an a (an b c)) (an a b) c)
    (ax_mp ((im (an b c) b) (im (an a (an b c)) (an a b)))
      (anim2 (a (an b c) b))
      (anl (b c)))
    (anrr (a b c)))))

(local theorem bian2a ((a wff ()) (b wff ())) ()
  (im (im a b) (iff (an a b) a))
()
(ibid ((im a b) (an a b) a)
  (a1i ((im a b) (im (an a b) a))
    (anl (a b)))
  (a2i (a b (an a b))
    (ian (a b)))))

(local theorem bian1a ((a wff ()) (b wff ())) ()
  (im (im b a) (iff (an a b) b))
()
(syl5bb ((im b a) (an a b) (an b a) b)
  (ancomb (a b))
  (bian2a (b a))))

(local theorem bian1 ((a wff ()) (b wff ())) ()
  (im a (iff (an a b) b))
()
(syl (a (im b a) (iff (an a b) b))
  (bian1a (a b))
  (ax_1 (a b))))

(local theorem bian2 ((a wff ()) (b wff ())) ()
  (im b (iff (an a b) a))
()
(syl (b (im a b) (iff (an a b) a))
  (bian2a (a b))
  (ax_1 (b a))))

(local theorem noteq ((a wff ()) (b wff ())) ()
  (im (iff a b) (iff (not a) (not b)))
()
(con3b (a b)))

(local theorem noteqi ((a wff ()) (b wff ()))
  ((h (iff a b)))
  (iff (not a) (not b))
()
(ax_mp ((iff a b) (iff (not a) (not b)))
  (noteq (a b))
  h))

(local theorem noteqd ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a (iff b c))))
  (im a (iff (not b) (not c)))
()
(syl (a (iff b c) (iff (not b) (not c)))
  (noteq (b c))
  h))

(local theorem imeqd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff d e))))
  (im a (iff (im b d) (im c e)))
()
(ibid (a (im b d) (im c e))
  (imimd (a c b d e)
    (bi2d (a b c)
      h1)
    (bi1d (a d e)
      h2))
  (imimd (a b c e d)
    (bi1d (a b c)
      h1)
    (bi2d (a d e)
      h2))))

(local theorem imeq1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff b c))))
  (im a (iff (im b d) (im c d)))
()
(imeqd (a b c d d)
  h
  (biidd (a d))))

(local theorem imeq2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff c d))))
  (im a (iff (im b c) (im b d)))
()
(imeqd (a b b c d)
  (biidd (a b))
  h))

(local theorem imeq1i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff a b)))
  (iff (im a c) (im b c))
()
(ax_mp ((iff a b) (iff (im a c) (im b c)))
  (imeq1d ((iff a b) a b c)
    (id ((iff a b))))
  h))

(local theorem imeq2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff b c)))
  (iff (im a b) (im a c))
()
(ax_mp ((iff b c) (iff (im a b) (im a c)))
  (imeq2d ((iff b c) a b c)
    (id ((iff b c))))
  h))

(local theorem imeqi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff a b))
   (h2 (iff c d)))
  (iff (im a c) (im b d))
()
(ax_mp ((iff (im b c) (im b d)) (iff (im a c) (im b d)))
  (ax_mp ((iff (im a c) (im b c)) (im (iff (im b c) (im b d)) (iff (im a c) (im b d))))
    (bitr ((im a c) (im b c) (im b d)))
    (imeq1i (a b c)
      h1))
  (imeq2i (b c d)
    h2)))

(local theorem aneqd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff d e))))
  (im a (iff (an b d) (an c e)))
()
(ibid (a (an b d) (an c e))
  (animd (a b c d e)
    (bi1d (a b c)
      h1)
    (bi1d (a d e)
      h2))
  (animd (a c b e d)
    (bi2d (a b c)
      h1)
    (bi2d (a d e)
      h2))))

(local theorem imeq2a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a (iff b c)) (iff (im a b) (im a c)))
()
(ibid ((im a (iff b c)) (im a b) (im a c))
  (a2d ((im a (iff b c)) a b c)
    (imim2i (a (iff b c) (im b c))
      (bi1 (b c))))
  (a2d ((im a (iff b c)) a c b)
    (imim2i (a (iff b c) (im c b))
      (bi2 (b c))))))

(local theorem aneq1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff b c))))
  (im a (iff (an b d) (an c d)))
()
(aneqd (a b c d d)
  h
  (biidd (a d))))

(local theorem aneq2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff c d))))
  (im a (iff (an b c) (an b d)))
()
(aneqd (a b b c d)
  (biidd (a b))
  h))

(local theorem aneq ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (iff a b) (im (iff c d) (iff (an a c) (an b d))))
()
(exp ((iff a b) (iff c d) (iff (an a c) (an b d)))
  (aneqd ((an (iff a b) (iff c d)) a b c d)
    (anl ((iff a b) (iff c d)))
    (anr ((iff a b) (iff c d))))))

(local theorem aneq1i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff a b)))
  (iff (an a c) (an b c))
()
(ax_mp ((iff a b) (iff (an a c) (an b c)))
  (aneq1d ((iff a b) a b c)
    (id ((iff a b))))
  h))

(local theorem aneq2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff b c)))
  (iff (an a b) (an a c))
()
(ax_mp ((iff b c) (iff (an a b) (an a c)))
  (aneq2d ((iff b c) a b c)
    (id ((iff b c))))
  h))

(local theorem aneq2a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a (iff b c)) (iff (an a b) (an a c)))
()
(ibid ((im a (iff b c)) (an a b) (an a c))
  (syl ((im a (iff b c)) (im a (im b c)) (im (an a b) (an a c)))
    (anim2a (a b c))
    (imim2i (a (iff b c) (im b c))
      (bi1 (b c))))
  (syl ((im a (iff b c)) (im a (im c b)) (im (an a c) (an a b)))
    (anim2a (a c b))
    (imim2i (a (iff b c) (im c b))
      (bi2 (b c))))))

(local theorem aneq1a ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im c (iff a b)) (iff (an a c) (an b c)))
()
(syl5bb ((im c (iff a b)) (an a c) (an c a) (an b c))
  (ancomb (a c))
  (syl6bb ((im c (iff a b)) (an c a) (an c b) (an b c))
    (ancomb (c b))
    (aneq2a (c a b)))))

(local theorem anlass ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an a (an b c)) (an b (an a c)))
()
(ax_mp ((iff (an (an a b) c) (an b (an a c))) (iff (an a (an b c)) (an b (an a c))))
  (ax_mp ((iff (an (an a b) c) (an a (an b c))) (im (iff (an (an a b) c) (an b (an a c))) (iff (an a (an b c)) (an b (an a c)))))
    (bitr3 ((an a (an b c)) (an (an a b) c) (an b (an a c))))
    (anass (a b c)))
  (ax_mp ((iff (an (an b a) c) (an b (an a c))) (iff (an (an a b) c) (an b (an a c))))
    (ax_mp ((iff (an (an a b) c) (an (an b a) c)) (im (iff (an (an b a) c) (an b (an a c))) (iff (an (an a b) c) (an b (an a c)))))
      (bitr ((an (an a b) c) (an (an b a) c) (an b (an a c))))
      (aneq1i ((an a b) (an b a) c)
        (ancomb (a b))))
    (anass (b a c)))))

(local theorem anrass ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an (an a b) c) (an (an a c) b))
()
(ax_mp ((iff (an a (an b c)) (an (an a c) b)) (iff (an (an a b) c) (an (an a c) b)))
  (ax_mp ((iff (an (an a b) c) (an a (an b c))) (im (iff (an a (an b c)) (an (an a c) b)) (iff (an (an a b) c) (an (an a c) b))))
    (bitr ((an (an a b) c) (an a (an b c)) (an (an a c) b)))
    (anass (a b c)))
  (ax_mp ((iff (an (an a c) b) (an a (an c b))) (iff (an a (an b c)) (an (an a c) b)))
    (ax_mp ((iff (an a (an b c)) (an a (an c b))) (im (iff (an (an a c) b) (an a (an c b))) (iff (an a (an b c)) (an (an a c) b))))
      (bitr4 ((an a (an b c)) (an a (an c b)) (an (an a c) b)))
      (aneq2i (a (an b c) (an c b))
        (ancomb (b c))))
    (anass (a c b)))))

(local theorem rbida ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im (an a c) b))
   (h2 (im (an a d) b))
   (h (im (an a b) (iff c d))))
  (im a (iff c d))
()
(bitr3d (a c (an c b) d)
  (syla (a c b (iff (an c b) c))
    (bian2a (c b))
    h1)
  (bitrd (a (an c b) (an d b) d)
    (syla (a b (iff c d) (iff (an c b) (an d b)))
      (aneq1a (c d b))
      h)
    (syla (a d b (iff (an d b) d))
      (bian2a (d b))
      h2))))

(local theorem rbid ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im b a))
   (h2 (im c a))
   (h (im a (iff b c))))
  (iff b c)
()
(ax_mp ((iff (an b a) c) (iff b c))
  (ax_mp ((iff (an b a) b) (im (iff (an b a) c) (iff b c)))
    (bitr3 (b (an b a) c))
    (ax_mp ((im b a) (iff (an b a) b))
      (bian2a (b a))
      h1))
  (ax_mp ((iff (an c a) c) (iff (an b a) c))
    (ax_mp ((iff (an b a) (an c a)) (im (iff (an c a) c) (iff (an b a) c)))
      (bitr ((an b a) (an c a) c))
      (ax_mp ((im a (iff b c)) (iff (an b a) (an c a)))
        (aneq1a (b c a))
        h))
    (ax_mp ((im c a) (iff (an c a) c))
      (bian2a (c a))
      h2))))

(local theorem bieqd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (iff b c)))
   (h2 (im a (iff d e))))
  (im a (iff (iff b d) (iff c e)))
()
(:conv (im a (iff (iff b d) (iff c e)))
  (im
    a
    (iff
      (:unfold iff (b d) ()
        (an (im b d) (im d b)))
      (:unfold iff (c e) ()
        (an (im c e) (im e c)))))
  (aneqd (a (im b d) (im c e) (im d b) (im e c))
    (imeqd (a b c d e)
      h1
      h2)
    (imeqd (a d e b c)
      h2
      h1))))

(local theorem bieq1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff b c))))
  (im a (iff (iff b d) (iff c d)))
()
(bieqd (a b c d d)
  h
  (biidd (a d))))

(local theorem bieq2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (iff c d))))
  (im a (iff (iff b c) (iff b d)))
()
(bieqd (a b b c d)
  (biidd (a b))
  h))

(local theorem bieq ((a wff ()) (b wff ()) (c wff ()) (d wff ())) ()
  (im (iff a b) (im (iff c d) (iff (iff a c) (iff b d))))
()
(exp ((iff a b) (iff c d) (iff (iff a c) (iff b d)))
  (bieqd ((an (iff a b) (iff c d)) a b c d)
    (anl ((iff a b) (iff c d)))
    (anr ((iff a b) (iff c d))))))

(local theorem bieq1 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff a b) (iff (iff a c) (iff b c)))
()
(bieq1d ((iff a b) a b c)
  (id ((iff a b)))))

(local theorem bieq2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (iff b c) (iff (iff a b) (iff a c)))
()
(bieq2d ((iff b c) a b c)
  (id ((iff b c)))))

(local theorem impexp ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (im (an a b) c) (im a (im b c)))
()
(ibii ((im (an a b) c) (im a (im b c)))
  (exp ((im (an a b) c) a (im b c))
    (exp ((an (im (an a b) c) a) b c)
      (mpd ((an (an (im (an a b) c) a) b) (an a b) c)
        (ax_mp ((im (an (im (an a b) c) a) a) (im (an (an (im (an a b) c) a) b) (an a b)))
          (anim1 ((an (im (an a b) c) a) a b))
          (anr ((im (an a b) c) a)))
        (anll ((im (an a b) c) a b)))))
  (exp ((im a (im b c)) (an a b) c)
    (mpd ((an (im a (im b c)) (an a b)) b c)
      (anrr ((im a (im b c)) a b))
      (mpd ((an (im a (im b c)) (an a b)) a (im b c))
        (anrl ((im a (im b c)) a b))
        (anl ((im a (im b c)) (an a b))))))))

(def or ((a wff ()) (b wff ())) (wff ())
()
(im (not a) b))

(local theorem oreqd ((_G wff ()) (a1 wff ()) (a2 wff ()) (b1 wff ()) (b2 wff ()))
  ((ha (im _G (iff a1 a2)))
   (hb (im _G (iff b1 b2))))
  (im _G (iff (or a1 b1) (or a2 b2)))
()
(:conv (im _G (iff (or a1 b1) (or a2 b2)))
  (im
    _G
    (iff
      (:unfold or (a1 b1) ()
        (im (not a1) b1))
      (:unfold or (a2 b2) ()
        (im (not a2) b2))))
  (imeqd (_G (not a1) (not a2) b1 b2)
    (noteqd (_G a1 a2)
      ha)
    hb)))

(local theorem oreq ((a1 wff ()) (a2 wff ()) (b1 wff ()) (b2 wff ())) ()
  (im (iff a1 a2) (im (iff b1 b2) (iff (or a1 b1) (or a2 b2))))
()
(exp ((iff a1 a2) (iff b1 b2) (iff (or a1 b1) (or a2 b2)))
  (oreqd ((an (iff a1 a2) (iff b1 b2)) a1 a2 b1 b2)
    (anl ((iff a1 a2) (iff b1 b2)))
    (anr ((iff a1 a2) (iff b1 b2))))))

(local theorem oreq1d ((G wff ()) (a1 wff ()) (a2 wff ()) (b wff ()))
  ((h (im G (iff a1 a2))))
  (im G (iff (or a1 b) (or a2 b)))
()
(oreqd (G a1 a2 b b)
  h
  (biidd (G b))))

(local theorem oreq1 ((a1 wff ()) (a2 wff ()) (b wff ())) ()
  (im (iff a1 a2) (iff (or a1 b) (or a2 b)))
()
(oreq1d ((iff a1 a2) a1 a2 b)
  (id ((iff a1 a2)))))

(local theorem oreq2d ((G wff ()) (a wff ()) (b1 wff ()) (b2 wff ()))
  ((h (im G (iff b1 b2))))
  (im G (iff (or a b1) (or a b2)))
()
(oreqd (G a a b1 b2)
  (biidd (G a))
  h))

(local theorem oreq2 ((a wff ()) (b1 wff ()) (b2 wff ())) ()
  (im (iff b1 b2) (iff (or a b1) (or a b2)))
()
(oreq2d ((iff b1 b2) a b1 b2)
  (id ((iff b1 b2)))))

(local theorem orl ((a wff ()) (b wff ())) ()
  (im a (or a b))
()
(:conv (im a (or a b))
  (im
    a
    (:unfold or (a b) ()
      (im (not a) b)))
  (absurdr (a b))))

(local theorem orr ((a wff ()) (b wff ())) ()
  (im b (or a b))
()
(:conv (im b (or a b))
  (im
    b
    (:unfold or (a b) ()
      (im (not a) b)))
  (ax_1 (b (not a)))))

(local theorem eori ((a wff ()) (b wff ()) (c wff ()))
  ((h1 (im a c))
   (h2 (im b c)))
  (im (or a b) c)
()
(casesd ((or a b) a c)
  (a1i ((or a b) (im a c))
    h1)
  (:conv (im (or a b) (im (not a) c))
    (im
      (:unfold or (a b) ()
        (im (not a) b))
      (im (not a) c))
    (imim2i ((not a) b c)
      h2))))

(local theorem eord ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im a (im b d)))
   (h2 (im a (im c d))))
  (im a (im (or b c) d))
()
(com12 ((or b c) a d)
  (eori (b c (im a d))
    (com12 (a b d)
      h1)
    (com12 (a c d)
      h2))))

(local theorem eorda ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (im (an a b) d))
   (h2 (im (an a c) d)))
  (im a (im (or b c) d))
()
(eord (a b c d)
  (exp (a b d)
    h1)
  (exp (a c d)
    h2)))

(local theorem orld ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a b)))
  (im a (or b c))
()
(syl (a b (or b c))
  (orl (b c))
  h))

(local theorem orrd ((a wff ()) (b wff ()) (c wff ()))
  ((h (im a c)))
  (im a (or b c))
()
(syl (a c (or b c))
  (orr (b c))
  h))

(local theorem eor ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a c) (im (im b c) (im (or a b) c)))
()
(exp ((im a c) (im b c) (im (or a b) c))
  (eord ((an (im a c) (im b c)) a b c)
    (anl ((im a c) (im b c)))
    (anr ((im a c) (im b c))))))

(local theorem orimd ((a wff ()) (b wff ()) (c wff ()) (d wff ()) (e wff ()))
  ((h1 (im a (im b c)))
   (h2 (im a (im d e))))
  (im a (im (or b d) (or c e)))
()
(eord (a b d (or c e))
  (syl6 (a b c (or c e))
    (orl (c e))
    h1)
  (syl6 (a d e (or c e))
    (orr (c e))
    h2)))

(local theorem orim1d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im b c))))
  (im a (im (or b d) (or c d)))
()
(orimd (a b c d d)
  h
  (idd (a d))))

(local theorem orim2d ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h (im a (im c d))))
  (im a (im (or b c) (or b d)))
()
(orimd (a b b c d)
  (idd (a b))
  h))

(local theorem orim1 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im a b) (im (or a c) (or b c)))
()
(orim1d ((im a b) a b c)
  (id ((im a b)))))

(local theorem orim2 ((a wff ()) (b wff ()) (c wff ())) ()
  (im (im b c) (im (or a b) (or a c)))
()
(orim2d ((im b c) a b c)
  (id ((im b c)))))

(local theorem oreq1i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff a b)))
  (iff (or a c) (or b c))
()
(ax_mp ((iff a b) (iff (or a c) (or b c)))
  (oreq1d ((iff a b) a b c)
    (id ((iff a b))))
  h))

(local theorem oreq2i ((a wff ()) (b wff ()) (c wff ()))
  ((h (iff b c)))
  (iff (or a b) (or a c))
()
(ax_mp ((iff b c) (iff (or a b) (or a c)))
  (oreq2d ((iff b c) a b c)
    (id ((iff b c))))
  h))

(local theorem oreqi ((a wff ()) (b wff ()) (c wff ()) (d wff ()))
  ((h1 (iff a b))
   (h2 (iff c d)))
  (iff (or a c) (or b d))
()
(ax_mp ((iff (or b c) (or b d)) (iff (or a c) (or b d)))
  (ax_mp ((iff (or a c) (or b c)) (im (iff (or b c) (or b d)) (iff (or a c) (or b d))))
    (bitr ((or a c) (or b c) (or b d)))
    (oreq1i (a b c)
      h1))
  (oreq2i (b c d)
    h2)))

(local theorem orcom ((a wff ()) (b wff ())) ()
  (im (or a b) (or b a))
()
(:conv (im (or a b) (or b a))
  (im
    (:unfold or (a b) ()
      (im (not a) b))
    (:unfold or (b a) ()
      (im (not b) a)))
  (con1 (a b))))

(local theorem orcomb ((a wff ()) (b wff ())) ()
  (iff (or a b) (or b a))
()
(ibii ((or a b) (or b a))
  (orcom (a b))
  (orcom (b a))))

(local theorem or12 ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (or a (or b c)) (or b (or a c)))
()
(:conv (iff (or a (or b c)) (or b (or a c)))
  (iff
    (:unfold or (a (or b c)) ()
      (im
        (not a)
        (:unfold or (b c) ()
          (im (not b) c))))
    (:unfold or (b (or a c)) ()
      (im
        (not b)
        (:unfold or (a c) ()
          (im (not a) c)))))
  (ax_mp ((iff (im (an (not a) (not b)) c) (im (not b) (im (not a) c))) (iff (im (not a) (im (not b) c)) (im (not b) (im (not a) c))))
    (ax_mp ((iff (im (an (not a) (not b)) c) (im (not a) (im (not b) c))) (im (iff (im (an (not a) (not b)) c) (im (not b) (im (not a) c))) (iff (im (not a) (im (not b) c)) (im (not b) (im (not a) c)))))
      (bitr3 ((im (not a) (im (not b) c)) (im (an (not a) (not b)) c) (im (not b) (im (not a) c))))
      (impexp ((not a) (not b) c)))
    (ax_mp ((iff (im (an (not b) (not a)) c) (im (not b) (im (not a) c))) (iff (im (an (not a) (not b)) c) (im (not b) (im (not a) c))))
      (ax_mp ((iff (im (an (not a) (not b)) c) (im (an (not b) (not a)) c)) (im (iff (im (an (not b) (not a)) c) (im (not b) (im (not a) c))) (iff (im (an (not a) (not b)) c) (im (not b) (im (not a) c)))))
        (bitr ((im (an (not a) (not b)) c) (im (an (not b) (not a)) c) (im (not b) (im (not a) c))))
        (imeq1i ((an (not a) (not b)) (an (not b) (not a)) c)
          (ancomb ((not a) (not b)))))
      (impexp ((not b) (not a) c))))))

(local theorem orass ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (or (or a b) c) (or a (or b c)))
()
(ax_mp ((iff (or c (or a b)) (or a (or b c))) (iff (or (or a b) c) (or a (or b c))))
  (ax_mp ((iff (or (or a b) c) (or c (or a b))) (im (iff (or c (or a b)) (or a (or b c))) (iff (or (or a b) c) (or a (or b c)))))
    (bitr ((or (or a b) c) (or c (or a b)) (or a (or b c))))
    (orcomb ((or a b) c)))
  (ax_mp ((iff (or a (or c b)) (or a (or b c))) (iff (or c (or a b)) (or a (or b c))))
    (ax_mp ((iff (or c (or a b)) (or a (or c b))) (im (iff (or a (or c b)) (or a (or b c))) (iff (or c (or a b)) (or a (or b c)))))
      (bitr ((or c (or a b)) (or a (or c b)) (or a (or b c))))
      (or12 (c a b)))
    (ax_mp ((iff (or c b) (or b c)) (iff (or a (or c b)) (or a (or b c))))
      (oreq2 (a (or c b) (or b c)))
      (orcomb (c b))))))

(local theorem notan2 ((a wff ()) (b wff ())) ()
  (iff (not (an a b)) (im a (not b)))
()
(:conv (iff (not (an a b)) (im a (not b)))
  (iff
    (not
      (:unfold an (a b) ()
        (not (im a (not b)))))
    (im a (not b)))
  (ax_mp ((iff (im a (not b)) (not (not (im a (not b))))) (iff (not (not (im a (not b)))) (im a (not b))))
    (bicom ((im a (not b)) (not (not (im a (not b))))))
    (notnot ((im a (not b)))))))

(local theorem notan ((a wff ()) (b wff ())) ()
  (iff (not (an a b)) (or (not a) (not b)))
()
(:conv (iff (not (an a b)) (or (not a) (not b)))
  (iff
    (not (an a b))
    (:unfold or ((not a) (not b)) ()
      (im (not (not a)) (not b))))
  (ax_mp ((iff (im a (not b)) (im (not (not a)) (not b))) (iff (not (an a b)) (im (not (not a)) (not b))))
    (ax_mp ((iff (not (an a b)) (im a (not b))) (im (iff (im a (not b)) (im (not (not a)) (not b))) (iff (not (an a b)) (im (not (not a)) (not b)))))
      (bitr ((not (an a b)) (im a (not b)) (im (not (not a)) (not b))))
      (notan2 (a b)))
    (imeq1i (a (not (not a)) (not b))
      (notnot (a))))))

(local theorem notor ((a wff ()) (b wff ())) ()
  (iff (not (or a b)) (an (not a) (not b)))
()
(ax_mp ((iff (not (an (not a) (not b))) (or a b)) (iff (not (or a b)) (an (not a) (not b))))
  (con1b ((an (not a) (not b)) (or a b)))
  (ax_mp ((iff (or a b) (or (not (not a)) (not (not b)))) (iff (not (an (not a) (not b))) (or a b)))
    (ax_mp ((iff (not (an (not a) (not b))) (or (not (not a)) (not (not b)))) (im (iff (or a b) (or (not (not a)) (not (not b)))) (iff (not (an (not a) (not b))) (or a b))))
      (bitr4 ((not (an (not a) (not b))) (or (not (not a)) (not (not b))) (or a b)))
      (notan ((not a) (not b))))
    (oreqi (a (not (not a)) b (not (not b)))
      (notnot (a))
      (notnot (b))))))

(local theorem imor ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (im (or a b) c) (an (im a c) (im b c)))
()
(ibii ((im (or a b) c) (an (im a c) (im b c)))
  (iand ((im (or a b) c) (im a c) (im b c))
    (imim1i (a (or a b) c)
      (orl (a b)))
    (imim1i (b (or a b) c)
      (orr (a b))))
  (imp ((im a c) (im b c) (im (or a b) c))
    (eor (a b c)))))

(local theorem andi ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an a (or b c)) (or (an a b) (an a c)))
()
(ibii ((an a (or b c)) (or (an a b) (an a c)))
  (imp (a (or b c) (or (an a b) (an a c)))
    (orimd (a b (an a b) c (an a c))
      (ian (a b))
      (ian (a c))))
  (ax_mp ((im (an a c) (an a (or b c))) (im (or (an a b) (an a c)) (an a (or b c))))
    (ax_mp ((im (an a b) (an a (or b c))) (im (im (an a c) (an a (or b c))) (im (or (an a b) (an a c)) (an a (or b c)))))
      (eor ((an a b) (an a c) (an a (or b c))))
      (ax_mp ((im b (or b c)) (im (an a b) (an a (or b c))))
        (anim2 (a b (or b c)))
        (orl (b c))))
    (ax_mp ((im c (or b c)) (im (an a c) (an a (or b c))))
      (anim2 (a c (or b c)))
      (orr (b c))))))

(local theorem andir ((a wff ()) (b wff ()) (c wff ())) ()
  (iff (an (or a b) c) (or (an a c) (an b c)))
()
(ax_mp ((iff (an c (or a b)) (or (an a c) (an b c))) (iff (an (or a b) c) (or (an a c) (an b c))))
  (ax_mp ((iff (an (or a b) c) (an c (or a b))) (im (iff (an c (or a b)) (or (an a c) (an b c))) (iff (an (or a b) c) (or (an a c) (an b c)))))
    (bitr ((an (or a b) c) (an c (or a b)) (or (an a c) (an b c))))
    (ancomb ((or a b) c)))
  (ax_mp ((iff (or (an c a) (an c b)) (or (an a c) (an b c))) (iff (an c (or a b)) (or (an a c) (an b c))))
    (ax_mp ((iff (an c (or a b)) (or (an c a) (an c b))) (im (iff (or (an c a) (an c b)) (or (an a c) (an b c))) (iff (an c (or a b)) (or (an a c) (an b c)))))
      (bitr ((an c (or a b)) (or (an c a) (an c b)) (or (an a c) (an b c))))
      (andi (c a b)))
    (oreqi ((an c a) (an a c) (an c b) (an b c))
      (ancomb (c a))
      (ancomb (c b))))))

(local theorem biim1 ((a wff ()) (b wff ())) ()
  (im a (iff (im a b) b))
()
(ibid (a (im a b) b)
  (com12 ((im a b) a b)
    (id ((im a b))))
  (a1i (a (im b (im a b)))
    (ax_1 (b a)))))

(local theorem biim2 ((a wff ()) (b wff ())) ()
  (im (not b) (iff (im a b) (not a)))
()
(ibid ((not b) (im a b) (not a))
  (com12 ((im a b) (not b) (not a))
    (con3 (a b)))
  (a1i ((not b) (im (not a) (im a b)))
    (absurd (a b)))))

(local theorem bior1 ((a wff ()) (b wff ())) ()
  (im (not a) (iff (or a b) b))
()
(:conv (im (not a) (iff (or a b) b))
  (im
    (not a)
    (iff
      (:unfold or (a b) ()
        (im (not a) b))
      b))
  (biim1 ((not a) b))))

(local theorem bior2 ((a wff ()) (b wff ())) ()
  (im (not b) (iff (or a b) a))
()
(syl5bb ((not b) (or a b) (or b a) a)
  (orcomb (a b))
  (bior1 (b a))))

(local theorem em ((p wff ())) ()
  (or p (not p))
()
(:conv (or p (not p))
  (:unfold or (p (not p)) ()
    (im (not p) (not p)))
  (id ((not p)))))

(def ifp ((p wff ()) (a wff ()) (b wff ())) (wff ())
()
(or (an p a) (an (not p) b)))

(local theorem ifpeqd ((_G wff ()) (p1 wff ()) (p2 wff ()) (a1 wff ()) (a2 wff ()) (b1 wff ()) (b2 wff ()))
  ((hp (im _G (iff p1 p2)))
   (ha (im _G (iff a1 a2)))
   (hb (im _G (iff b1 b2))))
  (im _G (iff (ifp p1 a1 b1) (ifp p2 a2 b2)))
()
(:conv (im _G (iff (ifp p1 a1 b1) (ifp p2 a2 b2)))
  (im
    _G
    (iff
      (:unfold ifp (p1 a1 b1) ()
        (or (an p1 a1) (an (not p1) b1)))
      (:unfold ifp (p2 a2 b2) ()
        (or (an p2 a2) (an (not p2) b2)))))
  (oreqd (_G (an p1 a1) (an p2 a2) (an (not p1) b1) (an (not p2) b2))
    (aneqd (_G p1 p2 a1 a2)
      hp
      ha)
    (aneqd (_G (not p1) (not p2) b1 b2)
      (noteqd (_G p1 p2)
        hp)
      hb))))

(local theorem ifpeq ((p1 wff ()) (p2 wff ()) (a1 wff ()) (a2 wff ()) (b1 wff ()) (b2 wff ())) ()
  (im (iff p1 p2) (im (iff a1 a2) (im (iff b1 b2) (iff (ifp p1 a1 b1) (ifp p2 a2 b2)))))
()
(exp ((iff p1 p2) (iff a1 a2) (im (iff b1 b2) (iff (ifp p1 a1 b1) (ifp p2 a2 b2))))
  (exp ((an (iff p1 p2) (iff a1 a2)) (iff b1 b2) (iff (ifp p1 a1 b1) (ifp p2 a2 b2)))
    (ifpeqd ((an (an (iff p1 p2) (iff a1 a2)) (iff b1 b2)) p1 p2 a1 a2 b1 b2)
      (anwl ((an (iff p1 p2) (iff a1 a2)) (iff b1 b2) (iff p1 p2))
        (anl ((iff p1 p2) (iff a1 a2))))
      (anwl ((an (iff p1 p2) (iff a1 a2)) (iff b1 b2) (iff a1 a2))
        (anr ((iff p1 p2) (iff a1 a2))))
      (anr ((an (iff p1 p2) (iff a1 a2)) (iff b1 b2)))))))

(local theorem ifpeq1d ((G wff ()) (p1 wff ()) (p2 wff ()) (a wff ()) (b wff ()))
  ((h (im G (iff p1 p2))))
  (im G (iff (ifp p1 a b) (ifp p2 a b)))
()
(ifpeqd (G p1 p2 a a b b)
  h
  (biidd (G a))
  (biidd (G b))))

(local theorem ifpeq1 ((p1 wff ()) (p2 wff ()) (a wff ()) (b wff ())) ()
  (im (iff p1 p2) (iff (ifp p1 a b) (ifp p2 a b)))
()
(ifpeq1d ((iff p1 p2) p1 p2 a b)
  (id ((iff p1 p2)))))

(local theorem ifpeq2d ((G wff ()) (p wff ()) (a1 wff ()) (a2 wff ()) (b wff ()))
  ((h (im G (iff a1 a2))))
  (im G (iff (ifp p a1 b) (ifp p a2 b)))
()
(ifpeqd (G p p a1 a2 b b)
  (biidd (G p))
  h
  (biidd (G b))))

(local theorem ifpeq2 ((p wff ()) (a1 wff ()) (a2 wff ()) (b wff ())) ()
  (im (iff a1 a2) (iff (ifp p a1 b) (ifp p a2 b)))
()
(ifpeq2d ((iff a1 a2) p a1 a2 b)
  (id ((iff a1 a2)))))

(local theorem ifpeq3d ((G wff ()) (p wff ()) (a wff ()) (b1 wff ()) (b2 wff ()))
  ((h (im G (iff b1 b2))))
  (im G (iff (ifp p a b1) (ifp p a b2)))
()
(ifpeqd (G p p a a b1 b2)
  (biidd (G p))
  (biidd (G a))
  h))

(local theorem ifpeq3 ((p wff ()) (a wff ()) (b1 wff ()) (b2 wff ())) ()
  (im (iff b1 b2) (iff (ifp p a b1) (ifp p a b2)))
()
(ifpeq3d ((iff b1 b2) p a b1 b2)
  (id ((iff b1 b2)))))

(theorem ifppos ((p wff ()) (a wff ()) (b wff ())) ()
  (im p (iff (ifp p a b) a))
()
(bitrd (p (ifp p a b) (an p a) a)
  (syl (p (not (an (not p) b)) (iff (ifp p a b) (an p a)))
    (:conv (im (not (an (not p) b)) (iff (ifp p a b) (an p a)))
      (im
        (not (an (not p) b))
        (iff
          (:unfold ifp (p a b) ()
            (or (an p a) (an (not p) b)))
          (an p a)))
      (bior2 ((an p a) (an (not p) b))))
    (ax_mp ((im (an (not p) b) (not p)) (im p (not (an (not p) b))))
      (con2 ((an (not p) b) p))
      (anl ((not p) b))))
  (bian1 (p a))))

(theorem ifpneg ((p wff ()) (a wff ()) (b wff ())) ()
  (im (not p) (iff (ifp p a b) b))
()
(bitrd ((not p) (ifp p a b) (an (not p) b) b)
  (syl ((not p) (not (an p a)) (iff (ifp p a b) (an (not p) b)))
    (:conv (im (not (an p a)) (iff (ifp p a b) (an (not p) b)))
      (im
        (not (an p a))
        (iff
          (:unfold ifp (p a b) ()
            (or (an p a) (an (not p) b)))
          (an (not p) b)))
      (bior1 ((an p a) (an (not p) b))))
    (ax_mp ((im (an p a) p) (im (not p) (not (an p a))))
      (con3 ((an p a) p))
      (anl (p a))))
  (bian1 ((not p) b))))

(term wtru () (wff ()))

(axiom tru () ()
  (wtru))

(def fal () (wff ())
()
(not (wtru)))

(local theorem trud ((a wff ()))
  ((h (im (wtru) a)))
  a
()
(ax_mp ((wtru) a)
  h
  (tru ())))

(local theorem notfal () ()
  (not (fal))
()
(:conv (not (fal))
  (not
    (:unfold fal () ()
      (not (wtru))))
  (ax_mp ((wtru) (not (not (wtru))))
    (notnot1 ((wtru)))
    (tru ()))))

(local theorem efal ((a wff ())) ()
  (im (fal) a)
()
(ax_mp ((not (fal)) (im (fal) a))
  (absurd ((fal) a))
  (notfal ())))

(sort nat)

(term al ((x nat) (ph wff (x))) (wff ()))

(def ex ((x nat) (ph wff (x))) (wff ())
()
(not (al x (not ph))))

(term eq ((a nat ()) (b nat ())) (wff ()))

(axiom ax_gen ((x nat) (ph wff (x)))
  (ph)
  (al x ph))

(axiom ax_4 ((x nat) (ph wff (x)) (ps wff (x))) ()
  (im (al x (im ph ps)) (im (al x ph) (al x ps))))

(axiom ax_5 ((x nat) (ph wff ())) ()
  (im ph (al x ph)))

(axiom ax_6 ((a nat ()) (x nat)) ()
  (ex x (eq x a)))

(axiom ax_7 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (im (eq a c) (eq b c))))

(axiom ax_10 ((x nat) (ph wff (x))) ()
  (im (not (al x ph)) (al x (not (al x ph)))))

(axiom ax_11 ((x nat) (y nat) (ph wff (x y))) ()
  (im (al x (al y ph)) (al y (al x ph))))

(axiom ax_12 ((x nat) (a nat ()) (ph wff (x))) ()
  (im (eq x a) (im ph (al x (im (eq x a) ph)))))

(local theorem alimi ((x nat) (a wff (x)) (b wff (x)))
  ((h (im a b)))
  (im (al x a) (al x b))
()
(ax_mp ((al x (im a b)) (im (al x a) (al x b)))
  (ax_4 (x a b))
  (ax_gen (x (im a b))
    h)))

(local theorem iald ((x nat) (a wff ()) (b wff (x)))
  ((h (im a b)))
  (im a (al x b))
()
(syl (a (al x a) (al x b))
  (alimi (x a b)
    h)
  (ax_5 (x a))))

(local theorem eex ((x nat) (a wff (x)) (b wff ()))
  ((h (im a b)))
  (im (ex x a) b)
()
(:conv (im (ex x a) b)
  (im
    (:unfold ex (x a) ()
      (not (al x (not a))))
    b)
  (ax_mp ((im (not b) (al x (not a))) (im (not (al x (not a))) b))
    (con1 (b (al x (not a))))
    (iald (x (not b) (not a))
      (ax_mp ((im a b) (im (not b) (not a)))
        (con3 (a b))
        h)))))

(local theorem eqtr3 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq b a) (im (eq b c) (eq a c)))
()
(ax_7 (b a c)))

(local theorem eqid ((a nat ())) ()
  (eq a a)
((x nat))
(ax_mp ((ex x (eq x a)) (eq a a))
  (eex (x (eq x a) (eq a a))
    (ax_mp ((im (eq x a) (im (eq x a) (eq a a))) (im (eq x a) (eq a a)))
      (imidm ((eq x a) (eq a a)))
      (ax_7 (x a a))))
  (ax_6 (a x))))

(local theorem eqcom ((a nat ()) (b nat ())) ()
  (im (eq a b) (eq b a))
()
(mpi ((eq a b) (eq a a) (eq b a))
  (eqid (a))
  (ax_7 (a b a))))

(local theorem eqtr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (im (eq b c) (eq a c)))
()
(syl ((eq a b) (eq b a) (im (eq b c) (eq a c)))
  (ax_7 (b a c))
  (eqcom (a b))))

(local theorem eqtr4 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (im (eq c b) (eq a c)))
()
(syl5 ((eq a b) (eq c b) (eq b c) (eq a c))
  (eqcom (c b))
  (eqtr (a b c))))

(local theorem eqcomb ((a nat ()) (b nat ())) ()
  (iff (eq a b) (eq b a))
()
(ibii ((eq a b) (eq b a))
  (eqcom (a b))
  (eqcom (b a))))

(local theorem eqeq1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq a b) (iff (eq a c) (eq b c)))
()
(ibid ((eq a b) (eq a c) (eq b c))
  (eqtr3 (b a c))
  (eqtr (a b c))))

(local theorem eqeq2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq b c) (iff (eq a b) (eq a c)))
()
(ibid ((eq b c) (eq a b) (eq a c))
  (com12 ((eq a b) (eq b c) (eq a c))
    (eqtr (a b c)))
  (com12 ((eq a c) (eq b c) (eq a b))
    (eqtr4 (a c b)))))

(local theorem eqeq1d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h (im G (eq a b))))
  (im G (iff (eq a c) (eq b c)))
()
(syl (G (eq a b) (iff (eq a c) (eq b c)))
  (eqeq1 (a b c))
  h))

(local theorem eqeq2d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h (im G (eq b c))))
  (im G (iff (eq a b) (eq a c)))
()
(syl (G (eq b c) (iff (eq a b) (eq a c)))
  (eqeq2 (a b c))
  h))

(local theorem eqeqd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (iff (eq a c) (eq b d)))
()
(bitrd (G (eq a c) (eq b c) (eq b d))
  (eqeq1d (G a b c)
    h1)
  (eqeq2d (G b c d)
    h2)))

(local theorem eqeq ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (eq a b) (im (eq c d) (iff (eq a c) (eq b d))))
()
(exp ((eq a b) (eq c d) (iff (eq a c) (eq b d)))
  (eqeqd ((an (eq a b) (eq c d)) a b c d)
    (anl ((eq a b) (eq c d)))
    (anr ((eq a b) (eq c d))))))

(local theorem eqtr3d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (eq b a)))
   (h2 (im G (eq b c))))
  (im G (eq a c))
()
(sylc (G (eq b a) (eq b c) (eq a c))
  (eqtr3 (a b c))
  h1
  h2))

(local theorem eqidd ((G wff ()) (a nat ())) ()
  (im G (eq a a))
()
(a1i (G (eq a a))
  (eqid (a))))

(local theorem eqcomd ((G wff ()) (a nat ()) (b nat ()))
  ((h (im G (eq a b))))
  (im G (eq b a))
()
(syl (G (eq a b) (eq b a))
  (eqcom (a b))
  h))

(local theorem eqtrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq b c))))
  (im G (eq a c))
()
(sylc (G (eq a b) (eq b c) (eq a c))
  (eqtr (a b c))
  h1
  h2))

(local theorem eqtr4d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c b))))
  (im G (eq a c))
()
(sylc (G (eq a b) (eq c b) (eq a c))
  (eqtr4 (a b c))
  h1
  h2))

(local theorem syl5eq ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq a b))
   (h2 (im G (eq b c))))
  (im G (eq a c))
()
(eqtrd (G a b c)
  (a1i (G (eq a b))
    h1)
  h2))

(local theorem syl5eqr ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq b a))
   (h2 (im G (eq b c))))
  (im G (eq a c))
()
(eqtr3d (G a b c)
  (a1i (G (eq b a))
    h1)
  h2))

(local theorem syl6eq ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq b c))
   (h2 (im G (eq a b))))
  (im G (eq a c))
()
(eqtrd (G a b c)
  h2
  (a1i (G (eq b c))
    h1)))

(local theorem syl6eqr ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (eq c b))
   (h2 (im G (eq a b))))
  (im G (eq a c))
()
(eqtr4d (G a b c)
  h2
  (a1i (G (eq c b))
    h1)))

(local theorem eqtr3g ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (eq a c))
   (h2 (eq b d))
   (h (im G (eq a b))))
  (im G (eq c d))
()
(syl5eqr (G c a d)
  h1
  (syl6eq (G a b d)
    h2
    h)))

(local theorem eqtr4g ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (eq c a))
   (h2 (eq d b))
   (h (im G (eq a b))))
  (im G (eq c d))
()
(syl5eq (G c a d)
  h1
  (syl6eqr (G a b d)
    h2
    h)))

(local theorem aleq ((x nat) (a wff (x)) (b wff (x))) ()
  (im (al x (iff a b)) (iff (al x a) (al x b)))
()
(ibid ((al x (iff a b)) (al x a) (al x b))
  (syl ((al x (iff a b)) (al x (im a b)) (im (al x a) (al x b)))
    (ax_4 (x a b))
    (alimi (x (iff a b) (im a b))
      (bi1 (a b))))
  (syl ((al x (iff a b)) (al x (im b a)) (im (al x b) (al x a)))
    (ax_4 (x b a))
    (alimi (x (iff a b) (im b a))
      (bi2 (a b))))))

(local theorem aleqi ((x nat) (a wff (x)) (b wff (x)))
  ((h (iff a b)))
  (iff (al x a) (al x b))
()
(ax_mp ((al x (iff a b)) (iff (al x a) (al x b)))
  (aleq (x a b))
  (ax_gen (x (iff a b))
    h)))

(local theorem alimd ((x nat) (G wff ()) (a wff (x)) (b wff (x)))
  ((h (im G (im a b))))
  (im G (im (al x a) (al x b)))
()
(syl (G (al x (im a b)) (im (al x a) (al x b)))
  (ax_4 (x a b))
  (syl (G (al x G) (al x (im a b)))
    (alimi (x G (im a b))
      h)
    (ax_5 (x G)))))

(local theorem al2imi ((x nat) (a wff (x)) (b wff (x)) (c wff (x)))
  ((h (im a (im b c))))
  (im (al x a) (im (al x b) (al x c)))
()
(syl ((al x a) (al x (im b c)) (im (al x b) (al x c)))
  (ax_4 (x b c))
  (alimi (x a (im b c))
    h)))

(local theorem aleqd ((G wff ()) (x nat) (a wff (x)) (b wff (x)))
  ((h (im G (iff a b))))
  (im G (iff (al x a) (al x b)))
()
(syl (G (al x (iff a b)) (iff (al x a) (al x b)))
  (aleq (x a b))
  (iald (x G (iff a b))
    h)))

(local theorem alcomb ((x nat) (y nat) (a wff (x y))) ()
  (iff (al x (al y a)) (al y (al x a)))
()
(ibii ((al x (al y a)) (al y (al x a)))
  (ax_11 (x y a))
  (ax_11 (y x a))))

(local theorem alan ((x nat) (a wff (x)) (b wff (x))) ()
  (iff (al x (an a b)) (an (al x a) (al x b)))
()
(ibii ((al x (an a b)) (an (al x a) (al x b)))
  (iand ((al x (an a b)) (al x a) (al x b))
    (alimi (x (an a b) a)
      (anl (a b)))
    (alimi (x (an a b) b)
      (anr (a b))))
  (imp ((al x a) (al x b) (al x (an a b)))
    (syl ((al x a) (al x (im b (an a b))) (im (al x b) (al x (an a b))))
      (ax_4 (x b (an a b)))
      (alimi (x a (im b (an a b)))
        (ian (a b)))))))

(local theorem exim ((x nat) (a wff (x)) (b wff (x))) ()
  (im (al x (im a b)) (im (ex x a) (ex x b)))
()
(syl ((al x (im a b)) (im (al x (not b)) (al x (not a))) (im (ex x a) (ex x b)))
  (:conv (im (im (al x (not b)) (al x (not a))) (im (ex x a) (ex x b)))
    (im
      (im (al x (not b)) (al x (not a)))
      (im
        (:unfold ex (x a) ()
          (not (al x (not a))))
        (:unfold ex (x b) ()
          (not (al x (not b))))))
    (con3 ((al x (not b)) (al x (not a)))))
  (syl ((al x (im a b)) (al x (im (not b) (not a))) (im (al x (not b)) (al x (not a))))
    (ax_4 (x (not b) (not a)))
    (alimi (x (im a b) (im (not b) (not a)))
      (con3 (a b))))))

(local theorem eximi ((x nat) (a wff (x)) (b wff (x)))
  ((h (im a b)))
  (im (ex x a) (ex x b))
()
(ax_mp ((al x (im a b)) (im (ex x a) (ex x b)))
  (exim (x a b))
  (ax_gen (x (im a b))
    h)))

(local theorem exeq ((x nat) (a wff (x)) (b wff (x))) ()
  (im (al x (iff a b)) (iff (ex x a) (ex x b)))
()
(:conv (im (al x (iff a b)) (iff (ex x a) (ex x b)))
  (im
    (al x (iff a b))
    (iff
      (:unfold ex (x a) ()
        (not (al x (not a))))
      (:unfold ex (x b) ()
        (not (al x (not b))))))
  (noteqd ((al x (iff a b)) (al x (not a)) (al x (not b)))
    (syl ((al x (iff a b)) (al x (iff (not a) (not b))) (iff (al x (not a)) (al x (not b))))
      (aleq (x (not a) (not b)))
      (alimi (x (iff a b) (iff (not a) (not b)))
        (noteq (a b)))))))

(local theorem exeqd ((G wff ()) (x nat) (a wff (x)) (b wff (x)))
  ((h (im G (iff a b))))
  (im G (iff (ex x a) (ex x b)))
()
(syl (G (al x (iff a b)) (iff (ex x a) (ex x b)))
  (exeq (x a b))
  (iald (x G (iff a b))
    h)))

(local theorem exeqi ((x nat) (a wff (x)) (b wff (x)))
  ((h (iff a b)))
  (iff (ex x a) (ex x b))
()
(ax_mp ((al x (iff a b)) (iff (ex x a) (ex x b)))
  (exeq (x a b))
  (ax_gen (x (iff a b))
    h)))

(local theorem iex ((x nat) (a wff (x))) ()
  (im a (ex x a))
((y nat))
(ax_mp ((ex y (eq y x)) (im a (ex x a)))
  (eex (y (eq y x) (im a (ex x a)))
    (rsyl ((eq y x) (eq x y) (im a (ex x a)))
      (eqcom (y x))
      (syl6 ((eq x y) a (al x (im (eq x y) a)) (ex x a))
        (mpi ((al x (im (eq x y) a)) (ex x (eq x y)) (ex x a))
          (ax_6 (y x))
          (exim (x (eq x y) a)))
        (ax_12 (x y a)))))
  (ax_6 (x y))))

(local theorem alnex ((x nat) (a wff (x))) ()
  (iff (al x (not a)) (not (ex x a)))
()
(:conv (iff (al x (not a)) (not (ex x a)))
  (iff
    (al x (not a))
    (not
      (:unfold ex (x a) ()
        (not (al x (not a))))))
  (notnot ((al x (not a))))))

(local theorem ngen ((x nat) (a wff (x)))
  ((h (not a)))
  (not (ex x a))
()
(:conv (not (ex x a))
  (not
    (:unfold ex (x a) ()
      (not (al x (not a)))))
  (ax_mp ((al x (not a)) (not (not (al x (not a)))))
    (notnot1 ((al x (not a))))
    (ax_gen (x (not a))
      h))))

(local theorem alex ((x nat) (a wff (x))) ()
  (iff (al x a) (not (ex x (not a))))
()
(ax_mp ((iff (al x (not (not a))) (not (ex x (not a)))) (iff (al x a) (not (ex x (not a)))))
  (ax_mp ((iff (al x a) (al x (not (not a)))) (im (iff (al x (not (not a))) (not (ex x (not a)))) (iff (al x a) (not (ex x (not a))))))
    (bitr ((al x a) (al x (not (not a))) (not (ex x (not a)))))
    (aleqi (x a (not (not a)))
      (notnot (a))))
  (alnex (x (not a)))))

(local theorem exnal ((x nat) (a wff (x))) ()
  (iff (ex x (not a)) (not (al x a)))
()
(ax_mp ((iff (al x a) (not (ex x (not a)))) (iff (ex x (not a)) (not (al x a))))
  (con2b ((al x a) (ex x (not a))))
  (alex (x a))))

(local theorem eal ((x nat) (a wff (x))) ()
  (im (al x a) a)
()
(ax_mp ((im (not a) (not (al x a))) (im (al x a) a))
  (ax_3 (a (al x a)))
  (sylib ((not a) (ex x (not a)) (not (al x a)))
    (exnal (x a))
    (iex (x (not a))))))

(local theorem exor ((x nat) (a wff (x)) (b wff (x))) ()
  (iff (ex x (or a b)) (or (ex x a) (ex x b)))
()
(:conv (iff (ex x (or a b)) (or (ex x a) (ex x b)))
  (iff
    (:unfold ex (x (or a b)) ()
      (not (al x (not (or a b)))))
    (or
      (:unfold ex (x a) ()
        (not (al x (not a))))
      (:unfold ex (x b) ()
        (not (al x (not b))))))
  (ax_mp ((iff (not (an (al x (not a)) (al x (not b)))) (or (not (al x (not a))) (not (al x (not b))))) (iff (not (al x (not (or a b)))) (or (not (al x (not a))) (not (al x (not b))))))
    (ax_mp ((iff (not (al x (not (or a b)))) (not (an (al x (not a)) (al x (not b))))) (im (iff (not (an (al x (not a)) (al x (not b)))) (or (not (al x (not a))) (not (al x (not b))))) (iff (not (al x (not (or a b)))) (or (not (al x (not a))) (not (al x (not b)))))))
      (bitr ((not (al x (not (or a b)))) (not (an (al x (not a)) (al x (not b)))) (or (not (al x (not a))) (not (al x (not b))))))
      (noteqi ((al x (not (or a b))) (an (al x (not a)) (al x (not b))))
        (ax_mp ((iff (al x (an (not a) (not b))) (an (al x (not a)) (al x (not b)))) (iff (al x (not (or a b))) (an (al x (not a)) (al x (not b)))))
          (ax_mp ((iff (al x (not (or a b))) (al x (an (not a) (not b)))) (im (iff (al x (an (not a) (not b))) (an (al x (not a)) (al x (not b)))) (iff (al x (not (or a b))) (an (al x (not a)) (al x (not b))))))
            (bitr ((al x (not (or a b))) (al x (an (not a) (not b))) (an (al x (not a)) (al x (not b)))))
            (aleqi (x (not (or a b)) (an (not a) (not b)))
              (notor (a b))))
          (alan (x (not a) (not b))))))
    (notan ((al x (not a)) (al x (not b)))))))

(local theorem eximd ((x nat) (G wff ()) (a wff (x)) (b wff (x)))
  ((h (im G (im a b))))
  (im G (im (ex x a) (ex x b)))
()
(syl (G (al x (im a b)) (im (ex x a) (ex x b)))
  (exim (x a b))
  (iald (x G (im a b))
    h)))

(local theorem excomb ((x nat) (y nat) (a wff (x y))) ()
  (iff (ex x (ex y a)) (ex y (ex x a)))
()
(:conv (iff (ex x (ex y a)) (ex y (ex x a)))
  (iff
    (:unfold ex (x (ex y a)) ()
      (not (al x (not (ex y a)))))
    (:unfold ex (y (ex x a)) ()
      (not (al y (not (ex x a))))))
  (ax_mp ((iff (al x (not (ex y a))) (al y (not (ex x a)))) (iff (not (al x (not (ex y a)))) (not (al y (not (ex x a))))))
    (noteq ((al x (not (ex y a))) (al y (not (ex x a)))))
    (ax_mp ((iff (al x (al y (not a))) (al y (not (ex x a)))) (iff (al x (not (ex y a))) (al y (not (ex x a)))))
      (ax_mp ((iff (al x (al y (not a))) (al x (not (ex y a)))) (im (iff (al x (al y (not a))) (al y (not (ex x a)))) (iff (al x (not (ex y a))) (al y (not (ex x a))))))
        (bitr3 ((al x (not (ex y a))) (al x (al y (not a))) (al y (not (ex x a)))))
        (aleqi (x (al y (not a)) (not (ex y a)))
          (alnex (y a))))
      (ax_mp ((iff (al y (al x (not a))) (al y (not (ex x a)))) (iff (al x (al y (not a))) (al y (not (ex x a)))))
        (ax_mp ((iff (al x (al y (not a))) (al y (al x (not a)))) (im (iff (al y (al x (not a))) (al y (not (ex x a)))) (iff (al x (al y (not a))) (al y (not (ex x a))))))
          (bitr ((al x (al y (not a))) (al y (al x (not a))) (al y (not (ex x a)))))
          (alcomb (x y (not a))))
        (aleqi (y (al x (not a)) (not (ex x a)))
          (alnex (x a))))))))

(local theorem excom ((x nat) (y nat) (a wff (x y))) ()
  (im (ex x (ex y a)) (ex y (ex x a)))
()
(ax_mp ((iff (ex x (ex y a)) (ex y (ex x a))) (im (ex x (ex y a)) (ex y (ex x a))))
  (bi1 ((ex x (ex y a)) (ex y (ex x a))))
  (excomb (x y a))))

(local theorem nexi ((x nat) (a wff (x)))
  ((h (not a)))
  (not (ex x a))
()
(mpbi ((al x (not a)) (not (ex x a)))
  (alnex (x a))
  (ax_gen (x (not a))
    h)))

(local theorem nexd ((G wff ()) (x nat) (a wff (x)))
  ((h (im G (not a))))
  (im G (not (ex x a)))
()
(sylib (G (al x (not a)) (not (ex x a)))
  (alnex (x a))
  (iald (x G (not a))
    h)))

(local def nf ((x nat) (a wff (x))) (wff ())
()
(al x (im a (al x a))))

(local theorem nfeqd ((_G wff ()) (x nat) (a1 wff (x)) (a2 wff (x)))
  ((ha (im _G (iff a1 a2))))
  (im _G (iff (nf x a1) (nf x a2)))
()
(:conv (im _G (iff (nf x a1) (nf x a2)))
  (im
    _G
    (iff
      (:unfold nf (x a1) ()
        (al x (im a1 (al x a1))))
      (:unfold nf (x a2) ()
        (al x (im a2 (al x a2))))))
  (aleqd (_G x (im a1 (al x a1)) (im a2 (al x a2)))
    (imeqd (_G a1 a2 (al x a1) (al x a2))
      ha
      (aleqd (_G x a1 a2)
        ha)))))

(local theorem nfv ((a wff ()) (x nat)) ()
  (nf x a)
()
(:conv (nf x a)
  (:unfold nf (x a) ()
    (al x (im a (al x a))))
  (ax_gen (x (im a (al x a)))
    (ax_5 (x a)))))

(local theorem nfi ((x nat) (a wff (x)))
  ((h (nf x a)))
  (im a (al x a))
()
(ax_mp ((al x (im a (al x a))) (im a (al x a)))
  (eal (x (im a (al x a))))
  (:conv (al x (im a (al x a)))
    (:sym (:unfold nf (x a) ()
      (al x (im a (al x a)))))
    h)))

(local theorem nfri ((x nat) (a wff (x)))
  ((h (im a (al x a))))
  (nf x a)
()
(:conv (nf x a)
  (:unfold nf (x a) ()
    (al x (im a (al x a))))
  (ax_gen (x (im a (al x a)))
    h)))

(local theorem nfeqi ((x nat) (a wff (x)) (b wff (x)))
  ((h (iff a b)))
  (iff (nf x a) (nf x b))
()
(trud ((iff (nf x a) (nf x b)))
  (nfeqd ((wtru) x a b)
    (a1i ((wtru) (iff a b))
      h))))

(local theorem nfx ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (iff a b))
   (h2 (nf x b)))
  (nf x a)
()
(ax_mp ((nf x b) (nf x a))
  (bi2i ((nf x a) (nf x b))
    (nfeqi (x a b)
      h1))
  h2))

(local theorem nfal ((x nat) (y nat) (a wff (x y)))
  ((h (nf x a)))
  (nf x (al y a))
()
(nfri (x (al y a))
  (syl ((al y a) (al y (al x a)) (al x (al y a)))
    (ax_11 (y x a))
    (alimi (y a (al x a))
      (nfi (x a)
        h)))))

(local theorem nfnot ((x nat) (a wff (x)))
  ((h (nf x a)))
  (nf x (not a))
()
(nfri (x (not a))
  (ax_mp ((im (not (al x (not a))) a) (im (not a) (al x (not a))))
    (con1 ((al x (not a)) a))
    (:conv (im (not (al x (not a))) a)
      (im
        (:sym (:unfold ex (x a) ()
          (not (al x (not a)))))
        a)
      (syl ((ex x a) (al x a) a)
        (eal (x a))
        (syl ((ex x a) (not (al x (not (al x a)))) (al x a))
          (ax_mp ((im (not (al x a)) (al x (not (al x a)))) (im (not (al x (not (al x a)))) (al x a)))
            (con1 ((al x a) (al x (not (al x a)))))
            (ax_10 (x a)))
          (:conv (im (ex x a) (not (al x (not (al x a)))))
            (im
              (ex x a)
              (:sym (:unfold ex (x (al x a)) ()
                (not (al x (not (al x a)))))))
            (eximi (x a (al x a))
              (nfi (x a)
                h)))))))))

(local theorem nfim ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (nf x b)))
  (nf x (im a b))
()
(nfri (x (im a b))
  (cases (a (im (im a b) (al x (im a b))))
    (syl6 (a (im a b) b (al x (im a b)))
      (syl (b (al x b) (al x (im a b)))
        (alimi (x b (im a b))
          (ax_1 (b a)))
        (nfi (x b)
          h2))
      (com12 ((im a b) a b)
        (id ((im a b)))))
    (a1d ((not a) (al x (im a b)) (im a b))
      (syl ((not a) (al x (not a)) (al x (im a b)))
        (alimi (x (not a) (im a b))
          (absurd (a b)))
        (nfi (x (not a))
          (nfnot (x a)
            h1)))))))

(local theorem nfan ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (nf x b)))
  (nf x (an a b))
()
(:conv (nf x (an a b))
  (nf
    x
    (:unfold an (a b) ()
      (not (im a (not b)))))
  (nfnot (x (im a (not b)))
    (nfim (x a (not b))
      h1
      (nfnot (x b)
        h2)))))

(local theorem nfor ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (nf x b)))
  (nf x (or a b))
()
(:conv (nf x (or a b))
  (nf
    x
    (:unfold or (a b) ()
      (im (not a) b)))
  (nfim (x (not a) b)
    (nfnot (x a)
      h1)
    h2)))

(local theorem nfbi ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (nf x b)))
  (nf x (iff a b))
()
(:conv (nf x (iff a b))
  (nf
    x
    (:unfold iff (a b) ()
      (an (im a b) (im b a))))
  (nfan (x (im a b) (im b a))
    (nfim (x a b)
      h1
      h2)
    (nfim (x b a)
      h2
      h1))))

(local theorem nfex1 ((x nat) (a wff (x))) ()
  (nf x (ex x a))
()
(:conv (nf x (ex x a))
  (:unfold nf (x (ex x a)) ()
    (al x (im (ex x a) (al x (ex x a)))))
  (ax_gen (x (im (ex x a) (al x (ex x a))))
    (:conv (im (ex x a) (al x (ex x a)))
      (im
        (:unfold ex (x a) ()
          (not (al x (not a))))
        (al
          x
          (:unfold ex (x a) ()
            (not (al x (not a))))))
      (ax_10 (x (not a)))))))

(local theorem nfex ((x nat) (y nat) (a wff (x y)))
  ((h (nf x a)))
  (nf x (ex y a))
()
(:conv (nf x (ex y a))
  (nf
    x
    (:unfold ex (y a) ()
      (not (al y (not a)))))
  (nfnot (x (al y (not a)))
    (nfal (x y (not a))
      (nfnot (x a)
        h)))))

(local theorem nfal1 ((x nat) (a wff (x))) ()
  (nf x (al x a))
()
(nfx (x (al x a) (not (ex x (not a))))
  (alex (x a))
  (nfnot (x (ex x (not a)))
    (nfex1 (x (not a))))))

(local theorem ialdh ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x a))
   (h2 (im a b)))
  (im a (al x b))
()
(syl (a (al x a) (al x b))
  (alimi (x a b)
    h2)
  (nfi (x a)
    h1)))

(local theorem eexh ((x nat) (a wff (x)) (b wff (x)))
  ((h1 (nf x b))
   (h2 (im a b)))
  (im (ex x a) b)
()
(:conv (im (ex x a) b)
  (im
    (:unfold ex (x a) ()
      (not (al x (not a))))
    b)
  (ax_mp ((im (not b) (al x (not a))) (im (not (al x (not a))) b))
    (con1 (b (al x (not a))))
    (ialdh (x (not b) (not a))
      (nfnot (x b)
        h1)
      (ax_mp ((im a b) (im (not b) (not a)))
        (con3 (a b))
        h2)))))

(local theorem eexdh ((x nat) (a wff (x)) (b wff (x)) (c wff (x)))
  ((h1 (nf x a))
   (h2 (nf x c))
   (h3 (im a (im b c))))
  (im a (im (ex x b) c))
()
(:conv (im a (im (ex x b) c))
  (im
    a
    (im
      (:unfold ex (x b) ()
        (not (al x (not b))))
      c))
  (con1d (a c (al x (not b)))
    (exp (a (not c) (al x (not b)))
      (ialdh (x (an a (not c)) (not b))
        (nfan (x a (not c))
          h1
          (nfnot (x c)
            h2))
        (imp (a (not c) (not b))
          (con3d (a b c)
            h3)))))))

(local theorem alimdh ((x nat) (a wff (x)) (b wff (x)) (c wff (x)))
  ((h1 (nf x a))
   (h2 (im a (im b c))))
  (im a (im (al x b) (al x c)))
()
(syl (a (al x (im b c)) (im (al x b) (al x c)))
  (ax_4 (x b c))
  (ialdh (x a (im b c))
    h1
    h2)))

(local theorem aleqdh ((x nat) (G wff (x)) (a wff (x)) (b wff (x)))
  ((h1 (nf x G))
   (h (im G (iff a b))))
  (im G (iff (al x a) (al x b)))
()
(syl (G (al x (iff a b)) (iff (al x a) (al x b)))
  (aleq (x a b))
  (ialdh (x G (iff a b))
    h1
    h)))

(local theorem eexd ((x nat) (a wff ()) (b wff (x)) (c wff ()))
  ((h (im a (im b c))))
  (im a (im (ex x b) c))
()
(eexdh (x a b c)
  (nfv (a x))
  (nfv (c x))
  h))

(local theorem eexda ((x nat) (a wff ()) (b wff (x)) (c wff ()))
  ((h (im (an a b) c)))
  (im a (im (ex x b) c))
()
(eexd (x a b c)
  (exp (a b c)
    h)))

(local theorem eexb ((x nat) (a wff (x)) (b wff ())) ()
  (iff (im (ex x a) b) (al x (im a b)))
()
(:let H1 (nfv (b x))
(ibii ((im (ex x a) b) (al x (im a b)))
  (ialdh (x (im (ex x a) b) (im a b))
    (nfim (x (ex x a) b)
      (nfex1 (x a))
      H1)
    (imim1i (a (ex x a) b)
      (iex (x a))))
  (eexdh (x (al x (im a b)) a b)
    (nfal1 (x (im a b)))
    H1
    (eal (x (im a b)))))))

(local theorem iexeh ((x nat) (a nat ()) (b wff (x)) (c wff (x)))
  ((h (nf x c))
   (e (im (eq x a) (iff b c))))
  (im c (ex x b))
()
(mpi (c (ex x (eq x a)) (ex x b))
  (ax_6 (a x))
  (syl (c (al x (im (eq x a) b)) (im (ex x (eq x a)) (ex x b)))
    (exim (x (eq x a) b))
    (ialdh (x c (im (eq x a) b))
      h
      (com12 ((eq x a) c b)
        (bi2d ((eq x a) b c)
          e))))))

(local theorem ealeh ((x nat) (a nat ()) (b wff (x)) (c wff (x)))
  ((h (nf x c))
   (e (im (eq x a) (iff b c))))
  (im (al x b) c)
()
(ax_mp ((im (not c) (not (al x b))) (im (al x b) c))
  (ax_3 (c (al x b)))
  (sylib ((not c) (ex x (not b)) (not (al x b)))
    (exnal (x b))
    (iexeh (x a (not b) (not c))
      (nfnot (x c)
        h)
      (noteqd ((eq x a) b c)
        e)))))

(local theorem alim1 ((x nat) (a wff ()) (b wff (x))) ()
  (iff (al x (im a b)) (im a (al x b)))
()
(ibii ((al x (im a b)) (im a (al x b)))
  (com12 (a (al x (im a b)) (al x b))
    (alimd (x a (im a b) b)
      (com12 ((im a b) a b)
        (id ((im a b))))))
  (ialdh (x (im a (al x b)) (im a b))
    (nfim (x a (al x b))
      (nfv (a x))
      (nfal1 (x b)))
    (imim2i (a (al x b) b)
      (eal (x b))))))

(local theorem eqerd ((G wff ()) (a nat ()) (p wff ()) (x nat))
  ((h (im G (im (eq a x) p))))
  (im G p)
()
(mpi (G (ex x (eq x a)) p)
  (ax_6 (a x))
  (eexd (x G (eq x a) p)
    (syl5 (G (eq x a) (eq a x) p)
      (eqcom (x a))
      h))))

(local theorem eale ((x nat) (a nat ()) (b wff (x)) (c wff ()))
  ((e (im (eq x a) (iff b c))))
  (im (al x b) c)
()
(ealeh (x a b c)
  (nfv (c x))
  e))

(local theorem iexdeh ((x nat) (a nat ()) (G wff (x)) (b wff (x)))
  ((h (nf x G))
   (e (im (an G (eq x a)) b)))
  (im G (ex x b))
()
(mpi (G (ex x (eq x a)) (ex x b))
  (ax_6 (a x))
  (syl (G (al x (im (eq x a) b)) (im (ex x (eq x a)) (ex x b)))
    (exim (x (eq x a) b))
    (ialdh (x G (im (eq x a) b))
      h
      (exp (G (eq x a) b)
        e)))))

(local theorem iexde ((x nat) (G wff ()) (a nat ()) (b wff (x)))
  ((e (im (an G (eq x a)) b)))
  (im G (ex x b))
()
(iexdeh (x a G b)
  (nfv (G x))
  e))

(local theorem iexe ((x nat) (a nat ()) (b wff (x)) (c wff ()))
  ((e (im (eq x a) (iff b c))))
  (im c (ex x b))
()
(iexde (x c a b)
  (mpbird ((an c (eq x a)) c b)
    (anwr (c (eq x a) (iff b c))
      e)
    (anl (c (eq x a))))))

(local theorem ealdeh ((x nat) (a nat ()) (G wff (x)) (b wff (x)) (c wff (x)))
  ((h1 (nf x G))
   (h2 (nf x c))
   (e (im (an G (eq x a)) (im b c))))
  (im G (im (al x b) c))
()
(con4d (G c (al x b))
  (exp (G (not c) (not (al x b)))
    (sylib ((an G (not c)) (ex x (not b)) (not (al x b)))
      (exnal (x b))
      (iexdeh (x a (an G (not c)) (not b))
        (nfan (x G (not c))
          h1
          (nfnot (x c)
            h2))
        (an32s (G (eq x a) (not c) (not b))
          (imp ((an G (eq x a)) (not c) (not b))
            (con3d ((an G (eq x a)) b c)
              e))))))))

(local theorem ealieh ((c wff ()) (x nat) (a nat ()) (b wff (x)))
  ((h (nf x c))
   (e (im (eq x a) (im b c))))
  (im (al x b) c)
()
(trud ((im (al x b) c))
  (ealdeh (x a (wtru) b c)
    (nfv ((wtru) x))
    h
    (anwr ((wtru) (eq x a) (im b c))
      e))))

(local theorem ealde ((c wff ()) (x nat) (G wff ()) (a nat ()) (b wff (x)))
  ((e (im (an G (eq x a)) (im b c))))
  (im G (im (al x b) c))
()
(ealdeh (x a G b c)
  (nfv (G x))
  (nfv (c x))
  e))

(local theorem ealie ((c wff ()) (x nat) (a nat ()) (b wff (x)))
  ((e (im (eq x a) (im b c))))
  (im (al x b) c)
()
(ealieh (c x a b)
  (nfv (c x))
  e))

(local theorem exan1 ((x nat) (a wff ()) (b wff (x))) ()
  (iff (ex x (an a b)) (an a (ex x b)))
()
(ibii ((ex x (an a b)) (an a (ex x b)))
  (iand ((ex x (an a b)) a (ex x b))
    (eex (x (an a b) a)
      (anl (a b)))
    (eximi (x (an a b) b)
      (anr (a b))))
  (imp (a (ex x b) (ex x (an a b)))
    (eximd (x a b (an a b))
      (ian (a b))))))

(local theorem exan2 ((x nat) (a wff (x)) (b wff ())) ()
  (iff (ex x (an a b)) (an (ex x a) b))
()
(ax_mp ((iff (ex x (an b a)) (an (ex x a) b)) (iff (ex x (an a b)) (an (ex x a) b)))
  (ax_mp ((iff (ex x (an a b)) (ex x (an b a))) (im (iff (ex x (an b a)) (an (ex x a) b)) (iff (ex x (an a b)) (an (ex x a) b))))
    (bitr ((ex x (an a b)) (ex x (an b a)) (an (ex x a) b)))
    (exeqi (x (an a b) (an b a))
      (ancomb (a b))))
  (ax_mp ((iff (an b (ex x a)) (an (ex x a) b)) (iff (ex x (an b a)) (an (ex x a) b)))
    (ax_mp ((iff (ex x (an b a)) (an b (ex x a))) (im (iff (an b (ex x a)) (an (ex x a) b)) (iff (ex x (an b a)) (an (ex x a) b))))
      (bitr ((ex x (an b a)) (an b (ex x a)) (an (ex x a) b)))
      (exan1 (x b a)))
    (ancomb (b (ex x a))))))

(local theorem alexan ((x nat) (a wff (x)) (b wff (x))) ()
  (im (al x a) (im (ex x b) (ex x (an a b))))
()
(syl ((al x a) (al x (im b (an a b))) (im (ex x b) (ex x (an a b))))
  (exim (x b (an a b)))
  (alimi (x a (im b (an a b)))
    (ian (a b)))))

(local theorem cbvalh ((x nat) (y nat) (p wff (x y)) (q wff (x y)))
  ((h1 (nf y p))
   (h2 (nf x q))
   (e (im (eq x y) (iff p q))))
  (iff (al x p) (al y q))
()
(ibii ((al x p) (al y q))
  (ialdh (y (al x p) q)
    (nfal (y x p)
      h1)
    (ealeh (x y p q)
      h2
      e))
  (ialdh (x (al y q) p)
    (nfal (x y q)
      h2)
    (ealeh (y x q p)
      h1
      (bicomd ((eq y x) p q)
        (syl ((eq y x) (eq x y) (iff p q))
          e
          (eqcom (y x))))))))

(local theorem cbval ((x nat) (y nat) (p wff (x)) (q wff (y)))
  ((e (im (eq x y) (iff p q))))
  (iff (al x p) (al y q))
()
(cbvalh (x y p q)
  (nfv (p y))
  (nfv (q x))
  e))

(local theorem cbvexh ((x nat) (y nat) (p wff (x y)) (q wff (x y)))
  ((h1 (nf y p))
   (h2 (nf x q))
   (e (im (eq x y) (iff p q))))
  (iff (ex x p) (ex y q))
()
(:conv (iff (ex x p) (ex y q))
  (iff
    (:unfold ex (x p) ()
      (not (al x (not p))))
    (:unfold ex (y q) ()
      (not (al y (not q)))))
  (ax_mp ((iff (al x (not p)) (al y (not q))) (iff (not (al x (not p))) (not (al y (not q)))))
    (noteq ((al x (not p)) (al y (not q))))
    (cbvalh (x y (not p) (not q))
      (nfnot (y p)
        h1)
      (nfnot (x q)
        h2)
      (noteqd ((eq x y) p q)
        e)))))

(local theorem cbvex ((x nat) (y nat) (p wff (x)) (q wff (y)))
  ((e (im (eq x y) (iff p q))))
  (iff (ex x p) (ex y q))
()
(cbvexh (x y p q)
  (nfv (p y))
  (nfv (q x))
  e))

(def ne ((a nat ()) (b nat ())) (wff ())
()
(not (eq a b)))

(local theorem neeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (iff (ne a1 b1) (ne a2 b2)))
()
(:conv (im _G (iff (ne a1 b1) (ne a2 b2)))
  (im
    _G
    (iff
      (:unfold ne (a1 b1) ()
        (not (eq a1 b1)))
      (:unfold ne (a2 b2) ()
        (not (eq a2 b2)))))
  (noteqd (_G (eq a1 b1) (eq a2 b2))
    (eqeqd (_G a1 a2 b1 b2)
      ha
      hb))))

(local theorem neeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (iff (ne a1 b1) (ne a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (iff (ne a1 b1) (ne a2 b2)))
  (neeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem neeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (iff (ne a1 b) (ne a2 b)))
()
(neeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem neeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (iff (ne a1 b) (ne a2 b)))
()
(neeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem neeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (iff (ne a b1) (ne a b2)))
()
(neeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem neeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (iff (ne a b1) (ne a b2)))
()
(neeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem necom ((a nat ()) (b nat ())) ()
  (im (ne a b) (ne b a))
()
(:conv (im (ne a b) (ne b a))
  (im
    (:unfold ne (a b) ()
      (not (eq a b)))
    (:unfold ne (b a) ()
      (not (eq b a))))
  (ax_mp ((im (eq b a) (eq a b)) (im (not (eq a b)) (not (eq b a))))
    (con3 ((eq b a) (eq a b)))
    (eqcom (b a)))))

(def sb ((a nat ()) (x nat) (ph wff (x))) (wff ())
((y nat))
(al y (im (eq y a) (al x (im (eq x y) ph)))))

(local theorem sbq ((x nat) (a nat ()) (b wff (x))) ()
  (im (eq x a) (iff b (sb a x b)))
((y nat))
(:conv (im (eq x a) (iff b (sb a x b)))
  (im
    (eq x a)
    (iff
      b
      (:unfold sb (a x b) (y)
        (al y (im (eq y a) (al x (im (eq x y) b)))))))
  (ibid ((eq x a) b (al y (im (eq y a) (al x (im (eq x y) b)))))
    (exp ((eq x a) b (al y (im (eq y a) (al x (im (eq x y) b)))))
      (iald (y (an (eq x a) b) (im (eq y a) (al x (im (eq x y) b))))
        (exp ((an (eq x a) b) (eq y a) (al x (im (eq x y) b)))
          (sylc ((an (an (eq x a) b) (eq y a)) (eq x y) b (al x (im (eq x y) b)))
            (ax_12 (x y b))
            (eqtr4d ((an (an (eq x a) b) (eq y a)) x a y)
              (anll ((eq x a) b (eq y a)))
              (anr ((an (eq x a) b) (eq y a))))
            (anlr ((eq x a) b (eq y a)))))))
    (mpi ((eq x a) (ex y (eq y a)) (im (al y (im (eq y a) (al x (im (eq x y) b)))) b))
      (ax_6 (a y))
      (eexdh (y (eq x a) (eq y a) (im (al y (im (eq y a) (al x (im (eq x y) b)))) b))
        (nfv ((eq x a) y))
        (nfim (y (al y (im (eq y a) (al x (im (eq x y) b)))) b)
          (nfal1 (y (im (eq y a) (al x (im (eq x y) b)))))
          (nfv (b y)))
        (exp ((eq x a) (eq y a) (im (al y (im (eq y a) (al x (im (eq x y) b)))) b))
          (syl5 ((an (eq x a) (eq y a)) (al y (im (eq y a) (al x (im (eq x y) b)))) (im (eq y a) (al x (im (eq x y) b))) b)
            (eal (y (im (eq y a) (al x (im (eq x y) b)))))
            (syld ((an (eq x a) (eq y a)) (im (eq y a) (al x (im (eq x y) b))) (al x (im (eq x y) b)) b)
              (com12 ((im (eq y a) (al x (im (eq x y) b))) (an (eq x a) (eq y a)) (al x (im (eq x y) b)))
                (imim1i ((an (eq x a) (eq y a)) (eq y a) (al x (im (eq x y) b)))
                  (anr ((eq x a) (eq y a)))))
              (syl ((an (eq x a) (eq y a)) (eq x y) (im (al x (im (eq x y) b)) b))
                (com12 ((al x (im (eq x y) b)) (eq x y) b)
                  (eal (x (im (eq x y) b))))
                (imp ((eq x a) (eq y a) (eq x y))
                  (eqtr4 (x a y))))))))))))

(local theorem nfsb1 ((x nat) (a nat ()) (b wff (x))) ()
  (nf x (sb a x b))
((y nat))
(:conv (nf x (sb a x b))
  (nf
    x
    (:unfold sb (a x b) (y)
      (al y (im (eq y a) (al x (im (eq x y) b))))))
  (nfal (x y (im (eq y a) (al x (im (eq x y) b))))
    (nfim (x (eq y a) (al x (im (eq x y) b)))
      (nfv ((eq y a) x))
      (nfal1 (x (im (eq x y) b)))))))

(local theorem nfsb ((x nat) (y nat) (a nat (y)) (b wff (x y)))
  ((h (nf x b)))
  (nf x (sb a y b))
((z nat))
(:conv (nf x (sb a y b))
  (nf
    x
    (:unfold sb (a y b) (z)
      (al z (im (eq z a) (al y (im (eq y z) b))))))
  (nfal (x z (im (eq z a) (al y (im (eq y z) b))))
    (nfim (x (eq z a) (al y (im (eq y z) b)))
      (nfv ((eq z a) x))
      (nfal (x y (im (eq y z) b))
        (nfim (x (eq y z) b)
          (nfv ((eq y z) x))
          h))))))

(local theorem sbeq1 ((x nat) (a nat (x)) (b nat (x)) (c wff (x))) ()
  (im (eq a b) (iff (sb a x c) (sb b x c)))
((y nat))
(:conv (im (eq a b) (iff (sb a x c) (sb b x c)))
  (im
    (eq a b)
    (iff
      (:unfold sb (a x c) (y)
        (al y (im (eq y a) (al x (im (eq x y) c)))))
      (:unfold sb (b x c) (y)
        (al y (im (eq y b) (al x (im (eq x y) c)))))))
  (aleqd ((eq a b) y (im (eq y a) (al x (im (eq x y) c))) (im (eq y b) (al x (im (eq x y) c))))
    (imeq1d ((eq a b) (eq y a) (eq y b) (al x (im (eq x y) c)))
      (eqeq2 (y a b))))))

(local theorem sbeq1d ((x nat) (G wff (x)) (a nat (x)) (b nat (x)) (c wff (x)))
  ((h (im G (eq a b))))
  (im G (iff (sb a x c) (sb b x c)))
()
(syl (G (eq a b) (iff (sb a x c) (sb b x c)))
  (sbeq1 (x a b c))
  h))

(local theorem sbeqd ((_G wff ()) (x nat) (a1 nat (x)) (a2 nat (x)) (ph1 wff (x)) (ph2 wff (x)))
  ((ha (im _G (eq a1 a2)))
   (hph (im _G (iff ph1 ph2))))
  (im _G (iff (sb a1 x ph1) (sb a2 x ph2)))
((y nat))
(:conv (im _G (iff (sb a1 x ph1) (sb a2 x ph2)))
  (im
    _G
    (iff
      (:unfold sb (a1 x ph1) (y)
        (al y (im (eq y a1) (al x (im (eq x y) ph1)))))
      (:unfold sb (a2 x ph2) (y)
        (al y (im (eq y a2) (al x (im (eq x y) ph2)))))))
  (aleqd (_G y (im (eq y a1) (al x (im (eq x y) ph1))) (im (eq y a2) (al x (im (eq x y) ph2))))
    (imeqd (_G (eq y a1) (eq y a2) (al x (im (eq x y) ph1)) (al x (im (eq x y) ph2)))
      (eqeqd (_G y y a1 a2)
        (eqidd (_G y))
        ha)
      (aleqd (_G x (im (eq x y) ph1) (im (eq x y) ph2))
        (imeqd (_G (eq x y) (eq x y) ph1 ph2)
          (biidd (_G (eq x y)))
          hph))))))

(local theorem sbeq2d ((G wff ()) (x nat) (a nat (x)) (ph1 wff (x)) (ph2 wff (x)))
  ((h (im G (iff ph1 ph2))))
  (im G (iff (sb a x ph1) (sb a x ph2)))
()
(sbeqd (G x a a ph1 ph2)
  (eqidd (G a))
  h))

(local theorem sbeq2i ((x nat) (a nat (x)) (b wff (x)) (c wff (x)))
  ((h (iff b c)))
  (iff (sb a x b) (sb a x c))
()
(trud ((iff (sb a x b) (sb a x c)))
  (sbeq2d ((wtru) x a b c)
    (a1i ((wtru) (iff b c))
      h))))

(local theorem sbeht ((x nat) (a nat ()) (b wff (x)) (c wff (x)))
  ((h (nf x c)))
  (im (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
()
(ax_mp ((ex x (eq x a)) (im (al x (im (eq x a) (iff b c))) (iff (sb a x b) c)))
  (eexh (x (eq x a) (im (al x (im (eq x a) (iff b c))) (iff (sb a x b) c)))
    (nfim (x (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
      (nfal1 (x (im (eq x a) (iff b c))))
      (nfbi (x (sb a x b) c)
        (nfsb1 (x a b))
        h))
    (exp ((eq x a) (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
      (bitr3d ((an (eq x a) (al x (im (eq x a) (iff b c)))) (sb a x b) b c)
        (anwl ((eq x a) (al x (im (eq x a) (iff b c))) (iff b (sb a x b)))
          (sbq (x a b)))
        (impcom ((al x (im (eq x a) (iff b c))) (eq x a) (iff b c))
          (eal (x (im (eq x a) (iff b c))))))))
  (ax_6 (a x))))

(local theorem sbeh ((x nat) (a nat ()) (b wff (x)) (c wff (x)))
  ((h (nf x c))
   (e (im (eq x a) (iff b c))))
  (iff (sb a x b) c)
()
(ax_mp ((al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
  (sbeht (x a b c)
    h)
  (ax_gen (x (im (eq x a) (iff b c)))
    e)))

(local theorem sbet ((x nat) (a nat ()) (b wff (x)) (c wff ())) ()
  (im (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
()
(sbeht (x a b c)
  (nfv (c x))))

(local theorem sbe ((x nat) (a nat ()) (b wff (x)) (c wff ()))
  ((e (im (eq x a) (iff b c))))
  (iff (sb a x b) c)
()
(sbeh (x a b c)
  (nfv (c x))
  e))

(local theorem sbed ((G wff ()) (x nat) (a nat ()) (b wff (x)) (c wff ()))
  ((e (im (an G (eq x a)) (iff b c))))
  (im G (iff (sb a x b) c))
()
(syl (G (al x (im (eq x a) (iff b c))) (iff (sb a x b) c))
  (sbet (x a b c))
  (iald (x G (im (eq x a) (iff b c)))
    (exp (G (eq x a) (iff b c))
      e))))

(local theorem dfsb2 ((x nat) (a nat ()) (b wff (x))) ()
  (iff (sb a x b) (al x (im (eq x a) b)))
((y nat))
(:conv (iff (sb a x b) (al x (im (eq x a) b)))
  (iff
    (:unfold sb (a x b) (y)
      (al y (im (eq y a) (al x (im (eq x y) b)))))
    (al x (im (eq x a) b)))
  (ibii ((al y (im (eq y a) (al x (im (eq x y) b)))) (al x (im (eq x a) b)))
    (mpi ((al y (im (eq y a) (al x (im (eq x y) b)))) (ex y (eq y a)) (al x (im (eq x a) b)))
      (ax_6 (a y))
      (eexdh (y (al y (im (eq y a) (al x (im (eq x y) b)))) (eq y a) (al x (im (eq x a) b)))
        (nfal1 (y (im (eq y a) (al x (im (eq x y) b)))))
        (nfv ((al x (im (eq x a) b)) y))
        (syl ((al y (im (eq y a) (al x (im (eq x y) b)))) (im (eq y a) (al x (im (eq x y) b))) (im (eq y a) (al x (im (eq x a) b))))
          (a2i ((eq y a) (al x (im (eq x y) b)) (al x (im (eq x a) b)))
            (alimd (x (eq y a) (im (eq x y) b) (im (eq x a) b))
              (imim1d ((eq y a) (eq x a) (eq x y) b)
                (com12 ((eq x a) (eq y a) (eq x y))
                  (eqtr4 (x a y))))))
          (eal (y (im (eq y a) (al x (im (eq x y) b))))))))
    (iald (y (al x (im (eq x a) b)) (im (eq y a) (al x (im (eq x y) b))))
      (com12 ((eq y a) (al x (im (eq x a) b)) (al x (im (eq x y) b)))
        (alimd (x (eq y a) (im (eq x a) b) (im (eq x y) b))
          (imim1d ((eq y a) (eq x y) (eq x a) b)
            (com12 ((eq x y) (eq y a) (eq x a))
              (eqtr (x y a))))))))))

(local theorem dfsb3 ((x nat) (a nat ()) (b wff (x))) ()
  (iff (sb a x b) (ex x (an (eq x a) b)))
()
(sbeh (x a b (ex x (an (eq x a) b)))
  (nfex1 (x (an (eq x a) b)))
  (syl ((eq x a) (iff (al x (not (an (eq x a) b))) (not b)) (iff b (ex x (an (eq x a) b))))
    (:conv (im (iff (al x (not (an (eq x a) b))) (not b)) (iff b (ex x (an (eq x a) b))))
      (im
        (iff (al x (not (an (eq x a) b))) (not b))
        (iff
          b
          (:unfold ex (x (an (eq x a) b)) ()
            (not (al x (not (an (eq x a) b)))))))
      (con2b ((al x (not (an (eq x a) b))) b)))
    (syl5bb ((eq x a) (al x (not (an (eq x a) b))) (sb a x (not b)) (not b))
      (ax_mp ((iff (sb a x (not b)) (al x (im (eq x a) (not b)))) (iff (al x (not (an (eq x a) b))) (sb a x (not b))))
        (ax_mp ((iff (al x (not (an (eq x a) b))) (al x (im (eq x a) (not b)))) (im (iff (sb a x (not b)) (al x (im (eq x a) (not b)))) (iff (al x (not (an (eq x a) b))) (sb a x (not b)))))
          (bitr4 ((al x (not (an (eq x a) b))) (al x (im (eq x a) (not b))) (sb a x (not b))))
          (aleqi (x (not (an (eq x a) b)) (im (eq x a) (not b)))
            (notan2 ((eq x a) b))))
        (dfsb2 (x a (not b))))
      (bicomd ((eq x a) (not b) (sb a x (not b)))
        (sbq (x a (not b))))))))

(local theorem sbco ((x nat) (y nat) (a nat (x)) (b wff (x))) ()
  (iff (sb a y (sb y x b)) (sb a x b))
()
(:conv (iff (sb a y (sb y x b)) (sb a x b))
  (iff
    (sb a y (sb y x b))
    (:unfold sb (a x b) (y)
      (al y (im (eq y a) (al x (im (eq x y) b))))))
  (ax_mp ((iff (al y (im (eq y a) (sb y x b))) (al y (im (eq y a) (al x (im (eq x y) b))))) (iff (sb a y (sb y x b)) (al y (im (eq y a) (al x (im (eq x y) b))))))
    (ax_mp ((iff (sb a y (sb y x b)) (al y (im (eq y a) (sb y x b)))) (im (iff (al y (im (eq y a) (sb y x b))) (al y (im (eq y a) (al x (im (eq x y) b))))) (iff (sb a y (sb y x b)) (al y (im (eq y a) (al x (im (eq x y) b)))))))
      (bitr ((sb a y (sb y x b)) (al y (im (eq y a) (sb y x b))) (al y (im (eq y a) (al x (im (eq x y) b))))))
      (dfsb2 (y a (sb y x b))))
    (aleqi (y (im (eq y a) (sb y x b)) (im (eq y a) (al x (im (eq x y) b))))
      (imeq2i ((eq y a) (sb y x b) (al x (im (eq x y) b)))
        (dfsb2 (x y b)))))))

(local theorem sbid ((x nat) (a wff (x))) ()
  (iff (sb x x a) a)
((y nat))
(:let H1 (eqcom (y x))
(:conv (iff (sb x x a) a)
  (iff
    (:unfold sb (x x a) (y)
      (al y (im (eq y x) (al x (im (eq x y) a)))))
    a)
  (ibii ((al y (im (eq y x) (al x (im (eq x y) a)))) a)
    (mpi ((al y (im (eq y x) (al x (im (eq x y) a)))) (ex y (eq y x)) a)
      (ax_6 (x y))
      (eexdh (y (al y (im (eq y x) (al x (im (eq x y) a)))) (eq y x) a)
        (nfal1 (y (im (eq y x) (al x (im (eq x y) a)))))
        (nfv (a y))
        (rsyl ((al y (im (eq y x) (al x (im (eq x y) a)))) (im (eq y x) (al x (im (eq x y) a))) (im (eq y x) a))
          (eal (y (im (eq y x) (al x (im (eq x y) a)))))
          (a2i ((eq y x) (al x (im (eq x y) a)) a)
            (rsyl ((eq y x) (eq x y) (im (al x (im (eq x y) a)) a))
              H1
              (com12 ((al x (im (eq x y) a)) (eq x y) a)
                (eal (x (im (eq x y) a)))))))))
    (iald (y a (im (eq y x) (al x (im (eq x y) a))))
      (com12 ((eq y x) a (al x (im (eq x y) a)))
        (bi1d ((eq y x) a (al x (im (eq x y) a)))
          (syl6bb ((eq y x) a (sb y x a) (al x (im (eq x y) a)))
            (dfsb2 (x y a))
            (syl ((eq y x) (eq x y) (iff a (sb y x a)))
              (sbq (x y a))
              H1)))))))))

(local theorem sbth ((x nat) (a nat (x)) (p wff (x)))
  ((h p))
  (sb a x p)
((y nat))
(:conv (sb a x p)
  (:unfold sb (a x p) (y)
    (al y (im (eq y a) (al x (im (eq x y) p)))))
  (ax_gen (y (im (eq y a) (al x (im (eq x y) p))))
    (a1i ((eq y a) (al x (im (eq x y) p)))
      (ax_gen (x (im (eq x y) p))
        (a1i ((eq x y) p)
          h))))))

(local theorem sbeth ((a nat ()) (q wff ()) (x nat) (p wff (x)))
  ((e (im (eq x a) (iff p q)))
   (h p))
  q
()
(mpbi ((sb a x p) q)
  (sbe (x a p q)
    e)
  (sbth (x a p)
    h)))

(local theorem cbvsbh ((x nat) (y nat) (a nat ()) (p wff (x y)) (q wff (x y)))
  ((h1 (nf y p))
   (h2 (nf x q))
   (e (im (eq x y) (iff p q))))
  (iff (sb a x p) (sb a y q))
((z nat))
(:conv (iff (sb a x p) (sb a y q))
  (iff
    (:unfold sb (a x p) (z)
      (al z (im (eq z a) (al x (im (eq x z) p)))))
    (:unfold sb (a y q) (z)
      (al z (im (eq z a) (al y (im (eq y z) q))))))
  (aleqi (z (im (eq z a) (al x (im (eq x z) p))) (im (eq z a) (al y (im (eq y z) q))))
    (imeq2i ((eq z a) (al x (im (eq x z) p)) (al y (im (eq y z) q)))
      (cbvalh (x y (im (eq x z) p) (im (eq y z) q))
        (nfim (y (eq x z) p)
          (nfv ((eq x z) y))
          h1)
        (nfim (x (eq y z) q)
          (nfv ((eq y z) x))
          h2)
        (imeqd ((eq x y) (eq x z) (eq y z) p q)
          (eqeq1 (x y z))
          e))))))

(local theorem cbvsb ((x nat) (y nat) (a nat ()) (p wff (x)) (q wff (y)))
  ((e (im (eq x y) (iff p q))))
  (iff (sb a x p) (sb a y q))
()
(cbvsbh (x y a p q)
  (nfv (p y))
  (nfv (q x))
  e))

(local theorem aleqe ((x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (eq x a) (iff p q))))
  (iff (al x (im (eq x a) p)) q)
()
(ax_mp ((iff (sb a x p) q) (iff (al x (im (eq x a) p)) q))
  (ax_mp ((iff (sb a x p) (al x (im (eq x a) p))) (im (iff (sb a x p) q) (iff (al x (im (eq x a) p)) q)))
    (bitr3 ((al x (im (eq x a) p)) (sb a x p) q))
    (dfsb2 (x a p)))
  (sbe (x a p q)
    e)))

(local theorem exeqe ((x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (eq x a) (iff p q))))
  (iff (ex x (an (eq x a) p)) q)
()
(ax_mp ((iff (sb a x p) q) (iff (ex x (an (eq x a) p)) q))
  (ax_mp ((iff (sb a x p) (ex x (an (eq x a) p))) (im (iff (sb a x p) q) (iff (ex x (an (eq x a) p)) q)))
    (bitr3 ((ex x (an (eq x a) p)) (sb a x p) q))
    (dfsb3 (x a p)))
  (sbe (x a p q)
    e)))

(local theorem cbvals ((x nat) (y nat) (p wff (x))) ()
  (iff (al x p) (al y (sb y x p)))
()
(cbvalh (x y p (sb y x p))
  (nfv (p y))
  (nfsb1 (x y p))
  (sbq (x y p))))

(local theorem cbvexs ((x nat) (y nat) (p wff (x))) ()
  (iff (ex x p) (ex y (sb y x p)))
()
(cbvexh (x y p (sb y x p))
  (nfv (p y))
  (nfsb1 (x y p))
  (sbq (x y p))))

(local theorem cbvald ((x nat) (y nat) (G wff ()) (p wff (x)) (q wff (y)))
  ((h (im (an G (eq x y)) (iff p q))))
  (im G (iff (al x p) (al y q)))
()
(bitrd (G (al x p) (al y (sb y x p)) (al y q))
  (a1i (G (iff (al x p) (al y (sb y x p))))
    (cbvals (x y p)))
  (aleqd (G y (sb y x p) q)
    (syl (G (al x (im (eq x y) (iff p q))) (iff (sb y x p) q))
      (sbet (x y p q))
      (iald (x G (im (eq x y) (iff p q)))
        (exp (G (eq x y) (iff p q))
          h))))))

(local theorem cbvexd ((x nat) (y nat) (G wff ()) (p wff (x)) (q wff (y)))
  ((h (im (an G (eq x y)) (iff p q))))
  (im G (iff (ex x p) (ex y q)))
()
(bitrd (G (ex x p) (ex y (sb y x p)) (ex y q))
  (a1i (G (iff (ex x p) (ex y (sb y x p))))
    (cbvexs (x y p)))
  (exeqd (G y (sb y x p) q)
    (syl (G (al x (im (eq x y) (iff p q))) (iff (sb y x p) q))
      (sbet (x y p q))
      (iald (x G (im (eq x y) (iff p q)))
        (exp (G (eq x y) (iff p q))
          h))))))

(sort set strict)

(term ab ((x nat) (p wff (x))) (set ()))

(term el ((a nat ()) (A set ())) (wff ()))

(axiom elab ((a nat ()) (x nat) (p wff (x))) ()
  (iff (el a (ab x p)) (sb a x p)))

(axiom ax_8 ((a nat ()) (b nat ()) (A set ())) ()
  (im (eq a b) (im (el a A) (el b A))))

(def eqs ((A set ()) (B set ())) (wff ())
((x nat))
(al x (iff (el x A) (el x B))))

(local theorem eqsid ((A set ())) ()
  (eqs A A)
((x nat))
(:conv (eqs A A)
  (:unfold eqs (A A) (x)
    (al x (iff (el x A) (el x A))))
  (ax_gen (x (iff (el x A) (el x A)))
    (biid ((el x A))))))

(local theorem eqscom ((A set ()) (B set ())) ()
  (im (eqs A B) (eqs B A))
((x nat))
(:conv (im (eqs A B) (eqs B A))
  (im
    (:unfold eqs (A B) (x)
      (al x (iff (el x A) (el x B))))
    (:unfold eqs (B A) (x)
      (al x (iff (el x B) (el x A)))))
  (alimi (x (iff (el x A) (el x B)) (iff (el x B) (el x A)))
    (bicom ((el x A) (el x B))))))

(local theorem eqscomb ((A set ()) (B set ())) ()
  (iff (eqs A B) (eqs B A))
()
(ibii ((eqs A B) (eqs B A))
  (eqscom (A B))
  (eqscom (B A))))

(local theorem eqstr ((A set ()) (B set ()) (C set ())) ()
  (im (eqs A B) (im (eqs B C) (eqs A C)))
((x nat))
(syl ((eqs A B) (al x (im (iff (el x B) (el x C)) (iff (el x A) (el x C)))) (im (eqs B C) (eqs A C)))
  (:conv (im (al x (im (iff (el x B) (el x C)) (iff (el x A) (el x C)))) (im (eqs B C) (eqs A C)))
    (im
      (al x (im (iff (el x B) (el x C)) (iff (el x A) (el x C))))
      (im
        (:unfold eqs (B C) (x)
          (al x (iff (el x B) (el x C))))
        (:unfold eqs (A C) (x)
          (al x (iff (el x A) (el x C))))))
    (ax_4 (x (iff (el x B) (el x C)) (iff (el x A) (el x C)))))
  (:conv (im (eqs A B) (al x (im (iff (el x B) (el x C)) (iff (el x A) (el x C)))))
    (im
      (:unfold eqs (A B) (x)
        (al x (iff (el x A) (el x B))))
      (al x (im (iff (el x B) (el x C)) (iff (el x A) (el x C)))))
    (alimi (x (iff (el x A) (el x B)) (im (iff (el x B) (el x C)) (iff (el x A) (el x C))))
      (bitr ((el x A) (el x B) (el x C)))))))

(local theorem eqstr3 ((A set ()) (B set ()) (C set ())) ()
  (im (eqs B A) (im (eqs B C) (eqs A C)))
()
(syl ((eqs B A) (eqs A B) (im (eqs B C) (eqs A C)))
  (eqstr (A B C))
  (eqscom (B A))))

(local theorem eqstr4 ((A set ()) (B set ()) (C set ())) ()
  (im (eqs A B) (im (eqs C B) (eqs A C)))
()
(syl5 ((eqs A B) (eqs C B) (eqs B C) (eqs A C))
  (eqscom (C B))
  (eqstr (A B C))))

(local theorem eqstr3d ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (im G (eqs B A)))
   (h2 (im G (eqs B C))))
  (im G (eqs A C))
()
(sylc (G (eqs B A) (eqs B C) (eqs A C))
  (eqstr3 (A B C))
  h1
  h2))

(local theorem eqsidd ((G wff ()) (A set ())) ()
  (im G (eqs A A))
()
(a1i (G (eqs A A))
  (eqsid (A))))

(local theorem eqscomd ((A set ()) (B set ()) (G wff ()))
  ((h (im G (eqs A B))))
  (im G (eqs B A))
()
(syl (G (eqs A B) (eqs B A))
  (eqscom (A B))
  h))

(local theorem eqstrd ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (im G (eqs A B)))
   (h2 (im G (eqs B C))))
  (im G (eqs A C))
()
(sylc (G (eqs A B) (eqs B C) (eqs A C))
  (eqstr (A B C))
  h1
  h2))

(local theorem eqstr4d ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (im G (eqs A B)))
   (h2 (im G (eqs C B))))
  (im G (eqs A C))
()
(sylc (G (eqs A B) (eqs C B) (eqs A C))
  (eqstr4 (A B C))
  h1
  h2))

(local theorem syl5eqs ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (eqs A B))
   (h2 (im G (eqs B C))))
  (im G (eqs A C))
()
(eqstrd (A B C G)
  (a1i (G (eqs A B))
    h1)
  h2))

(local theorem syl5eqsr ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (eqs B A))
   (h2 (im G (eqs B C))))
  (im G (eqs A C))
()
(eqstr3d (A B C G)
  (a1i (G (eqs B A))
    h1)
  h2))

(local theorem syl6eqs ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (eqs B C))
   (h2 (im G (eqs A B))))
  (im G (eqs A C))
()
(eqstrd (A B C G)
  h2
  (a1i (G (eqs B C))
    h1)))

(local theorem syl6eqsr ((A set ()) (B set ()) (C set ()) (G wff ()))
  ((h1 (eqs C B))
   (h2 (im G (eqs A B))))
  (im G (eqs A C))
()
(eqstr4d (A B C G)
  h2
  (a1i (G (eqs C B))
    h1)))

(local theorem eleq1 ((A set ()) (a nat ()) (b nat ())) ()
  (im (eq a b) (iff (el a A) (el b A)))
()
(ibid ((eq a b) (el a A) (el b A))
  (ax_8 (a b A))
  (syl ((eq a b) (eq b a) (im (el b A) (el a A)))
    (ax_8 (b a A))
    (eqcom (a b)))))

(local theorem eleq2 ((A set ()) (B set ()) (a nat ())) ()
  (im (eqs A B) (iff (el a A) (el a B)))
((x nat))
(:conv (im (eqs A B) (iff (el a A) (el a B)))
  (im
    (:unfold eqs (A B) (x)
      (al x (iff (el x A) (el x B))))
    (iff (el a A) (el a B)))
  (eale (x a (iff (el x A) (el x B)) (iff (el a A) (el a B)))
    (bieqd ((eq x a) (el x A) (el a A) (el x B) (el a B))
      (eleq1 (A x a))
      (eleq1 (B x a))))))

(local theorem eleq1d ((A set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h (im G (eq a b))))
  (im G (iff (el a A) (el b A)))
()
(syl (G (eq a b) (iff (el a A) (el b A)))
  (eleq1 (A a b))
  h))

(local theorem eleq2d ((A set ()) (B set ()) (G wff ()) (a nat ()))
  ((h (im G (eqs A B))))
  (im G (iff (el a A) (el a B)))
()
(syl (G (eqs A B) (iff (el a A) (el a B)))
  (eleq2 (A B a))
  h))

(local theorem eleqd ((G wff ()) (a nat ()) (b nat ()) (A set ()) (B set ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eqs A B))))
  (im G (iff (el a A) (el b B)))
()
(bitrd (G (el a A) (el b A) (el b B))
  (eleq1d (A G a b)
    h1)
  (eleq2d (A B G b)
    h2)))

(local theorem eqseqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (iff (eqs A1 B1) (eqs A2 B2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (iff (eqs A1 B1) (eqs A2 B2)))
  (im
    _G
    (iff
      (:unfold eqs (A1 B1) (x)
        (al x (iff (el x A1) (el x B1))))
      (:unfold eqs (A2 B2) (x)
        (al x (iff (el x A2) (el x B2))))))
  (aleqd (_G x (iff (el x A1) (el x B1)) (iff (el x A2) (el x B2)))
    (bieqd (_G (el x A1) (el x A2) (el x B1) (el x B2))
      (eleqd (_G x x A1 A2)
        H1
        hA)
      (eleqd (_G x x B1 B2)
        H1
        hB))))))

(local theorem eqseq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (iff (eqs A1 B1) (eqs A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (iff (eqs A1 B1) (eqs A2 B2)))
  (eqseqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem eqseq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (iff (eqs A1 B) (eqs A2 B)))
()
(eqseqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem eqseq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (iff (eqs A1 B) (eqs A2 B)))
()
(eqseq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem eqseq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (iff (eqs A B1) (eqs A B2)))
()
(eqseqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem eqseq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (iff (eqs A B1) (eqs A B2)))
()
(eqseq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(local theorem abeq ((x nat) (p wff (x)) (q wff (x))) ()
  (im (al x (iff p q)) (eqs (ab x p) (ab x q)))
((y nat))
(:conv (im (al x (iff p q)) (eqs (ab x p) (ab x q)))
  (im
    (al x (iff p q))
    (:unfold eqs ((ab x p) (ab x q)) (y)
      (al y (iff (el y (ab x p)) (el y (ab x q))))))
  (iald (y (al x (iff p q)) (iff (el y (ab x p)) (el y (ab x q))))
    (bitr4g ((al x (iff p q)) (sb y x p) (sb y x q) (el y (ab x p)) (el y (ab x q)))
      (elab (y x p))
      (elab (y x q))
      (ealeh (x y (iff p q) (iff (sb y x p) (sb y x q)))
        (nfbi (x (sb y x p) (sb y x q))
          (nfsb1 (x y p))
          (nfsb1 (x y q)))
        (bieqd ((eq x y) p (sb y x p) q (sb y x q))
          (sbq (x y p))
          (sbq (x y q))))))))

(local theorem abeqd ((G wff ()) (x nat) (p wff (x)) (q wff (x)))
  ((h (im G (iff p q))))
  (im G (eqs (ab x p) (ab x q)))
()
(syl (G (al x (iff p q)) (eqs (ab x p) (ab x q)))
  (abeq (x p q))
  (iald (x G (iff p q))
    h)))

(local theorem eqri ((A set ()) (B set ()) (x nat))
  ((h (iff (el x A) (el x B))))
  (eqs A B)
()
(:conv (eqs A B)
  (:unfold eqs (A B) (x)
    (al x (iff (el x A) (el x B))))
  (ax_gen (x (iff (el x A) (el x B)))
    h)))

(local theorem eqrd ((A set ()) (B set ()) (G wff ()) (x nat))
  ((h (im G (iff (el x A) (el x B)))))
  (im G (eqs A B))
()
(:conv (im G (eqs A B))
  (im
    G
    (:unfold eqs (A B) (x)
      (al x (iff (el x A) (el x B)))))
  (iald (x G (iff (el x A) (el x B)))
    h)))

(local theorem cbvabh ((x nat) (y nat) (p wff (x y)) (q wff (x y)))
  ((h1 (nf y p))
   (h2 (nf x q))
   (e (im (eq x y) (iff p q))))
  (eqs (ab x p) (ab y q))
((z nat))
(eqri ((ab x p) (ab y q) z)
  (bitr4gi ((sb z x p) (sb z y q) (el z (ab x p)) (el z (ab y q)))
    (elab (z x p))
    (elab (z y q))
    (cbvsbh (x y z p q)
      h1
      h2
      e))))

(local theorem cbvab ((x nat) (y nat) (p wff (x)) (q wff (y)))
  ((e (im (eq x y) (iff p q))))
  (eqs (ab x p) (ab y q))
()
(cbvabh (x y p q)
  (nfv (p y))
  (nfv (q x))
  e))

(local theorem cbvabs ((x nat) (y nat) (p wff (x))) ()
  (eqs (ab x p) (ab y (sb y x p)))
()
(cbvabh (x y p (sb y x p))
  (nfv (p y))
  (nfsb1 (x y p))
  (sbq (x y p))))

(local theorem cbvabd ((x nat) (y nat) (G wff ()) (p wff (x)) (q wff (y)))
  ((h (im (an G (eq x y)) (iff p q))))
  (im G (eqs (ab x p) (ab y q)))
()
(eqstrd ((ab x p) (ab y (sb y x p)) (ab y q) G)
  (a1i (G (eqs (ab x p) (ab y (sb y x p))))
    (cbvabs (x y p)))
  (abeqd (G y (sb y x p) q)
    (syl (G (al x (im (eq x y) (iff p q))) (iff (sb y x p) q))
      (sbet (x y p q))
      (iald (x G (im (eq x y) (iff p q)))
        (exp (G (eq x y) (iff p q))
          h))))))

(local theorem elab2 ((x nat) (a nat (x)) (p wff (x))) ()
  (iff (el a (ab x p)) (sb a x p))
((y nat))
(ax_mp ((iff (sb a y (sb y x p)) (sb a x p)) (iff (el a (ab x p)) (sb a x p)))
  (ax_mp ((iff (el a (ab x p)) (sb a y (sb y x p))) (im (iff (sb a y (sb y x p)) (sb a x p)) (iff (el a (ab x p)) (sb a x p))))
    (bitr ((el a (ab x p)) (sb a y (sb y x p)) (sb a x p)))
    (ax_mp ((iff (el a (ab y (sb y x p))) (sb a y (sb y x p))) (iff (el a (ab x p)) (sb a y (sb y x p))))
      (ax_mp ((iff (el a (ab x p)) (el a (ab y (sb y x p)))) (im (iff (el a (ab y (sb y x p))) (sb a y (sb y x p))) (iff (el a (ab x p)) (sb a y (sb y x p)))))
        (bitr ((el a (ab x p)) (el a (ab y (sb y x p))) (sb a y (sb y x p))))
        (ax_mp ((eqs (ab x p) (ab y (sb y x p))) (iff (el a (ab x p)) (el a (ab y (sb y x p)))))
          (eleq2 ((ab x p) (ab y (sb y x p)) a))
          (cbvabh (x y p (sb y x p))
            (nfv (p y))
            (nfsb1 (x y p))
            (sbq (x y p)))))
      (elab (a y (sb y x p)))))
  (sbco (x y a p))))

(local theorem elabe ((x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (eq x a) (iff p q))))
  (iff (el a (ab x p)) q)
()
(ax_mp ((iff (sb a x p) q) (iff (el a (ab x p)) q))
  (ax_mp ((iff (el a (ab x p)) (sb a x p)) (im (iff (sb a x p) q) (iff (el a (ab x p)) q)))
    (bitr ((el a (ab x p)) (sb a x p) q))
    (elab2 (x a p)))
  (sbe (x a p q)
    e)))

(local theorem elabed ((G wff ()) (x nat) (a nat ()) (p wff (x)) (q wff ()))
  ((e (im (an G (eq x a)) (iff p q))))
  (im G (iff (el a (ab x p)) q))
()
(syl5bb (G (el a (ab x p)) (sb a x p) q)
  (elab2 (x a p))
  (sbed (G x a p q)
    e)))

(local theorem abid ((x nat) (p wff (x))) ()
  (iff (el x (ab x p)) p)
()
(ax_mp ((iff (sb x x p) p) (iff (el x (ab x p)) p))
  (ax_mp ((iff (el x (ab x p)) (sb x x p)) (im (iff (sb x x p) p) (iff (el x (ab x p)) p)))
    (bitr ((el x (ab x p)) (sb x x p) p))
    (elab2 (x x p)))
  (sbid (x p))))

(local theorem abid2 ((A set ()) (x nat)) ()
  (eqs (ab x (el x A)) A)
((y nat))
(eqri ((ab x (el x A)) A y)
  (elabe (x y (el x A) (el y A))
    (eleq1 (A x y)))))

(def subset ((A set ()) (B set ())) (wff ())
((x nat))
(al x (im (el x A) (el x B))))

(local theorem sseqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (iff (subset A1 B1) (subset A2 B2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (iff (subset A1 B1) (subset A2 B2)))
  (im
    _G
    (iff
      (:unfold subset (A1 B1) (x)
        (al x (im (el x A1) (el x B1))))
      (:unfold subset (A2 B2) (x)
        (al x (im (el x A2) (el x B2))))))
  (aleqd (_G x (im (el x A1) (el x B1)) (im (el x A2) (el x B2)))
    (imeqd (_G (el x A1) (el x A2) (el x B1) (el x B2))
      (eleqd (_G x x A1 A2)
        H1
        hA)
      (eleqd (_G x x B1 B2)
        H1
        hB))))))

(local theorem sseq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (iff (subset A1 B1) (subset A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (iff (subset A1 B1) (subset A2 B2)))
  (sseqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem sseq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (iff (subset A1 B) (subset A2 B)))
()
(sseqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem sseq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (iff (subset A1 B) (subset A2 B)))
()
(sseq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem sseq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (iff (subset A B1) (subset A B2)))
()
(sseqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem sseq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (iff (subset A B1) (subset A B2)))
()
(sseq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(local theorem dfss ((A set ()) (B set ()) (x nat)) ()
  (iff (subset A B) (al x (im (el x A) (el x B))))
((y nat))
(:conv (iff (subset A B) (al x (im (el x A) (el x B))))
  (iff
    (:unfold subset (A B) (y)
      (al y (im (el y A) (el y B))))
    (al x (im (el x A) (el x B))))
  (cbval (y x (im (el y A) (el y B)) (im (el x A) (el x B)))
    (imeqd ((eq y x) (el y A) (el x A) (el y B) (el x B))
      (eleq1 (A y x))
      (eleq1 (B y x))))))

(local theorem ssel ((A set ()) (B set ()) (a nat ())) ()
  (im (subset A B) (im (el a A) (el a B)))
((x nat))
(:conv (im (subset A B) (im (el a A) (el a B)))
  (im
    (:unfold subset (A B) (x)
      (al x (im (el x A) (el x B))))
    (im (el a A) (el a B)))
  (eale (x a (im (el x A) (el x B)) (im (el a A) (el a B)))
    (imeqd ((eq x a) (el x A) (el a A) (el x B) (el a B))
      (eleq1 (A x a))
      (eleq1 (B x a))))))

(local theorem sseld ((A set ()) (B set ()) (G wff ()) (a nat ()))
  ((h1 (im G (subset A B)))
   (h2 (im G (el a A))))
  (im G (el a B))
()
(sylc (G (subset A B) (el a A) (el a B))
  (ssel (A B a))
  h1
  h2))

(local theorem ssid ((A set ())) ()
  (subset A A)
((x nat))
(:conv (subset A A)
  (:unfold subset (A A) (x)
    (al x (im (el x A) (el x A))))
  (ax_gen (x (im (el x A) (el x A)))
    (id ((el x A))))))

(local theorem sstr ((A set ()) (B set ()) (C set ())) ()
  (im (subset A B) (im (subset B C) (subset A C)))
((x nat))
(exp ((subset A B) (subset B C) (subset A C))
  (:conv (im (an (subset A B) (subset B C)) (subset A C))
    (im
      (an (subset A B) (subset B C))
      (:unfold subset (A C) (x)
        (al x (im (el x A) (el x C)))))
    (iald (x (an (subset A B) (subset B C)) (im (el x A) (el x C)))
      (syld ((an (subset A B) (subset B C)) (el x A) (el x B) (el x C))
        (anwl ((subset A B) (subset B C) (im (el x A) (el x B)))
          (ssel (A B x)))
        (anwr ((subset A B) (subset B C) (im (el x B) (el x C)))
          (ssel (B C x))))))))

(local theorem eqss ((A set ()) (B set ())) ()
  (im (eqs A B) (subset A B))
()
(mpbii ((eqs A B) (subset A A) (subset A B))
  (ssid (A))
  (sseq2 (A A B))))

(local theorem eqssr ((A set ()) (B set ())) ()
  (im (eqs A B) (subset B A))
()
(mpbii ((eqs A B) (subset A A) (subset B A))
  (ssid (A))
  (sseq1 (A B A))))

(local theorem ssasym ((A set ()) (B set ())) ()
  (im (subset A B) (im (subset B A) (eqs A B)))
((x nat))
(:conv (im (subset A B) (im (subset B A) (eqs A B)))
  (im
    (:unfold subset (A B) (x)
      (al x (im (el x A) (el x B))))
    (im
      (:unfold subset (B A) (x)
        (al x (im (el x B) (el x A))))
      (:unfold eqs (A B) (x)
        (al x (iff (el x A) (el x B))))))
  (al2imi (x (im (el x A) (el x B)) (im (el x B) (el x A)) (iff (el x A) (el x B)))
    (:conv (im (im (el x A) (el x B)) (im (im (el x B) (el x A)) (iff (el x A) (el x B))))
      (im
        (im (el x A) (el x B))
        (im
          (im (el x B) (el x A))
          (:unfold iff ((el x A) (el x B)) ()
            (an (im (el x A) (el x B)) (im (el x B) (el x A))))))
      (ian ((im (el x A) (el x B)) (im (el x B) (el x A))))))))

(local theorem ssasymd ((A set ()) (B set ()) (G wff ()))
  ((h1 (im G (subset A B)))
   (h2 (im G (subset B A))))
  (im G (eqs A B))
()
(sylc (G (subset A B) (subset B A) (eqs A B))
  (ssasym (A B))
  h1
  h2))

(def Inter ((A set ()) (B set ())) (set ())
((x nat))
(ab x (an (el x A) (el x B))))

(local theorem ineqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (eqs (Inter A1 B1) (Inter A2 B2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (eqs (Inter A1 B1) (Inter A2 B2)))
  (im
    _G
    (eqs
      (:unfold Inter (A1 B1) (x)
        (ab x (an (el x A1) (el x B1))))
      (:unfold Inter (A2 B2) (x)
        (ab x (an (el x A2) (el x B2))))))
  (abeqd (_G x (an (el x A1) (el x B1)) (an (el x A2) (el x B2)))
    (aneqd (_G (el x A1) (el x A2) (el x B1) (el x B2))
      (eleqd (_G x x A1 A2)
        H1
        hA)
      (eleqd (_G x x B1 B2)
        H1
        hB))))))

(local theorem ineq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (eqs (Inter A1 B1) (Inter A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (eqs (Inter A1 B1) (Inter A2 B2)))
  (ineqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem ineq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (eqs (Inter A1 B) (Inter A2 B)))
()
(ineqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem ineq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (eqs (Inter A1 B) (Inter A2 B)))
()
(ineq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem ineq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (eqs (Inter A B1) (Inter A B2)))
()
(ineqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem ineq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (eqs (Inter A B1) (Inter A B2)))
()
(ineq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(local theorem elin ((A set ()) (B set ()) (a nat ())) ()
  (iff (el a (Inter A B)) (an (el a A) (el a B)))
((x nat))
(:conv (iff (el a (Inter A B)) (an (el a A) (el a B)))
  (iff
    (el
      a
      (:unfold Inter (A B) (x)
        (ab x (an (el x A) (el x B)))))
    (an (el a A) (el a B)))
  (elabe (x a (an (el x A) (el x B)) (an (el a A) (el a B)))
    (aneqd ((eq x a) (el x A) (el a A) (el x B) (el a B))
      (eleq1 (A x a))
      (eleq1 (B x a))))))

(local theorem incom ((A set ()) (B set ())) ()
  (eqs (Inter A B) (Inter B A))
((x nat))
(eqri ((Inter A B) (Inter B A) x)
  (ax_mp ((iff (an (el x A) (el x B)) (el x (Inter B A))) (iff (el x (Inter A B)) (el x (Inter B A))))
    (ax_mp ((iff (el x (Inter A B)) (an (el x A) (el x B))) (im (iff (an (el x A) (el x B)) (el x (Inter B A))) (iff (el x (Inter A B)) (el x (Inter B A)))))
      (bitr ((el x (Inter A B)) (an (el x A) (el x B)) (el x (Inter B A))))
      (elin (A B x)))
    (ax_mp ((iff (el x (Inter B A)) (an (el x B) (el x A))) (iff (an (el x A) (el x B)) (el x (Inter B A))))
      (ax_mp ((iff (an (el x A) (el x B)) (an (el x B) (el x A))) (im (iff (el x (Inter B A)) (an (el x B) (el x A))) (iff (an (el x A) (el x B)) (el x (Inter B A)))))
        (bitr4 ((an (el x A) (el x B)) (an (el x B) (el x A)) (el x (Inter B A))))
        (ancomb ((el x A) (el x B))))
      (elin (B A x))))))

(local theorem inss1 ((A set ()) (B set ())) ()
  (subset (Inter A B) A)
((x nat))
(:conv (subset (Inter A B) A)
  (:unfold subset ((Inter A B) A) (x)
    (al x (im (el x (Inter A B)) (el x A))))
  (ax_gen (x (im (el x (Inter A B)) (el x A)))
    (sylbi ((el x (Inter A B)) (an (el x A) (el x B)) (el x A))
      (elin (A B x))
      (anl ((el x A) (el x B)))))))

(local theorem inss2 ((A set ()) (B set ())) ()
  (subset (Inter A B) B)
()
(mpbi ((subset (Inter B A) B) (subset (Inter A B) B))
  (ax_mp ((eqs (Inter B A) (Inter A B)) (iff (subset (Inter B A) B) (subset (Inter A B) B)))
    (sseq1 ((Inter B A) (Inter A B) B))
    (incom (B A)))
  (inss1 (B A))))

(local theorem ssin ((A set ()) (B set ()) (C set ())) ()
  (iff (subset A (Inter B C)) (an (subset A B) (subset A C)))
((x nat))
(:let H1 (anr ((an (subset A B) (subset A C)) (el x A)))
(ibii ((subset A (Inter B C)) (an (subset A B) (subset A C)))
  (iand ((subset A (Inter B C)) (subset A B) (subset A C))
    (mpi ((subset A (Inter B C)) (subset (Inter B C) B) (subset A B))
      (inss1 (B C))
      (sstr (A (Inter B C) B)))
    (mpi ((subset A (Inter B C)) (subset (Inter B C) C) (subset A C))
      (inss2 (B C))
      (sstr (A (Inter B C) C))))
  (:conv (im (an (subset A B) (subset A C)) (subset A (Inter B C)))
    (im
      (an (subset A B) (subset A C))
      (:unfold subset (A (Inter B C)) (x)
        (al x (im (el x A) (el x (Inter B C))))))
    (iald (x (an (subset A B) (subset A C)) (im (el x A) (el x (Inter B C))))
      (exp ((an (subset A B) (subset A C)) (el x A) (el x (Inter B C)))
        (sylibr ((an (an (subset A B) (subset A C)) (el x A)) (an (el x B) (el x C)) (el x (Inter B C)))
          (elin (B C x))
          (iand ((an (an (subset A B) (subset A C)) (el x A)) (el x B) (el x C))
            (sseld (A B (an (an (subset A B) (subset A C)) (el x A)) x)
              (anll ((subset A B) (subset A C) (el x A)))
              H1)
            (sseld (A C (an (an (subset A B) (subset A C)) (el x A)) x)
              (anlr ((subset A B) (subset A C) (el x A)))
              H1)))))))))

(local theorem eqin1 ((A set ()) (B set ())) ()
  (iff (subset A B) (eqs (Inter A B) A))
()
(ibii ((subset A B) (eqs (Inter A B) A))
  (ssasymd ((Inter A B) A (subset A B))
    (a1i ((subset A B) (subset (Inter A B) A))
      (inss1 (A B)))
    (sylibr ((subset A B) (an (subset A A) (subset A B)) (subset A (Inter A B)))
      (ssin (A A B))
      (iand ((subset A B) (subset A A) (subset A B))
        (a1i ((subset A B) (subset A A))
          (ssid (A)))
        (id ((subset A B))))))
  (mpbii ((eqs (Inter A B) A) (subset (Inter A B) B) (subset A B))
    (inss2 (A B))
    (sseq1 ((Inter A B) A B)))))

(local theorem eqin2 ((A set ()) (B set ())) ()
  (iff (subset A B) (eqs (Inter B A) A))
()
(ax_mp ((iff (eqs (Inter A B) A) (eqs (Inter B A) A)) (iff (subset A B) (eqs (Inter B A) A)))
  (ax_mp ((iff (subset A B) (eqs (Inter A B) A)) (im (iff (eqs (Inter A B) A) (eqs (Inter B A) A)) (iff (subset A B) (eqs (Inter B A) A))))
    (bitr ((subset A B) (eqs (Inter A B) A) (eqs (Inter B A) A)))
    (eqin1 (A B)))
  (ax_mp ((eqs (Inter A B) (Inter B A)) (iff (eqs (Inter A B) A) (eqs (Inter B A) A)))
    (eqseq1 ((Inter A B) (Inter B A) A))
    (incom (A B)))))

(def Union ((A set ()) (B set ())) (set ())
((x nat))
(ab x (or (el x A) (el x B))))

(local theorem uneqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (eqs (Union A1 B1) (Union A2 B2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (eqs (Union A1 B1) (Union A2 B2)))
  (im
    _G
    (eqs
      (:unfold Union (A1 B1) (x)
        (ab x (or (el x A1) (el x B1))))
      (:unfold Union (A2 B2) (x)
        (ab x (or (el x A2) (el x B2))))))
  (abeqd (_G x (or (el x A1) (el x B1)) (or (el x A2) (el x B2)))
    (oreqd (_G (el x A1) (el x A2) (el x B1) (el x B2))
      (eleqd (_G x x A1 A2)
        H1
        hA)
      (eleqd (_G x x B1 B2)
        H1
        hB))))))

(local theorem uneq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (eqs (Union A1 B1) (Union A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (eqs (Union A1 B1) (Union A2 B2)))
  (uneqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem uneq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (eqs (Union A1 B) (Union A2 B)))
()
(uneqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem uneq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (eqs (Union A1 B) (Union A2 B)))
()
(uneq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem uneq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (eqs (Union A B1) (Union A B2)))
()
(uneqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem uneq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (eqs (Union A B1) (Union A B2)))
()
(uneq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(local theorem elun ((A set ()) (B set ()) (a nat ())) ()
  (iff (el a (Union A B)) (or (el a A) (el a B)))
((x nat))
(:conv (iff (el a (Union A B)) (or (el a A) (el a B)))
  (iff
    (el
      a
      (:unfold Union (A B) (x)
        (ab x (or (el x A) (el x B)))))
    (or (el a A) (el a B)))
  (elabe (x a (or (el x A) (el x B)) (or (el a A) (el a B)))
    (oreqd ((eq x a) (el x A) (el a A) (el x B) (el a B))
      (eleq1 (A x a))
      (eleq1 (B x a))))))

(local theorem uncom ((A set ()) (B set ())) ()
  (eqs (Union A B) (Union B A))
((x nat))
(eqri ((Union A B) (Union B A) x)
  (ax_mp ((iff (or (el x A) (el x B)) (el x (Union B A))) (iff (el x (Union A B)) (el x (Union B A))))
    (ax_mp ((iff (el x (Union A B)) (or (el x A) (el x B))) (im (iff (or (el x A) (el x B)) (el x (Union B A))) (iff (el x (Union A B)) (el x (Union B A)))))
      (bitr ((el x (Union A B)) (or (el x A) (el x B)) (el x (Union B A))))
      (elun (A B x)))
    (ax_mp ((iff (el x (Union B A)) (or (el x B) (el x A))) (iff (or (el x A) (el x B)) (el x (Union B A))))
      (ax_mp ((iff (or (el x A) (el x B)) (or (el x B) (el x A))) (im (iff (el x (Union B A)) (or (el x B) (el x A))) (iff (or (el x A) (el x B)) (el x (Union B A)))))
        (bitr4 ((or (el x A) (el x B)) (or (el x B) (el x A)) (el x (Union B A))))
        (orcomb ((el x A) (el x B))))
      (elun (B A x))))))

(local theorem ssun1 ((A set ()) (B set ())) ()
  (subset A (Union A B))
((x nat))
(:conv (subset A (Union A B))
  (:unfold subset (A (Union A B)) (x)
    (al x (im (el x A) (el x (Union A B)))))
  (ax_gen (x (im (el x A) (el x (Union A B))))
    (sylibr ((el x A) (or (el x A) (el x B)) (el x (Union A B)))
      (elun (A B x))
      (orl ((el x A) (el x B)))))))

(local theorem ssun2 ((A set ()) (B set ())) ()
  (subset B (Union A B))
()
(mpbi ((subset B (Union B A)) (subset B (Union A B)))
  (ax_mp ((eqs (Union B A) (Union A B)) (iff (subset B (Union B A)) (subset B (Union A B))))
    (sseq2 (B (Union B A) (Union A B)))
    (uncom (B A)))
  (ssun1 (B A))))

(local theorem unss ((A set ()) (B set ()) (C set ())) ()
  (iff (subset (Union A B) C) (an (subset A C) (subset B C)))
((x nat))
(ibii ((subset (Union A B) C) (an (subset A C) (subset B C)))
  (iand ((subset (Union A B) C) (subset A C) (subset B C))
    (ax_mp ((subset A (Union A B)) (im (subset (Union A B) C) (subset A C)))
      (sstr (A (Union A B) C))
      (ssun1 (A B)))
    (ax_mp ((subset B (Union A B)) (im (subset (Union A B) C) (subset B C)))
      (sstr (B (Union A B) C))
      (ssun2 (A B))))
  (:conv (im (an (subset A C) (subset B C)) (subset (Union A B) C))
    (im
      (an (subset A C) (subset B C))
      (:unfold subset ((Union A B) C) (x)
        (al x (im (el x (Union A B)) (el x C)))))
    (iald (x (an (subset A C) (subset B C)) (im (el x (Union A B)) (el x C)))
      (syl5bi ((an (subset A C) (subset B C)) (el x (Union A B)) (or (el x A) (el x B)) (el x C))
        (elun (A B x))
        (eord ((an (subset A C) (subset B C)) (el x A) (el x B) (el x C))
          (anwl ((subset A C) (subset B C) (im (el x A) (el x C)))
            (ssel (A C x)))
          (anwr ((subset A C) (subset B C) (im (el x B) (el x C)))
            (ssel (B C x)))))))))

(local theorem equn1 ((A set ()) (B set ())) ()
  (iff (subset A B) (eqs (Union A B) B))
()
(ibii ((subset A B) (eqs (Union A B) B))
  (ssasymd ((Union A B) B (subset A B))
    (sylibr ((subset A B) (an (subset A B) (subset B B)) (subset (Union A B) B))
      (unss (A B B))
      (iand ((subset A B) (subset A B) (subset B B))
        (id ((subset A B)))
        (a1i ((subset A B) (subset B B))
          (ssid (B)))))
    (a1i ((subset A B) (subset B (Union A B)))
      (ssun2 (A B))))
  (mpbii ((eqs (Union A B) B) (subset A (Union A B)) (subset A B))
    (ssun1 (A B))
    (sseq2 (A (Union A B) B)))))

(local theorem equn2 ((A set ()) (B set ())) ()
  (iff (subset A B) (eqs (Union B A) B))
()
(ax_mp ((iff (eqs (Union A B) B) (eqs (Union B A) B)) (iff (subset A B) (eqs (Union B A) B)))
  (ax_mp ((iff (subset A B) (eqs (Union A B) B)) (im (iff (eqs (Union A B) B) (eqs (Union B A) B)) (iff (subset A B) (eqs (Union B A) B))))
    (bitr ((subset A B) (eqs (Union A B) B) (eqs (Union B A) B)))
    (equn1 (A B)))
  (ax_mp ((eqs (Union A B) (Union B A)) (iff (eqs (Union A B) B) (eqs (Union B A) B)))
    (eqseq1 ((Union A B) (Union B A) B))
    (uncom (A B)))))

(def Univ () (set ())
((x nat))
(ab x (wtru)))

(local theorem elv ((a nat ())) ()
  (el a (Univ))
((x nat))
(mpbir ((wtru) (el a (Univ)))
  (:conv (iff (el a (Univ)) (wtru))
    (iff
      (el
        a
        (:unfold Univ () (x)
          (ab x (wtru))))
      (wtru))
    (elabe (x a (wtru) (wtru))
      (biidd ((eq x a) (wtru)))))
  (tru ())))

(local theorem inv1 ((A set ())) ()
  (eqs (Inter (Univ) A) A)
((x nat))
(eqri ((Inter (Univ) A) A x)
  (ax_mp ((iff (an (el x (Univ)) (el x A)) (el x A)) (iff (el x (Inter (Univ) A)) (el x A)))
    (ax_mp ((iff (el x (Inter (Univ) A)) (an (el x (Univ)) (el x A))) (im (iff (an (el x (Univ)) (el x A)) (el x A)) (iff (el x (Inter (Univ) A)) (el x A))))
      (bitr ((el x (Inter (Univ) A)) (an (el x (Univ)) (el x A)) (el x A)))
      (elin ((Univ) A x)))
    (ax_mp ((el x (Univ)) (iff (an (el x (Univ)) (el x A)) (el x A)))
      (bian1 ((el x (Univ)) (el x A)))
      (elv (x))))))

(local theorem inv2 ((A set ())) ()
  (eqs (Inter A (Univ)) A)
()
(ax_mp ((eqs (Inter (Univ) A) A) (eqs (Inter A (Univ)) A))
  (ax_mp ((eqs (Inter A (Univ)) (Inter (Univ) A)) (im (eqs (Inter (Univ) A) A) (eqs (Inter A (Univ)) A)))
    (eqstr ((Inter A (Univ)) (Inter (Univ) A) A))
    (incom (A (Univ))))
  (inv1 (A))))

(local def nfs ((x nat) (A set (x))) (wff ())
((y nat))
(al y (nf x (el y A))))

(local def nfn ((x nat) (a nat (x))) (wff ())
((y nat))
(al y (nf x (eq y a))))

(local theorem nfsbid ((G wff ()) (x nat) (A set (x)) (B set (x)))
  ((h (im G (eqs A B))))
  (im G (iff (nfs x A) (nfs x B)))
((y nat))
(:conv (im G (iff (nfs x A) (nfs x B)))
  (im
    G
    (iff
      (:unfold nfs (x A) (y)
        (al y (nf x (el y A))))
      (:unfold nfs (x B) (y)
        (al y (nf x (el y B))))))
  (aleqd (G y (nf x (el y A)) (nf x (el y B)))
    (nfeqd (G x (el y A) (el y B))
      (eleq2d (A B G y)
        h)))))

(local theorem nfnbid ((G wff ()) (x nat) (a nat (x)) (b nat (x)))
  ((h (im G (eq a b))))
  (im G (iff (nfn x a) (nfn x b)))
((y nat))
(:conv (im G (iff (nfn x a) (nfn x b)))
  (im
    G
    (iff
      (:unfold nfn (x a) (y)
        (al y (nf x (eq y a))))
      (:unfold nfn (x b) (y)
        (al y (nf x (eq y b))))))
  (aleqd (G y (nf x (eq y a)) (nf x (eq y b)))
    (nfeqd (G x (eq y a) (eq y b))
      (eqeq2d (G y a b)
        h)))))

(local theorem nfsv ((A set ()) (x nat)) ()
  (nfs x A)
((y nat))
(:conv (nfs x A)
  (:unfold nfs (x A) (y)
    (al y (nf x (el y A))))
  (ax_gen (y (nf x (el y A)))
    (nfv ((el y A) x)))))

(local theorem nfnv ((a nat ()) (x nat)) ()
  (nfn x a)
((y nat))
(:conv (nfn x a)
  (:unfold nfn (x a) (y)
    (al y (nf x (eq y a))))
  (ax_gen (y (nf x (eq y a)))
    (nfv ((eq y a) x)))))

(local theorem nfsri ((x nat) (y nat) (A set (x)))
  ((h (nf x (el y A))))
  (nfs x A)
()
(:conv (nfs x A)
  (:unfold nfs (x A) (y)
    (al y (nf x (el y A))))
  (ax_gen (y (nf x (el y A)))
    h)))

(local theorem nfnri ((x nat) (y nat) (a nat (x)))
  ((h (nf x (eq y a))))
  (nfn x a)
()
(:conv (nfn x a)
  (:unfold nfn (x a) (y)
    (al y (nf x (eq y a))))
  (ax_gen (y (nf x (eq y a)))
    h)))

(local theorem nfel2 ((x nat) (a nat ()) (A set (x)))
  ((h (nfs x A)))
  (nf x (el a A))
((y nat))
(ax_mp ((al y (nf x (el y A))) (nf x (el a A)))
  (eale (y a (nf x (el y A)) (nf x (el a A)))
    (nfeqd ((eq y a) x (el y A) (el a A))
      (eleq1 (A y a))))
  (:conv (al y (nf x (el y A)))
    (:sym (:unfold nfs (x A) (y)
      (al y (nf x (el y A)))))
    h)))

(local theorem nf_eq ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nf x (eq a b))
((y nat))
(nfx (x (eq a b) (ex y (an (eq y a) (eq y b))))
  (ax_mp ((iff (ex y (an (eq y a) (eq y b))) (eq a b)) (iff (eq a b) (ex y (an (eq y a) (eq y b)))))
    (bicom ((ex y (an (eq y a) (eq y b))) (eq a b)))
    (exeqe (y a (eq y b) (eq a b))
      (eqeq1 (y a b))))
  (nfex (x y (an (eq y a) (eq y b)))
    (nfan (x (eq y a) (eq y b))
      (ax_mp ((al y (nf x (eq y a))) (nf x (eq y a)))
        (eal (y (nf x (eq y a))))
        (:conv (al y (nf x (eq y a)))
          (:sym (:unfold nfn (x a) (y)
            (al y (nf x (eq y a)))))
          h1))
      (ax_mp ((al y (nf x (eq y b))) (nf x (eq y b)))
        (eal (y (nf x (eq y b))))
        (:conv (al y (nf x (eq y b)))
          (:sym (:unfold nfn (x b) (y)
            (al y (nf x (eq y b)))))
          h2))))))

(local theorem nfeq2 ((a nat ()) (x nat) (b nat (x)))
  ((h (nfn x b)))
  (nf x (eq a b))
()
(nf_eq (x a b)
  (nfnv (a x))
  h))

(local theorem nfsb1h ((x nat) (a nat (x)) (b wff (x)))
  ((h (nfn x a)))
  (nf x (sb a x b))
((z nat))
(:conv (nf x (sb a x b))
  (nf
    x
    (:unfold sb (a x b) (z)
      (al z (im (eq z a) (al x (im (eq x z) b))))))
  (nfal (x z (im (eq z a) (al x (im (eq x z) b))))
    (nfim (x (eq z a) (al x (im (eq x z) b)))
      (nfeq2 (z x a)
        h)
      (nfal1 (x (im (eq x z) b)))))))

(local theorem nfsbh ((x nat) (y nat) (a nat (x y)) (b wff (x y)))
  ((h1 (nfn x a))
   (h2 (nf x b)))
  (nf x (sb a y b))
((z nat))
(:conv (nf x (sb a y b))
  (nf
    x
    (:unfold sb (a y b) (z)
      (al z (im (eq z a) (al y (im (eq y z) b))))))
  (nfal (x z (im (eq z a) (al y (im (eq y z) b))))
    (nfim (x (eq z a) (al y (im (eq y z) b)))
      (nfeq2 (z x a)
        h1)
      (nfal (x y (im (eq y z) b))
        (nfim (x (eq y z) b)
          (nfv ((eq y z) x))
          h2))))))

(local theorem nfel ((x nat) (a nat (x)) (A set (x)))
  ((h1 (nfn x a))
   (h2 (nfs x A)))
  (nf x (el a A))
((y nat))
(nfx (x (el a A) (ex y (an (eq y a) (el y A))))
  (ax_mp ((iff (ex y (an (eq y a) (el y A))) (el a A)) (iff (el a A) (ex y (an (eq y a) (el y A)))))
    (bicom ((ex y (an (eq y a) (el y A))) (el a A)))
    (exeqe (y a (el y A) (el a A))
      (eleq1 (A y a))))
  (nfex (x y (an (eq y a) (el y A)))
    (nfan (x (eq y a) (el y A))
      (ax_mp ((al y (nf x (eq y a))) (nf x (eq y a)))
        (eal (y (nf x (eq y a))))
        (:conv (al y (nf x (eq y a)))
          (:sym (:unfold nfn (x a) (y)
            (al y (nf x (eq y a)))))
          h1))
      (ax_mp ((al y (nf x (el y A))) (nf x (el y A)))
        (eal (y (nf x (el y A))))
        (:conv (al y (nf x (el y A)))
          (:sym (:unfold nfs (x A) (y)
            (al y (nf x (el y A)))))
          h2))))))

(local theorem nfab1 ((x nat) (p wff (x))) ()
  (nfs x (ab x p))
((y nat))
(nfsri (x y (ab x p))
  (nfx (x (el y (ab x p)) (sb y x p))
    (elab (y x p))
    (nfsb1 (x y p)))))

(local theorem nfab ((x nat) (y nat) (p wff (x y)))
  ((h (nf x p)))
  (nfs x (ab y p))
((z nat))
(nfsri (x z (ab y p))
  (nfx (x (el z (ab y p)) (sb z y p))
    (elab (z y p))
    (nfsb (x y z p)
      h))))

(local theorem nfeqs ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nf x (eqs A B))
((y nat))
(:conv (nf x (eqs A B))
  (nf
    x
    (:unfold eqs (A B) (y)
      (al y (iff (el y A) (el y B)))))
  (nfal (x y (iff (el y A) (el y B)))
    (nfbi (x (el y A) (el y B))
      (nfel2 (x y A)
        h1)
      (nfel2 (x y B)
        h2)))))

(local theorem nfnx ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (eq a b))
   (h2 (nfn x b)))
  (nfn x a)
((y nat))
(nfnri (x y a)
  (nfx (x (eq y a) (eq y b))
    (ax_mp ((eq a b) (iff (eq y a) (eq y b)))
      (eqeq2 (y a b))
      h1)
    (nfeq2 (y x b)
      h2))))

(local theorem nfin ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nfs x (Inter A B))
((y nat))
(:conv (nfs x (Inter A B))
  (nfs
    x
    (:unfold Inter (A B) (y)
      (ab y (an (el y A) (el y B)))))
  (nfab (x y (an (el y A) (el y B)))
    (nfan (x (el y A) (el y B))
      (nfel2 (x y A)
        h1)
      (nfel2 (x y B)
        h2)))))

(local theorem nfss ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nf x (subset A B))
((y nat))
(:conv (nf x (subset A B))
  (nf
    x
    (:unfold subset (A B) (y)
      (al y (im (el y A) (el y B)))))
  (nfal (x y (im (el y A) (el y B)))
    (nfim (x (el y A) (el y B))
      (nfel2 (x y A)
        h1)
      (nfel2 (x y B)
        h2)))))

(local theorem abeqb ((x nat) (p wff (x)) (q wff (x))) ()
  (iff (al x (iff p q)) (eqs (ab x p) (ab x q)))
()
(ibii ((al x (iff p q)) (eqs (ab x p) (ab x q)))
  (abeq (x p q))
  (ialdh (x (eqs (ab x p) (ab x q)) (iff p q))
    (nfeqs (x (ab x p) (ab x q))
      (nfab1 (x p))
      (nfab1 (x q)))
    (sylib ((eqs (ab x p) (ab x q)) (iff (el x (ab x p)) (el x (ab x q))) (iff p q))
      (ax_mp ((iff (el x (ab x q)) q) (iff (iff (el x (ab x p)) (el x (ab x q))) (iff p q)))
        (ax_mp ((iff (el x (ab x p)) p) (im (iff (el x (ab x q)) q) (iff (iff (el x (ab x p)) (el x (ab x q))) (iff p q))))
          (bieq ((el x (ab x p)) p (el x (ab x q)) q))
          (abid (x p)))
        (abid (x q)))
      (eleq2 ((ab x p) (ab x q) x))))))

(local theorem eqab2d ((A set ()) (G wff ()) (x nat) (p wff (x)))
  ((h (im G (iff (el x A) p))))
  (im G (eqs A (ab x p)))
((y nat))
(sylib (G (al x (iff (el x A) p)) (eqs A (ab x p)))
  (:conv (iff (al x (iff (el x A) p)) (eqs A (ab x p)))
    (iff
      (al x (iff (el x A) p))
      (:unfold eqs (A (ab x p)) (y)
        (al y (iff (el y A) (el y (ab x p))))))
    (cbvalh (x y (iff (el x A) p) (iff (el y A) (el y (ab x p))))
      (nfv ((iff (el x A) p) y))
      (nfbi (x (el y A) (el y (ab x p)))
        (nfv ((el y A) x))
        (nfel2 (x y (ab x p))
          (nfab1 (x p))))
      (bieqd ((eq x y) (el x A) (el y A) p (el y (ab x p)))
        (eleq1 (A x y))
        (syl5bbr ((eq x y) p (el x (ab x p)) (el y (ab x p)))
          (abid (x p))
          (eleq1 ((ab x p) x y))))))
  (iald (x G (iff (el x A) p))
    h)))

(local theorem eqab2i ((A set ()) (x nat) (p wff (x)))
  ((h (iff (el x A) p)))
  (eqs A (ab x p))
()
(trud ((eqs A (ab x p)))
  (eqab2d (A (wtru) x p)
    (a1i ((wtru) (iff (el x A) p))
      h))))

(local theorem eqab1d ((A set ()) (G wff ()) (x nat) (p wff (x)))
  ((h (im G (iff p (el x A)))))
  (im G (eqs (ab x p) A))
()
(eqscomd (A (ab x p) G)
  (eqab2d (A G x p)
    (bicomd (G p (el x A))
      h))))

(local theorem eqab1i ((A set ()) (x nat) (p wff (x)))
  ((h (iff p (el x A))))
  (eqs (ab x p) A)
()
(trud ((eqs (ab x p) A))
  (eqab1d (A (wtru) x p)
    (a1i ((wtru) (iff p (el x A)))
      h))))

(local theorem ssab ((x nat) (p wff (x)) (q wff (x))) ()
  (iff (al x (im p q)) (subset (ab x p) (ab x q)))
((y nat))
(:conv (iff (al x (im p q)) (subset (ab x p) (ab x q)))
  (iff
    (al x (im p q))
    (:unfold subset ((ab x p) (ab x q)) (y)
      (al y (im (el y (ab x p)) (el y (ab x q))))))
  (cbvalh (x y (im p q) (im (el y (ab x p)) (el y (ab x q))))
    (nfv ((im p q) y))
    (nfim (x (el y (ab x p)) (el y (ab x q)))
      (nfel2 (x y (ab x p))
        (nfab1 (x p)))
      (nfel2 (x y (ab x q))
        (nfab1 (x q))))
    (imeqd ((eq x y) p (el y (ab x p)) q (el y (ab x q)))
      (syl6bbr ((eq x y) p (sb y x p) (el y (ab x p)))
        (elab (y x p))
        (sbq (x y p)))
      (syl6bbr ((eq x y) q (sb y x q) (el y (ab x q)))
        (elab (y x q))
        (sbq (x y q)))))))

(local theorem ssab1 ((A set ()) (x nat) (p wff (x))) ()
  (iff (al x (im p (el x A))) (subset (ab x p) A))
((y nat))
(:conv (iff (al x (im p (el x A))) (subset (ab x p) A))
  (iff
    (al x (im p (el x A)))
    (:unfold subset ((ab x p) A) (y)
      (al y (im (el y (ab x p)) (el y A)))))
  (cbvalh (x y (im p (el x A)) (im (el y (ab x p)) (el y A)))
    (nfv ((im p (el x A)) y))
    (nfim (x (el y (ab x p)) (el y A))
      (nfel2 (x y (ab x p))
        (nfab1 (x p)))
      (nfv ((el y A) x)))
    (imeqd ((eq x y) p (el y (ab x p)) (el x A) (el y A))
      (syl6bbr ((eq x y) p (sb y x p) (el y (ab x p)))
        (elab (y x p))
        (sbq (x y p)))
      (eleq1 (A x y))))))

(local theorem ssab2 ((A set ()) (x nat) (p wff (x))) ()
  (iff (al x (im (el x A) p)) (subset A (ab x p)))
((y nat))
(:conv (iff (al x (im (el x A) p)) (subset A (ab x p)))
  (iff
    (al x (im (el x A) p))
    (:unfold subset (A (ab x p)) (y)
      (al y (im (el y A) (el y (ab x p))))))
  (cbvalh (x y (im (el x A) p) (im (el y A) (el y (ab x p))))
    (nfv ((im (el x A) p) y))
    (nfim (x (el y A) (el y (ab x p)))
      (nfv ((el y A) x))
      (nfel2 (x y (ab x p))
        (nfab1 (x p))))
    (imeqd ((eq x y) (el x A) (el y A) p (el y (ab x p)))
      (eleq1 (A x y))
      (syl6bbr ((eq x y) p (sb y x p) (el y (ab x p)))
        (elab (y x p))
        (sbq (x y p)))))))

(def sbs ((a nat ()) (x nat) (A set (x))) (set ())
((y nat))
(ab y (sb a x (el y A))))

(local theorem elsbs ((x nat) (a nat (x)) (b nat ()) (A set (x))) ()
  (iff (el b (sbs a x A)) (sb a x (el b A)))
((y nat))
(:conv (iff (el b (sbs a x A)) (sb a x (el b A)))
  (iff
    (el
      b
      (:unfold sbs (a x A) (y)
        (ab y (sb a x (el y A)))))
    (sb a x (el b A)))
  (ax_mp ((iff (sb b y (sb a x (el y A))) (sb a x (el b A))) (iff (el b (ab y (sb a x (el y A)))) (sb a x (el b A))))
    (ax_mp ((iff (el b (ab y (sb a x (el y A)))) (sb b y (sb a x (el y A)))) (im (iff (sb b y (sb a x (el y A))) (sb a x (el b A))) (iff (el b (ab y (sb a x (el y A)))) (sb a x (el b A)))))
      (bitr ((el b (ab y (sb a x (el y A)))) (sb b y (sb a x (el y A))) (sb a x (el b A))))
      (elab (b y (sb a x (el y A)))))
    (sbe (y b (sb a x (el y A)) (sb a x (el b A)))
      (sbeq2d ((eq y b) x a (el y A) (el b A))
        (eleq1 (A y b)))))))

(local theorem sbsq ((x nat) (a nat ()) (A set (x))) ()
  (im (eq x a) (eqs A (sbs a x A)))
((y nat))
(eqrd (A (sbs a x A) (eq x a) y)
  (syl6bbr ((eq x a) (el y A) (sb a x (el y A)) (el y (sbs a x A)))
    (elsbs (x a y A))
    (sbq (x a (el y A))))))

(local theorem nfsbs1h ((x nat) (a nat (x)) (A set (x)))
  ((h (nfn x a)))
  (nfs x (sbs a x A))
((y nat))
(nfsri (x y (sbs a x A))
  (nfx (x (el y (sbs a x A)) (sb a x (el y A)))
    (elsbs (x a y A))
    (nfsb1h (x a (el y A))
      h))))

(local theorem nfsbs1 ((x nat) (a nat ()) (A set (x))) ()
  (nfs x (sbs a x A))
()
(nfsbs1h (x a A)
  (nfnv (a x))))

(local theorem nfsbsh ((x nat) (y nat) (a nat (x)) (A set (x y)))
  ((h1 (nfn x a))
   (h2 (nfs x A)))
  (nfs x (sbs a y A))
((z nat))
(nfsri (x z (sbs a y A))
  (nfx (x (el z (sbs a y A)) (sb a y (el z A)))
    (elsbs (y a z A))
    (nfsbh (x y a (el z A))
      h1
      (nfel2 (x z A)
        h2)))))

(local theorem nfsbs ((x nat) (y nat) (a nat ()) (A set (x y)))
  ((h (nfs x A)))
  (nfs x (sbs a y A))
()
(nfsbsh (x y a A)
  (nfnv (a x))
  h))

(local theorem sbseq1d ((x nat) (G wff ()) (a nat ()) (b nat ()) (A set (x)))
  ((h (im G (eq a b))))
  (im G (eqs (sbs a x A) (sbs b x A)))
((y nat))
(:conv (im G (eqs (sbs a x A) (sbs b x A)))
  (im
    G
    (eqs
      (:unfold sbs (a x A) (y)
        (ab y (sb a x (el y A))))
      (:unfold sbs (b x A) (y)
        (ab y (sb b x (el y A))))))
  (abeqd (G y (sb a x (el y A)) (sb b x (el y A)))
    (sbeq1d (x G a b (el y A))
      h))))

(local theorem sbseq2d ((x nat) (G wff ()) (a nat (x)) (A set (x)) (B set (x)))
  ((h (im G (eqs A B))))
  (im G (eqs (sbs a x A) (sbs a x B)))
((y nat))
(:conv (im G (eqs (sbs a x A) (sbs a x B)))
  (im
    G
    (eqs
      (:unfold sbs (a x A) (y)
        (ab y (sb a x (el y A))))
      (:unfold sbs (a x B) (y)
        (ab y (sb a x (el y B))))))
  (abeqd (G y (sb a x (el y A)) (sb a x (el y B)))
    (sbeq2d (G x a (el y A) (el y B))
      (eleq2d (A B G y)
        h)))))

(local theorem sbseqd ((G wff ()) (x nat) (a nat ()) (b nat ()) (A set (x)) (B set (x)))
  ((h1 (im G (eq a b)))
   (h2 (im G (eqs A B))))
  (im G (eqs (sbs a x A) (sbs b x B)))
()
(eqstrd ((sbs a x A) (sbs b x A) (sbs b x B) G)
  (sbseq1d (x G a b A)
    h1)
  (sbseq2d (x G b A B)
    h2)))

(local theorem sbseht ((x nat) (a nat ()) (A set (x)) (B set (x)))
  ((h (nfs x B)))
  (im (al x (im (eq x a) (eqs A B))) (eqs (sbs a x A) B))
((y nat))
(eqrd ((sbs a x A) B (al x (im (eq x a) (eqs A B))) y)
  (syl5bb ((al x (im (eq x a) (eqs A B))) (el y (sbs a x A)) (sb a x (el y A)) (el y B))
    (elsbs (x a y A))
    (syl ((al x (im (eq x a) (eqs A B))) (al x (im (eq x a) (iff (el y A) (el y B)))) (iff (sb a x (el y A)) (el y B)))
      (sbeht (x a (el y A) (el y B))
        (nfel2 (x y B)
          h))
      (alimi (x (im (eq x a) (eqs A B)) (im (eq x a) (iff (el y A) (el y B))))
        (ax_mp ((im (eqs A B) (iff (el y A) (el y B))) (im (im (eq x a) (eqs A B)) (im (eq x a) (iff (el y A) (el y B)))))
          (imim2 ((eq x a) (eqs A B) (iff (el y A) (el y B))))
          (eleq2 (A B y))))))))

(local theorem sbseh ((x nat) (a nat ()) (A set (x)) (B set (x)))
  ((h (nfs x B))
   (e (im (eq x a) (eqs A B))))
  (eqs (sbs a x A) B)
()
(ax_mp ((al x (im (eq x a) (eqs A B))) (eqs (sbs a x A) B))
  (sbseht (x a A B)
    h)
  (ax_gen (x (im (eq x a) (eqs A B)))
    e)))

(local theorem sbset ((x nat) (a nat ()) (A set (x)) (B set ())) ()
  (im (al x (im (eq x a) (eqs A B))) (eqs (sbs a x A) B))
()
(sbseht (x a A B)
  (nfsv (B x))))

(local theorem sbse ((x nat) (a nat ()) (A set (x)) (B set ()))
  ((e (im (eq x a) (eqs A B))))
  (eqs (sbs a x A) B)
()
(sbseh (x a A B)
  (nfsv (B x))
  e))

(local theorem sbsed ((G wff ()) (x nat) (a nat ()) (A set (x)) (B set ()))
  ((e (im (an G (eq x a)) (eqs A B))))
  (im G (eqs (sbs a x A) B))
()
(syl (G (al x (im (eq x a) (eqs A B))) (eqs (sbs a x A) B))
  (sbset (x a A B))
  (iald (x G (im (eq x a) (eqs A B)))
    (exp (G (eq x a) (eqs A B))
      e))))

(local theorem sbsid ((A set ()) (x nat) (a set (x))) ()
  (eqs (sbs x x A) A)
((y nat))
(eqri ((sbs x x A) A y)
  (ax_mp ((iff (sb x x (el y A)) (el y A)) (iff (el y (sbs x x A)) (el y A)))
    (ax_mp ((iff (el y (sbs x x A)) (sb x x (el y A))) (im (iff (sb x x (el y A)) (el y A)) (iff (el y (sbs x x A)) (el y A))))
      (bitr ((el y (sbs x x A)) (sb x x (el y A)) (el y A)))
      (elsbs (x x y A)))
    (sbid (x (el y A))))))

(local def eu ((x nat) (p wff (x))) (wff ())
((y nat))
(ex y (al x (iff p (eq x y)))))

(local theorem eueqd ((_G wff ()) (x nat) (p1 wff (x)) (p2 wff (x)))
  ((hp (im _G (iff p1 p2))))
  (im _G (iff (eu x p1) (eu x p2)))
((y nat))
(:conv (im _G (iff (eu x p1) (eu x p2)))
  (im
    _G
    (iff
      (:unfold eu (x p1) (y)
        (ex y (al x (iff p1 (eq x y)))))
      (:unfold eu (x p2) (y)
        (ex y (al x (iff p2 (eq x y)))))))
  (exeqd (_G y (al x (iff p1 (eq x y))) (al x (iff p2 (eq x y))))
    (aleqd (_G x (iff p1 (eq x y)) (iff p2 (eq x y)))
      (bieqd (_G p1 p2 (eq x y) (eq x y))
        hp
        (biidd (_G (eq x y))))))))

(term d0 () (nat ()))

(term suc ((n nat ())) (nat ()))

(def d1 () (nat ())
()
(suc (d0)))

(def d2 () (nat ())
()
(suc (d1)))

(def d3 () (nat ())
()
(suc (d2)))

(def d4 () (nat ())
()
(suc (d3)))

(def d5 () (nat ())
()
(suc (d4)))

(def d6 () (nat ())
()
(suc (d5)))

(def d7 () (nat ())
()
(suc (d6)))

(def d8 () (nat ())
()
(suc (d7)))

(def d9 () (nat ())
()
(suc (d8)))

(def d10 () (nat ())
()
(suc (d9)))

(axiom peano1 ((a nat ())) ()
  (ne (suc a) (d0)))

(axiom peano2 ((a nat ()) (b nat ())) ()
  (iff (eq (suc a) (suc b)) (eq a b)))

(axiom peano5 ((x nat) (ph wff (x))) ()
  (im (sb (d0) x ph) (im (al x (im ph (sb (suc x) x ph))) (al x ph))))

(local theorem d1ne0 () ()
  (ne (d1) (d0))
()
(:conv (ne (d1) (d0))
  (ne
    (:unfold d1 () ()
      (suc (d0)))
    (d0))
  (peano1 ((d0)))))

(local theorem d2ne0 () ()
  (ne (d2) (d0))
()
(:conv (ne (d2) (d0))
  (ne
    (:unfold d2 () ()
      (suc (d1)))
    (d0))
  (peano1 ((d1)))))

(local theorem suceq ((a nat ()) (b nat ())) ()
  (im (eq a b) (eq (suc a) (suc b)))
()
(ax_mp ((iff (eq (suc a) (suc b)) (eq a b)) (im (eq a b) (eq (suc a) (suc b))))
  (bi2 ((eq (suc a) (suc b)) (eq a b)))
  (peano2 (a b))))

(local theorem suceqd ((G wff ()) (a nat ()) (b nat ()))
  ((h (im G (eq a b))))
  (im G (eq (suc a) (suc b)))
()
(syl (G (eq a b) (eq (suc a) (suc b)))
  (suceq (a b))
  h))

(local theorem ind ((x nat) (y nat) (a nat (y)) (px wff (x)) (p0 wff (y)) (pa wff (y)) (py wff (y)) (ps wff (y)))
  ((h0 (im (eq x (d0)) (iff px p0)))
   (hy (im (eq x y) (iff px py)))
   (hs (im (eq x (suc y)) (iff px ps)))
   (ha (im (eq x a) (iff px pa)))
   (h1 p0)
   (h2 (im py ps)))
  pa
()
(ax_mp ((al x px) pa)
  (eale (x a px pa)
    ha)
  (ax_mp ((al x (im px (sb (suc x) x px))) (al x px))
    (ax_mp ((sb (d0) x px) (im (al x (im px (sb (suc x) x px))) (al x px)))
      (peano5 (x px))
      (mpbir (p0 (sb (d0) x px))
        (sbe (x (d0) px p0)
          h0)
        h1))
    (mpbir ((al y (im py (sb (suc y) x px))) (al x (im px (sb (suc x) x px))))
      (cbvalh (x y (im px (sb (suc x) x px)) (im py (sb (suc y) x px)))
        (nfv ((im px (sb (suc x) x px)) y))
        (nfim (x py (sb (suc y) x px))
          (nfv (py x))
          (nfsb1 (x (suc y) px)))
        (imeqd ((eq x y) px py (sb (suc x) x px) (sb (suc y) x px))
          hy
          (sbeq1d (x (eq x y) (suc x) (suc y) px)
            (suceq (x y)))))
      (ax_gen (y (im py (sb (suc y) x px)))
        (rsyl (py ps (sb (suc y) x px))
          h2
          (bi2i ((sb (suc y) x px) ps)
            (sbe (x (suc y) px ps)
              hs))))))))

(local theorem indd ((G wff ()) (x nat) (y nat) (a nat (y)) (px wff (x)) (p0 wff (y)) (pa wff (y)) (py wff (y)) (ps wff (y)))
  ((h0 (im (eq x (d0)) (iff px p0)))
   (hy (im (eq x y) (iff px py)))
   (hs (im (eq x (suc y)) (iff px ps)))
   (ha (im (eq x a) (iff px pa)))
   (h1 (im G p0))
   (h2 (im (an G py) ps)))
  (im G pa)
()
(ind (x y a (im G px) (im G p0) (im G pa) (im G py) (im G ps))
  (imeq2d ((eq x (d0)) G px p0)
    h0)
  (imeq2d ((eq x y) G px py)
    hy)
  (imeq2d ((eq x (suc y)) G px ps)
    hs)
  (imeq2d ((eq x a) G px pa)
    ha)
  h1
  (a2i (G py ps)
    (exp (G py ps)
      h2))))

(local theorem sucne0 ((a nat ()) (b nat ())) ()
  (im (eq a (suc b)) (ne a (d0)))
()
(mpbiri ((eq a (suc b)) (ne (suc b) (d0)) (ne a (d0)))
  (peano1 (b))
  (neeq1 (a (suc b) (d0)))))

(local theorem exsuc ((x nat) (a nat ())) ()
  (iff (ne a (d0)) (ex x (eq a (suc x))))
((y nat) (z nat))
(ibii ((ne a (d0)) (ex x (eq a (suc x))))
  (ind (y z a (im (ne y (d0)) (ex x (eq y (suc x)))) (im (not (eq (d0) (d0))) (ex x (eq (d0) (suc x)))) (im (ne a (d0)) (ex x (eq a (suc x)))) (im (not (eq z (d0))) (ex x (eq z (suc x)))) (im (not (eq (suc z) (d0))) (ex x (eq (suc z) (suc x)))))
    (imeqd ((eq y (d0)) (ne y (d0)) (not (eq (d0) (d0))) (ex x (eq y (suc x))) (ex x (eq (d0) (suc x))))
      (:conv (im (eq y (d0)) (iff (ne y (d0)) (not (eq (d0) (d0)))))
        (im
          (eq y (d0))
          (iff
            (:unfold ne (y (d0)) ()
              (not (eq y (d0))))
            (not (eq (d0) (d0)))))
        (noteqd ((eq y (d0)) (eq y (d0)) (eq (d0) (d0)))
          (eqeq1 (y (d0) (d0)))))
      (exeqd ((eq y (d0)) x (eq y (suc x)) (eq (d0) (suc x)))
        (eqeq1 (y (d0) (suc x)))))
    (imeqd ((eq y z) (ne y (d0)) (not (eq z (d0))) (ex x (eq y (suc x))) (ex x (eq z (suc x))))
      (:conv (im (eq y z) (iff (ne y (d0)) (not (eq z (d0)))))
        (im
          (eq y z)
          (iff
            (:unfold ne (y (d0)) ()
              (not (eq y (d0))))
            (not (eq z (d0)))))
        (noteqd ((eq y z) (eq y (d0)) (eq z (d0)))
          (eqeq1 (y z (d0)))))
      (exeqd ((eq y z) x (eq y (suc x)) (eq z (suc x)))
        (eqeq1 (y z (suc x)))))
    (imeqd ((eq y (suc z)) (ne y (d0)) (not (eq (suc z) (d0))) (ex x (eq y (suc x))) (ex x (eq (suc z) (suc x))))
      (:conv (im (eq y (suc z)) (iff (ne y (d0)) (not (eq (suc z) (d0)))))
        (im
          (eq y (suc z))
          (iff
            (:unfold ne (y (d0)) ()
              (not (eq y (d0))))
            (not (eq (suc z) (d0)))))
        (noteqd ((eq y (suc z)) (eq y (d0)) (eq (suc z) (d0)))
          (eqeq1 (y (suc z) (d0)))))
      (exeqd ((eq y (suc z)) x (eq y (suc x)) (eq (suc z) (suc x)))
        (eqeq1 (y (suc z) (suc x)))))
    (imeqd ((eq y a) (ne y (d0)) (ne a (d0)) (ex x (eq y (suc x))) (ex x (eq a (suc x))))
      (:conv (im (eq y a) (iff (ne y (d0)) (ne a (d0))))
        (im
          (eq y a)
          (iff
            (:unfold ne (y (d0)) ()
              (not (eq y (d0))))
            (:unfold ne (a (d0)) ()
              (not (eq a (d0))))))
        (noteqd ((eq y a) (eq y (d0)) (eq a (d0)))
          (eqeq1 (y a (d0)))))
      (exeqd ((eq y a) x (eq y (suc x)) (eq a (suc x)))
        (eqeq1 (y a (suc x)))))
    (ax_mp ((eq (d0) (d0)) (im (not (eq (d0) (d0))) (ex x (eq (d0) (suc x)))))
      (absurdr ((eq (d0) (d0)) (ex x (eq (d0) (suc x)))))
      (eqid ((d0))))
    (a1i ((im (not (eq z (d0))) (ex x (eq z (suc x)))) (im (not (eq (suc z) (d0))) (ex x (eq (suc z) (suc x)))))
      (a1i ((not (eq (suc z) (d0))) (ex x (eq (suc z) (suc x))))
        (ax_mp ((eq (suc z) (suc z)) (ex x (eq (suc z) (suc x))))
          (iexe (x z (eq (suc z) (suc x)) (eq (suc z) (suc z)))
            (eqeq2d ((eq x z) (suc z) (suc x) (suc z))
              (suceq (x z))))
          (eqid ((suc z)))))))
  (eex (x (eq a (suc x)) (ne a (d0)))
    (sucne0 (a x)))))

(term the ((A set ())) (nat ()))

(axiom theid ((x nat) (A set ()) (a nat ())) ()
  (im (eqs A (ab x (eq x a))) (eq (the A) a)))

(axiom the0 ((x nat) (y nat) (A set ())) ()
  (im (not (ex y (eqs A (ab x (eq x y))))) (eq (the A) (d0))))

(local theorem theeqd ((G wff ()) (A set ()) (B set ()))
  ((h (im G (eqs A B))))
  (im G (eq (the A) (the B)))
((x nat) (y nat))
(casesd (G (ex y (eqs A (ab x (eq x y)))) (eq (the A) (the B)))
  (eexda (y G (eqs A (ab x (eq x y))) (eq (the A) (the B)))
    (eqtr4d ((an G (eqs A (ab x (eq x y)))) (the A) y (the B))
      (anwr (G (eqs A (ab x (eq x y))) (eq (the A) y))
        (theid (x A y)))
      (syl ((an G (eqs A (ab x (eq x y)))) (eqs B (ab x (eq x y))) (eq (the B) y))
        (theid (x B y))
        (imp (G (eqs A (ab x (eq x y))) (eqs B (ab x (eq x y))))
          (syl (G (eqs A B) (im (eqs A (ab x (eq x y))) (eqs B (ab x (eq x y)))))
            (eqstr3 (B A (ab x (eq x y))))
            h)))))
  (exp (G (not (ex y (eqs A (ab x (eq x y))))) (eq (the A) (the B)))
    (eqtr4d ((an G (not (ex y (eqs A (ab x (eq x y)))))) (the A) (d0) (the B))
      (anwr (G (not (ex y (eqs A (ab x (eq x y))))) (eq (the A) (d0)))
        (the0 (x y A)))
      (syl ((an G (not (ex y (eqs A (ab x (eq x y)))))) (not (ex y (eqs B (ab x (eq x y))))) (eq (the B) (d0)))
        (the0 (x y B))
        (impbi (G (not (ex y (eqs A (ab x (eq x y))))) (not (ex y (eqs B (ab x (eq x y))))))
          (noteqd (G (ex y (eqs A (ab x (eq x y)))) (ex y (eqs B (ab x (eq x y)))))
            (exeqd (G y (eqs A (ab x (eq x y))) (eqs B (ab x (eq x y))))
              (eqseq1d (G A B (ab x (eq x y)))
                h)))))))))

(local theorem eqthed ((A set ()) (G wff ()) (a nat ()) (x nat))
  ((h (im G (iff (el x A) (eq x a)))))
  (im G (eq (the A) a))
((z nat))
(syl (G (eqs A (ab z (eq z a))) (eq (the A) a))
  (theid (z A a))
  (eqrd (A (ab z (eq z a)) G x)
    (syl6bbr (G (el x A) (eq x a) (el x (ab z (eq z a))))
      (elabe (z x (eq z a) (eq x a))
        (eqeq1 (z x a)))
      h))))

(local theorem eqtheabd ((G wff ()) (a nat ()) (x nat) (p wff (x)))
  ((h (im G (iff p (eq x a)))))
  (im G (eq (the (ab x p)) a))
((y nat))
(eqthed ((ab x p) G a y)
  (syl5bb (G (el y (ab x p)) (sb y x p) (eq y a))
    (elab (y x p))
    (rsyl (G (al x (iff p (eq x a))) (iff (sb y x p) (eq y a)))
      (iald (x G (iff p (eq x a)))
        h)
      (ealeh (x y (iff p (eq x a)) (iff (sb y x p) (eq y a)))
        (nfbi (x (sb y x p) (eq y a))
          (nfsb1 (x y p))
          (nfv ((eq y a) x)))
        (bieqd ((eq x y) p (sb y x p) (eq x a) (eq y a))
          (sbq (x y p))
          (eqeq1 (x y a))))))))

(local theorem eqthe0d ((A set ()) (G wff ()) (x nat))
  ((h (im G (im (el x A) (eq x (d0))))))
  (im G (eq (the A) (d0)))
((y nat))
(casesd (G (ex x (eqs A (ab y (eq y x)))) (eq (the A) (d0)))
  (eexda (x G (eqs A (ab y (eq y x))) (eq (the A) (d0)))
    (syl ((an G (eqs A (ab y (eq y x)))) (eqs A (ab y (eq y (d0)))) (eq (the A) (d0)))
      (theid (y A (d0)))
      (eqstrd (A (ab y (eq y x)) (ab y (eq y (d0))) (an G (eqs A (ab y (eq y x)))))
        (anr (G (eqs A (ab y (eq y x)))))
        (syl ((an G (eqs A (ab y (eq y x)))) (eq x (d0)) (eqs (ab y (eq y x)) (ab y (eq y (d0)))))
          (abeqd ((eq x (d0)) y (eq y x) (eq y (d0)))
            (eqeq2 (y x (d0))))
          (mpd ((an G (eqs A (ab y (eq y x)))) (el x A) (eq x (d0)))
            (mpbiri ((an G (eqs A (ab y (eq y x)))) (el x (ab y (eq y x))) (el x A))
              (mpbir ((eq x x) (el x (ab y (eq y x))))
                (elabe (y x (eq y x) (eq x x))
                  (eqeq1 (y x x)))
                (eqid (x)))
              (anwr (G (eqs A (ab y (eq y x))) (iff (el x A) (el x (ab y (eq y x)))))
                (eleq2 (A (ab y (eq y x)) x))))
            (anwl (G (eqs A (ab y (eq y x))) (im (el x A) (eq x (d0))))
              h))))))
  (a1i (G (im (not (ex x (eqs A (ab y (eq y x))))) (eq (the A) (d0))))
    (the0 (y x A)))))

(local theorem eqthe0abd ((G wff ()) (x nat) (p wff (x)))
  ((h (im G (im p (eq x (d0))))))
  (im G (eq (the (ab x p)) (d0)))
((y nat))
(eqthe0d ((ab x p) G y)
  (syl5bi (G (el y (ab x p)) (sb y x p) (eq y (d0)))
    (elab (y x p))
    (rsyl (G (al x (im p (eq x (d0)))) (im (sb y x p) (eq y (d0))))
      (iald (x G (im p (eq x (d0))))
        h)
      (ealeh (x y (im p (eq x (d0))) (im (sb y x p) (eq y (d0))))
        (nfim (x (sb y x p) (eq y (d0)))
          (nfsb1 (x y p))
          (nfv ((eq y (d0)) x)))
        (imeqd ((eq x y) p (sb y x p) (eq x (d0)) (eq y (d0)))
          (sbq (x y p))
          (eqeq1 (x y (d0)))))))))

(local theorem eqtheb ((A set ()) (a nat ()) (x nat) (y nat)) ()
  (iff (eq a (the A)) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
()
(:let H1 (the0 (x y A))
(ibii ((eq a (the A)) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
  (casesda ((eq a (the A)) (ex y (eqs A (ab x (eq x y)))) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
    (imp ((eq a (the A)) (ex y (eqs A (ab x (eq x y)))) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
      (eexdh (y (eq a (the A)) (eqs A (ab x (eq x y))) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
        (nfv ((eq a (the A)) y))
        (nfor (y (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))))
          (nfv ((eqs A (ab x (eq x a))) y))
          (nfan (y (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))
            (nfnot (y (ex y (eqs A (ab x (eq x y)))))
              (nfex1 (y (eqs A (ab x (eq x y))))))
            (nfv ((eq a (d0)) y))))
        (exp ((eq a (the A)) (eqs A (ab x (eq x y))) (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))))
          (orld ((an (eq a (the A)) (eqs A (ab x (eq x y)))) (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))))
            (mpbird ((an (eq a (the A)) (eqs A (ab x (eq x y)))) (eqs A (ab x (eq x y))) (eqs A (ab x (eq x a))))
              (syl ((an (eq a (the A)) (eqs A (ab x (eq x y)))) (eq a y) (iff (eqs A (ab x (eq x a))) (eqs A (ab x (eq x y)))))
                (eqseq2d ((eq a y) A (ab x (eq x a)) (ab x (eq x y)))
                  (abeqd ((eq a y) x (eq x a) (eq x y))
                    (eqeq2 (x a y))))
                (eqtrd ((an (eq a (the A)) (eqs A (ab x (eq x y)))) a (the A) y)
                  (anl ((eq a (the A)) (eqs A (ab x (eq x y)))))
                  (anwr ((eq a (the A)) (eqs A (ab x (eq x y))) (eq (the A) y))
                    (theid (x A y)))))
              (anr ((eq a (the A)) (eqs A (ab x (eq x y))))))))))
    (orrd ((an (eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))) (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))))
      (iand ((an (eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))) (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))
        (anr ((eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))))
        (eqtrd ((an (eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))) a (the A) (d0))
          (anl ((eq a (the A)) (not (ex y (eqs A (ab x (eq x y)))))))
          (anwr ((eq a (the A)) (not (ex y (eqs A (ab x (eq x y))))) (eq (the A) (d0)))
            H1)))))
  (ax_mp ((im (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))) (eq a (the A))) (im (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))) (eq a (the A))))
    (ax_mp ((im (eqs A (ab x (eq x a))) (eq a (the A))) (im (im (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))) (eq a (the A))) (im (or (eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)))) (eq a (the A)))))
      (eor ((eqs A (ab x (eq x a))) (an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))) (eq a (the A))))
      (eqcomd ((eqs A (ab x (eq x a))) (the A) a)
        (theid (x A a))))
    (eqtrd ((an (not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))) a (d0) (the A))
      (anr ((not (ex y (eqs A (ab x (eq x y))))) (eq a (d0))))
      (anwl ((not (ex y (eqs A (ab x (eq x y))))) (eq a (d0)) (eq (d0) (the A)))
        (eqcomd ((not (ex y (eqs A (ab x (eq x y))))) (the A) (d0))
          H1)))))))

(local theorem nfthe ((x nat) (A set (x)))
  ((h (nfs x A)))
  (nfn x (the A))
((u nat) (v nat) (y nat))
(nfnri (x y (the A))
  (nfx (x (eq y (the A)) (or (eqs A (ab u (eq u y))) (an (not (ex v (eqs A (ab u (eq u v))))) (eq y (d0)))))
    (eqtheb (A y u v))
    (nfor (x (eqs A (ab u (eq u y))) (an (not (ex v (eqs A (ab u (eq u v))))) (eq y (d0))))
      (nfeqs (x A (ab u (eq u y)))
        h
        (nfsv ((ab u (eq u y)) x)))
      (nfan (x (not (ex v (eqs A (ab u (eq u v))))) (eq y (d0)))
        (nfnot (x (ex v (eqs A (ab u (eq u v)))))
          (nfex (x v (eqs A (ab u (eq u v))))
            (nfeqs (x A (ab u (eq u v)))
              h
              (nfsv ((ab u (eq u v)) x)))))
        (nfv ((eq y (d0)) x)))))))

(local def theo ((A set ())) (nat ())
((x nat) (y nat))
(the (ab x (ex y (an (eq x (suc y)) (el y A))))))

(local theorem theoeqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eq (theo A1) (theo A2)))
((x nat) (y nat))
(:conv (im _G (eq (theo A1) (theo A2)))
  (im
    _G
    (eq
      (:unfold theo (A1) (x y)
        (the (ab x (ex y (an (eq x (suc y)) (el y A1))))))
      (:unfold theo (A2) (x y)
        (the (ab x (ex y (an (eq x (suc y)) (el y A2))))))))
  (theeqd (_G (ab x (ex y (an (eq x (suc y)) (el y A1)))) (ab x (ex y (an (eq x (suc y)) (el y A2)))))
    (abeqd (_G x (ex y (an (eq x (suc y)) (el y A1))) (ex y (an (eq x (suc y)) (el y A2))))
      (exeqd (_G y (an (eq x (suc y)) (el y A1)) (an (eq x (suc y)) (el y A2)))
        (aneqd (_G (eq x (suc y)) (eq x (suc y)) (el y A1) (el y A2))
          (biidd (_G (eq x (suc y))))
          (eleqd (_G y y A1 A2)
            (eqidd (_G y))
            hA)))))))

(local theorem theoeq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eq (theo A1) (theo A2)))
()
(theoeqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem theoid1 ((x nat) (A set ()) (a nat ())) ()
  (im (eqs A (ab x (eq x a))) (eq (theo A) (suc a)))
((x1 nat) (x2 nat))
(:conv (im (eqs A (ab x (eq x a))) (eq (theo A) (suc a)))
  (im
    (eqs A (ab x (eq x a)))
    (eq
      (:unfold theo (A) (x1 x2)
        (the (ab x1 (ex x2 (an (eq x1 (suc x2)) (el x2 A))))))
      (suc a)))
  (eqtheabd ((eqs A (ab x (eq x a))) (suc a) x1 (ex x2 (an (eq x1 (suc x2)) (el x2 A))))
    (ibid ((eqs A (ab x (eq x a))) (ex x2 (an (eq x1 (suc x2)) (el x2 A))) (eq x1 (suc a)))
      (eexda (x2 (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A)) (eq x1 (suc a)))
        (eqtrd ((an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) x1 (suc x2) (suc a))
          (anrl ((eqs A (ab x (eq x a))) (eq x1 (suc x2)) (el x2 A)))
          (suceqd ((an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) x2 a)
            (sylib ((an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) (el x2 (ab x (eq x a))) (eq x2 a))
              (elabe (x x2 (eq x a) (eq x2 a))
                (eqeq1 (x x2 a)))
              (mpbid ((an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) (el x2 A) (el x2 (ab x (eq x a))))
                (eleq2d (A (ab x (eq x a)) (an (eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A))) x2)
                  (anl ((eqs A (ab x (eq x a))) (an (eq x1 (suc x2)) (el x2 A)))))
                (anrr ((eqs A (ab x (eq x a))) (eq x1 (suc x2)) (el x2 A))))))))
      (exp ((eqs A (ab x (eq x a))) (eq x1 (suc a)) (ex x2 (an (eq x1 (suc x2)) (el x2 A))))
        (sylan ((an (eqs A (ab x (eq x a))) (eq x1 (suc a))) (eq x1 (suc a)) (el a A) (ex x2 (an (eq x1 (suc x2)) (el x2 A))))
          (iexe (x2 a (an (eq x1 (suc x2)) (el x2 A)) (an (eq x1 (suc a)) (el a A)))
            (aneqd ((eq x2 a) (eq x1 (suc x2)) (eq x1 (suc a)) (el x2 A) (el a A))
              (eqeq2d ((eq x2 a) x1 (suc x2) (suc a))
                (suceq (x2 a)))
              (eleq1 (A x2 a))))
          (anr ((eqs A (ab x (eq x a))) (eq x1 (suc a))))
          (mpbiri ((an (eqs A (ab x (eq x a))) (eq x1 (suc a))) (el a (ab x (eq x a))) (el a A))
            (mpbir ((eq a a) (el a (ab x (eq x a))))
              (elabe (x a (eq x a) (eq a a))
                (eqeq1 (x a a)))
              (eqid (a)))
            (eleq2d (A (ab x (eq x a)) (an (eqs A (ab x (eq x a))) (eq x1 (suc a))) a)
              (anl ((eqs A (ab x (eq x a))) (eq x1 (suc a))))))))))))

(local theorem theo01 ((y nat) (x nat) (A set ())) ()
  (im (not (ex y (eqs A (ab x (eq x y))))) (eq (theo A) (d0)))
((n nat) (x1 nat) (x2 nat) (x3 nat))
(:let H1 (anwll ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A)) (el x A) (al x2 (im (el x2 A) (eq (suc x2) n))))
  (rsyl ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (al x3 (al x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)))) (al x2 (im (el x2 A) (eq (suc x2) n))))
    (alimi (x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)) (al x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))))
      (sylib ((iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)) (im (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)) (al x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))))
        (eexb (x2 (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)))
        (bi1 ((ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)))))
    (rsyl ((al x3 (al x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)))) (al x2 (al x3 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)))) (al x2 (im (el x2 A) (eq (suc x2) n))))
      (ax_11 (x3 x2 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))))
      (alimi (x2 (al x3 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))) (im (el x2 A) (eq (suc x2) n)))
        (syl ((al x3 (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n))) (im (an (eq (suc x2) (suc x2)) (el x2 A)) (eq (suc x2) n)) (im (el x2 A) (eq (suc x2) n)))
          (imim1i ((el x2 A) (an (eq (suc x2) (suc x2)) (el x2 A)) (eq (suc x2) n))
            (ax_mp ((eq (suc x2) (suc x2)) (im (el x2 A) (an (eq (suc x2) (suc x2)) (el x2 A))))
              (ian ((eq (suc x2) (suc x2)) (el x2 A)))
              (eqid ((suc x2)))))
          (eale (x3 (suc x2) (im (an (eq x3 (suc x2)) (el x2 A)) (eq x3 n)) (im (an (eq (suc x2) (suc x2)) (el x2 A)) (eq (suc x2) n)))
            (imeqd ((eq x3 (suc x2)) (an (eq x3 (suc x2)) (el x2 A)) (an (eq (suc x2) (suc x2)) (el x2 A)) (eq x3 n) (eq (suc x2) n))
              (aneq1d ((eq x3 (suc x2)) (eq x3 (suc x2)) (eq (suc x2) (suc x2)) (el x2 A))
                (eqeq1 (x3 (suc x2) (suc x2))))
              (eqeq1 (x3 (suc x2) n)))))))))
(:let H2 (anrr ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eq n (suc y)) (el y A)))
(syl ((not (ex y (eqs A (ab x (eq x y))))) (not (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))))) (eq (theo A) (d0)))
  (:conv (im (not (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))))) (eq (theo A) (d0)))
    (im
      (not (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))
      (eq
        (:unfold theo (A) (x3 x2)
          (the (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A))))))
        (d0)))
    (the0 (x1 n (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))))))
  (ax_mp ((im (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))) (ex y (eqs A (ab x (eq x y))))) (im (not (ex y (eqs A (ab x (eq x y))))) (not (ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))))
    (con3 ((ex n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))) (ex y (eqs A (ab x (eq x y))))))
    (eex (n (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))) (ex y (eqs A (ab x (eq x y)))))
      (sylbir ((eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))) (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (ex y (eqs A (ab x (eq x y)))))
        (ax_mp ((iff (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))) (iff (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))
          (ax_mp ((iff (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n)))) (im (iff (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))) (iff (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n))))))
            (bitr ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))
            (abeqb (x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))))
          (ax_mp ((eqs (ab x3 (eq x3 n)) (ab x1 (eq x1 n))) (iff (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n))) (eqs (ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x1 (eq x1 n)))))
            (eqseq2 ((ab x3 (ex x2 (an (eq x3 (suc x2)) (el x2 A)))) (ab x3 (eq x3 n)) (ab x1 (eq x1 n))))
            (cbvab (x3 x1 (eq x3 n) (eq x1 n))
              (eqeq1 (x3 x1 n)))))
        (mpd ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (ex y (an (eq n (suc y)) (el y A))) (ex y (eqs A (ab x (eq x y)))))
          (rsyl ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (iff (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n)) (ex y (an (eq n (suc y)) (el y A))))
            (eale (x3 n (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n)) (iff (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n)))
              (bieqd ((eq x3 n) (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq x3 n) (eq n n))
                (exeqd ((eq x3 n) x2 (an (eq x3 (suc x2)) (el x2 A)) (an (eq n (suc x2)) (el x2 A)))
                  (aneq1d ((eq x3 n) (eq x3 (suc x2)) (eq n (suc x2)) (el x2 A))
                    (eqeq1 (x3 n (suc x2)))))
                (eqeq1 (x3 n n))))
            (sylibr ((iff (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n)) (ex x2 (an (eq n (suc x2)) (el x2 A))) (ex y (an (eq n (suc y)) (el y A))))
              (cbvex (y x2 (an (eq n (suc y)) (el y A)) (an (eq n (suc x2)) (el x2 A)))
                (aneqd ((eq y x2) (eq n (suc y)) (eq n (suc x2)) (el y A) (el x2 A))
                  (eqeq2d ((eq y x2) n (suc y) (suc x2))
                    (suceq (y x2)))
                  (eleq1 (A y x2))))
              (mpi ((iff (ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n)) (eq n n) (ex x2 (an (eq n (suc x2)) (el x2 A))))
                (eqid (n))
                (bi2 ((ex x2 (an (eq n (suc x2)) (el x2 A))) (eq n n))))))
          (eximd (y (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A)) (eqs A (ab x (eq x y))))
            (exp ((al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A)) (eqs A (ab x (eq x y))))
              (eqab2d (A (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) x (eq x y))
                (ibida ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A) (eq x y))
                  (sylib ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A)) (eq (suc x) (suc y)) (eq x y))
                    (peano2 (x y))
                    (eqtr4d ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A)) (suc x) n (suc y))
                      (sylc ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A)) (al x2 (im (el x2 A) (eq (suc x2) n))) (el x A) (eq (suc x) n))
                        (eale (x2 x (im (el x2 A) (eq (suc x2) n)) (im (el x A) (eq (suc x) n)))
                          (imeqd ((eq x2 x) (el x2 A) (el x A) (eq (suc x2) n) (eq (suc x) n))
                            (eleq1 (A x2 x))
                            (eqeq1d ((eq x2 x) (suc x2) (suc x) n)
                              (suceq (x2 x)))))
                        H1
                        (anr ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A))))
                      (sylc ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A)) (al x2 (im (el x2 A) (eq (suc x2) n))) (el y A) (eq (suc y) n))
                        (eale (x2 y (im (el x2 A) (eq (suc x2) n)) (im (el y A) (eq (suc y) n)))
                          (imeqd ((eq x2 y) (el x2 A) (el y A) (eq (suc x2) n) (eq (suc y) n))
                            (eleq1 (A x2 y))
                            (eqeq1d ((eq x2 y) (suc x2) (suc y) n)
                              (suceq (x2 y)))))
                        H1
                        (anwl ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (el x A) (el y A))
                          H2))))
                  (mpbird ((an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (eq x y)) (el y A) (el x A))
                    (eleq1d (A (an (an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (eq x y)) x y)
                      (anr ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (eq x y))))
                    (anwl ((an (al x3 (iff (ex x2 (an (eq x3 (suc x2)) (el x2 A))) (eq x3 n))) (an (eq n (suc y)) (el y A))) (eq x y) (el y A))
                      H2))))))))))))))

(local theorem theoid ((x nat) (A set ()) (a nat ())) ()
  (iff (eqs A (ab x (eq x a))) (eq (theo A) (suc a)))
((x1 nat))
(ibii ((eqs A (ab x (eq x a))) (eq (theo A) (suc a)))
  (theoid1 (x A a))
  (mpd ((eq (theo A) (suc a)) (ex x1 (eqs A (ab x (eq x x1)))) (eqs A (ab x (eq x a))))
    (rsyl ((eq (theo A) (suc a)) (ne (theo A) (d0)) (ex x1 (eqs A (ab x (eq x x1)))))
      (sucne0 ((theo A) a))
      (:conv (im (ne (theo A) (d0)) (ex x1 (eqs A (ab x (eq x x1)))))
        (im
          (:unfold ne ((theo A) (d0)) ()
            (not (eq (theo A) (d0))))
          (ex x1 (eqs A (ab x (eq x x1)))))
        (ax_mp ((im (not (ex x1 (eqs A (ab x (eq x x1))))) (eq (theo A) (d0))) (im (not (eq (theo A) (d0))) (ex x1 (eqs A (ab x (eq x x1))))))
          (con1 ((ex x1 (eqs A (ab x (eq x x1)))) (eq (theo A) (d0))))
          (theo01 (x1 x A)))))
    (eexda (x1 (eq (theo A) (suc a)) (eqs A (ab x (eq x x1))) (eqs A (ab x (eq x a))))
      (eqstrd (A (ab x (eq x x1)) (ab x (eq x a)) (an (eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))))
        (anr ((eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))))
        (syl ((an (eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))) (eq x1 a) (eqs (ab x (eq x x1)) (ab x (eq x a))))
          (abeqd ((eq x1 a) x (eq x x1) (eq x a))
            (eqeq2 (x x1 a)))
          (sylib ((an (eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))) (eq (suc x1) (suc a)) (eq x1 a))
            (peano2 (x1 a))
            (eqtr3d ((an (eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))) (suc x1) (theo A) (suc a))
              (anwr ((eq (theo A) (suc a)) (eqs A (ab x (eq x x1))) (eq (theo A) (suc x1)))
                (theoid1 (x A x1)))
              (anl ((eq (theo A) (suc a)) (eqs A (ab x (eq x x1)))))))))))))

(local theorem theo0 ((x nat) (y nat) (A set ())) ()
  (iff (not (ex y (eqs A (ab x (eq x y))))) (eq (theo A) (d0)))
()
(ibii ((not (ex y (eqs A (ab x (eq x y))))) (eq (theo A) (d0)))
  (theo01 (y x A))
  (ax_mp ((im (ex y (eqs A (ab x (eq x y)))) (not (eq (theo A) (d0)))) (im (eq (theo A) (d0)) (not (ex y (eqs A (ab x (eq x y)))))))
    (con2 ((ex y (eqs A (ab x (eq x y)))) (eq (theo A) (d0))))
    (:conv (im (ex y (eqs A (ab x (eq x y)))) (not (eq (theo A) (d0))))
      (im
        (ex y (eqs A (ab x (eq x y))))
        (:sym (:unfold ne ((theo A) (d0)) ()
          (not (eq (theo A) (d0))))))
      (eex (y (eqs A (ab x (eq x y))) (ne (theo A) (d0)))
        (syl ((eqs A (ab x (eq x y))) (eq (theo A) (suc y)) (ne (theo A) (d0)))
          (sucne0 ((theo A) y))
          (theoid1 (x A y))))))))

(local def subsn ((A set ())) (wff ())
((x nat) (y nat))
(al x (al y (im (el x A) (im (el y A) (eq x y))))))

(local theorem subsneqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (iff (subsn A1) (subsn A2)))
((x nat) (y nat))
(:conv (im _G (iff (subsn A1) (subsn A2)))
  (im
    _G
    (iff
      (:unfold subsn (A1) (x y)
        (al x (al y (im (el x A1) (im (el y A1) (eq x y))))))
      (:unfold subsn (A2) (x y)
        (al x (al y (im (el x A2) (im (el y A2) (eq x y))))))))
  (aleqd (_G x (al y (im (el x A1) (im (el y A1) (eq x y)))) (al y (im (el x A2) (im (el y A2) (eq x y)))))
    (aleqd (_G y (im (el x A1) (im (el y A1) (eq x y))) (im (el x A2) (im (el y A2) (eq x y))))
      (imeqd (_G (el x A1) (el x A2) (im (el y A1) (eq x y)) (im (el y A2) (eq x y)))
        (eleqd (_G x x A1 A2)
          (eqidd (_G x))
          hA)
        (imeqd (_G (el y A1) (el y A2) (eq x y) (eq x y))
          (eleqd (_G y y A1 A2)
            (eqidd (_G y))
            hA)
          (biidd (_G (eq x y)))))))))

(local theorem subsneq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (iff (subsn A1) (subsn A2)))
()
(subsneqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem subsni ((A set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h (im G (subsn A)))
   (h1 (im G (el a A)))
   (h2 (im G (el b A))))
  (im G (eq a b))
((x nat) (y nat))
(:let H1 (anlr (G (eq x a) (eq y b)))
(:let H2 (anr ((an G (eq x a)) (eq y b)))
(mpd (G (el b A) (eq a b))
  h2
  (mpd (G (el a A) (im (el b A) (eq a b)))
    h1
    (mpd (G (subsn A) (im (el a A) (im (el b A) (eq a b))))
      h
      (:conv (im G (im (subsn A) (im (el a A) (im (el b A) (eq a b)))))
        (im
          G
          (im
            (:unfold subsn (A) (x y)
              (al x (al y (im (el x A) (im (el y A) (eq x y))))))
            (im (el a A) (im (el b A) (eq a b)))))
        (ealde ((im (el a A) (im (el b A) (eq a b))) x G a (al y (im (el x A) (im (el y A) (eq x y)))))
          (ealde ((im (el a A) (im (el b A) (eq a b))) y (an G (eq x a)) b (im (el x A) (im (el y A) (eq x y))))
            (bi1d ((an (an G (eq x a)) (eq y b)) (im (el x A) (im (el y A) (eq x y))) (im (el a A) (im (el b A) (eq a b))))
              (imeqd ((an (an G (eq x a)) (eq y b)) (el x A) (el a A) (im (el y A) (eq x y)) (im (el b A) (eq a b)))
                (eleq1d (A (an (an G (eq x a)) (eq y b)) x a)
                  H1)
                (imeqd ((an (an G (eq x a)) (eq y b)) (el y A) (el b A) (eq x y) (eq a b))
                  (eleq1d (A (an (an G (eq x a)) (eq y b)) y b)
                    H2)
                  (eqeqd ((an (an G (eq x a)) (eq y b)) x a y b)
                    H1
                    H2)))))))))))))

(local theorem subsnss ((A set ()) (B set ())) ()
  (im (subset A B) (im (subsn B) (subsn A)))
((x nat) (y nat))
(:conv (im (subset A B) (im (subsn B) (subsn A)))
  (im
    (subset A B)
    (im
      (:unfold subsn (B) (x y)
        (al x (al y (im (el x B) (im (el y B) (eq x y))))))
      (:unfold subsn (A) (x y)
        (al x (al y (im (el x A) (im (el y A) (eq x y))))))))
  (alimd (x (subset A B) (al y (im (el x B) (im (el y B) (eq x y)))) (al y (im (el x A) (im (el y A) (eq x y)))))
    (alimd (y (subset A B) (im (el x B) (im (el y B) (eq x y))) (im (el x A) (im (el y A) (eq x y))))
      (imimd ((subset A B) (el x A) (el x B) (im (el y B) (eq x y)) (im (el y A) (eq x y)))
        (ssel (A B x))
        (imim1d ((subset A B) (el y A) (el y B) (eq x y))
          (ssel (A B y))))))))

(local theorem subsnsn ((a nat ()) (x nat)) ()
  (subsn (ab x (eq x a)))
((u nat) (v nat))
(:conv (subsn (ab x (eq x a)))
  (:unfold subsn ((ab x (eq x a))) (u v)
    (al u (al v (im (el u (ab x (eq x a))) (im (el v (ab x (eq x a))) (eq u v))))))
  (ax_gen (u (al v (im (el u (ab x (eq x a))) (im (el v (ab x (eq x a))) (eq u v)))))
    (ax_gen (v (im (el u (ab x (eq x a))) (im (el v (ab x (eq x a))) (eq u v))))
      (exp ((el u (ab x (eq x a))) (el v (ab x (eq x a))) (eq u v))
        (eqtr4d ((an (el u (ab x (eq x a))) (el v (ab x (eq x a)))) u a v)
          (sylib ((an (el u (ab x (eq x a))) (el v (ab x (eq x a)))) (el u (ab x (eq x a))) (eq u a))
            (elabe (x u (eq x a) (eq u a))
              (eqeq1 (x u a)))
            (anl ((el u (ab x (eq x a))) (el v (ab x (eq x a))))))
          (sylib ((an (el u (ab x (eq x a))) (el v (ab x (eq x a)))) (el v (ab x (eq x a))) (eq v a))
            (elabe (x v (eq x a) (eq v a))
              (eqeq1 (x v a)))
            (anr ((el u (ab x (eq x a))) (el v (ab x (eq x a))))))))))))

(local theorem eqsubsnd ((A set ()) (G wff ()) (a nat ()) (x nat))
  ((h (im G (im (el x A) (eq x a)))))
  (im G (subsn A))
()
(sylc (G (subset A (ab x (eq x a))) (subsn (ab x (eq x a))) (subsn A))
  (subsnss (A (ab x (eq x a))))
  (sylib (G (al x (im (el x A) (eq x a))) (subset A (ab x (eq x a))))
    (ssab2 (A x (eq x a)))
    (iald (x G (im (el x A) (eq x a)))
      h))
  (a1i (G (subsn (ab x (eq x a))))
    (subsnsn (a x)))))

(local theorem eqsubsnabd ((G wff ()) (a nat ()) (x nat) (p wff (x)))
  ((h (im G (im p (eq x a)))))
  (im G (subsn (ab x p)))
()
(sylc (G (subset (ab x p) (ab x (eq x a))) (subsn (ab x (eq x a))) (subsn (ab x p)))
  (subsnss ((ab x p) (ab x (eq x a))))
  (sylib (G (al x (im p (eq x a))) (subset (ab x p) (ab x (eq x a))))
    (ssab (x p (eq x a)))
    (iald (x G (im p (eq x a)))
      h))
  (a1i (G (subsn (ab x (eq x a))))
    (subsnsn (a x)))))

(local theorem subsntheo ((A set ()) (a nat ())) ()
  (im (subsn A) (iff (eq (theo A) (suc a)) (el a A)))
((x nat))
(syl5bbr ((subsn A) (eq (theo A) (suc a)) (eqs A (ab x (eq x a))) (el a A))
  (theoid (x A a))
  (ibid ((subsn A) (eqs A (ab x (eq x a))) (el a A))
    (a1i ((subsn A) (im (eqs A (ab x (eq x a))) (el a A)))
      (mpbiri ((eqs A (ab x (eq x a))) (el a (ab x (eq x a))) (el a A))
        (mpbir ((eq a a) (el a (ab x (eq x a))))
          (elabe (x a (eq x a) (eq a a))
            (eqeq1 (x a a)))
          (eqid (a)))
        (eleq2 (A (ab x (eq x a)) a))))
    (exp ((subsn A) (el a A) (eqs A (ab x (eq x a))))
      (eqab2d (A (an (subsn A) (el a A)) x (eq x a))
        (ibida ((an (subsn A) (el a A)) (el x A) (eq x a))
          (subsni (A (an (an (subsn A) (el a A)) (el x A)) x a)
            (anll ((subsn A) (el a A) (el x A)))
            (anr ((an (subsn A) (el a A)) (el x A)))
            (anlr ((subsn A) (el a A) (el x A))))
          (mpbird ((an (an (subsn A) (el a A)) (eq x a)) (el a A) (el x A))
            (eleq1d (A (an (an (subsn A) (el a A)) (eq x a)) x a)
              (anr ((an (subsn A) (el a A)) (eq x a))))
            (anlr ((subsn A) (el a A) (eq x a))))))))))

(def sbn ((a nat ()) (x nat) (b nat (x))) (nat ())
((y nat))
(the (ab y (sb a x (eq y b)))))

(local theorem sbneqd ((_G wff ()) (x nat) (a1 nat (x)) (a2 nat (x)) (b1 nat (x)) (b2 nat (x)))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (sbn a1 x b1) (sbn a2 x b2)))
((y nat))
(:conv (im _G (eq (sbn a1 x b1) (sbn a2 x b2)))
  (im
    _G
    (eq
      (:unfold sbn (a1 x b1) (y)
        (the (ab y (sb a1 x (eq y b1)))))
      (:unfold sbn (a2 x b2) (y)
        (the (ab y (sb a2 x (eq y b2)))))))
  (theeqd (_G (ab y (sb a1 x (eq y b1))) (ab y (sb a2 x (eq y b2))))
    (abeqd (_G y (sb a1 x (eq y b1)) (sb a2 x (eq y b2)))
      (sbeqd (_G x a1 a2 (eq y b1) (eq y b2))
        ha
        (eqeqd (_G y y b1 b2)
          (eqidd (_G y))
          hb))))))

(local theorem sbnq ((x nat) (a nat ()) (b nat (x))) ()
  (im (eq x a) (eq b (sbn a x b)))
((y nat))
(eqcomd ((eq x a) (sbn a x b) b)
  (:conv (im (eq x a) (eq (sbn a x b) b))
    (im
      (eq x a)
      (eq
        (:unfold sbn (a x b) (y)
          (the (ab y (sb a x (eq y b)))))
        b))
    (eqtheabd ((eq x a) b y (sb a x (eq y b)))
      (bicomd ((eq x a) (eq y b) (sb a x (eq y b)))
        (sbq (x a (eq y b))))))))

(local theorem nfsbn1h ((x nat) (a nat (x)) (b nat (x)))
  ((h (nfn x a)))
  (nfn x (sbn a x b))
((y nat))
(:conv (nfn x (sbn a x b))
  (nfn
    x
    (:unfold sbn (a x b) (y)
      (the (ab y (sb a x (eq y b))))))
  (nfthe (x (ab y (sb a x (eq y b))))
    (nfab (x y (sb a x (eq y b)))
      (nfsb1h (x a (eq y b))
        h)))))

(local theorem nfsbn1 ((x nat) (a nat ()) (b nat (x))) ()
  (nfn x (sbn a x b))
()
(nfsbn1h (x a b)
  (nfnv (a x))))

(local theorem nfsbnh ((x nat) (y nat) (a nat (x y)) (b nat (x y)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (sbn a y b))
((z nat))
(:conv (nfn x (sbn a y b))
  (nfn
    x
    (:unfold sbn (a y b) (z)
      (the (ab z (sb a y (eq z b))))))
  (nfthe (x (ab z (sb a y (eq z b))))
    (nfab (x z (sb a y (eq z b)))
      (nfsbh (x y a (eq z b))
        h1
        (nfeq2 (z x b)
          h2))))))

(local theorem nfsbn ((x nat) (y nat) (a nat ()) (b nat (x y)))
  ((h (nfn x b)))
  (nfn x (sbn a y b))
()
(nfsbnh (x y a b)
  (nfnv (a x))
  h))

(local theorem sbneq2d ((x nat) (G wff ()) (a nat (x)) (b nat (x)) (c nat (x)))
  ((h (im G (eq b c))))
  (im G (eq (sbn a x b) (sbn a x c)))
((y nat) (z nat))
(:conv (im G (eq (sbn a x b) (sbn a x c)))
  (im
    G
    (eq
      (:unfold sbn (a x b) (y)
        (the (ab y (sb a x (eq y b)))))
      (:unfold sbn (a x c) (z)
        (the (ab z (sb a x (eq z c)))))))
  (theeqd (G (ab y (sb a x (eq y b))) (ab z (sb a x (eq z c))))
    (cbvabd (y z G (sb a x (eq y b)) (sb a x (eq z c)))
      (sbeq2d ((an G (eq y z)) x a (eq y b) (eq z c))
        (eqeqd ((an G (eq y z)) y z b c)
          (anr (G (eq y z)))
          (anwl (G (eq y z) (eq b c))
            h)))))))

(local theorem sbneht ((x nat) (a nat ()) (b nat (x)) (c nat (x)))
  ((h (nfn x c)))
  (im (al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
((y nat))
(:conv (im (al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
  (im
    (al x (im (eq x a) (eq b c)))
    (eq
      (:unfold sbn (a x b) (y)
        (the (ab y (sb a x (eq y b)))))
      c))
  (eqtheabd ((al x (im (eq x a) (eq b c))) c y (sb a x (eq y b)))
    (syl ((al x (im (eq x a) (eq b c))) (al x (im (eq x a) (iff (eq y b) (eq y c)))) (iff (sb a x (eq y b)) (eq y c)))
      (sbeht (x a (eq y b) (eq y c))
        (nfeq2 (y x c)
          h))
      (alimi (x (im (eq x a) (eq b c)) (im (eq x a) (iff (eq y b) (eq y c))))
        (ax_mp ((im (eq b c) (iff (eq y b) (eq y c))) (im (im (eq x a) (eq b c)) (im (eq x a) (iff (eq y b) (eq y c)))))
          (imim2 ((eq x a) (eq b c) (iff (eq y b) (eq y c))))
          (eqeq2 (y b c))))))))

(local theorem sbneh ((x nat) (a nat ()) (b nat (x)) (c nat (x)))
  ((h (nfn x c))
   (e (im (eq x a) (eq b c))))
  (eq (sbn a x b) c)
()
(ax_mp ((al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
  (sbneht (x a b c)
    h)
  (ax_gen (x (im (eq x a) (eq b c)))
    e)))

(local theorem sbnet ((x nat) (a nat ()) (b nat (x)) (c nat ())) ()
  (im (al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
()
(sbneht (x a b c)
  (nfnv (c x))))

(local theorem sbne ((x nat) (a nat ()) (b nat (x)) (c nat ()))
  ((e (im (eq x a) (eq b c))))
  (eq (sbn a x b) c)
()
(sbneh (x a b c)
  (nfnv (c x))
  e))

(local theorem sbned ((G wff ()) (x nat) (a nat ()) (b nat (x)) (c nat ()))
  ((e (im (an G (eq x a)) (eq b c))))
  (im G (eq (sbn a x b) c))
()
(syl (G (al x (im (eq x a) (eq b c))) (eq (sbn a x b) c))
  (sbnet (x a b c))
  (iald (x G (im (eq x a) (eq b c)))
    (exp (G (eq x a) (eq b c))
      e))))

(local theorem sbneq1 ((x nat) (a nat (x)) (b nat (x)) (c nat (x))) ()
  (im (eq a b) (eq (sbn a x c) (sbn b x c)))
((y nat))
(:conv (im (eq a b) (eq (sbn a x c) (sbn b x c)))
  (im
    (eq a b)
    (eq
      (:unfold sbn (a x c) (y)
        (the (ab y (sb a x (eq y c)))))
      (:unfold sbn (b x c) (y)
        (the (ab y (sb b x (eq y c)))))))
  (theeqd ((eq a b) (ab y (sb a x (eq y c))) (ab y (sb b x (eq y c))))
    (abeqd ((eq a b) y (sb a x (eq y c)) (sb b x (eq y c)))
      (sbeq1 (x a b (eq y c)))))))

(local theorem sbnid ((x nat) (a nat (x))) ()
  (eq (sbn x x a) a)
((y nat))
(trud ((eq (sbn x x a) a))
  (:conv (im (wtru) (eq (sbn x x a) a))
    (im
      (wtru)
      (eq
        (:unfold sbn (x x a) (y)
          (the (ab y (sb x x (eq y a)))))
        a))
    (eqtheabd ((wtru) a y (sb x x (eq y a)))
      (a1i ((wtru) (iff (sb x x (eq y a)) (eq y a)))
        (sbid (x (eq y a))))))))

(local theorem nfnlem ((x nat) (y nat) (b nat (y)) (a nat (x)) (c nat (x)))
  ((e (im (eq y a) (eq b c)))
   (h (nfn x a)))
  (nfn x c)
()
(nfnx (x c (sbn a y b))
  (ax_mp ((eq (sbn a y b) c) (eq c (sbn a y b)))
    (eqcom ((sbn a y b) c))
    (sbne (y a b c)
      e))
  (nfsbnh (x y a b)
    h
    (nfnv (b x)))))

(local theorem nfnlem2 ((x nat) (y nat) (z nat) (c nat (y z)) (a nat (x)) (b nat (x)) (d nat (x)))
  ((e (im (an (eq y a) (eq z b)) (eq c d)))
   (h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x d)
()
(nfnx (x d (sbn a y (sbn b z c)))
  (ax_mp ((eq (sbn a y (sbn b z c)) d) (eq d (sbn a y (sbn b z c))))
    (eqcom ((sbn a y (sbn b z c)) d))
    (sbne (y a (sbn b z c) d)
      (sbned ((eq y a) z b c d)
        e)))
  (nfsbnh (x y a (sbn b z c))
    h1
    (nfsbnh (x z b c)
      h2
      (nfnv (c x))))))

(local theorem nfsuc ((x nat) (a nat (x)))
  ((h (nfn x a)))
  (nfn x (suc a))
((y nat))
(nfnlem (x y (suc y) a (suc a))
  (suceq (y a))
  h))

(term add ((a nat ()) (b nat ())) (nat ()))

(term mul ((a nat ()) (b nat ())) (nat ()))

(axiom addeq ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (eq a b) (im (eq c d) (eq (add a c) (add b d)))))

(axiom muleq ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (eq a b) (im (eq c d) (eq (mul a c) (mul b d)))))

(axiom add0 ((a nat ())) ()
  (eq (add a (d0)) a))

(axiom addS ((a nat ()) (b nat ())) ()
  (eq (add a (suc b)) (suc (add a b))))

(axiom mul0 ((a nat ())) ()
  (eq (mul a (d0)) (d0)))

(axiom mulS ((a nat ()) (b nat ())) ()
  (eq (mul a (suc b)) (add (mul a b) a)))

(local theorem addeqd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (eq (add a c) (add b d)))
()
(sylc (G (eq a b) (eq c d) (eq (add a c) (add b d)))
  (addeq (a b c d))
  h1
  h2))

(local theorem muleqd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (eq (mul a c) (mul b d)))
()
(sylc (G (eq a b) (eq c d) (eq (mul a c) (mul b d)))
  (muleq (a b c d))
  h1
  h2))

(local theorem addeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (add a1 b) (add a2 b)))
()
(addeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem addeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (add a1 b) (add a2 b)))
()
(addeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem addeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (add a b1) (add a b2)))
()
(addeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem addeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (add a b1) (add a b2)))
()
(addeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem muleq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (mul a1 b) (mul a2 b)))
()
(muleqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem muleq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (mul a1 b) (mul a2 b)))
()
(muleq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem muleq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (mul a b1) (mul a b2)))
()
(muleqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem muleq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (mul a b1) (mul a b2)))
()
(muleq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem nfadd ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (add a b))
((y nat) (z nat))
(nfnlem2 (x y z (add y z) a b (add a b))
  (addeqd ((an (eq y a) (eq z b)) y a z b)
    (anl ((eq y a) (eq z b)))
    (anr ((eq y a) (eq z b))))
  h1
  h2))

(local theorem nfmul ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (mul a b))
((y nat) (z nat))
(nfnlem2 (x y z (mul y z) a b (mul a b))
  (muleqd ((an (eq y a) (eq z b)) y a z b)
    (anl ((eq y a) (eq z b)))
    (anr ((eq y a) (eq z b))))
  h1
  h2))

(local theorem add02 ((a nat ())) ()
  (eq (add a (d0)) a)
()
(add0 (a)))

(local theorem add01 ((a nat ())) ()
  (eq (add (d0) a) a)
((x nat) (y nat))
(ind (x y a (eq (add (d0) x) x) (eq (add (d0) (d0)) (d0)) (eq (add (d0) a) a) (eq (add (d0) y) y) (eq (add (d0) (suc y)) (suc y)))
  (eqeqd ((eq x (d0)) (add (d0) x) (add (d0) (d0)) x (d0))
    (addeq2 ((d0) x (d0)))
    (id ((eq x (d0)))))
  (eqeqd ((eq x y) (add (d0) x) (add (d0) y) x y)
    (addeq2 ((d0) x y))
    (id ((eq x y))))
  (eqeqd ((eq x (suc y)) (add (d0) x) (add (d0) (suc y)) x (suc y))
    (addeq2 ((d0) x (suc y)))
    (id ((eq x (suc y)))))
  (eqeqd ((eq x a) (add (d0) x) (add (d0) a) x a)
    (addeq2 ((d0) x a))
    (id ((eq x a))))
  (add0 ((d0)))
  (syl5eq ((eq (add (d0) y) y) (add (d0) (suc y)) (suc (add (d0) y)) (suc y))
    (addS ((d0) y))
    (suceq ((add (d0) y) y)))))

(local theorem addS2 ((a nat ()) (b nat ())) ()
  (eq (add a (suc b)) (suc (add a b)))
()
(addS (a b)))

(local theorem addS1 ((a nat ()) (b nat ())) ()
  (eq (add (suc a) b) (suc (add a b)))
((x nat) (y nat))
(ind (x y b (eq (add (suc a) x) (suc (add a x))) (eq (add (suc a) (d0)) (suc (add a (d0)))) (eq (add (suc a) b) (suc (add a b))) (eq (add (suc a) y) (suc (add a y))) (eq (add (suc a) (suc y)) (suc (add a (suc y)))))
  (eqeqd ((eq x (d0)) (add (suc a) x) (add (suc a) (d0)) (suc (add a x)) (suc (add a (d0))))
    (addeq2 ((suc a) x (d0)))
    (suceqd ((eq x (d0)) (add a x) (add a (d0)))
      (addeq2 (a x (d0)))))
  (eqeqd ((eq x y) (add (suc a) x) (add (suc a) y) (suc (add a x)) (suc (add a y)))
    (addeq2 ((suc a) x y))
    (suceqd ((eq x y) (add a x) (add a y))
      (addeq2 (a x y))))
  (eqeqd ((eq x (suc y)) (add (suc a) x) (add (suc a) (suc y)) (suc (add a x)) (suc (add a (suc y))))
    (addeq2 ((suc a) x (suc y)))
    (suceqd ((eq x (suc y)) (add a x) (add a (suc y)))
      (addeq2 (a x (suc y)))))
  (eqeqd ((eq x b) (add (suc a) x) (add (suc a) b) (suc (add a x)) (suc (add a b)))
    (addeq2 ((suc a) x b))
    (suceqd ((eq x b) (add a x) (add a b))
      (addeq2 (a x b))))
  (ax_mp ((eq (suc (add a (d0))) (suc a)) (eq (add (suc a) (d0)) (suc (add a (d0)))))
    (ax_mp ((eq (add (suc a) (d0)) (suc a)) (im (eq (suc (add a (d0))) (suc a)) (eq (add (suc a) (d0)) (suc (add a (d0))))))
      (eqtr4 ((add (suc a) (d0)) (suc a) (suc (add a (d0)))))
      (add0 ((suc a))))
    (ax_mp ((eq (add a (d0)) a) (eq (suc (add a (d0))) (suc a)))
      (suceq ((add a (d0)) a))
      (add0 (a))))
  (syl5eq ((eq (add (suc a) y) (suc (add a y))) (add (suc a) (suc y)) (suc (add (suc a) y)) (suc (add a (suc y))))
    (addS ((suc a) y))
    (suceqd ((eq (add (suc a) y) (suc (add a y))) (add (suc a) y) (add a (suc y)))
      (syl6eqr ((eq (add (suc a) y) (suc (add a y))) (add (suc a) y) (suc (add a y)) (add a (suc y)))
        (addS (a y))
        (id ((eq (add (suc a) y) (suc (add a y))))))))))

(local theorem addSass ((a nat ()) (b nat ())) ()
  (eq (add (suc a) b) (add a (suc b)))
()
(ax_mp ((eq (add a (suc b)) (suc (add a b))) (eq (add (suc a) b) (add a (suc b))))
  (ax_mp ((eq (add (suc a) b) (suc (add a b))) (im (eq (add a (suc b)) (suc (add a b))) (eq (add (suc a) b) (add a (suc b)))))
    (eqtr4 ((add (suc a) b) (suc (add a b)) (add a (suc b))))
    (addS1 (a b)))
  (addS2 (a b))))

(local theorem add12 ((a nat ())) ()
  (eq (add a (d1)) (suc a))
()
(:conv (eq (add a (d1)) (suc a))
  (eq
    (add
      a
      (:unfold d1 () ()
        (suc (d0))))
    (suc a))
  (ax_mp ((eq (suc (add a (d0))) (suc a)) (eq (add a (suc (d0))) (suc a)))
    (ax_mp ((eq (add a (suc (d0))) (suc (add a (d0)))) (im (eq (suc (add a (d0))) (suc a)) (eq (add a (suc (d0))) (suc a))))
      (eqtr ((add a (suc (d0))) (suc (add a (d0))) (suc a)))
      (addS (a (d0))))
    (ax_mp ((eq (add a (d0)) a) (eq (suc (add a (d0))) (suc a)))
      (suceq ((add a (d0)) a))
      (add0 (a))))))

(local theorem add11 ((a nat ())) ()
  (eq (add (d1) a) (suc a))
()
(:conv (eq (add (d1) a) (suc a))
  (eq
    (add
      (:unfold d1 () ()
        (suc (d0)))
      a)
    (suc a))
  (ax_mp ((eq (suc (add (d0) a)) (suc a)) (eq (add (suc (d0)) a) (suc a)))
    (ax_mp ((eq (add (suc (d0)) a) (suc (add (d0) a))) (im (eq (suc (add (d0) a)) (suc a)) (eq (add (suc (d0)) a) (suc a))))
      (eqtr ((add (suc (d0)) a) (suc (add (d0) a)) (suc a)))
      (addS1 ((d0) a)))
    (ax_mp ((eq (add (d0) a) a) (eq (suc (add (d0) a)) (suc a)))
      (suceq ((add (d0) a) a))
      (add01 (a))))))

(local theorem addcom ((a nat ()) (b nat ())) ()
  (eq (add a b) (add b a))
((x nat) (y nat))
(ind (x y b (eq (add a x) (add x a)) (eq (add a (d0)) (add (d0) a)) (eq (add a b) (add b a)) (eq (add a y) (add y a)) (eq (add a (suc y)) (add (suc y) a)))
  (eqeqd ((eq x (d0)) (add a x) (add a (d0)) (add x a) (add (d0) a))
    (addeq2 (a x (d0)))
    (addeq1 (x (d0) a)))
  (eqeqd ((eq x y) (add a x) (add a y) (add x a) (add y a))
    (addeq2 (a x y))
    (addeq1 (x y a)))
  (eqeqd ((eq x (suc y)) (add a x) (add a (suc y)) (add x a) (add (suc y) a))
    (addeq2 (a x (suc y)))
    (addeq1 (x (suc y) a)))
  (eqeqd ((eq x b) (add a x) (add a b) (add x a) (add b a))
    (addeq2 (a x b))
    (addeq1 (x b a)))
  (ax_mp ((eq (add (d0) a) a) (eq (add a (d0)) (add (d0) a)))
    (ax_mp ((eq (add a (d0)) a) (im (eq (add (d0) a) a) (eq (add a (d0)) (add (d0) a))))
      (eqtr4 ((add a (d0)) a (add (d0) a)))
      (add0 (a)))
    (add01 (a)))
  (eqtr4g ((eq (add a y) (add y a)) (suc (add a y)) (suc (add y a)) (add a (suc y)) (add (suc y) a))
    (addS (a y))
    (addS1 (y a))
    (suceq ((add a y) (add y a))))))

(local theorem addass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add (add a b) c) (add a (add b c)))
((x nat) (y nat))
(ind (x y c (eq (add (add a b) x) (add a (add b x))) (eq (add (add a b) (d0)) (add a (add b (d0)))) (eq (add (add a b) c) (add a (add b c))) (eq (add (add a b) y) (add a (add b y))) (eq (add (add a b) (suc y)) (add a (add b (suc y)))))
  (eqeqd ((eq x (d0)) (add (add a b) x) (add (add a b) (d0)) (add a (add b x)) (add a (add b (d0))))
    (addeq2 ((add a b) x (d0)))
    (addeq2d ((eq x (d0)) a (add b x) (add b (d0)))
      (addeq2 (b x (d0)))))
  (eqeqd ((eq x y) (add (add a b) x) (add (add a b) y) (add a (add b x)) (add a (add b y)))
    (addeq2 ((add a b) x y))
    (addeq2d ((eq x y) a (add b x) (add b y))
      (addeq2 (b x y))))
  (eqeqd ((eq x (suc y)) (add (add a b) x) (add (add a b) (suc y)) (add a (add b x)) (add a (add b (suc y))))
    (addeq2 ((add a b) x (suc y)))
    (addeq2d ((eq x (suc y)) a (add b x) (add b (suc y)))
      (addeq2 (b x (suc y)))))
  (eqeqd ((eq x c) (add (add a b) x) (add (add a b) c) (add a (add b x)) (add a (add b c)))
    (addeq2 ((add a b) x c))
    (addeq2d ((eq x c) a (add b x) (add b c))
      (addeq2 (b x c))))
  (ax_mp ((eq (add a (add b (d0))) (add a b)) (eq (add (add a b) (d0)) (add a (add b (d0)))))
    (ax_mp ((eq (add (add a b) (d0)) (add a b)) (im (eq (add a (add b (d0))) (add a b)) (eq (add (add a b) (d0)) (add a (add b (d0))))))
      (eqtr4 ((add (add a b) (d0)) (add a b) (add a (add b (d0)))))
      (add0 ((add a b))))
    (ax_mp ((eq (add b (d0)) b) (eq (add a (add b (d0))) (add a b)))
      (addeq2 (a (add b (d0)) b))
      (add0 (b))))
  (eqtr4g ((eq (add (add a b) y) (add a (add b y))) (suc (add (add a b) y)) (suc (add a (add b y))) (add (add a b) (suc y)) (add a (add b (suc y))))
    (addS ((add a b) y))
    (ax_mp ((eq (add a (suc (add b y))) (suc (add a (add b y)))) (eq (add a (add b (suc y))) (suc (add a (add b y)))))
      (ax_mp ((eq (add a (add b (suc y))) (add a (suc (add b y)))) (im (eq (add a (suc (add b y))) (suc (add a (add b y)))) (eq (add a (add b (suc y))) (suc (add a (add b y))))))
        (eqtr ((add a (add b (suc y))) (add a (suc (add b y))) (suc (add a (add b y)))))
        (ax_mp ((eq (add b (suc y)) (suc (add b y))) (eq (add a (add b (suc y))) (add a (suc (add b y)))))
          (addeq2 (a (add b (suc y)) (suc (add b y))))
          (addS (b y))))
      (addS (a (add b y))))
    (suceq ((add (add a b) y) (add a (add b y)))))))

(local theorem add32 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add (add a b) c) (add (add a c) b))
()
(ax_mp ((eq (add a (add b c)) (add (add a c) b)) (eq (add (add a b) c) (add (add a c) b)))
  (ax_mp ((eq (add (add a b) c) (add a (add b c))) (im (eq (add a (add b c)) (add (add a c) b)) (eq (add (add a b) c) (add (add a c) b))))
    (eqtr ((add (add a b) c) (add a (add b c)) (add (add a c) b)))
    (addass (a b c)))
  (ax_mp ((eq (add (add a c) b) (add a (add c b))) (eq (add a (add b c)) (add (add a c) b)))
    (ax_mp ((eq (add a (add b c)) (add a (add c b))) (im (eq (add (add a c) b) (add a (add c b))) (eq (add a (add b c)) (add (add a c) b))))
      (eqtr4 ((add a (add b c)) (add a (add c b)) (add (add a c) b)))
      (ax_mp ((eq (add b c) (add c b)) (eq (add a (add b c)) (add a (add c b))))
        (addeq2 (a (add b c) (add c b)))
        (addcom (b c))))
    (addass (a c b)))))

(local theorem add4 ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (add (add a b) (add c d)) (add (add a c) (add b d)))
()
(ax_mp ((eq (add (add (add a b) c) d) (add (add a c) (add b d))) (eq (add (add a b) (add c d)) (add (add a c) (add b d))))
  (ax_mp ((eq (add (add (add a b) c) d) (add (add a b) (add c d))) (im (eq (add (add (add a b) c) d) (add (add a c) (add b d))) (eq (add (add a b) (add c d)) (add (add a c) (add b d)))))
    (eqtr3 ((add (add a b) (add c d)) (add (add (add a b) c) d) (add (add a c) (add b d))))
    (addass ((add a b) c d)))
  (ax_mp ((eq (add (add (add a c) b) d) (add (add a c) (add b d))) (eq (add (add (add a b) c) d) (add (add a c) (add b d))))
    (ax_mp ((eq (add (add (add a b) c) d) (add (add (add a c) b) d)) (im (eq (add (add (add a c) b) d) (add (add a c) (add b d))) (eq (add (add (add a b) c) d) (add (add a c) (add b d)))))
      (eqtr ((add (add (add a b) c) d) (add (add (add a c) b) d) (add (add a c) (add b d))))
      (ax_mp ((eq (add (add a b) c) (add (add a c) b)) (eq (add (add (add a b) c) d) (add (add (add a c) b) d)))
        (addeq1 ((add (add a b) c) (add (add a c) b) d))
        (add32 (a b c))))
    (addass ((add a c) b d)))))

(local theorem addcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (add a c) (add b c)) (eq a b))
((x nat) (y nat))
(ind (x y c (iff (eq (add a x) (add b x)) (eq a b)) (iff (eq (add a (d0)) (add b (d0))) (eq a b)) (iff (eq (add a c) (add b c)) (eq a b)) (iff (eq (add a y) (add b y)) (eq a b)) (iff (eq (add a (suc y)) (add b (suc y))) (eq a b)))
  (bieq1d ((eq x (d0)) (eq (add a x) (add b x)) (eq (add a (d0)) (add b (d0))) (eq a b))
    (eqeqd ((eq x (d0)) (add a x) (add a (d0)) (add b x) (add b (d0)))
      (addeq2 (a x (d0)))
      (addeq2 (b x (d0)))))
  (bieq1d ((eq x y) (eq (add a x) (add b x)) (eq (add a y) (add b y)) (eq a b))
    (eqeqd ((eq x y) (add a x) (add a y) (add b x) (add b y))
      (addeq2 (a x y))
      (addeq2 (b x y))))
  (bieq1d ((eq x (suc y)) (eq (add a x) (add b x)) (eq (add a (suc y)) (add b (suc y))) (eq a b))
    (eqeqd ((eq x (suc y)) (add a x) (add a (suc y)) (add b x) (add b (suc y)))
      (addeq2 (a x (suc y)))
      (addeq2 (b x (suc y)))))
  (bieq1d ((eq x c) (eq (add a x) (add b x)) (eq (add a c) (add b c)) (eq a b))
    (eqeqd ((eq x c) (add a x) (add a c) (add b x) (add b c))
      (addeq2 (a x c))
      (addeq2 (b x c))))
  (ax_mp ((eq (add b (d0)) b) (iff (eq (add a (d0)) (add b (d0))) (eq a b)))
    (ax_mp ((eq (add a (d0)) a) (im (eq (add b (d0)) b) (iff (eq (add a (d0)) (add b (d0))) (eq a b))))
      (eqeq ((add a (d0)) a (add b (d0)) b))
      (add0 (a)))
    (add0 (b)))
  (syl5bb ((iff (eq (add a y) (add b y)) (eq a b)) (eq (add a (suc y)) (add b (suc y))) (eq (add a y) (add b y)) (eq a b))
    (ax_mp ((iff (eq (suc (add a y)) (suc (add b y))) (eq (add a y) (add b y))) (iff (eq (add a (suc y)) (add b (suc y))) (eq (add a y) (add b y))))
      (ax_mp ((iff (eq (add a (suc y)) (add b (suc y))) (eq (suc (add a y)) (suc (add b y)))) (im (iff (eq (suc (add a y)) (suc (add b y))) (eq (add a y) (add b y))) (iff (eq (add a (suc y)) (add b (suc y))) (eq (add a y) (add b y)))))
        (bitr ((eq (add a (suc y)) (add b (suc y))) (eq (suc (add a y)) (suc (add b y))) (eq (add a y) (add b y))))
        (ax_mp ((eq (add b (suc y)) (suc (add b y))) (iff (eq (add a (suc y)) (add b (suc y))) (eq (suc (add a y)) (suc (add b y)))))
          (ax_mp ((eq (add a (suc y)) (suc (add a y))) (im (eq (add b (suc y)) (suc (add b y))) (iff (eq (add a (suc y)) (add b (suc y))) (eq (suc (add a y)) (suc (add b y))))))
            (eqeq ((add a (suc y)) (suc (add a y)) (add b (suc y)) (suc (add b y))))
            (addS (a y)))
          (addS (b y))))
      (peano2 ((add a y) (add b y))))
    (id ((iff (eq (add a y) (add b y)) (eq a b)))))))

(local theorem addcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (eq (add a b) (add a c)) (eq b c))
()
(ax_mp ((iff (eq (add b a) (add c a)) (eq b c)) (iff (eq (add a b) (add a c)) (eq b c)))
  (ax_mp ((iff (eq (add a b) (add a c)) (eq (add b a) (add c a))) (im (iff (eq (add b a) (add c a)) (eq b c)) (iff (eq (add a b) (add a c)) (eq b c))))
    (bitr ((eq (add a b) (add a c)) (eq (add b a) (add c a)) (eq b c)))
    (ax_mp ((eq (add a c) (add c a)) (iff (eq (add a b) (add a c)) (eq (add b a) (add c a))))
      (ax_mp ((eq (add a b) (add b a)) (im (eq (add a c) (add c a)) (iff (eq (add a b) (add a c)) (eq (add b a) (add c a)))))
        (eqeq ((add a b) (add b a) (add a c) (add c a)))
        (addcom (a b)))
      (addcom (a c))))
  (addcan1 (b c a))))

(local theorem mul02 ((a nat ())) ()
  (eq (mul a (d0)) (d0))
()
(mul0 (a)))

(local theorem mul01 ((a nat ())) ()
  (eq (mul (d0) a) (d0))
((x nat) (y nat))
(ind (x y a (eq (mul (d0) x) (d0)) (eq (mul (d0) (d0)) (d0)) (eq (mul (d0) a) (d0)) (eq (mul (d0) y) (d0)) (eq (mul (d0) (suc y)) (d0)))
  (eqeq1d ((eq x (d0)) (mul (d0) x) (mul (d0) (d0)) (d0))
    (muleq2 ((d0) x (d0))))
  (eqeq1d ((eq x y) (mul (d0) x) (mul (d0) y) (d0))
    (muleq2 ((d0) x y)))
  (eqeq1d ((eq x (suc y)) (mul (d0) x) (mul (d0) (suc y)) (d0))
    (muleq2 ((d0) x (suc y))))
  (eqeq1d ((eq x a) (mul (d0) x) (mul (d0) a) (d0))
    (muleq2 ((d0) x a)))
  (mul0 ((d0)))
  (syl5eq ((eq (mul (d0) y) (d0)) (mul (d0) (suc y)) (mul (d0) y) (d0))
    (ax_mp ((eq (add (mul (d0) y) (d0)) (mul (d0) y)) (eq (mul (d0) (suc y)) (mul (d0) y)))
      (ax_mp ((eq (mul (d0) (suc y)) (add (mul (d0) y) (d0))) (im (eq (add (mul (d0) y) (d0)) (mul (d0) y)) (eq (mul (d0) (suc y)) (mul (d0) y))))
        (eqtr ((mul (d0) (suc y)) (add (mul (d0) y) (d0)) (mul (d0) y)))
        (mulS ((d0) y)))
      (add0 ((mul (d0) y))))
    (id ((eq (mul (d0) y) (d0)))))))

(local theorem mulS2 ((a nat ()) (b nat ())) ()
  (eq (mul a (suc b)) (add (mul a b) a))
()
(mulS (a b)))

(local theorem mulS1 ((a nat ()) (b nat ())) ()
  (eq (mul (suc a) b) (add (mul a b) b))
((x nat) (y nat))
(ind (x y b (eq (mul (suc a) x) (add (mul a x) x)) (eq (mul (suc a) (d0)) (add (mul a (d0)) (d0))) (eq (mul (suc a) b) (add (mul a b) b)) (eq (mul (suc a) y) (add (mul a y) y)) (eq (mul (suc a) (suc y)) (add (mul a (suc y)) (suc y))))
  (eqeqd ((eq x (d0)) (mul (suc a) x) (mul (suc a) (d0)) (add (mul a x) x) (add (mul a (d0)) (d0)))
    (muleq2 ((suc a) x (d0)))
    (addeqd ((eq x (d0)) (mul a x) (mul a (d0)) x (d0))
      (muleq2 (a x (d0)))
      (id ((eq x (d0))))))
  (eqeqd ((eq x y) (mul (suc a) x) (mul (suc a) y) (add (mul a x) x) (add (mul a y) y))
    (muleq2 ((suc a) x y))
    (addeqd ((eq x y) (mul a x) (mul a y) x y)
      (muleq2 (a x y))
      (id ((eq x y)))))
  (eqeqd ((eq x (suc y)) (mul (suc a) x) (mul (suc a) (suc y)) (add (mul a x) x) (add (mul a (suc y)) (suc y)))
    (muleq2 ((suc a) x (suc y)))
    (addeqd ((eq x (suc y)) (mul a x) (mul a (suc y)) x (suc y))
      (muleq2 (a x (suc y)))
      (id ((eq x (suc y))))))
  (eqeqd ((eq x b) (mul (suc a) x) (mul (suc a) b) (add (mul a x) x) (add (mul a b) b))
    (muleq2 ((suc a) x b))
    (addeqd ((eq x b) (mul a x) (mul a b) x b)
      (muleq2 (a x b))
      (id ((eq x b)))))
  (ax_mp ((eq (add (mul a (d0)) (d0)) (d0)) (eq (mul (suc a) (d0)) (add (mul a (d0)) (d0))))
    (ax_mp ((eq (mul (suc a) (d0)) (d0)) (im (eq (add (mul a (d0)) (d0)) (d0)) (eq (mul (suc a) (d0)) (add (mul a (d0)) (d0)))))
      (eqtr4 ((mul (suc a) (d0)) (d0) (add (mul a (d0)) (d0))))
      (mul0 ((suc a))))
    (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0)))
      (ax_mp ((eq (add (mul a (d0)) (d0)) (mul a (d0))) (im (eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0))))
        (eqtr ((add (mul a (d0)) (d0)) (mul a (d0)) (d0)))
        (add0 ((mul a (d0)))))
      (mul0 (a))))
  (eqtr4g ((eq (mul (suc a) y) (add (mul a y) y)) (add (mul (suc a) y) (suc a)) (add (add (mul a y) y) (suc a)) (mul (suc a) (suc y)) (add (mul a (suc y)) (suc y)))
    (mulS ((suc a) y))
    (ax_mp ((eq (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a))) (eq (add (mul a (suc y)) (suc y)) (add (add (mul a y) y) (suc a))))
      (ax_mp ((eq (add (mul a (suc y)) (suc y)) (add (add (mul a y) a) (suc y))) (im (eq (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a))) (eq (add (mul a (suc y)) (suc y)) (add (add (mul a y) y) (suc a)))))
        (eqtr ((add (mul a (suc y)) (suc y)) (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a))))
        (ax_mp ((eq (mul a (suc y)) (add (mul a y) a)) (eq (add (mul a (suc y)) (suc y)) (add (add (mul a y) a) (suc y))))
          (addeq1 ((mul a (suc y)) (add (mul a y) a) (suc y)))
          (mulS (a y))))
      (ax_mp ((eq (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a))) (eq (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a))))
        (ax_mp ((eq (add (add (mul a y) a) (suc y)) (suc (add (add (mul a y) a) y))) (im (eq (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a))) (eq (add (add (mul a y) a) (suc y)) (add (add (mul a y) y) (suc a)))))
          (eqtr ((add (add (mul a y) a) (suc y)) (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a))))
          (addS ((add (mul a y) a) y)))
        (ax_mp ((eq (add (add (mul a y) y) (suc a)) (suc (add (add (mul a y) y) a))) (eq (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a))))
          (ax_mp ((eq (suc (add (add (mul a y) a) y)) (suc (add (add (mul a y) y) a))) (im (eq (add (add (mul a y) y) (suc a)) (suc (add (add (mul a y) y) a))) (eq (suc (add (add (mul a y) a) y)) (add (add (mul a y) y) (suc a)))))
            (eqtr4 ((suc (add (add (mul a y) a) y)) (suc (add (add (mul a y) y) a)) (add (add (mul a y) y) (suc a))))
            (ax_mp ((eq (add (add (mul a y) a) y) (add (add (mul a y) y) a)) (eq (suc (add (add (mul a y) a) y)) (suc (add (add (mul a y) y) a))))
              (suceq ((add (add (mul a y) a) y) (add (add (mul a y) y) a)))
              (add32 ((mul a y) a y))))
          (addS ((add (mul a y) y) a)))))
    (addeq1 ((mul (suc a) y) (add (mul a y) y) (suc a))))))

(local theorem mulcom ((a nat ()) (b nat ())) ()
  (eq (mul a b) (mul b a))
((x nat) (y nat))
(ind (x y b (eq (mul a x) (mul x a)) (eq (mul a (d0)) (mul (d0) a)) (eq (mul a b) (mul b a)) (eq (mul a y) (mul y a)) (eq (mul a (suc y)) (mul (suc y) a)))
  (eqeqd ((eq x (d0)) (mul a x) (mul a (d0)) (mul x a) (mul (d0) a))
    (muleq2 (a x (d0)))
    (muleq1 (x (d0) a)))
  (eqeqd ((eq x y) (mul a x) (mul a y) (mul x a) (mul y a))
    (muleq2 (a x y))
    (muleq1 (x y a)))
  (eqeqd ((eq x (suc y)) (mul a x) (mul a (suc y)) (mul x a) (mul (suc y) a))
    (muleq2 (a x (suc y)))
    (muleq1 (x (suc y) a)))
  (eqeqd ((eq x b) (mul a x) (mul a b) (mul x a) (mul b a))
    (muleq2 (a x b))
    (muleq1 (x b a)))
  (ax_mp ((eq (mul (d0) a) (d0)) (eq (mul a (d0)) (mul (d0) a)))
    (ax_mp ((eq (mul a (d0)) (d0)) (im (eq (mul (d0) a) (d0)) (eq (mul a (d0)) (mul (d0) a))))
      (eqtr4 ((mul a (d0)) (d0) (mul (d0) a)))
      (mul0 (a)))
    (mul01 (a)))
  (eqtr4g ((eq (mul a y) (mul y a)) (add (mul a y) a) (add (mul y a) a) (mul a (suc y)) (mul (suc y) a))
    (mulS (a y))
    (mulS1 (y a))
    (addeq1 ((mul a y) (mul y a) a)))))

(local theorem mul12 ((a nat ())) ()
  (eq (mul a (d1)) a)
()
(:conv (eq (mul a (d1)) a)
  (eq
    (mul
      a
      (:unfold d1 () ()
        (suc (d0))))
    a)
  (ax_mp ((eq (add (mul a (d0)) a) a) (eq (mul a (suc (d0))) a))
    (ax_mp ((eq (mul a (suc (d0))) (add (mul a (d0)) a)) (im (eq (add (mul a (d0)) a) a) (eq (mul a (suc (d0))) a)))
      (eqtr ((mul a (suc (d0))) (add (mul a (d0)) a) a))
      (mulS (a (d0))))
    (ax_mp ((eq (add (d0) a) a) (eq (add (mul a (d0)) a) a))
      (ax_mp ((eq (add (mul a (d0)) a) (add (d0) a)) (im (eq (add (d0) a) a) (eq (add (mul a (d0)) a) a)))
        (eqtr ((add (mul a (d0)) a) (add (d0) a) a))
        (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) a) (add (d0) a)))
          (addeq1 ((mul a (d0)) (d0) a))
          (mul0 (a))))
      (add01 (a))))))

(local theorem mul11 ((a nat ())) ()
  (eq (mul (d1) a) a)
()
(ax_mp ((eq (mul a (d1)) a) (eq (mul (d1) a) a))
  (ax_mp ((eq (mul (d1) a) (mul a (d1))) (im (eq (mul a (d1)) a) (eq (mul (d1) a) a)))
    (eqtr ((mul (d1) a) (mul a (d1)) a))
    (mulcom ((d1) a)))
  (mul12 (a))))

(local theorem mul22 ((a nat ())) ()
  (eq (mul a (d2)) (add a a))
()
(:conv (eq (mul a (d2)) (add a a))
  (eq
    (mul
      a
      (:unfold d2 () ()
        (suc (d1))))
    (add a a))
  (ax_mp ((eq (add (mul a (d1)) a) (add a a)) (eq (mul a (suc (d1))) (add a a)))
    (ax_mp ((eq (mul a (suc (d1))) (add (mul a (d1)) a)) (im (eq (add (mul a (d1)) a) (add a a)) (eq (mul a (suc (d1))) (add a a))))
      (eqtr ((mul a (suc (d1))) (add (mul a (d1)) a) (add a a)))
      (mulS2 (a (d1))))
    (ax_mp ((eq (mul a (d1)) a) (eq (add (mul a (d1)) a) (add a a)))
      (addeq1 ((mul a (d1)) a a))
      (mul12 (a))))))

(local theorem mul21 ((a nat ())) ()
  (eq (mul (d2) a) (add a a))
()
(ax_mp ((eq (mul a (d2)) (add a a)) (eq (mul (d2) a) (add a a)))
  (ax_mp ((eq (mul (d2) a) (mul a (d2))) (im (eq (mul a (d2)) (add a a)) (eq (mul (d2) a) (add a a))))
    (eqtr ((mul (d2) a) (mul a (d2)) (add a a)))
    (mulcom ((d2) a)))
  (mul22 (a))))

(local theorem muladd ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul a (add b c)) (add (mul a b) (mul a c)))
((x nat) (y nat))
(ind (x y c (eq (mul a (add b x)) (add (mul a b) (mul a x))) (eq (mul a (add b (d0))) (add (mul a b) (mul a (d0)))) (eq (mul a (add b c)) (add (mul a b) (mul a c))) (eq (mul a (add b y)) (add (mul a b) (mul a y))) (eq (mul a (add b (suc y))) (add (mul a b) (mul a (suc y)))))
  (eqeqd ((eq x (d0)) (mul a (add b x)) (mul a (add b (d0))) (add (mul a b) (mul a x)) (add (mul a b) (mul a (d0))))
    (muleq2d ((eq x (d0)) a (add b x) (add b (d0)))
      (addeq2 (b x (d0))))
    (addeq2d ((eq x (d0)) (mul a b) (mul a x) (mul a (d0)))
      (muleq2 (a x (d0)))))
  (eqeqd ((eq x y) (mul a (add b x)) (mul a (add b y)) (add (mul a b) (mul a x)) (add (mul a b) (mul a y)))
    (muleq2d ((eq x y) a (add b x) (add b y))
      (addeq2 (b x y)))
    (addeq2d ((eq x y) (mul a b) (mul a x) (mul a y))
      (muleq2 (a x y))))
  (eqeqd ((eq x (suc y)) (mul a (add b x)) (mul a (add b (suc y))) (add (mul a b) (mul a x)) (add (mul a b) (mul a (suc y))))
    (muleq2d ((eq x (suc y)) a (add b x) (add b (suc y)))
      (addeq2 (b x (suc y))))
    (addeq2d ((eq x (suc y)) (mul a b) (mul a x) (mul a (suc y)))
      (muleq2 (a x (suc y)))))
  (eqeqd ((eq x c) (mul a (add b x)) (mul a (add b c)) (add (mul a b) (mul a x)) (add (mul a b) (mul a c)))
    (muleq2d ((eq x c) a (add b x) (add b c))
      (addeq2 (b x c)))
    (addeq2d ((eq x c) (mul a b) (mul a x) (mul a c))
      (muleq2 (a x c))))
  (ax_mp ((eq (add (mul a b) (mul a (d0))) (mul a b)) (eq (mul a (add b (d0))) (add (mul a b) (mul a (d0)))))
    (ax_mp ((eq (mul a (add b (d0))) (mul a b)) (im (eq (add (mul a b) (mul a (d0))) (mul a b)) (eq (mul a (add b (d0))) (add (mul a b) (mul a (d0))))))
      (eqtr4 ((mul a (add b (d0))) (mul a b) (add (mul a b) (mul a (d0)))))
      (ax_mp ((eq (add b (d0)) b) (eq (mul a (add b (d0))) (mul a b)))
        (muleq2 (a (add b (d0)) b))
        (add0 (b))))
    (ax_mp ((eq (add (mul a b) (d0)) (mul a b)) (eq (add (mul a b) (mul a (d0))) (mul a b)))
      (ax_mp ((eq (add (mul a b) (mul a (d0))) (add (mul a b) (d0))) (im (eq (add (mul a b) (d0)) (mul a b)) (eq (add (mul a b) (mul a (d0))) (mul a b))))
        (eqtr ((add (mul a b) (mul a (d0))) (add (mul a b) (d0)) (mul a b)))
        (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a b) (mul a (d0))) (add (mul a b) (d0))))
          (addeq2 ((mul a b) (mul a (d0)) (d0)))
          (mul0 (a))))
      (add0 ((mul a b)))))
  (eqtr4g ((eq (mul a (add b y)) (add (mul a b) (mul a y))) (add (mul a (add b y)) a) (add (add (mul a b) (mul a y)) a) (mul a (add b (suc y))) (add (mul a b) (mul a (suc y))))
    (ax_mp ((eq (mul a (suc (add b y))) (add (mul a (add b y)) a)) (eq (mul a (add b (suc y))) (add (mul a (add b y)) a)))
      (ax_mp ((eq (mul a (add b (suc y))) (mul a (suc (add b y)))) (im (eq (mul a (suc (add b y))) (add (mul a (add b y)) a)) (eq (mul a (add b (suc y))) (add (mul a (add b y)) a))))
        (eqtr ((mul a (add b (suc y))) (mul a (suc (add b y))) (add (mul a (add b y)) a)))
        (ax_mp ((eq (add b (suc y)) (suc (add b y))) (eq (mul a (add b (suc y))) (mul a (suc (add b y)))))
          (muleq2 (a (add b (suc y)) (suc (add b y))))
          (addS (b y))))
      (mulS (a (add b y))))
    (ax_mp ((eq (add (add (mul a b) (mul a y)) a) (add (mul a b) (add (mul a y) a))) (eq (add (mul a b) (mul a (suc y))) (add (add (mul a b) (mul a y)) a)))
      (ax_mp ((eq (add (mul a b) (mul a (suc y))) (add (mul a b) (add (mul a y) a))) (im (eq (add (add (mul a b) (mul a y)) a) (add (mul a b) (add (mul a y) a))) (eq (add (mul a b) (mul a (suc y))) (add (add (mul a b) (mul a y)) a))))
        (eqtr4 ((add (mul a b) (mul a (suc y))) (add (mul a b) (add (mul a y) a)) (add (add (mul a b) (mul a y)) a)))
        (ax_mp ((eq (mul a (suc y)) (add (mul a y) a)) (eq (add (mul a b) (mul a (suc y))) (add (mul a b) (add (mul a y) a))))
          (addeq2 ((mul a b) (mul a (suc y)) (add (mul a y) a)))
          (mulS (a y))))
      (addass ((mul a b) (mul a y) a)))
    (addeq1 ((mul a (add b y)) (add (mul a b) (mul a y)) a)))))

(local theorem addmul ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (add a b) c) (add (mul a c) (mul b c)))
()
(ax_mp ((eq (mul c (add a b)) (add (mul a c) (mul b c))) (eq (mul (add a b) c) (add (mul a c) (mul b c))))
  (ax_mp ((eq (mul (add a b) c) (mul c (add a b))) (im (eq (mul c (add a b)) (add (mul a c) (mul b c))) (eq (mul (add a b) c) (add (mul a c) (mul b c)))))
    (eqtr ((mul (add a b) c) (mul c (add a b)) (add (mul a c) (mul b c))))
    (mulcom ((add a b) c)))
  (ax_mp ((eq (add (mul c a) (mul c b)) (add (mul a c) (mul b c))) (eq (mul c (add a b)) (add (mul a c) (mul b c))))
    (ax_mp ((eq (mul c (add a b)) (add (mul c a) (mul c b))) (im (eq (add (mul c a) (mul c b)) (add (mul a c) (mul b c))) (eq (mul c (add a b)) (add (mul a c) (mul b c)))))
      (eqtr ((mul c (add a b)) (add (mul c a) (mul c b)) (add (mul a c) (mul b c))))
      (muladd (c a b)))
    (ax_mp ((eq (mul c b) (mul b c)) (eq (add (mul c a) (mul c b)) (add (mul a c) (mul b c))))
      (ax_mp ((eq (mul c a) (mul a c)) (im (eq (mul c b) (mul b c)) (eq (add (mul c a) (mul c b)) (add (mul a c) (mul b c)))))
        (addeq ((mul c a) (mul a c) (mul c b) (mul b c)))
        (mulcom (c a)))
      (mulcom (c b))))))

(local theorem mulass ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (mul a b) c) (mul a (mul b c)))
((x nat) (y nat))
(ind (x y c (eq (mul (mul a b) x) (mul a (mul b x))) (eq (mul (mul a b) (d0)) (mul a (mul b (d0)))) (eq (mul (mul a b) c) (mul a (mul b c))) (eq (mul (mul a b) y) (mul a (mul b y))) (eq (mul (mul a b) (suc y)) (mul a (mul b (suc y)))))
  (eqeqd ((eq x (d0)) (mul (mul a b) x) (mul (mul a b) (d0)) (mul a (mul b x)) (mul a (mul b (d0))))
    (muleq2 ((mul a b) x (d0)))
    (muleq2d ((eq x (d0)) a (mul b x) (mul b (d0)))
      (muleq2 (b x (d0)))))
  (eqeqd ((eq x y) (mul (mul a b) x) (mul (mul a b) y) (mul a (mul b x)) (mul a (mul b y)))
    (muleq2 ((mul a b) x y))
    (muleq2d ((eq x y) a (mul b x) (mul b y))
      (muleq2 (b x y))))
  (eqeqd ((eq x (suc y)) (mul (mul a b) x) (mul (mul a b) (suc y)) (mul a (mul b x)) (mul a (mul b (suc y))))
    (muleq2 ((mul a b) x (suc y)))
    (muleq2d ((eq x (suc y)) a (mul b x) (mul b (suc y)))
      (muleq2 (b x (suc y)))))
  (eqeqd ((eq x c) (mul (mul a b) x) (mul (mul a b) c) (mul a (mul b x)) (mul a (mul b c)))
    (muleq2 ((mul a b) x c))
    (muleq2d ((eq x c) a (mul b x) (mul b c))
      (muleq2 (b x c))))
  (ax_mp ((eq (mul a (mul b (d0))) (d0)) (eq (mul (mul a b) (d0)) (mul a (mul b (d0)))))
    (ax_mp ((eq (mul (mul a b) (d0)) (d0)) (im (eq (mul a (mul b (d0))) (d0)) (eq (mul (mul a b) (d0)) (mul a (mul b (d0))))))
      (eqtr4 ((mul (mul a b) (d0)) (d0) (mul a (mul b (d0)))))
      (mul0 ((mul a b))))
    (ax_mp ((eq (mul a (d0)) (d0)) (eq (mul a (mul b (d0))) (d0)))
      (ax_mp ((eq (mul a (mul b (d0))) (mul a (d0))) (im (eq (mul a (d0)) (d0)) (eq (mul a (mul b (d0))) (d0))))
        (eqtr ((mul a (mul b (d0))) (mul a (d0)) (d0)))
        (ax_mp ((eq (mul b (d0)) (d0)) (eq (mul a (mul b (d0))) (mul a (d0))))
          (muleq2 (a (mul b (d0)) (d0)))
          (mul0 (b))))
      (mul0 (a))))
  (eqtr4g ((eq (mul (mul a b) y) (mul a (mul b y))) (add (mul (mul a b) y) (mul a b)) (add (mul a (mul b y)) (mul a b)) (mul (mul a b) (suc y)) (mul a (mul b (suc y))))
    (mulS ((mul a b) y))
    (ax_mp ((eq (mul a (add (mul b y) b)) (add (mul a (mul b y)) (mul a b))) (eq (mul a (mul b (suc y))) (add (mul a (mul b y)) (mul a b))))
      (ax_mp ((eq (mul a (mul b (suc y))) (mul a (add (mul b y) b))) (im (eq (mul a (add (mul b y) b)) (add (mul a (mul b y)) (mul a b))) (eq (mul a (mul b (suc y))) (add (mul a (mul b y)) (mul a b)))))
        (eqtr ((mul a (mul b (suc y))) (mul a (add (mul b y) b)) (add (mul a (mul b y)) (mul a b))))
        (ax_mp ((eq (mul b (suc y)) (add (mul b y) b)) (eq (mul a (mul b (suc y))) (mul a (add (mul b y) b))))
          (muleq2 (a (mul b (suc y)) (add (mul b y) b)))
          (mulS (b y))))
      (muladd (a (mul b y) b)))
    (addeq1 ((mul (mul a b) y) (mul a (mul b y)) (mul a b))))))

(local theorem mul32 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (mul a b) c) (mul (mul a c) b))
()
(ax_mp ((eq (mul a (mul b c)) (mul (mul a c) b)) (eq (mul (mul a b) c) (mul (mul a c) b)))
  (ax_mp ((eq (mul (mul a b) c) (mul a (mul b c))) (im (eq (mul a (mul b c)) (mul (mul a c) b)) (eq (mul (mul a b) c) (mul (mul a c) b))))
    (eqtr ((mul (mul a b) c) (mul a (mul b c)) (mul (mul a c) b)))
    (mulass (a b c)))
  (ax_mp ((eq (mul (mul a c) b) (mul a (mul c b))) (eq (mul a (mul b c)) (mul (mul a c) b)))
    (ax_mp ((eq (mul a (mul b c)) (mul a (mul c b))) (im (eq (mul (mul a c) b) (mul a (mul c b))) (eq (mul a (mul b c)) (mul (mul a c) b))))
      (eqtr4 ((mul a (mul b c)) (mul a (mul c b)) (mul (mul a c) b)))
      (ax_mp ((eq (mul b c) (mul c b)) (eq (mul a (mul b c)) (mul a (mul c b))))
        (muleq2 (a (mul b c) (mul c b)))
        (mulcom (b c))))
    (mulass (a c b)))))

(def sub ((a nat ()) (b nat ())) (nat ())
((x nat))
(the (ab x (eq (add b x) a))))

(local theorem subeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (sub a1 b1) (sub a2 b2)))
((x nat))
(:conv (im _G (eq (sub a1 b1) (sub a2 b2)))
  (im
    _G
    (eq
      (:unfold sub (a1 b1) (x)
        (the (ab x (eq (add b1 x) a1))))
      (:unfold sub (a2 b2) (x)
        (the (ab x (eq (add b2 x) a2))))))
  (theeqd (_G (ab x (eq (add b1 x) a1)) (ab x (eq (add b2 x) a2)))
    (abeqd (_G x (eq (add b1 x) a1) (eq (add b2 x) a2))
      (eqeqd (_G (add b1 x) (add b2 x) a1 a2)
        (addeqd (_G b1 b2 x x)
          hb
          (eqidd (_G x)))
        ha)))))

(local theorem subeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (sub a1 b1) (sub a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (sub a1 b1) (sub a2 b2)))
  (subeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem subeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (sub a1 b) (sub a2 b)))
()
(subeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem subeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (sub a1 b) (sub a2 b)))
()
(subeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem subeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (sub a b1) (sub a b2)))
()
(subeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem subeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (sub a b1) (sub a b2)))
()
(subeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem eqsub2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (add a b) c) (eq (sub c a) b))
((x nat) (y nat))
(:conv (im (eq (add a b) c) (eq (sub c a) b))
  (im
    (eq (add a b) c)
    (eq
      (:unfold sub (c a) (y)
        (the (ab y (eq (add a y) c))))
      b))
  (eqthed ((ab y (eq (add a y) c)) (eq (add a b) c) b x)
    (syl5bb ((eq (add a b) c) (el x (ab y (eq (add a y) c))) (eq (add a x) c) (eq x b))
      (elabe (y x (eq (add a y) c) (eq (add a x) c))
        (eqeq1d ((eq y x) (add a y) (add a x) c)
          (addeq2 (a y x))))
      (syl6bb ((eq (add a b) c) (eq (add a x) c) (eq (add a x) (add a b)) (eq x b))
        (addcan2 (a x b))
        (bicomd ((eq (add a b) c) (eq (add a x) (add a b)) (eq (add a x) c))
          (eqeq2 ((add a x) (add a b) c))))))))

(local theorem eqsub1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (add a b) c) (eq (sub c b) a))
()
(sylbi ((eq (add a b) c) (eq (add b a) c) (eq (sub c b) a))
  (ax_mp ((eq (add a b) (add b a)) (iff (eq (add a b) c) (eq (add b a) c)))
    (eqeq1 ((add a b) (add b a) c))
    (addcom (a b)))
  (eqsub2 (b a c))))

(local theorem pncan ((a nat ()) (b nat ())) ()
  (eq (sub (add a b) b) a)
()
(ax_mp ((eq (add a b) (add a b)) (eq (sub (add a b) b) a))
  (eqsub1 (a b (add a b)))
  (eqid ((add a b)))))

(local theorem pncan2 ((a nat ()) (b nat ())) ()
  (eq (sub (add a b) a) b)
()
(ax_mp ((eq (add a b) (add a b)) (eq (sub (add a b) a) b))
  (eqsub2 (a b (add a b)))
  (eqid ((add a b)))))

(local theorem sub02 ((a nat ())) ()
  (eq (sub a (d0)) a)
()
(ax_mp ((eq (add a (d0)) a) (eq (sub a (d0)) a))
  (eqsub1 (a (d0) a))
  (add0 (a))))

(local theorem subid ((a nat ())) ()
  (eq (sub a a) (d0))
()
(ax_mp ((eq (add (d0) a) a) (eq (sub a a) (d0)))
  (eqsub1 ((d0) a a))
  (add01 (a))))

(local theorem sucsub1 ((a nat ())) ()
  (eq (sub (suc a) (d1)) a)
()
(ax_mp ((eq (sub (add a (d1)) (d1)) a) (eq (sub (suc a) (d1)) a))
  (ax_mp ((eq (sub (add a (d1)) (d1)) (sub (suc a) (d1))) (im (eq (sub (add a (d1)) (d1)) a) (eq (sub (suc a) (d1)) a)))
    (eqtr3 ((sub (suc a) (d1)) (sub (add a (d1)) (d1)) a))
    (ax_mp ((eq (add a (d1)) (suc a)) (eq (sub (add a (d1)) (d1)) (sub (suc a) (d1))))
      (subeq1 ((add a (d1)) (suc a) (d1)))
      (add12 (a))))
  (pncan (a (d1)))))

(def le ((a nat ()) (b nat ())) (wff ())
((x nat))
(ex x (eq (add a x) b)))

(local theorem leeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (iff (le a1 b1) (le a2 b2)))
((x nat))
(:conv (im _G (iff (le a1 b1) (le a2 b2)))
  (im
    _G
    (iff
      (:unfold le (a1 b1) (x)
        (ex x (eq (add a1 x) b1)))
      (:unfold le (a2 b2) (x)
        (ex x (eq (add a2 x) b2)))))
  (exeqd (_G x (eq (add a1 x) b1) (eq (add a2 x) b2))
    (eqeqd (_G (add a1 x) (add a2 x) b1 b2)
      (addeqd (_G a1 a2 x x)
        ha
        (eqidd (_G x)))
      hb))))

(local theorem leeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (iff (le a1 b1) (le a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (iff (le a1 b1) (le a2 b2)))
  (leeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem leeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (iff (le a1 b) (le a2 b)))
()
(leeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem leeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (iff (le a1 b) (le a2 b)))
()
(leeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem leeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (iff (le a b1) (le a b2)))
()
(leeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem leeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (iff (le a b1) (le a b2)))
()
(leeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem dfle ((a nat ()) (b nat ()) (x nat)) ()
  (iff (le a b) (ex x (eq (add a x) b)))
((y nat))
(:conv (iff (le a b) (ex x (eq (add a x) b)))
  (iff
    (:unfold le (a b) (y)
      (ex y (eq (add a y) b)))
    (ex x (eq (add a x) b)))
  (cbvex (y x (eq (add a y) b) (eq (add a x) b))
    (eqeq1d ((eq y x) (add a y) (add a x) b)
      (addeq2 (a y x))))))

(local theorem leid ((a nat ())) ()
  (le a a)
((x nat))
(:conv (le a a)
  (:unfold le (a a) (x)
    (ex x (eq (add a x) a)))
  (ax_mp ((eq (add a (d0)) a) (ex x (eq (add a x) a)))
    (iexe (x (d0) (eq (add a x) a) (eq (add a (d0)) a))
      (eqeq1d ((eq x (d0)) (add a x) (add a (d0)) a)
        (addeq2 (a x (d0)))))
    (add0 (a)))))

(local theorem eqle ((a nat ()) (b nat ())) ()
  (im (eq a b) (le a b))
()
(mpbii ((eq a b) (le a a) (le a b))
  (leid (a))
  (leeq2 (a a b))))

(local theorem eqler ((a nat ()) (b nat ())) ()
  (im (eq a b) (le b a))
()
(syl ((eq a b) (eq b a) (le b a))
  (eqle (b a))
  (eqcom (a b))))

(local theorem pncan3 ((a nat ()) (b nat ())) ()
  (im (le a b) (eq (add a (sub b a)) b))
((x nat))
(:conv (im (le a b) (eq (add a (sub b a)) b))
  (im
    (:unfold le (a b) (x)
      (ex x (eq (add a x) b)))
    (eq (add a (sub b a)) b))
  (eex (x (eq (add a x) b) (eq (add a (sub b a)) b))
    (mpbii ((eq (add a x) b) (eq (add a (sub (add a x) a)) (add a x)) (eq (add a (sub b a)) b))
      (ax_mp ((eq (sub (add a x) a) x) (eq (add a (sub (add a x) a)) (add a x)))
        (addeq2 (a (sub (add a x) a) x))
        (pncan2 (a x)))
      (eqeqd ((eq (add a x) b) (add a (sub (add a x) a)) (add a (sub b a)) (add a x) b)
        (addeq2d ((eq (add a x) b) a (sub (add a x) a) (sub b a))
          (subeq1 ((add a x) b a)))
        (id ((eq (add a x) b))))))))

(local theorem npcan ((a nat ()) (b nat ())) ()
  (im (le b a) (eq (add (sub a b) b) a))
()
(syl5eq ((le b a) (add (sub a b) b) (add b (sub a b)) a)
  (addcom ((sub a b) b))
  (pncan3 (b a))))

(local theorem leaddid1 ((a nat ()) (b nat ())) ()
  (le a (add a b))
((x nat))
(:conv (le a (add a b))
  (:unfold le (a (add a b)) (x)
    (ex x (eq (add a x) (add a b))))
  (ax_mp ((eq (add a b) (add a b)) (ex x (eq (add a x) (add a b))))
    (iexe (x b (eq (add a x) (add a b)) (eq (add a b) (add a b)))
      (eqeq1d ((eq x b) (add a x) (add a b) (add a b))
        (addeq2 (a x b))))
    (eqid ((add a b))))))

(local theorem leaddid2 ((a nat ()) (b nat ())) ()
  (le a (add b a))
()
(mpbi ((le a (add a b)) (le a (add b a)))
  (ax_mp ((eq (add a b) (add b a)) (iff (le a (add a b)) (le a (add b a))))
    (ax_mp ((eq a a) (im (eq (add a b) (add b a)) (iff (le a (add a b)) (le a (add b a)))))
      (leeq (a a (add a b) (add b a)))
      (eqid (a)))
    (addcom (a b)))
  (leaddid1 (a b))))

(local theorem lesucid ((a nat ())) ()
  (le a (suc a))
()
(mpbi ((le a (add a (d1))) (le a (suc a)))
  (ax_mp ((eq (add a (d1)) (suc a)) (iff (le a (add a (d1))) (le a (suc a))))
    (leeq2 (a (add a (d1)) (suc a)))
    (add12 (a)))
  (leaddid1 (a (d1)))))

(local theorem le01 ((a nat ())) ()
  (le (d0) a)
()
(mpbi ((le (d0) (add a (d0))) (le (d0) a))
  (ax_mp ((eq (add a (d0)) a) (iff (le (d0) (add a (d0))) (le (d0) a)))
    (leeq2 ((d0) (add a (d0)) a))
    (add0 (a)))
  (leaddid2 ((d0) a))))

(local theorem leadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a b) (le (add a c) (add b c)))
((x nat))
(:conv (iff (le a b) (le (add a c) (add b c)))
  (iff
    (le a b)
    (:unfold le ((add a c) (add b c)) (x)
      (ex x (eq (add (add a c) x) (add b c)))))
  (ax_mp ((iff (ex x (eq (add a x) b)) (ex x (eq (add (add a c) x) (add b c)))) (iff (le a b) (ex x (eq (add (add a c) x) (add b c)))))
    (ax_mp ((iff (le a b) (ex x (eq (add a x) b))) (im (iff (ex x (eq (add a x) b)) (ex x (eq (add (add a c) x) (add b c)))) (iff (le a b) (ex x (eq (add (add a c) x) (add b c))))))
      (bitr ((le a b) (ex x (eq (add a x) b)) (ex x (eq (add (add a c) x) (add b c)))))
      (dfle (a b x)))
    (exeqi (x (eq (add a x) b) (eq (add (add a c) x) (add b c)))
      (ax_mp ((iff (eq (add (add a x) c) (add b c)) (eq (add (add a c) x) (add b c))) (iff (eq (add a x) b) (eq (add (add a c) x) (add b c))))
        (ax_mp ((iff (eq (add (add a x) c) (add b c)) (eq (add a x) b)) (im (iff (eq (add (add a x) c) (add b c)) (eq (add (add a c) x) (add b c))) (iff (eq (add a x) b) (eq (add (add a c) x) (add b c)))))
          (bitr3 ((eq (add a x) b) (eq (add (add a x) c) (add b c)) (eq (add (add a c) x) (add b c))))
          (addcan1 ((add a x) b c)))
        (ax_mp ((eq (add (add a x) c) (add (add a c) x)) (iff (eq (add (add a x) c) (add b c)) (eq (add (add a c) x) (add b c))))
          (eqeq1 ((add (add a x) c) (add (add a c) x) (add b c)))
          (add32 (a x c))))))))

(local theorem leadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le b c) (le (add a b) (add a c)))
()
(ax_mp ((iff (le (add b a) (add c a)) (le (add a b) (add a c))) (iff (le b c) (le (add a b) (add a c))))
  (ax_mp ((iff (le b c) (le (add b a) (add c a))) (im (iff (le (add b a) (add c a)) (le (add a b) (add a c))) (iff (le b c) (le (add a b) (add a c)))))
    (bitr ((le b c) (le (add b a) (add c a)) (le (add a b) (add a c))))
    (leadd1 (b c a)))
  (ax_mp ((eq (add c a) (add a c)) (iff (le (add b a) (add c a)) (le (add a b) (add a c))))
    (ax_mp ((eq (add b a) (add a b)) (im (eq (add c a) (add a c)) (iff (le (add b a) (add c a)) (le (add a b) (add a c)))))
      (leeq ((add b a) (add a b) (add c a) (add a c)))
      (addcom (b a)))
    (addcom (c a)))))

(local theorem lesuc ((a nat ()) (b nat ())) ()
  (iff (le a b) (le (suc a) (suc b)))
()
(ax_mp ((iff (le (add a (d1)) (add b (d1))) (le (suc a) (suc b))) (iff (le a b) (le (suc a) (suc b))))
  (ax_mp ((iff (le a b) (le (add a (d1)) (add b (d1)))) (im (iff (le (add a (d1)) (add b (d1))) (le (suc a) (suc b))) (iff (le a b) (le (suc a) (suc b)))))
    (bitr ((le a b) (le (add a (d1)) (add b (d1))) (le (suc a) (suc b))))
    (leadd1 (a b (d1))))
  (ax_mp ((eq (add b (d1)) (suc b)) (iff (le (add a (d1)) (add b (d1))) (le (suc a) (suc b))))
    (ax_mp ((eq (add a (d1)) (suc a)) (im (eq (add b (d1)) (suc b)) (iff (le (add a (d1)) (add b (d1))) (le (suc a) (suc b)))))
      (leeq ((add a (d1)) (suc a) (add b (d1)) (suc b)))
      (add12 (a)))
    (add12 (b)))))

(local theorem letrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (le b c))))
  (im G (le a c))
((x nat) (y nat) (z nat))
(mpd (G (le a b) (le a c))
  h1
  (:conv (im G (im (le a b) (le a c)))
    (im
      G
      (im
        (:unfold le (a b) (x)
          (ex x (eq (add a x) b)))
        (le a c)))
    (eexda (x G (eq (add a x) b) (le a c))
      (mpd ((an G (eq (add a x) b)) (le b c) (le a c))
        (anwl (G (eq (add a x) b) (le b c))
          h2)
        (:conv (im (an G (eq (add a x) b)) (im (le b c) (le a c)))
          (im
            (an G (eq (add a x) b))
            (im
              (:unfold le (b c) (y)
                (ex y (eq (add b y) c)))
              (le a c)))
          (eexda (y (an G (eq (add a x) b)) (eq (add b y) c) (le a c))
            (syl ((an (an G (eq (add a x) b)) (eq (add b y) c)) (eq (add a (add x y)) c) (le a c))
              (:conv (im (eq (add a (add x y)) c) (le a c))
                (im
                  (eq (add a (add x y)) c)
                  (:unfold le (a c) (z)
                    (ex z (eq (add a z) c))))
                (iexe (z (add x y) (eq (add a z) c) (eq (add a (add x y)) c))
                  (eqeq1d ((eq z (add x y)) (add a z) (add a (add x y)) c)
                    (addeq2 (a z (add x y))))))
              (syl5eqr ((an (an G (eq (add a x) b)) (eq (add b y) c)) (add a (add x y)) (add (add a x) y) c)
                (addass (a x y))
                (eqtrd ((an (an G (eq (add a x) b)) (eq (add b y) c)) (add (add a x) y) (add b y) c)
                  (addeq1d ((an (an G (eq (add a x) b)) (eq (add b y) c)) (add a x) b y)
                    (anlr (G (eq (add a x) b) (eq (add b y) c))))
                  (anr ((an G (eq (add a x) b)) (eq (add b y) c)))))))))))))

(local theorem letr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (im (le b c) (le a c)))
()
(exp ((le a b) (le b c) (le a c))
  (letrd ((an (le a b) (le b c)) a b c)
    (anl ((le a b) (le b c)))
    (anr ((le a b) (le b c))))))

(local theorem leasymd ((G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (le b a))))
  (im G (eq a b))
((x nat) (y nat) (z nat))
(:let H1 (add0 (a))
(mpd (G (le a b) (eq a b))
  h1
  (:conv (im G (im (le a b) (eq a b)))
    (im
      G
      (im
        (:unfold le (a b) (x)
          (ex x (eq (add a x) b)))
        (eq a b)))
    (eexda (x G (eq (add a x) b) (eq a b))
      (casesda ((an G (eq (add a x) b)) (eq x (d0)) (eq a b))
        (syl5eqr ((an (an G (eq (add a x) b)) (eq x (d0))) a (add a (d0)) b)
          H1
          (eqtr3d ((an (an G (eq (add a x) b)) (eq x (d0))) (add a (d0)) (add a x) b)
            (anwr ((an G (eq (add a x) b)) (eq x (d0)) (eq (add a x) (add a (d0))))
              (addeq2 (a x (d0))))
            (anlr (G (eq (add a x) b) (eq x (d0))))))
        (imp ((an G (eq (add a x) b)) (not (eq x (d0))) (eq a b))
          (syl5bi ((an G (eq (add a x) b)) (not (eq x (d0))) (ex y (eq x (suc y))) (eq a b))
            (:conv (iff (not (eq x (d0))) (ex y (eq x (suc y))))
              (iff
                (:sym (:unfold ne (x (d0)) ()
                  (not (eq x (d0)))))
                (ex y (eq x (suc y))))
              (exsuc (y x)))
            (eexda (y (an G (eq (add a x) b)) (eq x (suc y)) (eq a b))
              (mpd ((an (an G (eq (add a x) b)) (eq x (suc y))) (le b a) (eq a b))
                (anwl ((an G (eq (add a x) b)) (eq x (suc y)) (le b a))
                  (anwl (G (eq (add a x) b) (le b a))
                    h2))
                (:conv (im (an (an G (eq (add a x) b)) (eq x (suc y))) (im (le b a) (eq a b)))
                  (im
                    (an (an G (eq (add a x) b)) (eq x (suc y)))
                    (im
                      (:unfold le (b a) (z)
                        (ex z (eq (add b z) a)))
                      (eq a b)))
                  (eexda (z (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a) (eq a b))
                    (sylc ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (not (eq (suc (add y z)) (d0))) (eq (suc (add y z)) (d0)) (eq a b))
                      (absurd ((eq (suc (add y z)) (d0)) (eq a b)))
                      (a1i ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (not (eq (suc (add y z)) (d0))))
                        (:conv (not (eq (suc (add y z)) (d0)))
                          (:sym (:unfold ne ((suc (add y z)) (d0)) ()
                            (not (eq (suc (add y z)) (d0)))))
                          (peano1 ((add y z)))))
                      (syl5eqr ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (suc (add y z)) (add (suc y) z) (d0))
                        (addS1 (y z))
                        (eqtr3d ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (add (suc y) z) (add x z) (d0))
                          (addeq1d ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) x (suc y) z)
                            (anlr ((an G (eq (add a x) b)) (eq x (suc y)) (eq (add b z) a))))
                          (sylib ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (eq (add a (add x z)) (add a (d0))) (eq (add x z) (d0)))
                            (addcan2 (a (add x z) (d0)))
                            (eqtr4g ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (add (add a x) z) a (add a (add x z)) (add a (d0)))
                              (ax_mp ((eq (add (add a x) z) (add a (add x z))) (eq (add a (add x z)) (add (add a x) z)))
                                (eqcom ((add (add a x) z) (add a (add x z))))
                                (addass (a x z)))
                              H1
                              (eqtrd ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (add (add a x) z) (add b z) a)
                                (addeq1d ((an (an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)) (add a x) b z)
                                  (anwl ((an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a) (eq (add a x) b))
                                    (anlr (G (eq (add a x) b) (eq x (suc y))))))
                                (anr ((an (an G (eq (add a x) b)) (eq x (suc y))) (eq (add b z) a)))))))))))))))))))))

(local theorem leasym ((a nat ()) (b nat ())) ()
  (im (le a b) (im (le b a) (eq a b)))
()
(exp ((le a b) (le b a) (eq a b))
  (leasymd ((an (le a b) (le b a)) a b)
    (anl ((le a b) (le b a)))
    (anr ((le a b) (le b a))))))

(local theorem eqlele ((a nat ()) (b nat ())) ()
  (iff (eq a b) (an (le a b) (le b a)))
()
(ibii ((eq a b) (an (le a b) (le b a)))
  (iand ((eq a b) (le a b) (le b a))
    (eqle (a b))
    (eqler (a b)))
  (imp ((le a b) (le b a) (eq a b))
    (leasym (a b)))))

(local theorem le02 ((a nat ())) ()
  (iff (le a (d0)) (eq a (d0)))
()
(ibii ((le a (d0)) (eq a (d0)))
  (mpi ((le a (d0)) (le (d0) a) (eq a (d0)))
    (le01 (a))
    (leasym (a (d0))))
  (eqle (a (d0)))))

(local theorem le11 ((a nat ())) ()
  (iff (le (d1) a) (ne a (d0)))
((x nat))
(:conv (iff (le (d1) a) (ne a (d0)))
  (iff
    (:unfold le ((d1) a) (x)
      (ex x (eq (add (d1) x) a)))
    (ne a (d0)))
  (ax_mp ((iff (ne a (d0)) (ex x (eq a (suc x)))) (iff (ex x (eq (add (d1) x) a)) (ne a (d0))))
    (ax_mp ((iff (ex x (eq (add (d1) x) a)) (ex x (eq a (suc x)))) (im (iff (ne a (d0)) (ex x (eq a (suc x)))) (iff (ex x (eq (add (d1) x) a)) (ne a (d0)))))
      (bitr4 ((ex x (eq (add (d1) x) a)) (ex x (eq a (suc x))) (ne a (d0))))
      (exeqi (x (eq (add (d1) x) a) (eq a (suc x)))
        (ax_mp ((iff (eq a (add (d1) x)) (eq a (suc x))) (iff (eq (add (d1) x) a) (eq a (suc x))))
          (ax_mp ((iff (eq (add (d1) x) a) (eq a (add (d1) x))) (im (iff (eq a (add (d1) x)) (eq a (suc x))) (iff (eq (add (d1) x) a) (eq a (suc x)))))
            (bitr ((eq (add (d1) x) a) (eq a (add (d1) x)) (eq a (suc x))))
            (eqcomb ((add (d1) x) a)))
          (ax_mp ((eq (add (d1) x) (suc x)) (iff (eq a (add (d1) x)) (eq a (suc x))))
            (eqeq2 (a (add (d1) x) (suc x)))
            (add11 (x))))))
    (exsuc (x a)))))

(local theorem sub1can ((a nat ())) ()
  (im (ne a (d0)) (eq (suc (sub a (d1))) a))
()
(sylbir ((ne a (d0)) (le (d1) a) (eq (suc (sub a (d1))) a))
  (le11 (a))
  (syl5eqr ((le (d1) a) (suc (sub a (d1))) (add (sub a (d1)) (d1)) a)
    (add12 ((sub a (d1))))
    (npcan (a (d1))))))

(local theorem leaddd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (le c d))))
  (im G (le (add a c) (add b d)))
()
(letrd (G (add a c) (add b c) (add b d))
  (sylib (G (le a b) (le (add a c) (add b c)))
    (leadd1 (a b c))
    h1)
  (sylib (G (le c d) (le (add b c) (add b d)))
    (leadd2 (b c d))
    h2)))

(local theorem leadd ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (le a b) (im (le c d) (le (add a c) (add b d))))
()
(exp ((le a b) (le c d) (le (add a c) (add b d)))
  (leaddd ((an (le a b) (le c d)) a b c d)
    (anl ((le a b) (le c d)))
    (anr ((le a b) (le c d))))))

(local theorem lemul1a ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (le (mul a c) (mul b c)))
((x nat) (y nat))
(indd ((le a b) x y c (le (mul a x) (mul b x)) (le (mul a (d0)) (mul b (d0))) (le (mul a c) (mul b c)) (le (mul a y) (mul b y)) (le (mul a (suc y)) (mul b (suc y))))
  (leeqd ((eq x (d0)) (mul a x) (mul a (d0)) (mul b x) (mul b (d0)))
    (muleq2 (a x (d0)))
    (muleq2 (b x (d0))))
  (leeqd ((eq x y) (mul a x) (mul a y) (mul b x) (mul b y))
    (muleq2 (a x y))
    (muleq2 (b x y)))
  (leeqd ((eq x (suc y)) (mul a x) (mul a (suc y)) (mul b x) (mul b (suc y)))
    (muleq2 (a x (suc y)))
    (muleq2 (b x (suc y))))
  (leeqd ((eq x c) (mul a x) (mul a c) (mul b x) (mul b c))
    (muleq2 (a x c))
    (muleq2 (b x c)))
  (a1i ((le a b) (le (mul a (d0)) (mul b (d0))))
    (ax_mp ((eq (mul a (d0)) (mul b (d0))) (le (mul a (d0)) (mul b (d0))))
      (eqle ((mul a (d0)) (mul b (d0))))
      (ax_mp ((eq (mul b (d0)) (d0)) (eq (mul a (d0)) (mul b (d0))))
        (ax_mp ((eq (mul a (d0)) (d0)) (im (eq (mul b (d0)) (d0)) (eq (mul a (d0)) (mul b (d0)))))
          (eqtr4 ((mul a (d0)) (d0) (mul b (d0))))
          (mul0 (a)))
        (mul0 (b)))))
  (sylibr ((an (le a b) (le (mul a y) (mul b y))) (le (add (mul a y) a) (add (mul b y) b)) (le (mul a (suc y)) (mul b (suc y))))
    (ax_mp ((eq (mul b (suc y)) (add (mul b y) b)) (iff (le (mul a (suc y)) (mul b (suc y))) (le (add (mul a y) a) (add (mul b y) b))))
      (ax_mp ((eq (mul a (suc y)) (add (mul a y) a)) (im (eq (mul b (suc y)) (add (mul b y) b)) (iff (le (mul a (suc y)) (mul b (suc y))) (le (add (mul a y) a) (add (mul b y) b)))))
        (leeq ((mul a (suc y)) (add (mul a y) a) (mul b (suc y)) (add (mul b y) b)))
        (mulS (a y)))
      (mulS (b y)))
    (leaddd ((an (le a b) (le (mul a y) (mul b y))) (mul a y) (mul b y) a b)
      (anr ((le a b) (le (mul a y) (mul b y))))
      (anl ((le a b) (le (mul a y) (mul b y))))))))

(local theorem lemul2a ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b c) (le (mul a b) (mul a c)))
()
(sylib ((le b c) (le (mul b a) (mul c a)) (le (mul a b) (mul a c)))
  (ax_mp ((eq (mul c a) (mul a c)) (iff (le (mul b a) (mul c a)) (le (mul a b) (mul a c))))
    (ax_mp ((eq (mul b a) (mul a b)) (im (eq (mul c a) (mul a c)) (iff (le (mul b a) (mul c a)) (le (mul a b) (mul a c)))))
      (leeq ((mul b a) (mul a b) (mul c a) (mul a c)))
      (mulcom (b a)))
    (mulcom (c a)))
  (lemul1a (b c a))))

(local theorem lemuld ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (le c d))))
  (im G (le (mul a c) (mul b d)))
()
(letrd (G (mul a c) (mul b c) (mul b d))
  (syl (G (le a b) (le (mul a c) (mul b c)))
    (lemul1a (a b c))
    h1)
  (syl (G (le c d) (le (mul b c) (mul b d)))
    (lemul2a (b c d))
    h2)))

(def lt ((a nat ()) (b nat ())) (wff ())
()
(le (suc a) b))

(local theorem lteqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (iff (lt a1 b1) (lt a2 b2)))
()
(:conv (im _G (iff (lt a1 b1) (lt a2 b2)))
  (im
    _G
    (iff
      (:unfold lt (a1 b1) ()
        (le (suc a1) b1))
      (:unfold lt (a2 b2) ()
        (le (suc a2) b2))))
  (leeqd (_G (suc a1) (suc a2) b1 b2)
    (suceqd (_G a1 a2)
      ha)
    hb)))

(local theorem lteq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (iff (lt a1 b1) (lt a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (iff (lt a1 b1) (lt a2 b2)))
  (lteqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem lteq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (iff (lt a1 b) (lt a2 b)))
()
(lteqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem lteq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (iff (lt a1 b) (lt a2 b)))
()
(lteq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem lteq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (iff (lt a b1) (lt a b2)))
()
(lteqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem lteq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (iff (lt a b1) (lt a b2)))
()
(lteq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem ltletr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt a b) (im (le b c) (lt a c)))
()
(:conv (im (lt a b) (im (le b c) (lt a c)))
  (im
    (:unfold lt (a b) ()
      (le (suc a) b))
    (im
      (le b c)
      (:unfold lt (a c) ()
        (le (suc a) c))))
  (letr ((suc a) b c))))

(local theorem ltletrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (lt a b)))
   (h2 (im G (le b c))))
  (im G (lt a c))
()
(:conv (im G (lt a c))
  (im
    G
    (:unfold lt (a c) ()
      (le (suc a) c)))
  (letrd (G (suc a) b c)
    (:conv (im G (le (suc a) b))
      (im
        G
        (:sym (:unfold lt (a b) ()
          (le (suc a) b))))
      h1)
    h2)))

(local theorem ltle ((a nat ()) (b nat ())) ()
  (im (lt a b) (le a b))
()
(letrd ((lt a b) a (suc a) b)
  (a1i ((lt a b) (le a (suc a)))
    (lesucid (a)))
  (:conv (im (lt a b) (le (suc a) b))
    (im
      (lt a b)
      (:sym (:unfold lt (a b) ()
        (le (suc a) b))))
    (id ((lt a b))))))

(local theorem ltled ((G wff ()) (a nat ()) (b nat ()))
  ((h (im G (lt a b))))
  (im G (le a b))
()
(syl (G (lt a b) (le a b))
  (ltle (a b))
  h))

(local theorem lelttr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (im (lt b c) (lt a c)))
()
(sylbi ((le a b) (le (suc a) (suc b)) (im (lt b c) (lt a c)))
  (lesuc (a b))
  (:conv (im (le (suc a) (suc b)) (im (lt b c) (lt a c)))
    (im
      (le (suc a) (suc b))
      (im
        (:unfold lt (b c) ()
          (le (suc b) c))
        (:unfold lt (a c) ()
          (le (suc a) c))))
    (letr ((suc a) (suc b) c)))))

(local theorem lelttrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (lt b c))))
  (im G (lt a c))
()
(sylc (G (le a b) (lt b c) (lt a c))
  (lelttr (a b c))
  h1
  h2))

(local theorem lttr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt a b) (im (lt b c) (lt a c)))
()
(syl ((lt a b) (le a b) (im (lt b c) (lt a c)))
  (lelttr (a b c))
  (ltle (a b))))

(local theorem lttrd ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (lt a b)))
   (h2 (im G (lt b c))))
  (im G (lt a c))
()
(sylc (G (lt a b) (lt b c) (lt a c))
  (lttr (a b c))
  h1
  h2))

(local theorem ltsucid ((a nat ())) ()
  (lt a (suc a))
()
(:conv (lt a (suc a))
  (:unfold lt (a (suc a)) ()
    (le (suc a) (suc a)))
  (leid ((suc a)))))

(local theorem lt01 ((a nat ())) ()
  (iff (lt (d0) a) (ne a (d0)))
()
(:conv (iff (lt (d0) a) (ne a (d0)))
  (iff
    (:unfold lt ((d0) a) ()
      (le
        (:sym (:unfold d1 () ()
          (suc (d0))))
        a))
    (ne a (d0)))
  (le11 (a))))

(local theorem lt02 ((a nat ())) ()
  (not (lt a (d0)))
()
(:conv (not (lt a (d0)))
  (not
    (:unfold lt (a (d0)) ()
      (le (suc a) (d0))))
  (ax_mp ((not (eq (suc a) (d0))) (not (le (suc a) (d0))))
    (ax_mp ((im (le (suc a) (d0)) (eq (suc a) (d0))) (im (not (eq (suc a) (d0))) (not (le (suc a) (d0)))))
      (con3 ((le (suc a) (d0)) (eq (suc a) (d0))))
      (ax_mp ((iff (le (suc a) (d0)) (eq (suc a) (d0))) (im (le (suc a) (d0)) (eq (suc a) (d0))))
        (bi1 ((le (suc a) (d0)) (eq (suc a) (d0))))
        (le02 ((suc a)))))
    (:conv (not (eq (suc a) (d0)))
      (:sym (:unfold ne ((suc a) (d0)) ()
        (not (eq (suc a) (d0)))))
      (peano1 (a))))))

(local theorem lt01S ((a nat ())) ()
  (lt (d0) (suc a))
()
(mpbir ((ne (suc a) (d0)) (lt (d0) (suc a)))
  (lt01 ((suc a)))
  (peano1 (a))))

(local theorem ltadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a b) (lt (add a c) (add b c)))
()
(:conv (iff (lt a b) (lt (add a c) (add b c)))
  (iff
    (:unfold lt (a b) ()
      (le (suc a) b))
    (:unfold lt ((add a c) (add b c)) ()
      (le (suc (add a c)) (add b c))))
  (ax_mp ((iff (le (add (suc a) c) (add b c)) (le (suc (add a c)) (add b c))) (iff (le (suc a) b) (le (suc (add a c)) (add b c))))
    (ax_mp ((iff (le (suc a) b) (le (add (suc a) c) (add b c))) (im (iff (le (add (suc a) c) (add b c)) (le (suc (add a c)) (add b c))) (iff (le (suc a) b) (le (suc (add a c)) (add b c)))))
      (bitr ((le (suc a) b) (le (add (suc a) c) (add b c)) (le (suc (add a c)) (add b c))))
      (leadd1 ((suc a) b c)))
    (ax_mp ((eq (add (suc a) c) (suc (add a c))) (iff (le (add (suc a) c) (add b c)) (le (suc (add a c)) (add b c))))
      (leeq1 ((add (suc a) c) (suc (add a c)) (add b c)))
      (addS1 (a c))))))

(local theorem ltadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt b c) (lt (add a b) (add a c)))
()
(ax_mp ((iff (lt (add b a) (add c a)) (lt (add a b) (add a c))) (iff (lt b c) (lt (add a b) (add a c))))
  (ax_mp ((iff (lt b c) (lt (add b a) (add c a))) (im (iff (lt (add b a) (add c a)) (lt (add a b) (add a c))) (iff (lt b c) (lt (add a b) (add a c)))))
    (bitr ((lt b c) (lt (add b a) (add c a)) (lt (add a b) (add a c))))
    (ltadd1 (b c a)))
  (ax_mp ((eq (add c a) (add a c)) (iff (lt (add b a) (add c a)) (lt (add a b) (add a c))))
    (ax_mp ((eq (add b a) (add a b)) (im (eq (add c a) (add a c)) (iff (lt (add b a) (add c a)) (lt (add a b) (add a c)))))
      (lteq ((add b a) (add a b) (add c a) (add a c)))
      (addcom (b a)))
    (addcom (c a)))))

(local theorem ltsuc ((a nat ()) (b nat ())) ()
  (iff (lt a b) (lt (suc a) (suc b)))
()
(ax_mp ((iff (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b))) (iff (lt a b) (lt (suc a) (suc b))))
  (ax_mp ((iff (lt a b) (lt (add a (d1)) (add b (d1)))) (im (iff (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b))) (iff (lt a b) (lt (suc a) (suc b)))))
    (bitr ((lt a b) (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b))))
    (ltadd1 (a b (d1))))
  (ax_mp ((eq (add b (d1)) (suc b)) (iff (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b))))
    (ax_mp ((eq (add a (d1)) (suc a)) (im (eq (add b (d1)) (suc b)) (iff (lt (add a (d1)) (add b (d1))) (lt (suc a) (suc b)))))
      (lteq ((add a (d1)) (suc a) (add b (d1)) (suc b)))
      (add12 (a)))
    (add12 (b)))))

(local theorem leltsuc ((a nat ()) (b nat ())) ()
  (iff (le a b) (lt a (suc b)))
()
(:conv (iff (le a b) (lt a (suc b)))
  (iff
    (le a b)
    (:unfold lt (a (suc b)) ()
      (le (suc a) (suc b))))
  (lesuc (a b))))

(local theorem ltirr ((a nat ())) ()
  (not (lt a a))
()
(:let H1 (add01 (a))
(mtbi ((lt (d0) (d0)) (lt a a))
  (ax_mp ((iff (lt (add (d0) a) (add (d0) a)) (lt a a)) (iff (lt (d0) (d0)) (lt a a)))
    (ax_mp ((iff (lt (d0) (d0)) (lt (add (d0) a) (add (d0) a))) (im (iff (lt (add (d0) a) (add (d0) a)) (lt a a)) (iff (lt (d0) (d0)) (lt a a))))
      (bitr ((lt (d0) (d0)) (lt (add (d0) a) (add (d0) a)) (lt a a)))
      (ltadd1 ((d0) (d0) a)))
    (ax_mp ((eq (add (d0) a) a) (iff (lt (add (d0) a) (add (d0) a)) (lt a a)))
      (ax_mp ((eq (add (d0) a) a) (im (eq (add (d0) a) a) (iff (lt (add (d0) a) (add (d0) a)) (lt a a))))
        (lteq ((add (d0) a) a (add (d0) a) a))
        H1)
      H1))
  (lt02 ((d0))))))

(local theorem ltne ((a nat ()) (b nat ())) ()
  (im (lt a b) (ne a b))
()
(mpi ((lt a b) (not (lt b b)) (ne a b))
  (ltirr (b))
  (:conv (im (lt a b) (im (not (lt b b)) (ne a b)))
    (im
      (lt a b)
      (im
        (not (lt b b))
        (:unfold ne (a b) ()
          (not (eq a b)))))
    (con3d ((lt a b) (eq a b) (lt b b))
      (com12 ((eq a b) (lt a b) (lt b b))
        (bi1d ((eq a b) (lt a b) (lt b b))
          (lteq1 (a b b))))))))

(local theorem ltner ((a nat ()) (b nat ())) ()
  (im (lt a b) (ne b a))
()
(syl ((lt a b) (ne a b) (ne b a))
  (necom (a b))
  (ltne (a b))))

(local theorem d0lt1 () ()
  (lt (d0) (d1))
()
(:conv (lt (d0) (d1))
  (lt
    (d0)
    (:unfold d1 () ()
      (suc (d0))))
  (lt01S ((d0)))))

(local theorem d0lt2 () ()
  (lt (d0) (d2))
()
(:conv (lt (d0) (d2))
  (lt
    (d0)
    (:unfold d2 () ()
      (suc (d1))))
  (lt01S ((d1)))))

(local theorem d1lt2 () ()
  (lt (d1) (d2))
()
(mpbi ((lt (d0) (d1)) (lt (d1) (d2)))
  (:conv (iff (lt (d0) (d1)) (lt (d1) (d2)))
    (iff
      (lt (d0) (d1))
      (lt
        (:unfold d1 () ()
          (suc (d0)))
        (:unfold d2 () ()
          (suc (d1)))))
    (ltsuc ((d0) (d1))))
  (d0lt1 ())))

(local theorem lt12 ((a nat ())) ()
  (iff (lt a (d1)) (eq a (d0)))
()
(:conv (iff (lt a (d1)) (eq a (d0)))
  (iff
    (lt
      a
      (:unfold d1 () ()
        (suc (d0))))
    (eq a (d0)))
  (ax_mp ((iff (le a (d0)) (eq a (d0))) (iff (lt a (suc (d0))) (eq a (d0))))
    (ax_mp ((iff (le a (d0)) (lt a (suc (d0)))) (im (iff (le a (d0)) (eq a (d0))) (iff (lt a (suc (d0))) (eq a (d0)))))
      (bitr3 ((lt a (suc (d0))) (le a (d0)) (eq a (d0))))
      (leltsuc (a (d0))))
    (le02 (a)))))

(local theorem nlesubeq0 ((a nat ()) (b nat ())) ()
  (im (not (le b a)) (eq (sub a b) (d0)))
((x nat))
(:conv (im (not (le b a)) (eq (sub a b) (d0)))
  (im
    (not (le b a))
    (eq
      (:unfold sub (a b) (x)
        (the (ab x (eq (add b x) a))))
      (d0)))
  (eqthe0abd ((not (le b a)) x (eq (add b x) a))
    (syl5 ((not (le b a)) (eq (add b x) a) (le b a) (eq x (d0)))
      (mpbii ((eq (add b x) a) (le b (add b x)) (le b a))
        (leaddid1 (b x))
        (leeq2 (b (add b x) a)))
      (absurd ((le b a) (eq x (d0))))))))

(local theorem subleid ((a nat ()) (b nat ())) ()
  (le (sub a b) a)
()
(cases ((le b a) (le (sub a b) a))
  (mpbii ((le b a) (le (sub a b) (add (sub a b) b)) (le (sub a b) a))
    (leaddid1 ((sub a b) b))
    (leeq2d ((le b a) (sub a b) (add (sub a b) b) a)
      (npcan (a b))))
  (mpbiri ((not (le b a)) (le (d0) a) (le (sub a b) a))
    (le01 (a))
    (leeq1d ((not (le b a)) (sub a b) (d0) a)
      (nlesubeq0 (a b))))))

(local theorem subltid ((a nat ()) (b nat ())) ()
  (im (an (lt (d0) a) (lt (d0) b)) (lt (sub a b) a))
()
(casesda ((an (lt (d0) a) (lt (d0) b)) (le b a) (lt (sub a b) a))
  (sylibr ((an (an (lt (d0) a) (lt (d0) b)) (le b a)) (lt (add (sub a b) b) (add a b)) (lt (sub a b) a))
    (ltadd1 ((sub a b) a b))
    (mpbird ((an (an (lt (d0) a) (lt (d0) b)) (le b a)) (lt (add a (d0)) (add a b)) (lt (add (sub a b) b) (add a b)))
      (anwr ((an (lt (d0) a) (lt (d0) b)) (le b a) (iff (lt (add (sub a b) b) (add a b)) (lt (add a (d0)) (add a b))))
        (lteq1d ((le b a) (add (sub a b) b) (add a (d0)) (add a b))
          (syl6eqr ((le b a) (add (sub a b) b) a (add a (d0)))
            (add0 (a))
            (npcan (a b)))))
      (sylib ((an (an (lt (d0) a) (lt (d0) b)) (le b a)) (lt (d0) b) (lt (add a (d0)) (add a b)))
        (ltadd2 (a (d0) b))
        (anlr ((lt (d0) a) (lt (d0) b) (le b a))))))
  (mpbird ((an (an (lt (d0) a) (lt (d0) b)) (not (le b a))) (lt (d0) a) (lt (sub a b) a))
    (anwr ((an (lt (d0) a) (lt (d0) b)) (not (le b a)) (iff (lt (sub a b) a) (lt (d0) a)))
      (lteq1d ((not (le b a)) (sub a b) (d0) a)
        (nlesubeq0 (a b))))
    (anll ((lt (d0) a) (lt (d0) b) (not (le b a)))))))

(local theorem leloe ((a nat ()) (b nat ())) ()
  (iff (le a b) (or (lt a b) (eq a b)))
((x nat) (y nat))
(ibii ((le a b) (or (lt a b) (eq a b)))
  (:conv (im (le a b) (or (lt a b) (eq a b)))
    (im
      (:unfold le (a b) (x)
        (ex x (eq (add a x) b)))
      (or (lt a b) (eq a b)))
    (eex (x (eq (add a x) b) (or (lt a b) (eq a b)))
      (casesd ((eq (add a x) b) (eq x (d0)) (or (lt a b) (eq a b)))
        (exp ((eq (add a x) b) (eq x (d0)) (or (lt a b) (eq a b)))
          (orrd ((an (eq (add a x) b) (eq x (d0))) (lt a b) (eq a b))
            (syl5eqr ((an (eq (add a x) b) (eq x (d0))) a (add a (d0)) b)
              (add0 (a))
              (eqtr3d ((an (eq (add a x) b) (eq x (d0))) (add a (d0)) (add a x) b)
                (anwr ((eq (add a x) b) (eq x (d0)) (eq (add a x) (add a (d0))))
                  (addeq2 (a x (d0))))
                (anl ((eq (add a x) b) (eq x (d0))))))))
        (syl5bi ((eq (add a x) b) (not (eq x (d0))) (ex y (eq x (suc y))) (or (lt a b) (eq a b)))
          (:conv (iff (not (eq x (d0))) (ex y (eq x (suc y))))
            (iff
              (:sym (:unfold ne (x (d0)) ()
                (not (eq x (d0)))))
              (ex y (eq x (suc y))))
            (exsuc (y x)))
          (eexda (y (eq (add a x) b) (eq x (suc y)) (or (lt a b) (eq a b)))
            (orld ((an (eq (add a x) b) (eq x (suc y))) (lt a b) (eq a b))
              (mpbii ((an (eq (add a x) b) (eq x (suc y))) (le (suc a) (add (suc a) y)) (lt a b))
                (leaddid1 ((suc a) y))
                (:conv (im (an (eq (add a x) b) (eq x (suc y))) (iff (le (suc a) (add (suc a) y)) (lt a b)))
                  (im
                    (an (eq (add a x) b) (eq x (suc y)))
                    (iff
                      (le (suc a) (add (suc a) y))
                      (:unfold lt (a b) ()
                        (le (suc a) b))))
                  (leeq2d ((an (eq (add a x) b) (eq x (suc y))) (suc a) (add (suc a) y) b)
                    (syl5eq ((an (eq (add a x) b) (eq x (suc y))) (add (suc a) y) (add a (suc y)) b)
                      (addSass (a y))
                      (eqtr3d ((an (eq (add a x) b) (eq x (suc y))) (add a (suc y)) (add a x) b)
                        (anwr ((eq (add a x) b) (eq x (suc y)) (eq (add a x) (add a (suc y))))
                          (addeq2 (a x (suc y))))
                        (anl ((eq (add a x) b) (eq x (suc y)))))))))))))))
  (ax_mp ((im (eq a b) (le a b)) (im (or (lt a b) (eq a b)) (le a b)))
    (ax_mp ((im (lt a b) (le a b)) (im (im (eq a b) (le a b)) (im (or (lt a b) (eq a b)) (le a b))))
      (eor ((lt a b) (eq a b) (le a b)))
      (ltle (a b)))
    (eqle (a b)))))

(local theorem ltlene ((a nat ()) (b nat ())) ()
  (iff (lt a b) (an (le a b) (ne a b)))
()
(ibii ((lt a b) (an (le a b) (ne a b)))
  (iand ((lt a b) (le a b) (ne a b))
    (ltle (a b))
    (ltne (a b)))
  (imp ((le a b) (ne a b) (lt a b))
    (:conv (im (le a b) (im (ne a b) (lt a b)))
      (im
        (le a b)
        (im
          (:unfold ne (a b) ()
            (not (eq a b)))
          (lt a b)))
      (con1d ((le a b) (lt a b) (eq a b))
        (:conv (im (le a b) (im (not (lt a b)) (eq a b)))
          (im
            (le a b)
            (:sym (:unfold or ((lt a b) (eq a b)) ()
              (im (not (lt a b)) (eq a b)))))
          (ax_mp ((iff (le a b) (or (lt a b) (eq a b))) (im (le a b) (or (lt a b) (eq a b))))
            (bi1 ((le a b) (or (lt a b) (eq a b))))
            (leloe (a b)))))))))

(local theorem ltlenle ((a nat ()) (b nat ())) ()
  (iff (lt a b) (an (le a b) (not (le b a))))
()
(ibii ((lt a b) (an (le a b) (not (le b a))))
  (iand ((lt a b) (le a b) (not (le b a)))
    (ltle (a b))
    (mtd ((lt a b) (lt a a) (le b a))
      (a1i ((lt a b) (not (lt a a)))
        (ltirr (a)))
      (ltletr (a b a))))
  (sylibr ((an (le a b) (not (le b a))) (an (le a b) (ne a b)) (lt a b))
    (ltlene (a b))
    (iand ((an (le a b) (not (le b a))) (le a b) (ne a b))
      (anl ((le a b) (not (le b a))))
      (anwr ((le a b) (not (le b a)) (ne a b))
        (:conv (im (not (le b a)) (ne a b))
          (im
            (not (le b a))
            (:unfold ne (a b) ()
              (not (eq a b))))
          (ax_mp ((im (eq a b) (le b a)) (im (not (le b a)) (not (eq a b))))
            (con3 ((eq a b) (le b a)))
            (eqler (a b)))))))))

(local theorem ltorle ((a nat ()) (b nat ())) ()
  (or (lt a b) (le b a))
((x nat) (y nat))
(ind (x y b (or (lt a x) (le x a)) (or (lt a (d0)) (le (d0) a)) (or (lt a b) (le b a)) (or (lt a y) (le y a)) (or (lt a (suc y)) (le (suc y) a)))
  (oreqd ((eq x (d0)) (lt a x) (lt a (d0)) (le x a) (le (d0) a))
    (lteq2 (a x (d0)))
    (leeq1 (x (d0) a)))
  (oreqd ((eq x y) (lt a x) (lt a y) (le x a) (le y a))
    (lteq2 (a x y))
    (leeq1 (x y a)))
  (oreqd ((eq x (suc y)) (lt a x) (lt a (suc y)) (le x a) (le (suc y) a))
    (lteq2 (a x (suc y)))
    (leeq1 (x (suc y) a)))
  (oreqd ((eq x b) (lt a x) (lt a b) (le x a) (le b a))
    (lteq2 (a x b))
    (leeq1 (x b a)))
  (ax_mp ((le (d0) a) (or (lt a (d0)) (le (d0) a)))
    (orr ((lt a (d0)) (le (d0) a)))
    (le01 (a)))
  (:conv (im (or (lt a y) (le y a)) (or (lt a (suc y)) (le (suc y) a)))
    (im
      (or (lt a y) (le y a))
      (or
        (lt a (suc y))
        (:sym (:unfold lt (y a) ()
          (le (suc y) a)))))
    (ax_mp ((im (le y a) (or (lt a (suc y)) (lt y a))) (im (or (lt a y) (le y a)) (or (lt a (suc y)) (lt y a))))
      (ax_mp ((im (lt a y) (or (lt a (suc y)) (lt y a))) (im (im (le y a) (or (lt a (suc y)) (lt y a))) (im (or (lt a y) (le y a)) (or (lt a (suc y)) (lt y a)))))
        (eor ((lt a y) (le y a) (or (lt a (suc y)) (lt y a))))
        (orld ((lt a y) (lt a (suc y)) (lt y a))
          (mpi ((lt a y) (lt y (suc y)) (lt a (suc y)))
            (ltsucid (y))
            (lttr (a y (suc y))))))
      (:conv (im (le y a) (or (lt a (suc y)) (lt y a)))
        (im
          (le y a)
          (:unfold or ((lt a (suc y)) (lt y a)) ()
            (im
              (not
                (:unfold lt (a (suc y)) ()
                  (le (suc a) (suc y))))
              (lt y a))))
        (syl5 ((le y a) (not (le (suc a) (suc y))) (not (le a y)) (lt y a))
          (ax_mp ((im (le a y) (le (suc a) (suc y))) (im (not (le (suc a) (suc y))) (not (le a y))))
            (con3 ((le a y) (le (suc a) (suc y))))
            (ax_mp ((iff (le a y) (le (suc a) (suc y))) (im (le a y) (le (suc a) (suc y))))
              (bi1 ((le a y) (le (suc a) (suc y))))
              (lesuc (a y))))
          (exp ((le y a) (not (le a y)) (lt y a))
            (ax_mp ((iff (lt y a) (an (le y a) (not (le a y)))) (im (an (le y a) (not (le a y))) (lt y a)))
              (bi2 ((lt y a) (an (le y a) (not (le a y)))))
              (ltlenle (y a))))))))))

(local theorem leorlt ((a nat ()) (b nat ())) ()
  (or (le a b) (lt b a))
()
(ax_mp ((or (lt b a) (le a b)) (or (le a b) (lt b a)))
  (orcom ((lt b a) (le a b)))
  (ltorle (b a))))

(local theorem ltnle ((a nat ()) (b nat ())) ()
  (iff (lt a b) (not (le b a)))
()
(ibii ((lt a b) (not (le b a)))
  (sylbi ((lt a b) (an (le a b) (not (le b a))) (not (le b a)))
    (ltlenle (a b))
    (anr ((le a b) (not (le b a)))))
  (:conv (im (not (le b a)) (lt a b))
    (:sym (:unfold or ((le b a) (lt a b)) ()
      (im (not (le b a)) (lt a b))))
    (leorlt (b a)))))

(local theorem lenlt ((a nat ()) (b nat ())) ()
  (iff (le a b) (not (lt b a)))
()
(ax_mp ((iff (lt b a) (not (le a b))) (iff (le a b) (not (lt b a))))
  (con2b ((lt b a) (le a b)))
  (ltnle (b a))))

(local theorem ltnlt ((a nat ()) (b nat ())) ()
  (im (lt a b) (not (lt b a)))
()
(sylbi ((lt a b) (not (le b a)) (not (lt b a)))
  (ltnle (a b))
  (ax_mp ((im (lt b a) (le b a)) (im (not (le b a)) (not (lt b a))))
    (con3 ((lt b a) (le b a)))
    (ltle (b a)))))

(local theorem leorle ((a nat ()) (b nat ())) ()
  (or (le a b) (le b a))
()
(:conv (or (le a b) (le b a))
  (:unfold or ((le a b) (le b a)) ()
    (im (not (le a b)) (le b a)))
  (syl ((not (le a b)) (lt b a) (le b a))
    (ltle (b a))
    (:conv (im (not (le a b)) (lt b a))
      (:sym (:unfold or ((le a b) (lt b a)) ()
        (im (not (le a b)) (lt b a))))
      (leorlt (a b))))))

(local theorem neltlt ((a nat ()) (b nat ())) ()
  (iff (ne a b) (or (lt a b) (lt b a)))
()
(ibii ((ne a b) (or (lt a b) (lt b a)))
  (mpi ((ne a b) (or (lt a b) (le b a)) (or (lt a b) (lt b a)))
    (ltorle (a b))
    (:conv (im (ne a b) (im (or (lt a b) (le b a)) (or (lt a b) (lt b a))))
      (im
        (ne a b)
        (im
          (:unfold or ((lt a b) (le b a)) ()
            (im (not (lt a b)) (le b a)))
          (:unfold or ((lt a b) (lt b a)) ()
            (im (not (lt a b)) (lt b a)))))
      (imim2d ((ne a b) (not (lt a b)) (le b a) (lt b a))
        (rsyl ((ne a b) (ne b a) (im (le b a) (lt b a)))
          (necom (a b))
          (com12 ((le b a) (ne b a) (lt b a))
            (exp ((le b a) (ne b a) (lt b a))
              (bi2i ((lt b a) (an (le b a) (ne b a)))
                (ltlene (b a)))))))))
  (ax_mp ((im (lt b a) (ne a b)) (im (or (lt a b) (lt b a)) (ne a b)))
    (ax_mp ((im (lt a b) (ne a b)) (im (im (lt b a) (ne a b)) (im (or (lt a b) (lt b a)) (ne a b))))
      (eor ((lt a b) (lt b a) (ne a b)))
      (ltne (a b)))
    (ltner (b a)))))

(local theorem eqalle2 ((a nat ()) (b nat ()) (i nat)) ()
  (iff (eq a b) (al i (iff (le a i) (le b i))))
()
(ibii ((eq a b) (al i (iff (le a i) (le b i))))
  (iald (i (eq a b) (iff (le a i) (le b i)))
    (leeq1 (a b i)))
  (leasymd ((al i (iff (le a i) (le b i))) a b)
    (mpbiri ((al i (iff (le a i) (le b i))) (le b b) (le a b))
      (leid (b))
      (eale (i b (iff (le a i) (le b i)) (iff (le a b) (le b b)))
        (bieqd ((eq i b) (le a i) (le a b) (le b i) (le b b))
          (leeq2 (a i b))
          (leeq2 (b i b)))))
    (mpbii ((al i (iff (le a i) (le b i))) (le a a) (le b a))
      (leid (a))
      (eale (i a (iff (le a i) (le b i)) (iff (le a a) (le b a)))
        (bieqd ((eq i a) (le a i) (le a a) (le b i) (le b a))
          (leeq2 (a i a))
          (leeq2 (b i a))))))))

(local theorem eqallt1 ((a nat ()) (b nat ()) (i nat)) ()
  (iff (eq a b) (al i (iff (lt i a) (lt i b))))
()
(ax_mp ((iff (al i (iff (le a i) (le b i))) (al i (iff (lt i a) (lt i b)))) (iff (eq a b) (al i (iff (lt i a) (lt i b)))))
  (ax_mp ((iff (eq a b) (al i (iff (le a i) (le b i)))) (im (iff (al i (iff (le a i) (le b i))) (al i (iff (lt i a) (lt i b)))) (iff (eq a b) (al i (iff (lt i a) (lt i b))))))
    (bitr ((eq a b) (al i (iff (le a i) (le b i))) (al i (iff (lt i a) (lt i b)))))
    (eqalle2 (a b i)))
  (aleqi (i (iff (le a i) (le b i)) (iff (lt i a) (lt i b)))
    (ax_mp ((iff (iff (lt i a) (lt i b)) (iff (not (le a i)) (not (le b i)))) (iff (iff (le a i) (le b i)) (iff (lt i a) (lt i b))))
      (ax_mp ((iff (iff (le a i) (le b i)) (iff (not (le a i)) (not (le b i)))) (im (iff (iff (lt i a) (lt i b)) (iff (not (le a i)) (not (le b i)))) (iff (iff (le a i) (le b i)) (iff (lt i a) (lt i b)))))
        (bitr4 ((iff (le a i) (le b i)) (iff (not (le a i)) (not (le b i))) (iff (lt i a) (lt i b))))
        (con3bb ((le a i) (le b i))))
      (ax_mp ((iff (lt i b) (not (le b i))) (iff (iff (lt i a) (lt i b)) (iff (not (le a i)) (not (le b i)))))
        (ax_mp ((iff (lt i a) (not (le a i))) (im (iff (lt i b) (not (le b i))) (iff (iff (lt i a) (lt i b)) (iff (not (le a i)) (not (le b i))))))
          (bieq ((lt i a) (not (le a i)) (lt i b) (not (le b i))))
          (ltnle (i a)))
        (ltnle (i b)))))))

(local theorem ltsubeq0 ((a nat ()) (b nat ())) ()
  (im (lt a b) (eq (sub a b) (d0)))
()
(sylbi ((lt a b) (not (le b a)) (eq (sub a b) (d0)))
  (ltnle (a b))
  (nlesubeq0 (a b))))

(local theorem lesubeq0 ((a nat ()) (b nat ())) ()
  (iff (le a b) (eq (sub a b) (d0)))
()
(ibii ((le a b) (eq (sub a b) (d0)))
  (sylbi ((le a b) (or (lt a b) (eq a b)) (eq (sub a b) (d0)))
    (leloe (a b))
    (ax_mp ((im (eq a b) (eq (sub a b) (d0))) (im (or (lt a b) (eq a b)) (eq (sub a b) (d0))))
      (ax_mp ((im (lt a b) (eq (sub a b) (d0))) (im (im (eq a b) (eq (sub a b) (d0))) (im (or (lt a b) (eq a b)) (eq (sub a b) (d0)))))
        (eor ((lt a b) (eq a b) (eq (sub a b) (d0))))
        (ltsubeq0 (a b)))
      (syl6eq ((eq a b) (sub a b) (sub b b) (d0))
        (subid (b))
        (subeq1 (a b b)))))
  (syla ((eq (sub a b) (d0)) (not (le a b)) (le a b) (le a b))
    (contra ((le a b)))
    (syl ((an (eq (sub a b) (d0)) (not (le a b))) (eq a b) (le a b))
      (eqle (a b))
      (eqtr3d ((an (eq (sub a b) (d0)) (not (le a b))) a (add (sub a b) b) b)
        (syl ((an (eq (sub a b) (d0)) (not (le a b))) (le b a) (eq (add (sub a b) b) a))
          (npcan (a b))
          (anwr ((eq (sub a b) (d0)) (not (le a b)) (le b a))
            (:conv (im (not (le a b)) (le b a))
              (:sym (:unfold or ((le a b) (le b a)) ()
                (im (not (le a b)) (le b a))))
              (leorle (a b)))))
        (syl6eq ((an (eq (sub a b) (d0)) (not (le a b))) (add (sub a b) b) (add (d0) b) b)
          (add01 (b))
          (anwl ((eq (sub a b) (d0)) (not (le a b)) (eq (add (sub a b) b) (add (d0) b)))
            (addeq1 ((sub a b) (d0) b)))))))))

(local theorem subpos ((a nat ()) (b nat ())) ()
  (iff (lt a b) (lt (d0) (sub b a)))
()
(ax_mp ((iff (not (le b a)) (lt (d0) (sub b a))) (iff (lt a b) (lt (d0) (sub b a))))
  (ax_mp ((iff (lt a b) (not (le b a))) (im (iff (not (le b a)) (lt (d0) (sub b a))) (iff (lt a b) (lt (d0) (sub b a)))))
    (bitr ((lt a b) (not (le b a)) (lt (d0) (sub b a))))
    (ltnle (a b)))
  (ax_mp ((iff (lt (d0) (sub b a)) (not (eq (sub b a) (d0)))) (iff (not (le b a)) (lt (d0) (sub b a))))
    (ax_mp ((iff (not (le b a)) (not (eq (sub b a) (d0)))) (im (iff (lt (d0) (sub b a)) (not (eq (sub b a) (d0)))) (iff (not (le b a)) (lt (d0) (sub b a)))))
      (bitr4 ((not (le b a)) (not (eq (sub b a) (d0))) (lt (d0) (sub b a))))
      (ax_mp ((iff (le b a) (eq (sub b a) (d0))) (iff (not (le b a)) (not (eq (sub b a) (d0)))))
        (noteq ((le b a) (eq (sub b a) (d0))))
        (lesubeq0 (b a))))
    (:conv (iff (lt (d0) (sub b a)) (not (eq (sub b a) (d0))))
      (iff
        (lt (d0) (sub b a))
        (:sym (:unfold ne ((sub b a) (d0)) ()
          (not (eq (sub b a) (d0))))))
      (lt01 ((sub b a)))))))

(local theorem mulsub ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))
()
(ax_mp ((or (le c b) (le b c)) (eq (mul a (sub b c)) (sub (mul a b) (mul a c))))
  (ax_mp ((im (le b c) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))) (im (or (le c b) (le b c)) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))))
    (ax_mp ((im (le c b) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))) (im (im (le b c) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))) (im (or (le c b) (le b c)) (eq (mul a (sub b c)) (sub (mul a b) (mul a c))))))
      (eor ((le c b) (le b c) (eq (mul a (sub b c)) (sub (mul a b) (mul a c)))))
      (eqcomd ((le c b) (sub (mul a b) (mul a c)) (mul a (sub b c)))
        (syl ((le c b) (eq (add (mul a (sub b c)) (mul a c)) (mul a b)) (eq (sub (mul a b) (mul a c)) (mul a (sub b c))))
          (eqsub1 ((mul a (sub b c)) (mul a c) (mul a b)))
          (syl5eqr ((le c b) (add (mul a (sub b c)) (mul a c)) (mul a (add (sub b c) c)) (mul a b))
            (muladd (a (sub b c) c))
            (muleq2d ((le c b) a (add (sub b c) c) b)
              (npcan (b c)))))))
    (eqtr4d ((le b c) (mul a (sub b c)) (d0) (sub (mul a b) (mul a c)))
      (syl6eq ((le b c) (mul a (sub b c)) (mul a (d0)) (d0))
        (mul02 (a))
        (sylbi ((le b c) (eq (sub b c) (d0)) (eq (mul a (sub b c)) (mul a (d0))))
          (lesubeq0 (b c))
          (muleq2 (a (sub b c) (d0)))))
      (sylib ((le b c) (le (mul a b) (mul a c)) (eq (sub (mul a b) (mul a c)) (d0)))
        (lesubeq0 ((mul a b) (mul a c)))
        (lemul2a (a b c)))))
  (leorle (c b))))

(local theorem submul ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mul (sub a b) c) (sub (mul a c) (mul b c)))
()
(ax_mp ((eq (mul c (sub a b)) (sub (mul a c) (mul b c))) (eq (mul (sub a b) c) (sub (mul a c) (mul b c))))
  (ax_mp ((eq (mul (sub a b) c) (mul c (sub a b))) (im (eq (mul c (sub a b)) (sub (mul a c) (mul b c))) (eq (mul (sub a b) c) (sub (mul a c) (mul b c)))))
    (eqtr ((mul (sub a b) c) (mul c (sub a b)) (sub (mul a c) (mul b c))))
    (mulcom ((sub a b) c)))
  (ax_mp ((eq (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c))) (eq (mul c (sub a b)) (sub (mul a c) (mul b c))))
    (ax_mp ((eq (mul c (sub a b)) (sub (mul c a) (mul c b))) (im (eq (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c))) (eq (mul c (sub a b)) (sub (mul a c) (mul b c)))))
      (eqtr ((mul c (sub a b)) (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c))))
      (mulsub (c a b)))
    (ax_mp ((eq (mul c b) (mul b c)) (eq (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c))))
      (ax_mp ((eq (mul c a) (mul a c)) (im (eq (mul c b) (mul b c)) (eq (sub (mul c a) (mul c b)) (sub (mul a c) (mul b c)))))
        (subeq ((mul c a) (mul a c) (mul c b) (mul b c)))
        (mulcom (c a)))
      (mulcom (c b))))))

(local theorem ltmul1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d0) c) (iff (lt a b) (lt (mul a c) (mul b c))))
((x nat) (y nat))
(ibid ((lt (d0) c) (lt a b) (lt (mul a c) (mul b c)))
  (com12 ((lt a b) (lt (d0) c) (lt (mul a c) (mul b c)))
    (indd ((lt a b) x y c (im (lt (d0) x) (lt (mul a x) (mul b x))) (im (lt (d0) (d0)) (lt (mul a (d0)) (mul b (d0)))) (im (lt (d0) c) (lt (mul a c) (mul b c))) (im (lt (d0) y) (lt (mul a y) (mul b y))) (im (lt (d0) (suc y)) (lt (mul a (suc y)) (mul b (suc y)))))
      (imeqd ((eq x (d0)) (lt (d0) x) (lt (d0) (d0)) (lt (mul a x) (mul b x)) (lt (mul a (d0)) (mul b (d0))))
        (lteq2 ((d0) x (d0)))
        (lteqd ((eq x (d0)) (mul a x) (mul a (d0)) (mul b x) (mul b (d0)))
          (muleq2 (a x (d0)))
          (muleq2 (b x (d0)))))
      (imeqd ((eq x y) (lt (d0) x) (lt (d0) y) (lt (mul a x) (mul b x)) (lt (mul a y) (mul b y)))
        (lteq2 ((d0) x y))
        (lteqd ((eq x y) (mul a x) (mul a y) (mul b x) (mul b y))
          (muleq2 (a x y))
          (muleq2 (b x y))))
      (imeqd ((eq x (suc y)) (lt (d0) x) (lt (d0) (suc y)) (lt (mul a x) (mul b x)) (lt (mul a (suc y)) (mul b (suc y))))
        (lteq2 ((d0) x (suc y)))
        (lteqd ((eq x (suc y)) (mul a x) (mul a (suc y)) (mul b x) (mul b (suc y)))
          (muleq2 (a x (suc y)))
          (muleq2 (b x (suc y)))))
      (imeqd ((eq x c) (lt (d0) x) (lt (d0) c) (lt (mul a x) (mul b x)) (lt (mul a c) (mul b c)))
        (lteq2 ((d0) x c))
        (lteqd ((eq x c) (mul a x) (mul a c) (mul b x) (mul b c))
          (muleq2 (a x c))
          (muleq2 (b x c))))
      (a1i ((lt a b) (im (lt (d0) (d0)) (lt (mul a (d0)) (mul b (d0)))))
        (ax_mp ((not (lt (d0) (d0))) (im (lt (d0) (d0)) (lt (mul a (d0)) (mul b (d0)))))
          (absurd ((lt (d0) (d0)) (lt (mul a (d0)) (mul b (d0)))))
          (lt02 ((d0)))))
      (a1d ((an (lt a b) (im (lt (d0) y) (lt (mul a y) (mul b y)))) (lt (mul a (suc y)) (mul b (suc y))) (lt (d0) (suc y)))
        (anwl ((lt a b) (im (lt (d0) y) (lt (mul a y) (mul b y))) (lt (mul a (suc y)) (mul b (suc y))))
          (sylibr ((lt a b) (lt (add (mul a y) a) (add (mul b y) b)) (lt (mul a (suc y)) (mul b (suc y))))
            (ax_mp ((eq (mul b (suc y)) (add (mul b y) b)) (iff (lt (mul a (suc y)) (mul b (suc y))) (lt (add (mul a y) a) (add (mul b y) b))))
              (ax_mp ((eq (mul a (suc y)) (add (mul a y) a)) (im (eq (mul b (suc y)) (add (mul b y) b)) (iff (lt (mul a (suc y)) (mul b (suc y))) (lt (add (mul a y) a) (add (mul b y) b)))))
                (lteq ((mul a (suc y)) (add (mul a y) a) (mul b (suc y)) (add (mul b y) b)))
                (mulS (a y)))
              (mulS (b y)))
            (ltletrd ((lt a b) (add (mul a y) a) (add (mul a y) b) (add (mul b y) b))
              (ax_mp ((iff (lt a b) (lt (add (mul a y) a) (add (mul a y) b))) (im (lt a b) (lt (add (mul a y) a) (add (mul a y) b))))
                (bi1 ((lt a b) (lt (add (mul a y) a) (add (mul a y) b))))
                (ltadd2 ((mul a y) a b)))
              (sylib ((lt a b) (le (mul a y) (mul b y)) (le (add (mul a y) b) (add (mul b y) b)))
                (leadd1 ((mul a y) (mul b y) b))
                (syl ((lt a b) (le a b) (le (mul a y) (mul b y)))
                  (lemul1a (a b y))
                  (ltle (a b))))))))))
  (a1i ((lt (d0) c) (im (lt (mul a c) (mul b c)) (lt a b)))
    (mpbir ((im (not (le (mul b c) (mul a c))) (not (le b a))) (im (lt (mul a c) (mul b c)) (lt a b)))
      (imeqi ((lt (mul a c) (mul b c)) (not (le (mul b c) (mul a c))) (lt a b) (not (le b a)))
        (ltnle ((mul a c) (mul b c)))
        (ltnle (a b)))
      (ax_mp ((im (le b a) (le (mul b c) (mul a c))) (im (not (le (mul b c) (mul a c))) (not (le b a))))
        (con3 ((le b a) (le (mul b c) (mul a c))))
        (lemul1a (b a c)))))))

(local theorem ltmul2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d0) a) (iff (lt b c) (lt (mul a b) (mul a c))))
()
(syl6bb ((lt (d0) a) (lt b c) (lt (mul b a) (mul c a)) (lt (mul a b) (mul a c)))
  (ax_mp ((eq (mul c a) (mul a c)) (iff (lt (mul b a) (mul c a)) (lt (mul a b) (mul a c))))
    (ax_mp ((eq (mul b a) (mul a b)) (im (eq (mul c a) (mul a c)) (iff (lt (mul b a) (mul c a)) (lt (mul a b) (mul a c)))))
      (lteq ((mul b a) (mul a b) (mul c a) (mul a c)))
      (mulcom (b a)))
    (mulcom (c a)))
  (ltmul1 (b c a))))

(local theorem lemul1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d0) c) (iff (le a b) (le (mul a c) (mul b c))))
()
(sylibr ((lt (d0) c) (iff (not (lt b a)) (not (lt (mul b c) (mul a c)))) (iff (le a b) (le (mul a c) (mul b c))))
  (ax_mp ((iff (le (mul a c) (mul b c)) (not (lt (mul b c) (mul a c)))) (iff (iff (le a b) (le (mul a c) (mul b c))) (iff (not (lt b a)) (not (lt (mul b c) (mul a c))))))
    (ax_mp ((iff (le a b) (not (lt b a))) (im (iff (le (mul a c) (mul b c)) (not (lt (mul b c) (mul a c)))) (iff (iff (le a b) (le (mul a c) (mul b c))) (iff (not (lt b a)) (not (lt (mul b c) (mul a c)))))))
      (bieq ((le a b) (not (lt b a)) (le (mul a c) (mul b c)) (not (lt (mul b c) (mul a c)))))
      (lenlt (a b)))
    (lenlt ((mul a c) (mul b c))))
  (noteqd ((lt (d0) c) (lt b a) (lt (mul b c) (mul a c)))
    (ltmul1 (b a c)))))

(local theorem lemul2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (lt (d0) a) (iff (le b c) (le (mul a b) (mul a c))))
()
(syl6bb ((lt (d0) a) (le b c) (le (mul b a) (mul c a)) (le (mul a b) (mul a c)))
  (ax_mp ((eq (mul c a) (mul a c)) (iff (le (mul b a) (mul c a)) (le (mul a b) (mul a c))))
    (ax_mp ((eq (mul b a) (mul a b)) (im (eq (mul c a) (mul a c)) (iff (le (mul b a) (mul c a)) (le (mul a b) (mul a c)))))
      (leeq ((mul b a) (mul a b) (mul c a) (mul a c)))
      (mulcom (b a)))
    (mulcom (c a)))
  (lemul1 (b c a))))

(local theorem mulcan1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne c (d0)) (iff (eq (mul a c) (mul b c)) (eq a b)))
()
(ibid ((ne c (d0)) (eq (mul a c) (mul b c)) (eq a b))
  (sylbir ((ne c (d0)) (lt (d0) c) (im (eq (mul a c) (mul b c)) (eq a b)))
    (lt01 (c))
    (exp ((lt (d0) c) (eq (mul a c) (mul b c)) (eq a b))
      (leasymd ((an (lt (d0) c) (eq (mul a c) (mul b c))) a b)
        (mpbird ((an (lt (d0) c) (eq (mul a c) (mul b c))) (le (mul a c) (mul b c)) (le a b))
          (anwl ((lt (d0) c) (eq (mul a c) (mul b c)) (iff (le a b) (le (mul a c) (mul b c))))
            (lemul1 (a b c)))
          (anwr ((lt (d0) c) (eq (mul a c) (mul b c)) (le (mul a c) (mul b c)))
            (eqle ((mul a c) (mul b c)))))
        (mpbird ((an (lt (d0) c) (eq (mul a c) (mul b c))) (le (mul b c) (mul a c)) (le b a))
          (anwl ((lt (d0) c) (eq (mul a c) (mul b c)) (iff (le b a) (le (mul b c) (mul a c))))
            (lemul1 (b a c)))
          (anwr ((lt (d0) c) (eq (mul a c) (mul b c)) (le (mul b c) (mul a c)))
            (eqler ((mul a c) (mul b c))))))))
  (a1i ((ne c (d0)) (im (eq a b) (eq (mul a c) (mul b c))))
    (muleq1 (a b c)))))

(local theorem mulcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne a (d0)) (iff (eq (mul a b) (mul a c)) (eq b c)))
()
(syl5bb ((ne a (d0)) (eq (mul a b) (mul a c)) (eq (mul b a) (mul c a)) (eq b c))
  (ax_mp ((eq (mul a c) (mul c a)) (iff (eq (mul a b) (mul a c)) (eq (mul b a) (mul c a))))
    (ax_mp ((eq (mul a b) (mul b a)) (im (eq (mul a c) (mul c a)) (iff (eq (mul a b) (mul a c)) (eq (mul b a) (mul c a)))))
      (eqeq ((mul a b) (mul b a) (mul a c) (mul c a)))
      (mulcom (a b)))
    (mulcom (a c)))
  (mulcan1 (b c a))))

(local theorem mulpos ((a nat ()) (b nat ())) ()
  (iff (lt (d0) (mul a b)) (an (lt (d0) a) (lt (d0) b)))
()
(:let H1 (lt01 ((mul a b)))
(ibii ((lt (d0) (mul a b)) (an (lt (d0) a) (lt (d0) b)))
  (iand ((lt (d0) (mul a b)) (lt (d0) a) (lt (d0) b))
    (sylbi ((lt (d0) (mul a b)) (ne (mul a b) (d0)) (lt (d0) a))
      H1
      (sylibr ((ne (mul a b) (d0)) (ne a (d0)) (lt (d0) a))
        (lt01 (a))
        (:conv (im (ne (mul a b) (d0)) (ne a (d0)))
          (im
            (:unfold ne ((mul a b) (d0)) ()
              (not (eq (mul a b) (d0))))
            (:unfold ne (a (d0)) ()
              (not (eq a (d0)))))
          (ax_mp ((im (eq a (d0)) (eq (mul a b) (d0))) (im (not (eq (mul a b) (d0))) (not (eq a (d0)))))
            (con3 ((eq a (d0)) (eq (mul a b) (d0))))
            (syl6eq ((eq a (d0)) (mul a b) (mul (d0) b) (d0))
              (mul01 (b))
              (muleq1 (a (d0) b)))))))
    (sylbi ((lt (d0) (mul a b)) (ne (mul a b) (d0)) (lt (d0) b))
      H1
      (sylibr ((ne (mul a b) (d0)) (ne b (d0)) (lt (d0) b))
        (lt01 (b))
        (:conv (im (ne (mul a b) (d0)) (ne b (d0)))
          (im
            (:unfold ne ((mul a b) (d0)) ()
              (not (eq (mul a b) (d0))))
            (:unfold ne (b (d0)) ()
              (not (eq b (d0)))))
          (ax_mp ((im (eq b (d0)) (eq (mul a b) (d0))) (im (not (eq (mul a b) (d0))) (not (eq b (d0)))))
            (con3 ((eq b (d0)) (eq (mul a b) (d0))))
            (syl6eq ((eq b (d0)) (mul a b) (mul a (d0)) (d0))
              (mul02 (a))
              (muleq2 (a b (d0)))))))))
  (sylib ((an (lt (d0) a) (lt (d0) b)) (lt (mul a (d0)) (mul a b)) (lt (d0) (mul a b)))
    (ax_mp ((eq (mul a (d0)) (d0)) (iff (lt (mul a (d0)) (mul a b)) (lt (d0) (mul a b))))
      (lteq1 ((mul a (d0)) (d0) (mul a b)))
      (mul0 (a)))
    (mpbid ((an (lt (d0) a) (lt (d0) b)) (lt (d0) b) (lt (mul a (d0)) (mul a b)))
      (anwl ((lt (d0) a) (lt (d0) b) (iff (lt (d0) b) (lt (mul a (d0)) (mul a b))))
        (ltmul2 (a (d0) b)))
      (anr ((lt (d0) a) (lt (d0) b))))))))

(local theorem mulne0 ((a nat ()) (b nat ())) ()
  (iff (ne (mul a b) (d0)) (an (ne a (d0)) (ne b (d0))))
()
(ax_mp ((iff (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0)))) (iff (ne (mul a b) (d0)) (an (ne a (d0)) (ne b (d0)))))
  (ax_mp ((iff (lt (d0) (mul a b)) (ne (mul a b) (d0))) (im (iff (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0)))) (iff (ne (mul a b) (d0)) (an (ne a (d0)) (ne b (d0))))))
    (bitr3 ((ne (mul a b) (d0)) (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0)))))
    (lt01 ((mul a b))))
  (ax_mp ((iff (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0)))) (iff (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0)))))
    (ax_mp ((iff (lt (d0) (mul a b)) (an (lt (d0) a) (lt (d0) b))) (im (iff (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0)))) (iff (lt (d0) (mul a b)) (an (ne a (d0)) (ne b (d0))))))
      (bitr ((lt (d0) (mul a b)) (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0)))))
      (mulpos (a b)))
    (ax_mp ((iff (lt (d0) b) (ne b (d0))) (iff (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0)))))
      (ax_mp ((iff (lt (d0) a) (ne a (d0))) (im (iff (lt (d0) b) (ne b (d0))) (iff (an (lt (d0) a) (lt (d0) b)) (an (ne a (d0)) (ne b (d0))))))
        (aneq ((lt (d0) a) (ne a (d0)) (lt (d0) b) (ne b (d0))))
        (lt01 (a)))
      (lt01 (b))))))

(local theorem sub01 ((a nat ())) ()
  (eq (sub (d0) a) (d0))
()
(cases ((le a (d0)) (eq (sub (d0) a) (d0)))
  (sylbi ((le a (d0)) (eq a (d0)) (eq (sub (d0) a) (d0)))
    (le02 (a))
    (syl6eq ((eq a (d0)) (sub (d0) a) (sub (d0) (d0)) (d0))
      (sub02 ((d0)))
      (subeq2 ((d0) a (d0)))))
  (nlesubeq0 ((d0) a))))

(local theorem pnpcan2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (sub (add a c) (add b c)) (sub a b))
()
(cases ((le b a) (eq (sub (add a c) (add b c)) (sub a b)))
  (syl ((le b a) (eq (add (sub a b) (add b c)) (add a c)) (eq (sub (add a c) (add b c)) (sub a b)))
    (eqsub1 ((sub a b) (add b c) (add a c)))
    (syl5eqr ((le b a) (add (sub a b) (add b c)) (add (add (sub a b) b) c) (add a c))
      (addass ((sub a b) b c))
      (addeq1d ((le b a) (add (sub a b) b) a c)
        (npcan (a b)))))
  (eqtr4d ((not (le b a)) (sub (add a c) (add b c)) (d0) (sub a b))
    (sylbi ((not (le b a)) (not (le (add b c) (add a c))) (eq (sub (add a c) (add b c)) (d0)))
      (ax_mp ((iff (le b a) (le (add b c) (add a c))) (iff (not (le b a)) (not (le (add b c) (add a c)))))
        (noteq ((le b a) (le (add b c) (add a c))))
        (leadd1 (b a c)))
      (nlesubeq0 ((add a c) (add b c))))
    (nlesubeq0 (a b)))))

(local theorem pnpcan ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (sub (add a b) (add a c)) (sub b c))
()
(ax_mp ((eq (sub (add b a) (add c a)) (sub b c)) (eq (sub (add a b) (add a c)) (sub b c)))
  (ax_mp ((eq (sub (add a b) (add a c)) (sub (add b a) (add c a))) (im (eq (sub (add b a) (add c a)) (sub b c)) (eq (sub (add a b) (add a c)) (sub b c))))
    (eqtr ((sub (add a b) (add a c)) (sub (add b a) (add c a)) (sub b c)))
    (ax_mp ((eq (add a c) (add c a)) (eq (sub (add a b) (add a c)) (sub (add b a) (add c a))))
      (ax_mp ((eq (add a b) (add b a)) (im (eq (add a c) (add c a)) (eq (sub (add a b) (add a c)) (sub (add b a) (add c a)))))
        (subeq ((add a b) (add b a) (add a c) (add c a)))
        (addcom (a b)))
      (addcom (a c))))
  (pnpcan2 (b c a))))

(local theorem subSS ((a nat ()) (b nat ())) ()
  (eq (sub (suc a) (suc b)) (sub a b))
()
(ax_mp ((eq (sub (add a (d1)) (add b (d1))) (sub a b)) (eq (sub (suc a) (suc b)) (sub a b)))
  (ax_mp ((eq (sub (add a (d1)) (add b (d1))) (sub (suc a) (suc b))) (im (eq (sub (add a (d1)) (add b (d1))) (sub a b)) (eq (sub (suc a) (suc b)) (sub a b))))
    (eqtr3 ((sub (suc a) (suc b)) (sub (add a (d1)) (add b (d1))) (sub a b)))
    (ax_mp ((eq (add b (d1)) (suc b)) (eq (sub (add a (d1)) (add b (d1))) (sub (suc a) (suc b))))
      (ax_mp ((eq (add a (d1)) (suc a)) (im (eq (add b (d1)) (suc b)) (eq (sub (add a (d1)) (add b (d1))) (sub (suc a) (suc b)))))
        (subeq ((add a (d1)) (suc a) (add b (d1)) (suc b)))
        (add12 (a)))
      (add12 (b))))
  (pnpcan2 (a b (d1)))))

(local theorem indlt ((G wff ()) (x nat) (y nat) (a nat ()) (px wff (x)) (p0 wff (y)) (pa wff (y)) (py wff (y)) (ps wff (y)))
  ((h0 (im (eq x (d0)) (iff px p0)))
   (hy (im (eq x y) (iff px py)))
   (hs (im (eq x (suc y)) (iff px ps)))
   (ha (im (eq x a) (iff px pa)))
   (h1 (im G p0))
   (h2 (im (an (an G (lt y a)) py) ps)))
  (im G pa)
()
(mpi (G (le a a) pa)
  (leid (a))
  (indd (G x y a (im (le x a) px) (im (le (d0) a) p0) (im (le a a) pa) (im (le y a) py) (im (le (suc y) a) ps))
    (imeqd ((eq x (d0)) (le x a) (le (d0) a) px p0)
      (leeq1 (x (d0) a))
      h0)
    (imeqd ((eq x y) (le x a) (le y a) px py)
      (leeq1 (x y a))
      hy)
    (imeqd ((eq x (suc y)) (le x a) (le (suc y) a) px ps)
      (leeq1 (x (suc y) a))
      hs)
    (imeqd ((eq x a) (le x a) (le a a) px pa)
      (leeq1 (x a a))
      ha)
    (a1d (G p0 (le (d0) a))
      h1)
    (imp (G (im (le y a) py) (im (le (suc y) a) ps))
      (syl5 (G (im (le y a) py) (im (lt y a) py) (im (le (suc y) a) ps))
        (imim1i ((lt y a) (le y a) py)
          (ltle (y a)))
        (:conv (im G (im (im (lt y a) py) (im (le (suc y) a) ps)))
          (im
            G
            (im
              (im (lt y a) py)
              (im
                (:sym (:unfold lt (y a) ()
                  (le (suc y) a)))
                ps)))
          (a2d (G (lt y a) py ps)
            (exp (G (lt y a) (im py ps))
              (exp ((an G (lt y a)) py ps)
                h2)))))))))

(local theorem indstr ((G wff ()) (x nat) (y nat) (a nat (y)) (px wff (x)) (pa wff (y)) (py wff (y)))
  ((hy (im (eq x y) (iff px py)))
   (ha (im (eq x a) (iff px pa)))
   (h (im (an G (al x (im (lt x y) px))) py)))
  (im G pa)
((z nat))
(syl (G (al x (im (lt x (suc a)) px)) pa)
  (mpi ((al x (im (lt x (suc a)) px)) (lt a (suc a)) pa)
    (ltsucid (a))
    (eale (x a (im (lt x (suc a)) px) (im (lt a (suc a)) pa))
      (imeqd ((eq x a) (lt x (suc a)) (lt a (suc a)) px pa)
        (lteq1 (x a (suc a)))
        ha)))
  (indd (G z y (suc a) (al x (im (lt x z) px)) (al x (im (lt x (d0)) px)) (al x (im (lt x (suc a)) px)) (al x (im (lt x y) px)) (al x (im (lt x (suc y)) px)))
    (aleqd ((eq z (d0)) x (im (lt x z) px) (im (lt x (d0)) px))
      (imeq1d ((eq z (d0)) (lt x z) (lt x (d0)) px)
        (lteq2 (x z (d0)))))
    (aleqd ((eq z y) x (im (lt x z) px) (im (lt x y) px))
      (imeq1d ((eq z y) (lt x z) (lt x y) px)
        (lteq2 (x z y))))
    (aleqd ((eq z (suc y)) x (im (lt x z) px) (im (lt x (suc y)) px))
      (imeq1d ((eq z (suc y)) (lt x z) (lt x (suc y)) px)
        (lteq2 (x z (suc y)))))
    (aleqd ((eq z (suc a)) x (im (lt x z) px) (im (lt x (suc a)) px))
      (imeq1d ((eq z (suc a)) (lt x z) (lt x (suc a)) px)
        (lteq2 (x z (suc a)))))
    (a1i (G (al x (im (lt x (d0)) px)))
      (ax_gen (x (im (lt x (d0)) px))
        (ax_mp ((not (lt x (d0))) (im (lt x (d0)) px))
          (absurd ((lt x (d0)) px))
          (lt02 (x)))))
    (mpd ((an G (al x (im (lt x y) px))) (al x (im (eq x y) px)) (al x (im (lt x (suc y)) px)))
      (rsyl ((an G (al x (im (lt x y) px))) py (al x (im (eq x y) px)))
        h
        (iald (x py (im (eq x y) px))
          (com12 ((eq x y) py px)
            (bi2d ((eq x y) px py)
              hy))))
      (anwr (G (al x (im (lt x y) px)) (im (al x (im (eq x y) px)) (al x (im (lt x (suc y)) px))))
        (al2imi (x (im (lt x y) px) (im (eq x y) px) (im (lt x (suc y)) px))
          (syl6 ((im (lt x y) px) (im (eq x y) px) (im (or (lt x y) (eq x y)) px) (im (lt x (suc y)) px))
            (imim1i ((lt x (suc y)) (or (lt x y) (eq x y)) px)
              (bi1i ((lt x (suc y)) (or (lt x y) (eq x y)))
                (ax_mp ((iff (le x y) (or (lt x y) (eq x y))) (iff (lt x (suc y)) (or (lt x y) (eq x y))))
                  (ax_mp ((iff (le x y) (lt x (suc y))) (im (iff (le x y) (or (lt x y) (eq x y))) (iff (lt x (suc y)) (or (lt x y) (eq x y)))))
                    (bitr3 ((lt x (suc y)) (le x y) (or (lt x y) (eq x y))))
                    (leltsuc (x y)))
                  (leloe (x y)))))
            (eor ((lt x y) (eq x y) px)))))))))

(def finite ((A set ())) (wff ())
((n nat) (x nat))
(ex n (al x (im (el x A) (lt x n)))))

(local theorem fineqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (iff (finite A1) (finite A2)))
((n nat) (x nat))
(:conv (im _G (iff (finite A1) (finite A2)))
  (im
    _G
    (iff
      (:unfold finite (A1) (n x)
        (ex n (al x (im (el x A1) (lt x n)))))
      (:unfold finite (A2) (n x)
        (ex n (al x (im (el x A2) (lt x n)))))))
  (exeqd (_G n (al x (im (el x A1) (lt x n))) (al x (im (el x A2) (lt x n))))
    (aleqd (_G x (im (el x A1) (lt x n)) (im (el x A2) (lt x n)))
      (imeqd (_G (el x A1) (el x A2) (lt x n) (lt x n))
        (eleqd (_G x x A1 A2)
          (eqidd (_G x))
          hA)
        (biidd (_G (lt x n))))))))

(local theorem fineq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (iff (finite A1) (finite A2)))
()
(fineqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem finss ((A set ()) (B set ())) ()
  (im (subset A B) (im (finite B) (finite A)))
((n nat) (x nat))
(:conv (im (subset A B) (im (finite B) (finite A)))
  (im
    (subset A B)
    (im
      (:unfold finite (B) (n x)
        (ex n (al x (im (el x B) (lt x n)))))
      (:unfold finite (A) (n x)
        (ex n (al x (im (el x A) (lt x n)))))))
  (eximd (n (subset A B) (al x (im (el x B) (lt x n))) (al x (im (el x A) (lt x n))))
    (alimd (x (subset A B) (im (el x B) (lt x n)) (im (el x A) (lt x n)))
      (imim1d ((subset A B) (el x A) (el x B) (lt x n))
        (ssel (A B x)))))))

(local theorem ltfin ((n nat ()) (x nat)) ()
  (finite (ab x (lt x n)))
((m nat) (y nat))
(:conv (finite (ab x (lt x n)))
  (:unfold finite ((ab x (lt x n))) (m y)
    (ex m (al y (im (el y (ab x (lt x n))) (lt y m)))))
  (ax_mp ((al y (im (el y (ab x (lt x n))) (lt y n))) (ex m (al y (im (el y (ab x (lt x n))) (lt y m)))))
    (iexe (m n (al y (im (el y (ab x (lt x n))) (lt y m))) (al y (im (el y (ab x (lt x n))) (lt y n))))
      (aleqd ((eq m n) y (im (el y (ab x (lt x n))) (lt y m)) (im (el y (ab x (lt x n))) (lt y n)))
        (imeq2d ((eq m n) (el y (ab x (lt x n))) (lt y m) (lt y n))
          (lteq2 (y m n)))))
    (ax_gen (y (im (el y (ab x (lt x n))) (lt y n)))
      (bi1i ((el y (ab x (lt x n))) (lt y n))
        (elabe (x y (lt x n) (lt y n))
          (lteq1 (x y n))))))))

(local theorem lefin ((n nat ()) (x nat)) ()
  (finite (ab x (le x n)))
((m nat) (y nat))
(:conv (finite (ab x (le x n)))
  (:unfold finite ((ab x (le x n))) (m y)
    (ex m (al y (im (el y (ab x (le x n))) (lt y m)))))
  (ax_mp ((al y (im (el y (ab x (le x n))) (lt y (suc n)))) (ex m (al y (im (el y (ab x (le x n))) (lt y m)))))
    (iexe (m (suc n) (al y (im (el y (ab x (le x n))) (lt y m))) (al y (im (el y (ab x (le x n))) (lt y (suc n)))))
      (aleqd ((eq m (suc n)) y (im (el y (ab x (le x n))) (lt y m)) (im (el y (ab x (le x n))) (lt y (suc n))))
        (imeq2d ((eq m (suc n)) (el y (ab x (le x n))) (lt y m) (lt y (suc n)))
          (lteq2 (y m (suc n))))))
    (ax_gen (y (im (el y (ab x (le x n))) (lt y (suc n))))
      (sylbi ((el y (ab x (le x n))) (le y n) (lt y (suc n)))
        (elabe (x y (le x n) (le y n))
          (leeq1 (x y n)))
        (bi1i ((le y n) (lt y (suc n)))
          (leltsuc (y n))))))))

(local theorem snfin ((n nat ()) (x nat)) ()
  (finite (ab x (eq x n)))
()
(ax_mp ((finite (ab x (le x n))) (finite (ab x (eq x n))))
  (ax_mp ((subset (ab x (eq x n)) (ab x (le x n))) (im (finite (ab x (le x n))) (finite (ab x (eq x n)))))
    (finss ((ab x (eq x n)) (ab x (le x n))))
    (mpbi ((al x (im (eq x n) (le x n))) (subset (ab x (eq x n)) (ab x (le x n))))
      (ssab (x (eq x n) (le x n)))
      (ax_gen (x (im (eq x n) (le x n)))
        (eqle (x n)))))
  (lefin (n x))))

(local theorem infin1 ((A set ()) (B set ())) ()
  (im (finite A) (finite (Inter A B)))
()
(ax_mp ((subset (Inter A B) A) (im (finite A) (finite (Inter A B))))
  (finss ((Inter A B) A))
  (inss1 (A B))))

(local theorem infin2 ((A set ()) (B set ())) ()
  (im (finite B) (finite (Inter A B)))
()
(ax_mp ((subset (Inter A B) B) (im (finite B) (finite (Inter A B))))
  (finss ((Inter A B) B))
  (inss2 (A B))))

(def if ((p wff ()) (a nat ()) (b nat ())) (nat ())
((n nat))
(the (ab n (ifp p (eq n a) (eq n b)))))

(local theorem ifeqd ((_G wff ()) (p1 wff ()) (p2 wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((hp (im _G (iff p1 p2)))
   (ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (if p1 a1 b1) (if p2 a2 b2)))
((n nat))
(:let H1 (eqidd (_G n))
(:conv (im _G (eq (if p1 a1 b1) (if p2 a2 b2)))
  (im
    _G
    (eq
      (:unfold if (p1 a1 b1) (n)
        (the (ab n (ifp p1 (eq n a1) (eq n b1)))))
      (:unfold if (p2 a2 b2) (n)
        (the (ab n (ifp p2 (eq n a2) (eq n b2)))))))
  (theeqd (_G (ab n (ifp p1 (eq n a1) (eq n b1))) (ab n (ifp p2 (eq n a2) (eq n b2))))
    (abeqd (_G n (ifp p1 (eq n a1) (eq n b1)) (ifp p2 (eq n a2) (eq n b2)))
      (ifpeqd (_G p1 p2 (eq n a1) (eq n a2) (eq n b1) (eq n b2))
        hp
        (eqeqd (_G n n a1 a2)
          H1
          ha)
        (eqeqd (_G n n b1 b2)
          H1
          hb)))))))

(local theorem ifeq ((p1 wff ()) (p2 wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (iff p1 p2) (im (eq a1 a2) (im (eq b1 b2) (eq (if p1 a1 b1) (if p2 a2 b2)))))
()
(exp ((iff p1 p2) (eq a1 a2) (im (eq b1 b2) (eq (if p1 a1 b1) (if p2 a2 b2))))
  (exp ((an (iff p1 p2) (eq a1 a2)) (eq b1 b2) (eq (if p1 a1 b1) (if p2 a2 b2)))
    (ifeqd ((an (an (iff p1 p2) (eq a1 a2)) (eq b1 b2)) p1 p2 a1 a2 b1 b2)
      (anwl ((an (iff p1 p2) (eq a1 a2)) (eq b1 b2) (iff p1 p2))
        (anl ((iff p1 p2) (eq a1 a2))))
      (anwl ((an (iff p1 p2) (eq a1 a2)) (eq b1 b2) (eq a1 a2))
        (anr ((iff p1 p2) (eq a1 a2))))
      (anr ((an (iff p1 p2) (eq a1 a2)) (eq b1 b2)))))))

(local theorem ifeq1d ((G wff ()) (p1 wff ()) (p2 wff ()) (a nat ()) (b nat ()))
  ((h (im G (iff p1 p2))))
  (im G (eq (if p1 a b) (if p2 a b)))
()
(ifeqd (G p1 p2 a a b b)
  h
  (eqidd (G a))
  (eqidd (G b))))

(local theorem ifeq1 ((p1 wff ()) (p2 wff ()) (a nat ()) (b nat ())) ()
  (im (iff p1 p2) (eq (if p1 a b) (if p2 a b)))
()
(ifeq1d ((iff p1 p2) p1 p2 a b)
  (id ((iff p1 p2)))))

(local theorem ifeq2d ((G wff ()) (p wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (if p a1 b) (if p a2 b)))
()
(ifeqd (G p p a1 a2 b b)
  (biidd (G p))
  h
  (eqidd (G b))))

(local theorem ifeq2 ((p wff ()) (a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (if p a1 b) (if p a2 b)))
()
(ifeq2d ((eq a1 a2) p a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem ifeq3d ((G wff ()) (p wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (if p a b1) (if p a b2)))
()
(ifeqd (G p p a a b1 b2)
  (biidd (G p))
  (eqidd (G a))
  h))

(local theorem ifeq3 ((p wff ()) (a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (if p a b1) (if p a b2)))
()
(ifeq3d ((eq b1 b2) p a b1 b2)
  (id ((eq b1 b2)))))

(theorem ifpos ((p wff ()) (a nat ()) (b nat ())) ()
  (im p (eq (if p a b) a))
((n nat))
(:conv (im p (eq (if p a b) a))
  (im
    p
    (eq
      (:unfold if (p a b) (n)
        (the (ab n (ifp p (eq n a) (eq n b)))))
      a))
  (eqtheabd (p a n (ifp p (eq n a) (eq n b)))
    (ifppos (p (eq n a) (eq n b))))))

(theorem ifneg ((p wff ()) (a nat ()) (b nat ())) ()
  (im (not p) (eq (if p a b) b))
((n nat))
(:conv (im (not p) (eq (if p a b) b))
  (im
    (not p)
    (eq
      (:unfold if (p a b) (n)
        (the (ab n (ifp p (eq n a) (eq n b)))))
      b))
  (eqtheabd ((not p) b n (ifp p (eq n a) (eq n b)))
    (ifpneg (p (eq n a) (eq n b))))))

(local theorem ifid ((a nat ()) (p wff ())) ()
  (eq (if p a a) a)
()
(cases (p (eq (if p a a) a))
  (ifpos (p a a))
  (ifneg (p a a))))

(local theorem ifeq2a ((a nat ()) (b nat ()) (c nat ()) (p wff ())) ()
  (im (im p (eq a b)) (eq (if p a c) (if p b c)))
()
(casesd ((im p (eq a b)) p (eq (if p a c) (if p b c)))
  (imim2i (p (eq a b) (eq (if p a c) (if p b c)))
    (ifeq2 (p a b c)))
  (a1i ((im p (eq a b)) (im (not p) (eq (if p a c) (if p b c))))
    (eqtr4d ((not p) (if p a c) c (if p b c))
      (ifneg (p a c))
      (ifneg (p b c))))))

(local theorem ifeq3a ((a nat ()) (b nat ()) (c nat ()) (p wff ())) ()
  (im (im (not p) (eq b c)) (eq (if p a b) (if p a c)))
()
(casesd ((im (not p) (eq b c)) p (eq (if p a b) (if p a c)))
  (a1i ((im (not p) (eq b c)) (im p (eq (if p a b) (if p a c))))
    (eqtr4d (p (if p a b) a (if p a c))
      (ifpos (p a b))
      (ifpos (p a c))))
  (imim2i ((not p) (eq b c) (eq (if p a b) (if p a c)))
    (ifeq3 (p a b c)))))

(def true ((n nat ())) (wff ())
()
(ne n (d0)))

(local theorem trueeqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (iff (true n1) (true n2)))
()
(:conv (im _G (iff (true n1) (true n2)))
  (im
    _G
    (iff
      (:unfold true (n1) ()
        (ne n1 (d0)))
      (:unfold true (n2) ()
        (ne n2 (d0)))))
  (neeqd (_G n1 n2 (d0) (d0))
    hn
    (eqidd (_G (d0))))))

(local theorem trueeq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (iff (true n1) (true n2)))
()
(trueeqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def bool ((n nat ())) (wff ())
()
(lt n (d2)))

(local theorem booleqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (iff (bool n1) (bool n2)))
()
(:conv (im _G (iff (bool n1) (bool n2)))
  (im
    _G
    (iff
      (:unfold bool (n1) ()
        (lt n1 (d2)))
      (:unfold bool (n2) ()
        (lt n2 (d2)))))
  (lteqd (_G n1 n2 (d2) (d2))
    hn
    (eqidd (_G (d2))))))

(local theorem booleq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (iff (bool n1) (bool n2)))
()
(booleqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def nat ((p wff ())) (nat ())
()
(if p (d1) (d0)))

(local theorem nateqd ((_G wff ()) (p1 wff ()) (p2 wff ()))
  ((hp (im _G (iff p1 p2))))
  (im _G (eq (nat p1) (nat p2)))
()
(:conv (im _G (eq (nat p1) (nat p2)))
  (im
    _G
    (eq
      (:unfold nat (p1) ()
        (if p1 (d1) (d0)))
      (:unfold nat (p2) ()
        (if p2 (d1) (d0)))))
  (ifeqd (_G p1 p2 (d1) (d1) (d0) (d0))
    hp
    (eqidd (_G (d1)))
    (eqidd (_G (d0))))))

(local theorem nateq ((p1 wff ()) (p2 wff ())) ()
  (im (iff p1 p2) (eq (nat p1) (nat p2)))
()
(nateqd ((iff p1 p2) p1 p2)
  (id ((iff p1 p2)))))

(local theorem true1 () ()
  (true (d1))
()
(:conv (true (d1))
  (:unfold true ((d1)) ()
    (ne (d1) (d0)))
  (d1ne0 ())))

(local theorem true0 () ()
  (not (true (d0)))
()
(:conv (not (true (d0)))
  (not
    (:unfold true ((d0)) ()
      (:unfold ne ((d0) (d0)) ()
        (not (eq (d0) (d0))))))
  (ax_mp ((eq (d0) (d0)) (not (not (eq (d0) (d0)))))
    (notnot1 ((eq (d0) (d0))))
    (eqid ((d0))))))

(local theorem letrue ((a nat ()) (b nat ())) ()
  (im (le a b) (im (true a) (true b)))
()
(sylib ((le a b) (im (lt (d0) a) (lt (d0) b)) (im (true a) (true b)))
  (imeqi ((lt (d0) a) (true a) (lt (d0) b) (true b))
    (:conv (iff (lt (d0) a) (true a))
      (iff
        (lt (d0) a)
        (:unfold true (a) ()
          (ne a (d0))))
      (lt01 (a)))
    (:conv (iff (lt (d0) b) (true b))
      (iff
        (lt (d0) b)
        (:unfold true (b) ()
          (ne b (d0))))
      (lt01 (b))))
  (com12 ((lt (d0) a) (le a b) (lt (d0) b))
    (ltletr ((d0) a b)))))

(local theorem truemul ((a nat ()) (b nat ())) ()
  (iff (true (mul a b)) (an (true a) (true b)))
()
(:conv (iff (true (mul a b)) (an (true a) (true b)))
  (iff
    (:unfold true ((mul a b)) ()
      (ne (mul a b) (d0)))
    (an
      (:unfold true (a) ()
        (ne a (d0)))
      (:unfold true (b) ()
        (ne b (d0)))))
  (mulne0 (a b))))

(local theorem bool0 () ()
  (bool (d0))
()
(:conv (bool (d0))
  (:unfold bool ((d0)) ()
    (lt (d0) (d2)))
  (d0lt2 ())))

(local theorem bool1 () ()
  (bool (d1))
()
(:conv (bool (d1))
  (:unfold bool ((d1)) ()
    (lt (d1) (d2)))
  (d1lt2 ())))

(local theorem bool01 ((n nat ())) ()
  (iff (bool n) (or (eq n (d0)) (eq n (d1))))
()
(:conv (iff (bool n) (or (eq n (d0)) (eq n (d1))))
  (iff
    (:unfold bool (n) ()
      (lt
        n
        (:unfold d2 () ()
          (suc (d1)))))
    (or (eq n (d0)) (eq n (d1))))
  (ax_mp ((iff (le n (d1)) (or (eq n (d0)) (eq n (d1)))) (iff (lt n (suc (d1))) (or (eq n (d0)) (eq n (d1)))))
    (ax_mp ((iff (le n (d1)) (lt n (suc (d1)))) (im (iff (le n (d1)) (or (eq n (d0)) (eq n (d1)))) (iff (lt n (suc (d1))) (or (eq n (d0)) (eq n (d1))))))
      (bitr3 ((lt n (suc (d1))) (le n (d1)) (or (eq n (d0)) (eq n (d1)))))
      (leltsuc (n (d1))))
    (ax_mp ((iff (or (lt n (d1)) (eq n (d1))) (or (eq n (d0)) (eq n (d1)))) (iff (le n (d1)) (or (eq n (d0)) (eq n (d1)))))
      (ax_mp ((iff (le n (d1)) (or (lt n (d1)) (eq n (d1)))) (im (iff (or (lt n (d1)) (eq n (d1))) (or (eq n (d0)) (eq n (d1)))) (iff (le n (d1)) (or (eq n (d0)) (eq n (d1))))))
        (bitr ((le n (d1)) (or (lt n (d1)) (eq n (d1))) (or (eq n (d0)) (eq n (d1)))))
        (leloe (n (d1))))
      (oreq1i ((lt n (d1)) (eq n (d0)) (eq n (d1)))
        (lt12 (n)))))))

(local theorem lebool ((a nat ()) (b nat ())) ()
  (im (le a b) (im (bool b) (bool a)))
()
(:conv (im (le a b) (im (bool b) (bool a)))
  (im
    (le a b)
    (im
      (:unfold bool (b) ()
        (lt b (d2)))
      (:unfold bool (a) ()
        (lt a (d2)))))
  (lelttr (a b (d2)))))

(local theorem letrueb ((a nat ()) (b nat ())) ()
  (im (bool a) (iff (le a b) (im (true a) (true b))))
()
(ibid ((bool a) (le a b) (im (true a) (true b)))
  (a1i ((bool a) (im (le a b) (im (true a) (true b))))
    (letrue (a b)))
  (sylbi ((bool a) (or (eq a (d0)) (eq a (d1))) (im (im (true a) (true b)) (le a b)))
    (bool01 (a))
    (:conv (im (or (eq a (d0)) (eq a (d1))) (im (im (true a) (true b)) (le a b)))
      (im
        (or (eq a (d0)) (eq a (d1)))
        (im
          (im
            (true a)
            (:unfold true (b) ()
              (ne b (d0))))
          (le a b)))
      (ax_mp ((im (eq a (d1)) (im (im (true a) (ne b (d0))) (le a b))) (im (or (eq a (d0)) (eq a (d1))) (im (im (true a) (ne b (d0))) (le a b))))
        (ax_mp ((im (eq a (d0)) (im (im (true a) (ne b (d0))) (le a b))) (im (im (eq a (d1)) (im (im (true a) (ne b (d0))) (le a b))) (im (or (eq a (d0)) (eq a (d1))) (im (im (true a) (ne b (d0))) (le a b)))))
          (eor ((eq a (d0)) (eq a (d1)) (im (im (true a) (ne b (d0))) (le a b))))
          (a1d ((eq a (d0)) (le a b) (im (true a) (ne b (d0))))
            (mpbiri ((eq a (d0)) (le (d0) b) (le a b))
              (le01 (b))
              (leeq1 (a (d0) b)))))
        (mpbiri ((eq a (d1)) (im (ne b (d0)) (le (d1) b)) (im (im (true a) (ne b (d0))) (le a b)))
          (bi2i ((le (d1) b) (ne b (d0)))
            (le11 (b)))
          (imeqd ((eq a (d1)) (im (true a) (ne b (d0))) (ne b (d0)) (le a b) (le (d1) b))
            (syl ((eq a (d1)) (true a) (iff (im (true a) (ne b (d0))) (ne b (d0))))
              (biim1 ((true a) (ne b (d0))))
              (mpbiri ((eq a (d1)) (true (d1)) (true a))
                (true1 ())
                (trueeq (a (d1)))))
            (leeq1 (a (d1) b)))))))))

(local theorem dftrue2 ((n nat ())) ()
  (im (bool n) (iff (true n) (eq n (d1))))
()
(ibid ((bool n) (true n) (eq n (d1)))
  (:conv (im (bool n) (im (true n) (eq n (d1))))
    (im
      (bool n)
      (:sym (:unfold or ((eq n (d0)) (eq n (d1))) ()
        (im
          (:sym (:unfold true (n) ()
            (:unfold ne (n (d0)) ()
              (not (eq n (d0))))))
          (eq n (d1))))))
    (ax_mp ((iff (bool n) (or (eq n (d0)) (eq n (d1)))) (im (bool n) (or (eq n (d0)) (eq n (d1)))))
      (bi1 ((bool n) (or (eq n (d0)) (eq n (d1)))))
      (bool01 (n))))
  (a1i ((bool n) (im (eq n (d1)) (true n)))
    (mpbiri ((eq n (d1)) (ne (d1) (d0)) (true n))
      (d1ne0 ())
      (:conv (im (eq n (d1)) (iff (true n) (ne (d1) (d0))))
        (im
          (eq n (d1))
          (iff
            (:unfold true (n) ()
              (ne n (d0)))
            (ne (d1) (d0))))
        (neeq1 (n (d1) (d0))))))))

(local theorem boolnat ((p wff ())) ()
  (bool (nat p))
()
(cases (p (bool (nat p)))
  (mpbiri (p (lt (d1) (d2)) (bool (nat p)))
    (d1lt2 ())
    (:conv (im p (iff (bool (nat p)) (lt (d1) (d2))))
      (im
        p
        (iff
          (:unfold bool ((nat p)) ()
            (lt (nat p) (d2)))
          (lt (d1) (d2))))
      (lteq1d (p (nat p) (d1) (d2))
        (:conv (im p (eq (nat p) (d1)))
          (im
            p
            (eq
              (:unfold nat (p) ()
                (if p (d1) (d0)))
              (d1)))
          (ifpos (p (d1) (d0)))))))
  (mpbiri ((not p) (lt (d0) (d2)) (bool (nat p)))
    (d0lt2 ())
    (:conv (im (not p) (iff (bool (nat p)) (lt (d0) (d2))))
      (im
        (not p)
        (iff
          (:unfold bool ((nat p)) ()
            (lt (nat p) (d2)))
          (lt (d0) (d2))))
      (lteq1d ((not p) (nat p) (d0) (d2))
        (:conv (im (not p) (eq (nat p) (d0)))
          (im
            (not p)
            (eq
              (:unfold nat (p) ()
                (if p (d1) (d0)))
              (d0)))
          (ifneg (p (d1) (d0)))))))))

(local theorem truenat ((p wff ())) ()
  (iff (true (nat p)) p)
()
(ibii ((true (nat p)) p)
  (:conv (im (true (nat p)) p)
    (im
      (:unfold true ((nat p)) ()
        (:unfold ne ((nat p) (d0)) ()
          (not
            (eq
              (:unfold nat (p) ()
                (if p (d1) (d0)))
              (d0)))))
      p)
    (ax_mp ((im (not p) (eq (if p (d1) (d0)) (d0))) (im (not (eq (if p (d1) (d0)) (d0))) p))
      (con1 (p (eq (if p (d1) (d0)) (d0))))
      (ifneg (p (d1) (d0)))))
  (mpbiri (p (ne (d1) (d0)) (true (nat p)))
    (d1ne0 ())
    (:conv (im p (iff (true (nat p)) (ne (d1) (d0))))
      (im
        p
        (iff
          (:unfold true ((nat p)) ()
            (ne (nat p) (d0)))
          (ne (d1) (d0))))
      (neeq1d (p (nat p) (d1) (d0))
        (:conv (im p (eq (nat p) (d1)))
          (im
            p
            (eq
              (:unfold nat (p) ()
                (if p (d1) (d0)))
              (d1)))
          (ifpos (p (d1) (d0)))))))))

(local theorem nattrue ((n nat ())) ()
  (im (bool n) (eq (nat (true n)) n))
()
(sylbi ((bool n) (or (eq n (d0)) (eq n (d1))) (eq (nat (true n)) n))
  (bool01 (n))
  (ax_mp ((im (eq n (d1)) (eq (nat (true n)) n)) (im (or (eq n (d0)) (eq n (d1))) (eq (nat (true n)) n)))
    (ax_mp ((im (eq n (d0)) (eq (nat (true n)) n)) (im (im (eq n (d1)) (eq (nat (true n)) n)) (im (or (eq n (d0)) (eq n (d1))) (eq (nat (true n)) n))))
      (eor ((eq n (d0)) (eq n (d1)) (eq (nat (true n)) n)))
      (eqtr4d ((eq n (d0)) (nat (true n)) (nat (true (d0))) n)
        (nateqd ((eq n (d0)) (true n) (true (d0)))
          (trueeq (n (d0))))
        (syl6eqr ((eq n (d0)) n (d0) (nat (true (d0))))
          (:conv (eq (nat (true (d0))) (d0))
            (eq
              (:unfold nat ((true (d0))) ()
                (if (true (d0)) (d1) (d0)))
              (d0))
            (ax_mp ((not (true (d0))) (eq (if (true (d0)) (d1) (d0)) (d0)))
              (ifneg ((true (d0)) (d1) (d0)))
              (true0 ())))
          (id ((eq n (d0)))))))
    (eqtr4d ((eq n (d1)) (nat (true n)) (nat (true (d1))) n)
      (nateqd ((eq n (d1)) (true n) (true (d1)))
        (trueeq (n (d1))))
      (syl6eqr ((eq n (d1)) n (d1) (nat (true (d1))))
        (:conv (eq (nat (true (d1))) (d1))
          (eq
            (:unfold nat ((true (d1))) ()
              (if (true (d1)) (d1) (d0)))
            (d1))
          (ax_mp ((true (d1)) (eq (if (true (d1)) (d1) (d0)) (d1)))
            (ifpos ((true (d1)) (d1) (d0)))
            (true1 ())))
        (id ((eq n (d1)))))))))

(local theorem natle ((p wff ()) (q wff ())) ()
  (iff (im p q) (le (nat p) (nat q)))
()
(ax_mp ((iff (le (nat p) (nat q)) (im p q)) (iff (im p q) (le (nat p) (nat q))))
  (bicom ((le (nat p) (nat q)) (im p q)))
  (ax_mp ((iff (im (true (nat p)) (true (nat q))) (im p q)) (iff (le (nat p) (nat q)) (im p q)))
    (ax_mp ((iff (le (nat p) (nat q)) (im (true (nat p)) (true (nat q)))) (im (iff (im (true (nat p)) (true (nat q))) (im p q)) (iff (le (nat p) (nat q)) (im p q))))
      (bitr ((le (nat p) (nat q)) (im (true (nat p)) (true (nat q))) (im p q)))
      (ax_mp ((bool (nat p)) (iff (le (nat p) (nat q)) (im (true (nat p)) (true (nat q)))))
        (letrueb ((nat p) (nat q)))
        (boolnat (p))))
    (imeqi ((true (nat p)) p (true (nat q)) q)
      (truenat (p))
      (truenat (q))))))

(local theorem nattruele ((n nat ())) ()
  (le (nat (true n)) n)
()
(ax_mp ((or (le (nat (true n)) n) (le n (nat (true n)))) (le (nat (true n)) n))
  (ax_mp ((im (le n (nat (true n))) (le (nat (true n)) n)) (im (or (le (nat (true n)) n) (le n (nat (true n)))) (le (nat (true n)) n)))
    (ax_mp ((im (le (nat (true n)) n) (le (nat (true n)) n)) (im (im (le n (nat (true n))) (le (nat (true n)) n)) (im (or (le (nat (true n)) n) (le n (nat (true n)))) (le (nat (true n)) n))))
      (eor ((le (nat (true n)) n) (le n (nat (true n))) (le (nat (true n)) n)))
      (id ((le (nat (true n)) n))))
    (syl ((le n (nat (true n))) (eq (nat (true n)) n) (le (nat (true n)) n))
      (eqle ((nat (true n)) n))
      (syl ((le n (nat (true n))) (bool n) (eq (nat (true n)) n))
        (nattrue (n))
        (mpi ((le n (nat (true n))) (bool (nat (true n))) (bool n))
          (boolnat ((true n)))
          (lebool (n (nat (true n))))))))
  (leorle ((nat (true n)) n))))

(local theorem boolext ((a nat ()) (b nat ())) ()
  (im (bool a) (im (bool b) (iff (iff (true a) (true b)) (eq a b))))
()
(exp ((bool a) (bool b) (iff (iff (true a) (true b)) (eq a b)))
  (ibid ((an (bool a) (bool b)) (iff (true a) (true b)) (eq a b))
    (exp ((an (bool a) (bool b)) (iff (true a) (true b)) (eq a b))
      (mpbid ((an (an (bool a) (bool b)) (iff (true a) (true b))) (eq (nat (true a)) (nat (true b))) (eq a b))
        (eqeqd ((an (an (bool a) (bool b)) (iff (true a) (true b))) (nat (true a)) a (nat (true b)) b)
          (syl ((an (an (bool a) (bool b)) (iff (true a) (true b))) (bool a) (eq (nat (true a)) a))
            (nattrue (a))
            (anll ((bool a) (bool b) (iff (true a) (true b)))))
          (syl ((an (an (bool a) (bool b)) (iff (true a) (true b))) (bool b) (eq (nat (true b)) b))
            (nattrue (b))
            (anlr ((bool a) (bool b) (iff (true a) (true b))))))
        (anwr ((an (bool a) (bool b)) (iff (true a) (true b)) (eq (nat (true a)) (nat (true b))))
          (nateq ((true a) (true b))))))
    (a1i ((an (bool a) (bool b)) (im (eq a b) (iff (true a) (true b))))
      (trueeq (a b))))))

(def min ((a nat ()) (b nat ())) (nat ())
()
(if (lt a b) a b))

(local theorem mineqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (min a1 b1) (min a2 b2)))
()
(:conv (im _G (eq (min a1 b1) (min a2 b2)))
  (im
    _G
    (eq
      (:unfold min (a1 b1) ()
        (if (lt a1 b1) a1 b1))
      (:unfold min (a2 b2) ()
        (if (lt a2 b2) a2 b2))))
  (ifeqd (_G (lt a1 b1) (lt a2 b2) a1 a2 b1 b2)
    (lteqd (_G a1 a2 b1 b2)
      ha
      hb)
    ha
    hb)))

(local theorem mineq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (min a1 b1) (min a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (min a1 b1) (min a2 b2)))
  (mineqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem mineq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (min a1 b) (min a2 b)))
()
(mineqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem mineq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (min a1 b) (min a2 b)))
()
(mineq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem mineq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (min a b1) (min a b2)))
()
(mineqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem mineq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (min a b1) (min a b2)))
()
(mineq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(def max ((a nat ()) (b nat ())) (nat ())
()
(if (lt a b) b a))

(local theorem maxeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (max a1 b1) (max a2 b2)))
()
(:conv (im _G (eq (max a1 b1) (max a2 b2)))
  (im
    _G
    (eq
      (:unfold max (a1 b1) ()
        (if (lt a1 b1) b1 a1))
      (:unfold max (a2 b2) ()
        (if (lt a2 b2) b2 a2))))
  (ifeqd (_G (lt a1 b1) (lt a2 b2) b1 b2 a1 a2)
    (lteqd (_G a1 a2 b1 b2)
      ha
      hb)
    hb
    ha)))

(local theorem maxeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (max a1 b1) (max a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (max a1 b1) (max a2 b2)))
  (maxeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem maxeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (max a1 b) (max a2 b)))
()
(maxeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem maxeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (max a1 b) (max a2 b)))
()
(maxeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem maxeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (max a b1) (max a b2)))
()
(maxeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem maxeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (max a b1) (max a b2)))
()
(maxeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem nfmax ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (max a b))
((u nat) (v nat))
(nfnlem2 (x u v (max u v) a b (max a b))
  (maxeqd ((an (eq u a) (eq v b)) u a v b)
    (anl ((eq u a) (eq v b)))
    (anr ((eq u a) (eq v b))))
  h1
  h2))

(local theorem eqmin1 ((a nat ()) (b nat ())) ()
  (im (le a b) (eq (min a b) a))
()
(sylbi ((le a b) (or (lt a b) (eq a b)) (eq (min a b) a))
  (leloe (a b))
  (:conv (im (or (lt a b) (eq a b)) (eq (min a b) a))
    (im
      (or (lt a b) (eq a b))
      (eq
        (:unfold min (a b) ()
          (if (lt a b) a b))
        a))
    (ax_mp ((im (eq a b) (eq (if (lt a b) a b) a)) (im (or (lt a b) (eq a b)) (eq (if (lt a b) a b) a)))
      (ax_mp ((im (lt a b) (eq (if (lt a b) a b) a)) (im (im (eq a b) (eq (if (lt a b) a b) a)) (im (or (lt a b) (eq a b)) (eq (if (lt a b) a b) a))))
        (eor ((lt a b) (eq a b) (eq (if (lt a b) a b) a)))
        (ifpos ((lt a b) a b)))
      (syl6eq ((eq a b) (if (lt a b) a b) (if (lt a b) a a) a)
        (ifid (a (lt a b)))
        (ifeq3d ((eq a b) (lt a b) a b a)
          (eqcom (a b))))))))

(local theorem eqmax2 ((a nat ()) (b nat ())) ()
  (im (le a b) (eq (max a b) b))
()
(sylbi ((le a b) (or (lt a b) (eq a b)) (eq (max a b) b))
  (leloe (a b))
  (:conv (im (or (lt a b) (eq a b)) (eq (max a b) b))
    (im
      (or (lt a b) (eq a b))
      (eq
        (:unfold max (a b) ()
          (if (lt a b) b a))
        b))
    (ax_mp ((im (eq a b) (eq (if (lt a b) b a) b)) (im (or (lt a b) (eq a b)) (eq (if (lt a b) b a) b)))
      (ax_mp ((im (lt a b) (eq (if (lt a b) b a) b)) (im (im (eq a b) (eq (if (lt a b) b a) b)) (im (or (lt a b) (eq a b)) (eq (if (lt a b) b a) b))))
        (eor ((lt a b) (eq a b) (eq (if (lt a b) b a) b)))
        (ifpos ((lt a b) b a)))
      (syl6eq ((eq a b) (if (lt a b) b a) (if (lt a b) b b) b)
        (ifid (b (lt a b)))
        (ifeq3d ((eq a b) (lt a b) b a b)
          (id ((eq a b)))))))))

(local theorem mincom ((a nat ()) (b nat ())) ()
  (eq (min a b) (min b a))
()
(cases ((lt a b) (eq (min a b) (min b a)))
  (eqtr4d ((lt a b) (min a b) a (min b a))
    (:conv (im (lt a b) (eq (min a b) a))
      (im
        (lt a b)
        (eq
          (:unfold min (a b) ()
            (if (lt a b) a b))
          a))
      (ifpos ((lt a b) a b)))
    (syl ((lt a b) (not (lt b a)) (eq (min b a) a))
      (:conv (im (not (lt b a)) (eq (min b a) a))
        (im
          (not (lt b a))
          (eq
            (:unfold min (b a) ()
              (if (lt b a) b a))
            a))
        (ifneg ((lt b a) b a)))
      (ltnlt (a b))))
  (eqtr4d ((not (lt a b)) (min a b) b (min b a))
    (:conv (im (not (lt a b)) (eq (min a b) b))
      (im
        (not (lt a b))
        (eq
          (:unfold min (a b) ()
            (if (lt a b) a b))
          b))
      (ifneg ((lt a b) a b)))
    (sylbir ((not (lt a b)) (le b a) (eq (min b a) b))
      (lenlt (b a))
      (eqmin1 (b a))))))

(local theorem maxcom ((a nat ()) (b nat ())) ()
  (eq (max a b) (max b a))
()
(cases ((lt a b) (eq (max a b) (max b a)))
  (eqtr4d ((lt a b) (max a b) b (max b a))
    (:conv (im (lt a b) (eq (max a b) b))
      (im
        (lt a b)
        (eq
          (:unfold max (a b) ()
            (if (lt a b) b a))
          b))
      (ifpos ((lt a b) b a)))
    (syl ((lt a b) (not (lt b a)) (eq (max b a) b))
      (:conv (im (not (lt b a)) (eq (max b a) b))
        (im
          (not (lt b a))
          (eq
            (:unfold max (b a) ()
              (if (lt b a) a b))
            b))
        (ifneg ((lt b a) a b)))
      (ltnlt (a b))))
  (eqtr4d ((not (lt a b)) (max a b) a (max b a))
    (:conv (im (not (lt a b)) (eq (max a b) a))
      (im
        (not (lt a b))
        (eq
          (:unfold max (a b) ()
            (if (lt a b) b a))
          a))
      (ifneg ((lt a b) b a)))
    (sylbir ((not (lt a b)) (le b a) (eq (max b a) a))
      (lenlt (b a))
      (eqmax2 (b a))))))

(local theorem eqmin2 ((a nat ()) (b nat ())) ()
  (im (le b a) (eq (min a b) b))
()
(syl5eq ((le b a) (min a b) (min b a) b)
  (mincom (a b))
  (eqmin1 (b a))))

(local theorem eqmax1 ((a nat ()) (b nat ())) ()
  (im (le b a) (eq (max a b) a))
()
(syl5eq ((le b a) (max a b) (max b a) a)
  (maxcom (a b))
  (eqmax2 (b a))))

(local theorem minle1 ((a nat ()) (b nat ())) ()
  (le (min a b) a)
()
(cases ((lt a b) (le (min a b) a))
  (syl ((lt a b) (eq (min a b) a) (le (min a b) a))
    (eqle ((min a b) a))
    (:conv (im (lt a b) (eq (min a b) a))
      (im
        (lt a b)
        (eq
          (:unfold min (a b) ()
            (if (lt a b) a b))
          a))
      (ifpos ((lt a b) a b))))
  (mpbird ((not (lt a b)) (le b a) (le (min a b) a))
    (leeq1d ((not (lt a b)) (min a b) b a)
      (:conv (im (not (lt a b)) (eq (min a b) b))
        (im
          (not (lt a b))
          (eq
            (:unfold min (a b) ()
              (if (lt a b) a b))
            b))
        (ifneg ((lt a b) a b))))
    (ax_mp ((iff (le b a) (not (lt a b))) (im (not (lt a b)) (le b a)))
      (bi2 ((le b a) (not (lt a b))))
      (lenlt (b a))))))

(local theorem minle2 ((a nat ()) (b nat ())) ()
  (le (min a b) b)
()
(mpbi ((le (min b a) b) (le (min a b) b))
  (ax_mp ((eq (min b a) (min a b)) (iff (le (min b a) b) (le (min a b) b)))
    (leeq1 ((min b a) (min a b) b))
    (mincom (b a)))
  (minle1 (b a))))

(local theorem lemin ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a (min b c)) (an (le a b) (le a c)))
()
(ibii ((le a (min b c)) (an (le a b) (le a c)))
  (iand ((le a (min b c)) (le a b) (le a c))
    (mpi ((le a (min b c)) (le (min b c) b) (le a b))
      (minle1 (b c))
      (letr (a (min b c) b)))
    (mpi ((le a (min b c)) (le (min b c) c) (le a c))
      (minle2 (b c))
      (letr (a (min b c) c))))
  (casesda ((an (le a b) (le a c)) (lt b c) (le a (min b c)))
    (mpbird ((an (an (le a b) (le a c)) (lt b c)) (le a b) (le a (min b c)))
      (anwr ((an (le a b) (le a c)) (lt b c) (iff (le a (min b c)) (le a b)))
        (leeq2d ((lt b c) a (min b c) b)
          (:conv (im (lt b c) (eq (min b c) b))
            (im
              (lt b c)
              (eq
                (:unfold min (b c) ()
                  (if (lt b c) b c))
                b))
            (ifpos ((lt b c) b c)))))
      (anll ((le a b) (le a c) (lt b c))))
    (mpbird ((an (an (le a b) (le a c)) (not (lt b c))) (le a c) (le a (min b c)))
      (anwr ((an (le a b) (le a c)) (not (lt b c)) (iff (le a (min b c)) (le a c)))
        (leeq2d ((not (lt b c)) a (min b c) c)
          (:conv (im (not (lt b c)) (eq (min b c) c))
            (im
              (not (lt b c))
              (eq
                (:unfold min (b c) ()
                  (if (lt b c) b c))
                c))
            (ifneg ((lt b c) b c)))))
      (anlr ((le a b) (le a c) (not (lt b c))))))))

(local theorem ltmin ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a (min b c)) (an (lt a b) (lt a c)))
()
(:conv (iff (lt a (min b c)) (an (lt a b) (lt a c)))
  (iff
    (:unfold lt (a (min b c)) ()
      (le (suc a) (min b c)))
    (an
      (:unfold lt (a b) ()
        (le (suc a) b))
      (:unfold lt (a c) ()
        (le (suc a) c))))
  (lemin ((suc a) b c))))

(local theorem subaddmin ((a nat ()) (b nat ())) ()
  (eq (add (sub a b) (min a b)) a)
()
(ax_mp ((or (le b a) (le a b)) (eq (add (sub a b) (min a b)) a))
  (ax_mp ((im (le a b) (eq (add (sub a b) (min a b)) a)) (im (or (le b a) (le a b)) (eq (add (sub a b) (min a b)) a)))
    (ax_mp ((im (le b a) (eq (add (sub a b) (min a b)) a)) (im (im (le a b) (eq (add (sub a b) (min a b)) a)) (im (or (le b a) (le a b)) (eq (add (sub a b) (min a b)) a))))
      (eor ((le b a) (le a b) (eq (add (sub a b) (min a b)) a)))
      (eqtrd ((le b a) (add (sub a b) (min a b)) (add (sub a b) b) a)
        (addeq2d ((le b a) (sub a b) (min a b) b)
          (eqmin2 (a b)))
        (npcan (a b))))
    (eqtrd ((le a b) (add (sub a b) (min a b)) (add (d0) (min a b)) a)
      (sylbi ((le a b) (eq (sub a b) (d0)) (eq (add (sub a b) (min a b)) (add (d0) (min a b))))
        (lesubeq0 (a b))
        (addeq1 ((sub a b) (d0) (min a b))))
      (syl5eq ((le a b) (add (d0) (min a b)) (min a b) a)
        (add01 ((min a b)))
        (eqmin1 (a b)))))
  (leorle (b a))))

(local theorem minaddsub ((a nat ()) (b nat ())) ()
  (eq (add (min a b) (sub a b)) a)
()
(ax_mp ((eq (add (sub a b) (min a b)) a) (eq (add (min a b) (sub a b)) a))
  (ax_mp ((eq (add (min a b) (sub a b)) (add (sub a b) (min a b))) (im (eq (add (sub a b) (min a b)) a) (eq (add (min a b) (sub a b)) a)))
    (eqtr ((add (min a b) (sub a b)) (add (sub a b) (min a b)) a))
    (addcom ((min a b) (sub a b))))
  (subaddmin (a b))))

(local theorem submin ((a nat ()) (b nat ())) ()
  (eq (sub a (min a b)) (sub a b))
()
(ax_mp ((or (le a b) (le b a)) (eq (sub a (min a b)) (sub a b)))
  (ax_mp ((im (le b a) (eq (sub a (min a b)) (sub a b))) (im (or (le a b) (le b a)) (eq (sub a (min a b)) (sub a b))))
    (ax_mp ((im (le a b) (eq (sub a (min a b)) (sub a b))) (im (im (le b a) (eq (sub a (min a b)) (sub a b))) (im (or (le a b) (le b a)) (eq (sub a (min a b)) (sub a b)))))
      (eor ((le a b) (le b a) (eq (sub a (min a b)) (sub a b))))
      (eqtr4d ((le a b) (sub a (min a b)) (sub a a) (sub a b))
        (subeq2d ((le a b) a (min a b) a)
          (eqmin1 (a b)))
        (syl6eqr ((le a b) (sub a b) (d0) (sub a a))
          (subid (a))
          (ax_mp ((iff (le a b) (eq (sub a b) (d0))) (im (le a b) (eq (sub a b) (d0))))
            (bi1 ((le a b) (eq (sub a b) (d0))))
            (lesubeq0 (a b))))))
    (subeq2d ((le b a) a (min a b) b)
      (eqmin2 (a b))))
  (leorle (a b))))

(local theorem lemax1 ((a nat ()) (b nat ())) ()
  (le a (max a b))
()
(cases ((lt a b) (le a (max a b)))
  (mpbird ((lt a b) (le a b) (le a (max a b)))
    (leeq2d ((lt a b) a (max a b) b)
      (:conv (im (lt a b) (eq (max a b) b))
        (im
          (lt a b)
          (eq
            (:unfold max (a b) ()
              (if (lt a b) b a))
            b))
        (ifpos ((lt a b) b a))))
    (ltle (a b)))
  (syl ((not (lt a b)) (eq (max a b) a) (le a (max a b)))
    (eqler ((max a b) a))
    (:conv (im (not (lt a b)) (eq (max a b) a))
      (im
        (not (lt a b))
        (eq
          (:unfold max (a b) ()
            (if (lt a b) b a))
          a))
      (ifneg ((lt a b) b a))))))

(local theorem lemax2 ((a nat ()) (b nat ())) ()
  (le b (max a b))
()
(mpbi ((le b (max b a)) (le b (max a b)))
  (ax_mp ((eq (max b a) (max a b)) (iff (le b (max b a)) (le b (max a b))))
    (leeq2 (b (max b a) (max a b)))
    (maxcom (b a)))
  (lemax1 (b a))))

(local theorem maxle ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le (max a b) c) (an (le a c) (le b c)))
()
(ibii ((le (max a b) c) (an (le a c) (le b c)))
  (iand ((le (max a b) c) (le a c) (le b c))
    (ax_mp ((le a (max a b)) (im (le (max a b) c) (le a c)))
      (letr (a (max a b) c))
      (lemax1 (a b)))
    (ax_mp ((le b (max a b)) (im (le (max a b) c) (le b c)))
      (letr (b (max a b) c))
      (lemax2 (a b))))
  (casesda ((an (le a c) (le b c)) (lt a b) (le (max a b) c))
    (mpbird ((an (an (le a c) (le b c)) (lt a b)) (le b c) (le (max a b) c))
      (anwr ((an (le a c) (le b c)) (lt a b) (iff (le (max a b) c) (le b c)))
        (leeq1d ((lt a b) (max a b) b c)
          (:conv (im (lt a b) (eq (max a b) b))
            (im
              (lt a b)
              (eq
                (:unfold max (a b) ()
                  (if (lt a b) b a))
                b))
            (ifpos ((lt a b) b a)))))
      (anlr ((le a c) (le b c) (lt a b))))
    (mpbird ((an (an (le a c) (le b c)) (not (lt a b))) (le a c) (le (max a b) c))
      (anwr ((an (le a c) (le b c)) (not (lt a b)) (iff (le (max a b) c) (le a c)))
        (leeq1d ((not (lt a b)) (max a b) a c)
          (:conv (im (not (lt a b)) (eq (max a b) a))
            (im
              (not (lt a b))
              (eq
                (:unfold max (a b) ()
                  (if (lt a b) b a))
                a))
            (ifneg ((lt a b) b a)))))
      (anll ((le a c) (le b c) (not (lt a b))))))))

(local theorem ltmax ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a (max b c)) (or (lt a b) (lt a c)))
()
(ax_mp ((iff (not (lt a (max b c))) (not (or (lt a b) (lt a c)))) (iff (lt a (max b c)) (or (lt a b) (lt a c))))
  (con4b ((lt a (max b c)) (or (lt a b) (lt a c))))
  (ax_mp ((iff (le (max b c) a) (not (or (lt a b) (lt a c)))) (iff (not (lt a (max b c))) (not (or (lt a b) (lt a c)))))
    (ax_mp ((iff (le (max b c) a) (not (lt a (max b c)))) (im (iff (le (max b c) a) (not (or (lt a b) (lt a c)))) (iff (not (lt a (max b c))) (not (or (lt a b) (lt a c))))))
      (bitr3 ((not (lt a (max b c))) (le (max b c) a) (not (or (lt a b) (lt a c)))))
      (lenlt ((max b c) a)))
    (ax_mp ((iff (an (le b a) (le c a)) (not (or (lt a b) (lt a c)))) (iff (le (max b c) a) (not (or (lt a b) (lt a c)))))
      (ax_mp ((iff (le (max b c) a) (an (le b a) (le c a))) (im (iff (an (le b a) (le c a)) (not (or (lt a b) (lt a c)))) (iff (le (max b c) a) (not (or (lt a b) (lt a c))))))
        (bitr ((le (max b c) a) (an (le b a) (le c a)) (not (or (lt a b) (lt a c)))))
        (maxle (b c a)))
      (ax_mp ((iff (not (or (lt a b) (lt a c))) (an (not (lt a b)) (not (lt a c)))) (iff (an (le b a) (le c a)) (not (or (lt a b) (lt a c)))))
        (ax_mp ((iff (an (le b a) (le c a)) (an (not (lt a b)) (not (lt a c)))) (im (iff (not (or (lt a b) (lt a c))) (an (not (lt a b)) (not (lt a c)))) (iff (an (le b a) (le c a)) (not (or (lt a b) (lt a c))))))
          (bitr4 ((an (le b a) (le c a)) (an (not (lt a b)) (not (lt a c))) (not (or (lt a b) (lt a c)))))
          (ax_mp ((iff (le c a) (not (lt a c))) (iff (an (le b a) (le c a)) (an (not (lt a b)) (not (lt a c)))))
            (ax_mp ((iff (le b a) (not (lt a b))) (im (iff (le c a) (not (lt a c))) (iff (an (le b a) (le c a)) (an (not (lt a b)) (not (lt a c))))))
              (aneq ((le b a) (not (lt a b)) (le c a) (not (lt a c))))
              (lenlt (b a)))
            (lenlt (c a))))
        (notor ((lt a b) (lt a c))))))))

(local theorem minadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add (min a b) c) (min (add a c) (add b c)))
()
(:let H1 (ltadd1 (a b c))
(cases ((lt a b) (eq (add (min a b) c) (min (add a c) (add b c))))
  (eqtr4d ((lt a b) (add (min a b) c) (add a c) (min (add a c) (add b c)))
    (addeq1d ((lt a b) (min a b) a c)
      (:conv (im (lt a b) (eq (min a b) a))
        (im
          (lt a b)
          (eq
            (:unfold min (a b) ()
              (if (lt a b) a b))
            a))
        (ifpos ((lt a b) a b))))
    (sylbi ((lt a b) (lt (add a c) (add b c)) (eq (min (add a c) (add b c)) (add a c)))
      H1
      (:conv (im (lt (add a c) (add b c)) (eq (min (add a c) (add b c)) (add a c)))
        (im
          (lt (add a c) (add b c))
          (eq
            (:unfold min ((add a c) (add b c)) ()
              (if (lt (add a c) (add b c)) (add a c) (add b c)))
            (add a c)))
        (ifpos ((lt (add a c) (add b c)) (add a c) (add b c))))))
  (eqtr4d ((not (lt a b)) (add (min a b) c) (add b c) (min (add a c) (add b c)))
    (addeq1d ((not (lt a b)) (min a b) b c)
      (:conv (im (not (lt a b)) (eq (min a b) b))
        (im
          (not (lt a b))
          (eq
            (:unfold min (a b) ()
              (if (lt a b) a b))
            b))
        (ifneg ((lt a b) a b))))
    (sylbi ((not (lt a b)) (not (lt (add a c) (add b c))) (eq (min (add a c) (add b c)) (add b c)))
      (ax_mp ((iff (lt a b) (lt (add a c) (add b c))) (iff (not (lt a b)) (not (lt (add a c) (add b c)))))
        (noteq ((lt a b) (lt (add a c) (add b c))))
        H1)
      (:conv (im (not (lt (add a c) (add b c))) (eq (min (add a c) (add b c)) (add b c)))
        (im
          (not (lt (add a c) (add b c)))
          (eq
            (:unfold min ((add a c) (add b c)) ()
              (if (lt (add a c) (add b c)) (add a c) (add b c)))
            (add b c)))
        (ifneg ((lt (add a c) (add b c)) (add a c) (add b c)))))))))

(local theorem maxadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (add (max a b) c) (max (add a c) (add b c)))
()
(:let H1 (ltadd1 (a b c))
(cases ((lt a b) (eq (add (max a b) c) (max (add a c) (add b c))))
  (eqtr4d ((lt a b) (add (max a b) c) (add b c) (max (add a c) (add b c)))
    (addeq1d ((lt a b) (max a b) b c)
      (:conv (im (lt a b) (eq (max a b) b))
        (im
          (lt a b)
          (eq
            (:unfold max (a b) ()
              (if (lt a b) b a))
            b))
        (ifpos ((lt a b) b a))))
    (sylbi ((lt a b) (lt (add a c) (add b c)) (eq (max (add a c) (add b c)) (add b c)))
      H1
      (:conv (im (lt (add a c) (add b c)) (eq (max (add a c) (add b c)) (add b c)))
        (im
          (lt (add a c) (add b c))
          (eq
            (:unfold max ((add a c) (add b c)) ()
              (if (lt (add a c) (add b c)) (add b c) (add a c)))
            (add b c)))
        (ifpos ((lt (add a c) (add b c)) (add b c) (add a c))))))
  (eqtr4d ((not (lt a b)) (add (max a b) c) (add a c) (max (add a c) (add b c)))
    (addeq1d ((not (lt a b)) (max a b) a c)
      (:conv (im (not (lt a b)) (eq (max a b) a))
        (im
          (not (lt a b))
          (eq
            (:unfold max (a b) ()
              (if (lt a b) b a))
            a))
        (ifneg ((lt a b) b a))))
    (sylbi ((not (lt a b)) (not (lt (add a c) (add b c))) (eq (max (add a c) (add b c)) (add a c)))
      (ax_mp ((iff (lt a b) (lt (add a c) (add b c))) (iff (not (lt a b)) (not (lt (add a c) (add b c)))))
        (noteq ((lt a b) (lt (add a c) (add b c))))
        H1)
      (:conv (im (not (lt (add a c) (add b c))) (eq (max (add a c) (add b c)) (add a c)))
        (im
          (not (lt (add a c) (add b c)))
          (eq
            (:unfold max ((add a c) (add b c)) ()
              (if (lt (add a c) (add b c)) (add b c) (add a c)))
            (add a c)))
        (ifneg ((lt (add a c) (add b c)) (add b c) (add a c)))))))))

(local theorem minS ((a nat ()) (b nat ())) ()
  (eq (suc (min a b)) (min (suc a) (suc b)))
()
(ax_mp ((eq (add (min a b) (d1)) (min (suc a) (suc b))) (eq (suc (min a b)) (min (suc a) (suc b))))
  (ax_mp ((eq (add (min a b) (d1)) (suc (min a b))) (im (eq (add (min a b) (d1)) (min (suc a) (suc b))) (eq (suc (min a b)) (min (suc a) (suc b)))))
    (eqtr3 ((suc (min a b)) (add (min a b) (d1)) (min (suc a) (suc b))))
    (add12 ((min a b))))
  (ax_mp ((eq (min (add a (d1)) (add b (d1))) (min (suc a) (suc b))) (eq (add (min a b) (d1)) (min (suc a) (suc b))))
    (ax_mp ((eq (add (min a b) (d1)) (min (add a (d1)) (add b (d1)))) (im (eq (min (add a (d1)) (add b (d1))) (min (suc a) (suc b))) (eq (add (min a b) (d1)) (min (suc a) (suc b)))))
      (eqtr ((add (min a b) (d1)) (min (add a (d1)) (add b (d1))) (min (suc a) (suc b))))
      (minadd1 (a b (d1))))
    (trud ((eq (min (add a (d1)) (add b (d1))) (min (suc a) (suc b))))
      (mineqd ((wtru) (add a (d1)) (suc a) (add b (d1)) (suc b))
        (a1i ((wtru) (eq (add a (d1)) (suc a)))
          (add12 (a)))
        (a1i ((wtru) (eq (add b (d1)) (suc b)))
          (add12 (b))))))))

(local theorem maxS ((a nat ()) (b nat ())) ()
  (eq (suc (max a b)) (max (suc a) (suc b)))
()
(ax_mp ((eq (add (max a b) (d1)) (max (suc a) (suc b))) (eq (suc (max a b)) (max (suc a) (suc b))))
  (ax_mp ((eq (add (max a b) (d1)) (suc (max a b))) (im (eq (add (max a b) (d1)) (max (suc a) (suc b))) (eq (suc (max a b)) (max (suc a) (suc b)))))
    (eqtr3 ((suc (max a b)) (add (max a b) (d1)) (max (suc a) (suc b))))
    (add12 ((max a b))))
  (ax_mp ((eq (max (add a (d1)) (add b (d1))) (max (suc a) (suc b))) (eq (add (max a b) (d1)) (max (suc a) (suc b))))
    (ax_mp ((eq (add (max a b) (d1)) (max (add a (d1)) (add b (d1)))) (im (eq (max (add a (d1)) (add b (d1))) (max (suc a) (suc b))) (eq (add (max a b) (d1)) (max (suc a) (suc b)))))
      (eqtr ((add (max a b) (d1)) (max (add a (d1)) (add b (d1))) (max (suc a) (suc b))))
      (maxadd1 (a b (d1))))
    (trud ((eq (max (add a (d1)) (add b (d1))) (max (suc a) (suc b))))
      (maxeqd ((wtru) (add a (d1)) (suc a) (add b (d1)) (suc b))
        (a1i ((wtru) (eq (add a (d1)) (suc a)))
          (add12 (a)))
        (a1i ((wtru) (eq (add b (d1)) (suc b)))
          (add12 (b))))))))

(local theorem maxlt ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt (max a b) c) (an (lt a c) (lt b c)))
()
(:conv (iff (lt (max a b) c) (an (lt a c) (lt b c)))
  (iff
    (:unfold lt ((max a b) c) ()
      (le (suc (max a b)) c))
    (an
      (:unfold lt (a c) ()
        (le (suc a) c))
      (:unfold lt (b c) ()
        (le (suc b) c))))
  (ax_mp ((iff (le (max (suc a) (suc b)) c) (an (le (suc a) c) (le (suc b) c))) (iff (le (suc (max a b)) c) (an (le (suc a) c) (le (suc b) c))))
    (ax_mp ((iff (le (suc (max a b)) c) (le (max (suc a) (suc b)) c)) (im (iff (le (max (suc a) (suc b)) c) (an (le (suc a) c) (le (suc b) c))) (iff (le (suc (max a b)) c) (an (le (suc a) c) (le (suc b) c)))))
      (bitr ((le (suc (max a b)) c) (le (max (suc a) (suc b)) c) (an (le (suc a) c) (le (suc b) c))))
      (ax_mp ((eq (suc (max a b)) (max (suc a) (suc b))) (iff (le (suc (max a b)) c) (le (max (suc a) (suc b)) c)))
        (leeq1 ((suc (max a b)) (max (suc a) (suc b)) c))
        (maxS (a b))))
    (maxle ((suc a) (suc b) c)))))

(local theorem lemax ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a (max b c)) (or (le a b) (le a c)))
()
(ax_mp ((iff (not (le a (max b c))) (not (or (le a b) (le a c)))) (iff (le a (max b c)) (or (le a b) (le a c))))
  (con4b ((le a (max b c)) (or (le a b) (le a c))))
  (ax_mp ((iff (lt (max b c) a) (not (or (le a b) (le a c)))) (iff (not (le a (max b c))) (not (or (le a b) (le a c)))))
    (ax_mp ((iff (lt (max b c) a) (not (le a (max b c)))) (im (iff (lt (max b c) a) (not (or (le a b) (le a c)))) (iff (not (le a (max b c))) (not (or (le a b) (le a c))))))
      (bitr3 ((not (le a (max b c))) (lt (max b c) a) (not (or (le a b) (le a c)))))
      (ltnle ((max b c) a)))
    (ax_mp ((iff (an (lt b a) (lt c a)) (not (or (le a b) (le a c)))) (iff (lt (max b c) a) (not (or (le a b) (le a c)))))
      (ax_mp ((iff (lt (max b c) a) (an (lt b a) (lt c a))) (im (iff (an (lt b a) (lt c a)) (not (or (le a b) (le a c)))) (iff (lt (max b c) a) (not (or (le a b) (le a c))))))
        (bitr ((lt (max b c) a) (an (lt b a) (lt c a)) (not (or (le a b) (le a c)))))
        (maxlt (b c a)))
      (ax_mp ((iff (not (or (le a b) (le a c))) (an (not (le a b)) (not (le a c)))) (iff (an (lt b a) (lt c a)) (not (or (le a b) (le a c)))))
        (ax_mp ((iff (an (lt b a) (lt c a)) (an (not (le a b)) (not (le a c)))) (im (iff (not (or (le a b) (le a c))) (an (not (le a b)) (not (le a c)))) (iff (an (lt b a) (lt c a)) (not (or (le a b) (le a c))))))
          (bitr4 ((an (lt b a) (lt c a)) (an (not (le a b)) (not (le a c))) (not (or (le a b) (le a c)))))
          (ax_mp ((iff (lt c a) (not (le a c))) (iff (an (lt b a) (lt c a)) (an (not (le a b)) (not (le a c)))))
            (ax_mp ((iff (lt b a) (not (le a b))) (im (iff (lt c a) (not (le a c))) (iff (an (lt b a) (lt c a)) (an (not (le a b)) (not (le a c))))))
              (aneq ((lt b a) (not (le a b)) (lt c a) (not (le a c))))
              (ltnle (b a)))
            (ltnle (c a))))
        (notor ((le a b) (le a c))))))))

(local theorem unfin ((A set ()) (B set ())) ()
  (im (finite A) (im (finite B) (finite (Union A B))))
((m nat) (n nat) (x nat) (z nat))
(:conv (im (finite A) (im (finite B) (finite (Union A B))))
  (im
    (:unfold finite (A) (m x)
      (ex m (al x (im (el x A) (lt x m)))))
    (im (finite B) (finite (Union A B))))
  (eex (m (al x (im (el x A) (lt x m))) (im (finite B) (finite (Union A B))))
    (:conv (im (al x (im (el x A) (lt x m))) (im (finite B) (finite (Union A B))))
      (im
        (al x (im (el x A) (lt x m)))
        (im
          (:unfold finite (B) (n x)
            (ex n (al x (im (el x B) (lt x n)))))
          (finite (Union A B))))
      (eexd (n (al x (im (el x A) (lt x m))) (al x (im (el x B) (lt x n))) (finite (Union A B)))
        (syl6 ((al x (im (el x A) (lt x m))) (al x (im (el x B) (lt x n))) (al x (im (el x (Union A B)) (lt x (max m n)))) (finite (Union A B)))
          (:conv (im (al x (im (el x (Union A B)) (lt x (max m n)))) (finite (Union A B)))
            (im
              (al x (im (el x (Union A B)) (lt x (max m n))))
              (:unfold finite ((Union A B)) (z x)
                (ex z (al x (im (el x (Union A B)) (lt x z))))))
            (iexe (z (max m n) (al x (im (el x (Union A B)) (lt x z))) (al x (im (el x (Union A B)) (lt x (max m n)))))
              (aleqd ((eq z (max m n)) x (im (el x (Union A B)) (lt x z)) (im (el x (Union A B)) (lt x (max m n))))
                (imeq2d ((eq z (max m n)) (el x (Union A B)) (lt x z) (lt x (max m n)))
                  (lteq2 (x z (max m n)))))))
          (al2imi (x (im (el x A) (lt x m)) (im (el x B) (lt x n)) (im (el x (Union A B)) (lt x (max m n))))
            (rsyl ((im (el x A) (lt x m)) (im (el x A) (lt x (max m n))) (im (im (el x B) (lt x n)) (im (el x (Union A B)) (lt x (max m n)))))
              (imim2i ((el x A) (lt x m) (lt x (max m n)))
                (mpi ((lt x m) (le m (max m n)) (lt x (max m n)))
                  (lemax1 (m n))
                  (ltletr (x m (max m n)))))
              (syl5 ((im (el x A) (lt x (max m n))) (im (el x B) (lt x n)) (im (el x B) (lt x (max m n))) (im (el x (Union A B)) (lt x (max m n))))
                (imim2i ((el x B) (lt x n) (lt x (max m n)))
                  (mpi ((lt x n) (le n (max m n)) (lt x (max m n)))
                    (lemax2 (m n))
                    (ltletr (x n (max m n)))))
                (syl6ibr ((im (el x A) (lt x (max m n))) (im (el x B) (lt x (max m n))) (im (or (el x A) (el x B)) (lt x (max m n))) (im (el x (Union A B)) (lt x (max m n))))
                  (imeq1i ((el x (Union A B)) (or (el x A) (el x B)) (lt x (max m n)))
                    (elun (A B x)))
                  (eor ((el x A) (el x B) (lt x (max m n))))))))))))))

(def div ((a nat ()) (b nat ())) (nat ())
((q nat) (r nat))
(the (ab q (ex r (an (lt r b) (eq (add (mul b q) r) a))))))

(local theorem diveqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (div a1 b1) (div a2 b2)))
((q nat) (r nat))
(:let H1 (eqidd (_G r))
(:conv (im _G (eq (div a1 b1) (div a2 b2)))
  (im
    _G
    (eq
      (:unfold div (a1 b1) (q r)
        (the (ab q (ex r (an (lt r b1) (eq (add (mul b1 q) r) a1))))))
      (:unfold div (a2 b2) (q r)
        (the (ab q (ex r (an (lt r b2) (eq (add (mul b2 q) r) a2))))))))
  (theeqd (_G (ab q (ex r (an (lt r b1) (eq (add (mul b1 q) r) a1)))) (ab q (ex r (an (lt r b2) (eq (add (mul b2 q) r) a2)))))
    (abeqd (_G q (ex r (an (lt r b1) (eq (add (mul b1 q) r) a1))) (ex r (an (lt r b2) (eq (add (mul b2 q) r) a2))))
      (exeqd (_G r (an (lt r b1) (eq (add (mul b1 q) r) a1)) (an (lt r b2) (eq (add (mul b2 q) r) a2)))
        (aneqd (_G (lt r b1) (lt r b2) (eq (add (mul b1 q) r) a1) (eq (add (mul b2 q) r) a2))
          (lteqd (_G r r b1 b2)
            H1
            hb)
          (eqeqd (_G (add (mul b1 q) r) (add (mul b2 q) r) a1 a2)
            (addeqd (_G (mul b1 q) (mul b2 q) r r)
              (muleqd (_G b1 b2 q q)
                hb
                (eqidd (_G q)))
              H1)
            ha))))))))

(local theorem diveq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (div a1 b1) (div a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (div a1 b1) (div a2 b2)))
  (diveqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem diveq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (div a1 b) (div a2 b)))
()
(diveqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem diveq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (div a1 b) (div a2 b)))
()
(diveq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem diveq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (div a b1) (div a b2)))
()
(diveqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem diveq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (div a b1) (div a b2)))
()
(diveq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(def mod ((a nat ()) (b nat ())) (nat ())
()
(sub a (mul b (div a b))))

(local theorem modeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (mod a1 b1) (mod a2 b2)))
()
(:conv (im _G (eq (mod a1 b1) (mod a2 b2)))
  (im
    _G
    (eq
      (:unfold mod (a1 b1) ()
        (sub a1 (mul b1 (div a1 b1))))
      (:unfold mod (a2 b2) ()
        (sub a2 (mul b2 (div a2 b2))))))
  (subeqd (_G a1 a2 (mul b1 (div a1 b1)) (mul b2 (div a2 b2)))
    ha
    (muleqd (_G b1 b2 (div a1 b1) (div a2 b2))
      hb
      (diveqd (_G a1 a2 b1 b2)
        ha
        hb)))))

(local theorem modeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (mod a1 b1) (mod a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (mod a1 b1) (mod a2 b2)))
  (modeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem modeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (mod a1 b) (mod a2 b)))
()
(modeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem modeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (mod a1 b) (mod a2 b)))
()
(modeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem modeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (mod a b1) (mod a b2)))
()
(modeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem modeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (mod a b1) (mod a b2)))
()
(modeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(theorem div0 ((a nat ())) ()
  (eq (div a (d0)) (d0))
((q nat) (r nat))
(trud ((eq (div a (d0)) (d0)))
  (:conv (im (wtru) (eq (div a (d0)) (d0)))
    (im
      (wtru)
      (eq
        (:unfold div (a (d0)) (q r)
          (the (ab q (ex r (an (lt r (d0)) (eq (add (mul (d0) q) r) a))))))
        (d0)))
    (eqthe0abd ((wtru) q (ex r (an (lt r (d0)) (eq (add (mul (d0) q) r) a))))
      (a1i ((wtru) (im (ex r (an (lt r (d0)) (eq (add (mul (d0) q) r) a))) (eq q (d0))))
        (eex (r (an (lt r (d0)) (eq (add (mul (d0) q) r) a)) (eq q (d0)))
          (anwl ((lt r (d0)) (eq (add (mul (d0) q) r) a) (eq q (d0)))
            (ax_mp ((not (lt r (d0))) (im (lt r (d0)) (eq q (d0))))
              (absurd ((lt r (d0)) (eq q (d0))))
              (lt02 (r))))))))))

(local theorem mod0 ((a nat ())) ()
  (eq (mod a (d0)) a)
()
(:conv (eq (mod a (d0)) a)
  (eq
    (:unfold mod (a (d0)) ()
      (sub a (mul (d0) (div a (d0)))))
    a)
  (ax_mp ((eq (sub a (d0)) a) (eq (sub a (mul (d0) (div a (d0)))) a))
    (ax_mp ((eq (sub a (mul (d0) (div a (d0)))) (sub a (d0))) (im (eq (sub a (d0)) a) (eq (sub a (mul (d0) (div a (d0)))) a)))
      (eqtr ((sub a (mul (d0) (div a (d0)))) (sub a (d0)) a))
      (ax_mp ((eq (mul (d0) (div a (d0))) (d0)) (eq (sub a (mul (d0) (div a (d0)))) (sub a (d0))))
        (subeq2 (a (mul (d0) (div a (d0))) (d0)))
        (mul01 ((div a (d0))))))
    (sub02 (a)))))

(local theorem divlem1 ((G wff ()) (b nat ()) (q1 nat ()) (q2 nat ()) (r1 nat ()) (r2 nat ()))
  ((h1 (im G (lt r1 b)))
   (h2 (im G (lt r2 b)))
   (h3 (im G (le (add (mul b q1) r1) (add (mul b q2) r2)))))
  (im G (le q1 q2))
()
(sylibr (G (lt q1 (suc q2)) (le q1 q2))
  (leltsuc (q1 q2))
  (mpbird (G (lt (mul b q1) (mul b (suc q2))) (lt q1 (suc q2)))
    (syl (G (lt (d0) b) (iff (lt q1 (suc q2)) (lt (mul b q1) (mul b (suc q2)))))
      (ltmul2 (b q1 (suc q2)))
      (lelttrd (G (d0) r1 b)
        (a1i (G (le (d0) r1))
          (le01 (r1)))
        h1))
    (lelttrd (G (mul b q1) (add (mul b q1) r1) (mul b (suc q2)))
      (a1i (G (le (mul b q1) (add (mul b q1) r1)))
        (leaddid1 ((mul b q1) r1)))
      (lelttrd (G (add (mul b q1) r1) (add (mul b q2) r2) (mul b (suc q2)))
        h3
        (sylibr (G (lt (add (mul b q2) r2) (add (mul b q2) b)) (lt (add (mul b q2) r2) (mul b (suc q2))))
          (ax_mp ((eq (mul b (suc q2)) (add (mul b q2) b)) (iff (lt (add (mul b q2) r2) (mul b (suc q2))) (lt (add (mul b q2) r2) (add (mul b q2) b))))
            (lteq2 ((add (mul b q2) r2) (mul b (suc q2)) (add (mul b q2) b)))
            (mulS (b q2)))
          (sylib (G (lt r2 b) (lt (add (mul b q2) r2) (add (mul b q2) b)))
            (ltadd2 ((mul b q2) r2 b))
            h2)))))))

(local theorem divlem2 ((G wff ()) (Q nat ()) (R nat ()) (a nat ()) (b nat ()) (q nat ()) (r nat))
  ((h1 (im G (lt R b)))
   (h2 (im G (eq (add (mul b Q) R) a))))
  (im G (iff (ex r (an (lt r b) (eq (add (mul b q) r) a))) (eq q Q)))
()
(:let H1 (anrl (G (lt r b) (eq (add (mul b q) r) a)))
(:let H2 (anwl (G (an (lt r b) (eq (add (mul b q) r) a)) (lt R b))
  h1)
(:let H3 (anrr (G (lt r b) (eq (add (mul b q) r) a)))
(:let H4 (anwl (G (an (lt r b) (eq (add (mul b q) r) a)) (eq (add (mul b Q) R) a))
  h2)
(ibid (G (ex r (an (lt r b) (eq (add (mul b q) r) a))) (eq q Q))
  (eexda (r G (an (lt r b) (eq (add (mul b q) r) a)) (eq q Q))
    (leasymd ((an G (an (lt r b) (eq (add (mul b q) r) a))) q Q)
      (divlem1 ((an G (an (lt r b) (eq (add (mul b q) r) a))) b q Q r R)
        H1
        H2
        (syl ((an G (an (lt r b) (eq (add (mul b q) r) a))) (eq (add (mul b q) r) (add (mul b Q) R)) (le (add (mul b q) r) (add (mul b Q) R)))
          (eqle ((add (mul b q) r) (add (mul b Q) R)))
          (eqtr4d ((an G (an (lt r b) (eq (add (mul b q) r) a))) (add (mul b q) r) a (add (mul b Q) R))
            H3
            H4)))
      (divlem1 ((an G (an (lt r b) (eq (add (mul b q) r) a))) b Q q R r)
        H2
        H1
        (syl ((an G (an (lt r b) (eq (add (mul b q) r) a))) (eq (add (mul b Q) R) (add (mul b q) r)) (le (add (mul b Q) R) (add (mul b q) r)))
          (eqle ((add (mul b Q) R) (add (mul b q) r)))
          (eqtr4d ((an G (an (lt r b) (eq (add (mul b q) r) a))) (add (mul b Q) R) a (add (mul b q) r))
            H4
            H3)))))
  (exp (G (eq q Q) (ex r (an (lt r b) (eq (add (mul b q) r) a))))
    (syl ((an G (eq q Q)) (an (lt R b) (eq (add (mul b q) R) a)) (ex r (an (lt r b) (eq (add (mul b q) r) a))))
      (iexe (r R (an (lt r b) (eq (add (mul b q) r) a)) (an (lt R b) (eq (add (mul b q) R) a)))
        (aneqd ((eq r R) (lt r b) (lt R b) (eq (add (mul b q) r) a) (eq (add (mul b q) R) a))
          (lteq1 (r R b))
          (eqeq1d ((eq r R) (add (mul b q) r) (add (mul b q) R) a)
            (addeq2 ((mul b q) r R)))))
      (iand ((an G (eq q Q)) (lt R b) (eq (add (mul b q) R) a))
        (anwl (G (eq q Q) (lt R b))
          h1)
        (eqtrd ((an G (eq q Q)) (add (mul b q) R) (add (mul b Q) R) a)
          (anwr (G (eq q Q) (eq (add (mul b q) R) (add (mul b Q) R)))
            (addeq1d ((eq q Q) (mul b q) (mul b Q) R)
              (muleq2 (b q Q))))
          (anwl (G (eq q Q) (eq (add (mul b Q) R) a))
            h2)))))))))))

(local theorem divlem3 ((a nat ()) (b nat ()) (q nat) (r nat)) ()
  (im (ne b (d0)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))))
((u nat) (v nat) (x nat) (y nat))
(:let H1 (lteq1 (r (d0) b))
(:let H2 (lt01 (b))
(:let H3 (anrr ((ne b (d0)) (lt v b) (eq (add (mul b u) v) y)))
(indd ((ne b (d0)) x y a (ex q (ex r (an (lt r b) (eq (add (mul b q) r) x)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (d0))))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) y)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc y))))))
  (exeqd ((eq x (d0)) q (ex r (an (lt r b) (eq (add (mul b q) r) x))) (ex r (an (lt r b) (eq (add (mul b q) r) (d0)))))
    (exeqd ((eq x (d0)) r (an (lt r b) (eq (add (mul b q) r) x)) (an (lt r b) (eq (add (mul b q) r) (d0))))
      (aneq2d ((eq x (d0)) (lt r b) (eq (add (mul b q) r) x) (eq (add (mul b q) r) (d0)))
        (eqeq2 ((add (mul b q) r) x (d0))))))
  (exeqd ((eq x y) q (ex r (an (lt r b) (eq (add (mul b q) r) x))) (ex r (an (lt r b) (eq (add (mul b q) r) y))))
    (exeqd ((eq x y) r (an (lt r b) (eq (add (mul b q) r) x)) (an (lt r b) (eq (add (mul b q) r) y)))
      (aneq2d ((eq x y) (lt r b) (eq (add (mul b q) r) x) (eq (add (mul b q) r) y))
        (eqeq2 ((add (mul b q) r) x y)))))
  (exeqd ((eq x (suc y)) q (ex r (an (lt r b) (eq (add (mul b q) r) x))) (ex r (an (lt r b) (eq (add (mul b q) r) (suc y)))))
    (exeqd ((eq x (suc y)) r (an (lt r b) (eq (add (mul b q) r) x)) (an (lt r b) (eq (add (mul b q) r) (suc y))))
      (aneq2d ((eq x (suc y)) (lt r b) (eq (add (mul b q) r) x) (eq (add (mul b q) r) (suc y)))
        (eqeq2 ((add (mul b q) r) x (suc y))))))
  (exeqd ((eq x a) q (ex r (an (lt r b) (eq (add (mul b q) r) x))) (ex r (an (lt r b) (eq (add (mul b q) r) a))))
    (exeqd ((eq x a) r (an (lt r b) (eq (add (mul b q) r) x)) (an (lt r b) (eq (add (mul b q) r) a)))
      (aneq2d ((eq x a) (lt r b) (eq (add (mul b q) r) x) (eq (add (mul b q) r) a))
        (eqeq2 ((add (mul b q) r) x a)))))
  (iexde (q (ne b (d0)) (d0) (ex r (an (lt r b) (eq (add (mul b q) r) (d0)))))
    (iexde (r (an (ne b (d0)) (eq q (d0))) (d0) (an (lt r b) (eq (add (mul b q) r) (d0))))
      (iand ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (lt r b) (eq (add (mul b q) r) (d0)))
        (mpbird ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (lt (d0) b) (lt r b))
          (anwr ((an (ne b (d0)) (eq q (d0))) (eq r (d0)) (iff (lt r b) (lt (d0) b)))
            H1)
          (sylibr ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (ne b (d0)) (lt (d0) b))
            H2
            (anll ((ne b (d0)) (eq q (d0)) (eq r (d0))))))
        (syl6eq ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (add (mul b q) r) (add (d0) (d0)) (d0))
          (add0 ((d0)))
          (addeqd ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (mul b q) (d0) r (d0))
            (syl6eq ((an (an (ne b (d0)) (eq q (d0))) (eq r (d0))) (mul b q) (mul b (d0)) (d0))
              (mul02 (b))
              (anwl ((an (ne b (d0)) (eq q (d0))) (eq r (d0)) (eq (mul b q) (mul b (d0))))
                (anwr ((ne b (d0)) (eq q (d0)) (eq (mul b q) (mul b (d0))))
                  (muleq2 (b q (d0))))))
            (anr ((an (ne b (d0)) (eq q (d0))) (eq r (d0)))))))))
  (imp ((ne b (d0)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) y)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc y))))))
    (syl5bi ((ne b (d0)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) y)))) (ex u (ex v (an (lt v b) (eq (add (mul b u) v) y)))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc y))))))
      (cbvex (q u (ex r (an (lt r b) (eq (add (mul b q) r) y))) (ex v (an (lt v b) (eq (add (mul b u) v) y))))
        (cbvexd (r v (eq q u) (an (lt r b) (eq (add (mul b q) r) y)) (an (lt v b) (eq (add (mul b u) v) y)))
          (aneqd ((an (eq q u) (eq r v)) (lt r b) (lt v b) (eq (add (mul b q) r) y) (eq (add (mul b u) v) y))
            (anwr ((eq q u) (eq r v) (iff (lt r b) (lt v b)))
              (lteq1 (r v b)))
            (eqeq1d ((an (eq q u) (eq r v)) (add (mul b q) r) (add (mul b u) v) y)
              (addeqd ((an (eq q u) (eq r v)) (mul b q) (mul b u) r v)
                (anwl ((eq q u) (eq r v) (eq (mul b q) (mul b u)))
                  (muleq2 (b q u)))
                (anr ((eq q u) (eq r v))))))))
      (eexd (u (ne b (d0)) (ex v (an (lt v b) (eq (add (mul b u) v) y))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc y))))))
        (eexda (v (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc y))))))
          (mpd ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (or (lt (suc v) b) (eq (suc v) b)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc y))))))
            (sylib ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (le (suc v) b) (or (lt (suc v) b) (eq (suc v) b)))
              (leloe ((suc v) b))
              (:conv (im (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (le (suc v) b))
                (im
                  (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y)))
                  (:sym (:unfold lt (v b) ()
                    (le (suc v) b))))
                (anrl ((ne b (d0)) (lt v b) (eq (add (mul b u) v) y)))))
            (eorda ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b) (eq (suc v) b) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) (suc y))))))
              (iexde (q (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) u (ex r (an (lt r b) (eq (add (mul b q) r) (suc y)))))
                (iexde (r (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (suc v) (an (lt r b) (eq (add (mul b q) r) (suc y))))
                  (iand ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (lt r b) (eq (add (mul b q) r) (suc y)))
                    (mpbird ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (lt (suc v) b) (lt r b))
                      (anwr ((an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v)) (iff (lt r b) (lt (suc v) b)))
                        (lteq1 (r (suc v) b)))
                      (anwll ((an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u) (eq r (suc v)) (lt (suc v) b))
                        (anr ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)))))
                    (eqtrd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (add (mul b q) r) (add (mul b q) (suc v)) (suc y))
                      (anwr ((an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v)) (eq (add (mul b q) r) (add (mul b q) (suc v))))
                        (addeq2 ((mul b q) r (suc v))))
                      (syl5eq ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (add (mul b q) (suc v)) (suc (add (mul b q) v)) (suc y))
                        (addS ((mul b q) v))
                        (suceqd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (add (mul b q) v) y)
                          (eqtrd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (add (mul b q) v) (add (mul b u) v) y)
                            (addeq1d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) (mul b q) (mul b u) v)
                              (muleq2d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u)) (eq r (suc v))) b q u)
                                (anlr ((an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b)) (eq q u) (eq r (suc v))))))
                            (anw3l ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (lt (suc v) b) (eq q u) (eq r (suc v)) (eq (add (mul b u) v) y))
                              H3))))))))
              (iexde (q (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (suc u) (ex r (an (lt r b) (eq (add (mul b q) r) (suc y)))))
                (iexde (r (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (d0) (an (lt r b) (eq (add (mul b q) r) (suc y))))
                  (iand ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (lt r b) (eq (add (mul b q) r) (suc y)))
                    (mpbird ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (lt (d0) b) (lt r b))
                      (anwr ((an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0)) (iff (lt r b) (lt (d0) b)))
                        H1)
                      (sylibr ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (ne b (d0)) (lt (d0) b))
                        H2
                        (anw3l ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b) (eq q (suc u)) (eq r (d0)) (ne b (d0)))
                          (anl ((ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y)))))))
                    (eqtrd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b q) r) (add (mul b (suc u)) (d0)) (suc y))
                      (addeqd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (mul b q) (mul b (suc u)) r (d0))
                        (muleq2d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) b q (suc u))
                          (anlr ((an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u)) (eq r (d0)))))
                        (anr ((an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0)))))
                      (syl5eq ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b (suc u)) (d0)) (mul b (suc u)) (suc y))
                        (add0 ((mul b (suc u))))
                        (syl5eq ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (mul b (suc u)) (add (mul b u) b) (suc y))
                          (mulS (b u))
                          (eqtr3d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b u) b) (add (mul b u) (suc v)) (suc y))
                            (addeq2d ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (mul b u) (suc v) b)
                              (anwll ((an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u)) (eq r (d0)) (eq (suc v) b))
                                (anr ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)))))
                            (syl5eq ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b u) (suc v)) (suc (add (mul b u) v)) (suc y))
                              (addS ((mul b u) v))
                              (suceqd ((an (an (an (an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b)) (eq q (suc u))) (eq r (d0))) (add (mul b u) v) y)
                                (anw3l ((an (ne b (d0)) (an (lt v b) (eq (add (mul b u) v) y))) (eq (suc v) b) (eq q (suc u)) (eq r (d0)) (eq (add (mul b u) v) y))
                                  H3)))))))))))))))))))))

(local theorem eqdivmod ((G wff ()) (Q nat ()) (R nat ()) (a nat ()) (b nat ()))
  ((h1 (im G (lt R b)))
   (h2 (im G (eq (add (mul b Q) R) a))))
  (im G (an (eq (div a b) Q) (eq (mod a b) R)))
((q nat) (r nat))
(:let H1 (:conv (im G (eq (div a b) Q))
  (im
    G
    (eq
      (:unfold div (a b) (q r)
        (the (ab q (ex r (an (lt r b) (eq (add (mul b q) r) a))))))
      Q))
  (eqtheabd (G Q q (ex r (an (lt r b) (eq (add (mul b q) r) a))))
    (divlem2 (G Q R a b q r)
      h1
      h2)))
(iand (G (eq (div a b) Q) (eq (mod a b) R))
  H1
  (syl (G (eq (add (mul b (div a b)) R) a) (eq (mod a b) R))
    (:conv (im (eq (add (mul b (div a b)) R) a) (eq (mod a b) R))
      (im
        (eq (add (mul b (div a b)) R) a)
        (eq
          (:unfold mod (a b) ()
            (sub a (mul b (div a b))))
          R))
      (eqsub2 ((mul b (div a b)) R a)))
    (eqtrd (G (add (mul b (div a b)) R) (add (mul b Q) R) a)
      (addeq1d (G (mul b (div a b)) (mul b Q) R)
        (muleq2d (G b (div a b) Q)
          H1))
      h2)))))

(theorem divmod ((a nat ()) (b nat ())) ()
  (eq (add (mul b (div a b)) (mod a b)) a)
((q nat) (r nat) (x nat) (y nat))
(:let H1 (anrr ((not (eq b (d0))) (lt r b) (eq (add (mul b q) r) a)))
(:conv (eq (add (mul b (div a b)) (mod a b)) a)
  (eq
    (add
      (mul b (div a b))
      (:unfold mod (a b) ()
        (sub a (mul b (div a b)))))
    a)
  (ax_mp ((le (mul b (div a b)) a) (eq (add (mul b (div a b)) (sub a (mul b (div a b)))) a))
    (pncan3 ((mul b (div a b)) a))
    (cases ((eq b (d0)) (le (mul b (div a b)) a))
      (mpbiri ((eq b (d0)) (le (d0) a) (le (mul b (div a b)) a))
        (le01 (a))
        (leeq1d ((eq b (d0)) (mul b (div a b)) (d0) a)
          (syl6eq ((eq b (d0)) (mul b (div a b)) (mul b (d0)) (d0))
            (mul0 (b))
            (muleq2d ((eq b (d0)) b (div a b) (d0))
              (syl6eq ((eq b (d0)) (div a b) (div a (d0)) (d0))
                (div0 (a))
                (diveq2 (a b (d0))))))))
      (mpd ((not (eq b (d0))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))) (le (mul b (div a b)) a))
        (:conv (im (not (eq b (d0))) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))))
          (im
            (:sym (:unfold ne (b (d0)) ()
              (not (eq b (d0)))))
            (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))))
          (divlem3 (a b q r)))
        (eexd (q (not (eq b (d0))) (ex r (an (lt r b) (eq (add (mul b q) r) a))) (le (mul b (div a b)) a))
          (eexda (r (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a)) (le (mul b (div a b)) a))
            (mpbii ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (le (mul b (div a b)) (add (mul b (div a b)) r)) (le (mul b (div a b)) a))
              (leaddid1 ((mul b (div a b)) r))
              (leeq2d ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (mul b (div a b)) (add (mul b (div a b)) r) a)
                (eqtrd ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (add (mul b (div a b)) r) (add (mul b q) r) a)
                  (addeq1d ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (mul b (div a b)) (mul b q) r)
                    (muleq2d ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) b (div a b) q)
                      (:conv (im (an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) (eq (div a b) q))
                        (im
                          (an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a)))
                          (eq
                            (:unfold div (a b) (x y)
                              (the (ab x (ex y (an (lt y b) (eq (add (mul b x) y) a))))))
                            q))
                        (eqtheabd ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) q x (ex y (an (lt y b) (eq (add (mul b x) y) a))))
                          (divlem2 ((an (not (eq b (d0))) (an (lt r b) (eq (add (mul b q) r) a))) q r a b x y)
                            (anrl ((not (eq b (d0))) (lt r b) (eq (add (mul b q) r) a)))
                            H1)))))
                  H1)))))))))))

(theorem modlt ((a nat ()) (b nat ())) ()
  (im (ne b (d0)) (lt (mod a b) b))
((q nat) (r nat))
(:let H1 (anrl ((ne b (d0)) (lt r b) (eq (add (mul b q) r) a)))
(mpd ((ne b (d0)) (ex q (ex r (an (lt r b) (eq (add (mul b q) r) a)))) (lt (mod a b) b))
  (divlem3 (a b q r))
  (eexd (q (ne b (d0)) (ex r (an (lt r b) (eq (add (mul b q) r) a))) (lt (mod a b) b))
    (eexda (r (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a)) (lt (mod a b) b))
      (mpbird ((an (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a))) (lt r b) (lt (mod a b) b))
        (lteq1d ((an (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a))) (mod a b) r b)
          (anrd ((an (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a))) (eq (div a b) q) (eq (mod a b) r))
            (eqdivmod ((an (ne b (d0)) (an (lt r b) (eq (add (mul b q) r) a))) q r a b)
              H1
              (anrr ((ne b (d0)) (lt r b) (eq (add (mul b q) r) a))))))
        H1))))))

(local theorem modle1 ((a nat ()) (b nat ())) ()
  (le (mod a b) a)
()
(mpbi ((le (mod a b) (add (mul b (div a b)) (mod a b))) (le (mod a b) a))
  (ax_mp ((eq (add (mul b (div a b)) (mod a b)) a) (iff (le (mod a b) (add (mul b (div a b)) (mod a b))) (le (mod a b) a)))
    (leeq2 ((mod a b) (add (mul b (div a b)) (mod a b)) a))
    (divmod (a b)))
  (leaddid2 ((mod a b) (mul b (div a b))))))

(local theorem div01 ((a nat ())) ()
  (eq (div (d0) a) (d0))
()
(cases ((eq a (d0)) (eq (div (d0) a) (d0)))
  (syl6eq ((eq a (d0)) (div (d0) a) (div (d0) (d0)) (d0))
    (div0 ((d0)))
    (diveq2 ((d0) a (d0))))
  (anld ((not (eq a (d0))) (eq (div (d0) a) (d0)) (eq (mod (d0) a) (d0)))
    (eqdivmod ((not (eq a (d0))) (d0) (d0) (d0) a)
      (:conv (im (not (eq a (d0))) (lt (d0) a))
        (im
          (:sym (:unfold ne (a (d0)) ()
            (not (eq a (d0)))))
          (lt (d0) a))
        (ax_mp ((iff (lt (d0) a) (ne a (d0))) (im (ne a (d0)) (lt (d0) a)))
          (bi2 ((lt (d0) a) (ne a (d0))))
          (lt01 (a))))
      (a1i ((not (eq a (d0))) (eq (add (mul a (d0)) (d0)) (d0)))
        (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0)))
          (ax_mp ((eq (add (mul a (d0)) (d0)) (mul a (d0))) (im (eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0))))
            (eqtr ((add (mul a (d0)) (d0)) (mul a (d0)) (d0)))
            (add0 ((mul a (d0)))))
          (mul0 (a))))))))

(local theorem mod01 ((a nat ())) ()
  (eq (mod (d0) a) (d0))
()
(cases ((eq a (d0)) (eq (mod (d0) a) (d0)))
  (syl6eq ((eq a (d0)) (mod (d0) a) (mod (d0) (d0)) (d0))
    (mod0 ((d0)))
    (modeq2 ((d0) a (d0))))
  (anrd ((not (eq a (d0))) (eq (div (d0) a) (d0)) (eq (mod (d0) a) (d0)))
    (eqdivmod ((not (eq a (d0))) (d0) (d0) (d0) a)
      (:conv (im (not (eq a (d0))) (lt (d0) a))
        (im
          (:sym (:unfold ne (a (d0)) ()
            (not (eq a (d0)))))
          (lt (d0) a))
        (ax_mp ((iff (lt (d0) a) (ne a (d0))) (im (ne a (d0)) (lt (d0) a)))
          (bi2 ((lt (d0) a) (ne a (d0))))
          (lt01 (a))))
      (a1i ((not (eq a (d0))) (eq (add (mul a (d0)) (d0)) (d0)))
        (ax_mp ((eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0)))
          (ax_mp ((eq (add (mul a (d0)) (d0)) (mul a (d0))) (im (eq (mul a (d0)) (d0)) (eq (add (mul a (d0)) (d0)) (d0))))
            (eqtr ((add (mul a (d0)) (d0)) (mul a (d0)) (d0)))
            (add0 ((mul a (d0)))))
          (mul0 (a))))))))

(local theorem mod12 ((a nat ())) ()
  (eq (mod a (d1)) (d0))
()
(mpbi ((lt (mod a (d1)) (d1)) (eq (mod a (d1)) (d0)))
  (lt12 ((mod a (d1))))
  (ax_mp ((ne (d1) (d0)) (lt (mod a (d1)) (d1)))
    (modlt (a (d1)))
    (d1ne0 ()))))

(local theorem div12 ((a nat ())) ()
  (eq (div a (d1)) a)
()
(ax_mp ((eq (add (mul (d1) (div a (d1))) (mod a (d1))) a) (eq (div a (d1)) a))
  (ax_mp ((eq (add (mul (d1) (div a (d1))) (mod a (d1))) (div a (d1))) (im (eq (add (mul (d1) (div a (d1))) (mod a (d1))) a) (eq (div a (d1)) a)))
    (eqtr3 ((div a (d1)) (add (mul (d1) (div a (d1))) (mod a (d1))) a))
    (ax_mp ((eq (add (div a (d1)) (d0)) (div a (d1))) (eq (add (mul (d1) (div a (d1))) (mod a (d1))) (div a (d1))))
      (ax_mp ((eq (add (mul (d1) (div a (d1))) (mod a (d1))) (add (div a (d1)) (d0))) (im (eq (add (div a (d1)) (d0)) (div a (d1))) (eq (add (mul (d1) (div a (d1))) (mod a (d1))) (div a (d1)))))
        (eqtr ((add (mul (d1) (div a (d1))) (mod a (d1))) (add (div a (d1)) (d0)) (div a (d1))))
        (ax_mp ((eq (mod a (d1)) (d0)) (eq (add (mul (d1) (div a (d1))) (mod a (d1))) (add (div a (d1)) (d0))))
          (ax_mp ((eq (mul (d1) (div a (d1))) (div a (d1))) (im (eq (mod a (d1)) (d0)) (eq (add (mul (d1) (div a (d1))) (mod a (d1))) (add (div a (d1)) (d0)))))
            (addeq ((mul (d1) (div a (d1))) (div a (d1)) (mod a (d1)) (d0)))
            (mul11 ((div a (d1)))))
          (mod12 (a))))
      (add02 ((div a (d1))))))
  (divmod (a (d1)))))

(local theorem muldiv2 ((a nat ()) (b nat ())) ()
  (im (ne b (d0)) (eq (div (mul b a) b) a))
()
(anld ((ne b (d0)) (eq (div (mul b a) b) a) (eq (mod (mul b a) b) (d0)))
  (eqdivmod ((ne b (d0)) a (d0) (mul b a) b)
    (ax_mp ((iff (lt (d0) b) (ne b (d0))) (im (ne b (d0)) (lt (d0) b)))
      (bi2 ((lt (d0) b) (ne b (d0))))
      (lt01 (b)))
    (a1i ((ne b (d0)) (eq (add (mul b a) (d0)) (mul b a)))
      (add0 ((mul b a)))))))

(local theorem muldiv1 ((a nat ()) (b nat ())) ()
  (im (ne b (d0)) (eq (div (mul a b) b) a))
()
(eqtrd ((ne b (d0)) (div (mul a b) b) (div (mul b a) b) a)
  (diveqd ((ne b (d0)) (mul a b) (mul b a) b b)
    (a1i ((ne b (d0)) (eq (mul a b) (mul b a)))
      (mulcom (a b)))
    (eqidd ((ne b (d0)) b)))
  (muldiv2 (a b))))

(local theorem mulmod1 ((a nat ()) (b nat ())) ()
  (eq (mod (mul b a) b) (d0))
()
(cases ((eq b (d0)) (eq (mod (mul b a) b) (d0)))
  (eqtrd ((eq b (d0)) (mod (mul b a) b) (mod (mul b a) (d0)) (d0))
    (modeq2 ((mul b a) b (d0)))
    (syl5eq ((eq b (d0)) (mod (mul b a) (d0)) (mul b a) (d0))
      (mod0 ((mul b a)))
      (syl6eq ((eq b (d0)) (mul b a) (mul (d0) a) (d0))
        (mul01 (a))
        (muleq1 (b (d0) a)))))
  (anrd ((not (eq b (d0))) (eq (div (mul b a) b) a) (eq (mod (mul b a) b) (d0)))
    (eqdivmod ((not (eq b (d0))) a (d0) (mul b a) b)
      (:conv (im (not (eq b (d0))) (lt (d0) b))
        (im
          (:sym (:unfold ne (b (d0)) ()
            (not (eq b (d0)))))
          (lt (d0) b))
        (ax_mp ((iff (lt (d0) b) (ne b (d0))) (im (ne b (d0)) (lt (d0) b)))
          (bi2 ((lt (d0) b) (ne b (d0))))
          (lt01 (b))))
      (a1i ((not (eq b (d0))) (eq (add (mul b a) (d0)) (mul b a)))
        (add0 ((mul b a))))))))

(local theorem mulmod2 ((a nat ()) (b nat ())) ()
  (eq (mod (mul a b) b) (d0))
()
(ax_mp ((eq (mod (mul b a) b) (d0)) (eq (mod (mul a b) b) (d0)))
  (ax_mp ((eq (mod (mul a b) b) (mod (mul b a) b)) (im (eq (mod (mul b a) b) (d0)) (eq (mod (mul a b) b) (d0))))
    (eqtr ((mod (mul a b) b) (mod (mul b a) b) (d0)))
    (ax_mp ((eq (mul a b) (mul b a)) (eq (mod (mul a b) b) (mod (mul b a) b)))
      (modeqd ((eq (mul a b) (mul b a)) (mul a b) (mul b a) b b)
        (id ((eq (mul a b) (mul b a))))
        (eqidd ((eq (mul a b) (mul b a)) b)))
      (mulcom (a b))))
  (mulmod1 (a b))))

(local theorem lediv1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le a b) (le (div a c) (div b c)))
()
(casesda ((le a b) (eq c (d0)) (le (div a c) (div b c)))
  (mpbiri ((an (le a b) (eq c (d0))) (le (d0) (div b c)) (le (div a c) (div b c)))
    (le01 ((div b c)))
    (leeq1d ((an (le a b) (eq c (d0))) (div a c) (d0) (div b c))
      (syl6eq ((an (le a b) (eq c (d0))) (div a c) (div a (d0)) (d0))
        (div0 (a))
        (anwr ((le a b) (eq c (d0)) (eq (div a c) (div a (d0))))
          (diveq2 (a c (d0)))))))
  (divlem1 ((an (le a b) (not (eq c (d0)))) c (div a c) (div b c) (mod a c) (mod b c))
    (anwr ((le a b) (not (eq c (d0))) (lt (mod a c) c))
      (:conv (im (not (eq c (d0))) (lt (mod a c) c))
        (im
          (:sym (:unfold ne (c (d0)) ()
            (not (eq c (d0)))))
          (lt (mod a c) c))
        (modlt (a c))))
    (anwr ((le a b) (not (eq c (d0))) (lt (mod b c) c))
      (:conv (im (not (eq c (d0))) (lt (mod b c) c))
        (im
          (:sym (:unfold ne (c (d0)) ()
            (not (eq c (d0)))))
          (lt (mod b c) c))
        (modlt (b c))))
    (sylibr ((an (le a b) (not (eq c (d0)))) (le a b) (le (add (mul c (div a c)) (mod a c)) (add (mul c (div b c)) (mod b c))))
      (ax_mp ((eq (add (mul c (div b c)) (mod b c)) b) (iff (le (add (mul c (div a c)) (mod a c)) (add (mul c (div b c)) (mod b c))) (le a b)))
        (ax_mp ((eq (add (mul c (div a c)) (mod a c)) a) (im (eq (add (mul c (div b c)) (mod b c)) b) (iff (le (add (mul c (div a c)) (mod a c)) (add (mul c (div b c)) (mod b c))) (le a b))))
          (leeq ((add (mul c (div a c)) (mod a c)) a (add (mul c (div b c)) (mod b c)) b))
          (divmod (a c)))
        (divmod (b c)))
      (anl ((le a b) (not (eq c (d0)))))))))

(local theorem muldivle ((a nat ()) (b nat ())) ()
  (le (mul b (div a b)) a)
()
(mpbi ((le (mul b (div a b)) (add (mul b (div a b)) (mod a b))) (le (mul b (div a b)) a))
  (ax_mp ((eq (add (mul b (div a b)) (mod a b)) a) (iff (le (mul b (div a b)) (add (mul b (div a b)) (mod a b))) (le (mul b (div a b)) a)))
    (leeq2 ((mul b (div a b)) (add (mul b (div a b)) (mod a b)) a))
    (divmod (a b)))
  (leaddid1 ((mul b (div a b)) (mod a b)))))

(local theorem divleid ((a nat ()) (b nat ())) ()
  (le (div a b) a)
()
(cases ((eq b (d0)) (le (div a b) a))
  (mpbiri ((eq b (d0)) (le (d0) a) (le (div a b) a))
    (le01 (a))
    (leeq1d ((eq b (d0)) (div a b) (d0) a)
      (syl6eq ((eq b (d0)) (div a b) (div a (d0)) (d0))
        (div0 (a))
        (diveq2 (a b (d0))))))
  (letrd ((not (eq b (d0))) (div a b) (mul b (div a b)) a)
    (sylib ((not (eq b (d0))) (le (mul (d1) (div a b)) (mul b (div a b))) (le (div a b) (mul b (div a b))))
      (ax_mp ((eq (mul (d1) (div a b)) (div a b)) (iff (le (mul (d1) (div a b)) (mul b (div a b))) (le (div a b) (mul b (div a b)))))
        (leeq1 ((mul (d1) (div a b)) (div a b) (mul b (div a b))))
        (mul11 ((div a b))))
      (sylbir ((not (eq b (d0))) (le (d1) b) (le (mul (d1) (div a b)) (mul b (div a b))))
        (:conv (iff (le (d1) b) (not (eq b (d0))))
          (iff
            (le (d1) b)
            (:sym (:unfold ne (b (d0)) ()
              (not (eq b (d0))))))
          (le11 (b)))
        (lemul1a ((d1) b (div a b)))))
    (a1i ((not (eq b (d0))) (le (mul b (div a b)) a))
      (muldivle (a b))))))

(local theorem ledivmul1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne c (d0)) (iff (le a (div b c)) (le (mul c a) b)))
()
(ibida ((ne c (d0)) (le a (div b c)) (le (mul c a) b))
  (letrd ((an (ne c (d0)) (le a (div b c))) (mul c a) (mul c (div b c)) b)
    (anwr ((ne c (d0)) (le a (div b c)) (le (mul c a) (mul c (div b c))))
      (lemul2a (c a (div b c))))
    (a1i ((an (ne c (d0)) (le a (div b c))) (le (mul c (div b c)) b))
      (muldivle (b c))))
  (sylibr ((an (ne c (d0)) (le (mul c a) b)) (lt a (suc (div b c))) (le a (div b c)))
    (leltsuc (a (div b c)))
    (mpbird ((an (ne c (d0)) (le (mul c a) b)) (lt (mul c a) (mul c (suc (div b c)))) (lt a (suc (div b c))))
      (syl ((an (ne c (d0)) (le (mul c a) b)) (lt (d0) c) (iff (lt a (suc (div b c))) (lt (mul c a) (mul c (suc (div b c))))))
        (ltmul2 (c a (suc (div b c))))
        (sylibr ((an (ne c (d0)) (le (mul c a) b)) (ne c (d0)) (lt (d0) c))
          (lt01 (c))
          (anl ((ne c (d0)) (le (mul c a) b)))))
      (lelttrd ((an (ne c (d0)) (le (mul c a) b)) (mul c a) b (mul c (suc (div b c))))
        (anr ((ne c (d0)) (le (mul c a) b)))
        (anwl ((ne c (d0)) (le (mul c a) b) (lt b (mul c (suc (div b c)))))
          (sylibr ((ne c (d0)) (lt b (add (mul c (div b c)) c)) (lt b (mul c (suc (div b c)))))
            (ax_mp ((eq (mul c (suc (div b c))) (add (mul c (div b c)) c)) (iff (lt b (mul c (suc (div b c)))) (lt b (add (mul c (div b c)) c))))
              (lteq2 (b (mul c (suc (div b c))) (add (mul c (div b c)) c)))
              (mulS (c (div b c))))
            (sylib ((ne c (d0)) (lt (add (mul c (div b c)) (mod b c)) (add (mul c (div b c)) c)) (lt b (add (mul c (div b c)) c)))
              (ax_mp ((eq (add (mul c (div b c)) (mod b c)) b) (iff (lt (add (mul c (div b c)) (mod b c)) (add (mul c (div b c)) c)) (lt b (add (mul c (div b c)) c))))
                (lteq1 ((add (mul c (div b c)) (mod b c)) b (add (mul c (div b c)) c)))
                (divmod (b c)))
              (sylib ((ne c (d0)) (lt (mod b c) c) (lt (add (mul c (div b c)) (mod b c)) (add (mul c (div b c)) c)))
                (ltadd2 ((mul c (div b c)) (mod b c) c))
                (modlt (b c)))))))))))

(local theorem ledivmul2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne c (d0)) (iff (le a (div b c)) (le (mul a c) b)))
()
(syl6bb ((ne c (d0)) (le a (div b c)) (le (mul c a) b) (le (mul a c) b))
  (ax_mp ((eq (mul c a) (mul a c)) (iff (le (mul c a) b) (le (mul a c) b)))
    (leeq1 ((mul c a) (mul a c) b))
    (mulcom (c a)))
  (ledivmul1 (a b c))))

(local theorem ltdivmul1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne b (d0)) (iff (lt (div a b) c) (lt a (mul b c))))
()
(syl5bb ((ne b (d0)) (lt (div a b) c) (not (le c (div a b))) (lt a (mul b c)))
  (ltnle ((div a b) c))
  (syl6bbr ((ne b (d0)) (not (le c (div a b))) (not (le (mul b c) a)) (lt a (mul b c)))
    (ltnle (a (mul b c)))
    (noteqd ((ne b (d0)) (le c (div a b)) (le (mul b c) a))
      (ledivmul1 (c a b))))))

(local theorem ltdivmul2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne b (d0)) (iff (lt (div a b) c) (lt a (mul c b))))
()
(syl6bb ((ne b (d0)) (lt (div a b) c) (lt a (mul b c)) (lt a (mul c b)))
  (ax_mp ((eq (mul b c) (mul c b)) (iff (lt a (mul b c)) (lt a (mul c b))))
    (lteq2 (a (mul b c) (mul c b)))
    (mulcom (b c)))
  (ltdivmul1 (a b c))))

(local theorem diveq0 ((a nat ()) (b nat ())) ()
  (im (ne b (d0)) (iff (eq (div a b) (d0)) (lt a b)))
()
(syl5bbr ((ne b (d0)) (eq (div a b) (d0)) (lt (div a b) (d1)) (lt a b))
  (lt12 ((div a b)))
  (syl6bb ((ne b (d0)) (lt (div a b) (d1)) (lt a (mul b (d1))) (lt a b))
    (ax_mp ((eq (mul b (d1)) b) (iff (lt a (mul b (d1))) (lt a b)))
      (lteq2 (a (mul b (d1)) b))
      (mul12 (b)))
    (ltdivmul1 (a b (d1))))))

(local theorem divdiv ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (div (div a b) c) (div a (mul b c)))
()
(:let H1 (div0 (a))
(cases ((eq b (d0)) (eq (div (div a b) c) (div a (mul b c))))
  (eqtr4d ((eq b (d0)) (div (div a b) c) (d0) (div a (mul b c)))
    (syl6eq ((eq b (d0)) (div (div a b) c) (div (d0) c) (d0))
      (div01 (c))
      (diveq1d ((eq b (d0)) (div a b) (d0) c)
        (syl6eq ((eq b (d0)) (div a b) (div a (d0)) (d0))
          H1
          (diveq2 (a b (d0))))))
    (syl6eq ((eq b (d0)) (div a (mul b c)) (div a (d0)) (d0))
      H1
      (diveq2d ((eq b (d0)) a (mul b c) (d0))
        (syl6eq ((eq b (d0)) (mul b c) (mul (d0) c) (d0))
          (mul01 (c))
          (muleq1 (b (d0) c))))))
  (casesda ((not (eq b (d0))) (eq c (d0)) (eq (div (div a b) c) (div a (mul b c))))
    (anwr ((not (eq b (d0))) (eq c (d0)) (eq (div (div a b) c) (div a (mul b c))))
      (eqtr4d ((eq c (d0)) (div (div a b) c) (d0) (div a (mul b c)))
        (syl6eq ((eq c (d0)) (div (div a b) c) (div (div a b) (d0)) (d0))
          (div0 ((div a b)))
          (diveq2 ((div a b) c (d0))))
        (syl6eq ((eq c (d0)) (div a (mul b c)) (div a (d0)) (d0))
          H1
          (diveq2d ((eq c (d0)) a (mul b c) (d0))
            (syl6eq ((eq c (d0)) (mul b c) (mul b (d0)) (d0))
              (mul02 (b))
              (muleq2 (b c (d0))))))))
    (leasymd ((an (not (eq b (d0))) (not (eq c (d0)))) (div (div a b) c) (div a (mul b c)))
      (mpbird ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul (mul b c) (div (div a b) c)) a) (le (div (div a b) c) (div a (mul b c))))
        (sylbir ((an (not (eq b (d0))) (not (eq c (d0)))) (ne (mul b c) (d0)) (iff (le (div (div a b) c) (div a (mul b c))) (le (mul (mul b c) (div (div a b) c)) a)))
          (:conv (iff (ne (mul b c) (d0)) (an (not (eq b (d0))) (not (eq c (d0)))))
            (iff
              (ne (mul b c) (d0))
              (an
                (:sym (:unfold ne (b (d0)) ()
                  (not (eq b (d0)))))
                (:sym (:unfold ne (c (d0)) ()
                  (not (eq c (d0)))))))
            (mulne0 (b c)))
          (ledivmul1 ((div (div a b) c) a (mul b c))))
        (a1i ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul (mul b c) (div (div a b) c)) a))
          (mpbir ((le (mul b (mul c (div (div a b) c))) a) (le (mul (mul b c) (div (div a b) c)) a))
            (ax_mp ((eq (mul (mul b c) (div (div a b) c)) (mul b (mul c (div (div a b) c)))) (iff (le (mul (mul b c) (div (div a b) c)) a) (le (mul b (mul c (div (div a b) c))) a)))
              (leeq1 ((mul (mul b c) (div (div a b) c)) (mul b (mul c (div (div a b) c))) a))
              (mulass (b c (div (div a b) c))))
            (ax_mp ((le (mul b (div a b)) a) (le (mul b (mul c (div (div a b) c))) a))
              (ax_mp ((le (mul b (mul c (div (div a b) c))) (mul b (div a b))) (im (le (mul b (div a b)) a) (le (mul b (mul c (div (div a b) c))) a)))
                (letr ((mul b (mul c (div (div a b) c))) (mul b (div a b)) a))
                (ax_mp ((le (mul c (div (div a b) c)) (div a b)) (le (mul b (mul c (div (div a b) c))) (mul b (div a b))))
                  (lemul2a (b (mul c (div (div a b) c)) (div a b)))
                  (muldivle ((div a b) c))))
              (muldivle (a b))))))
      (mpbird ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul c (div a (mul b c))) (div a b)) (le (div a (mul b c)) (div (div a b) c)))
        (anwr ((not (eq b (d0))) (not (eq c (d0))) (iff (le (div a (mul b c)) (div (div a b) c)) (le (mul c (div a (mul b c))) (div a b))))
          (:conv (im (not (eq c (d0))) (iff (le (div a (mul b c)) (div (div a b) c)) (le (mul c (div a (mul b c))) (div a b))))
            (im
              (:sym (:unfold ne (c (d0)) ()
                (not (eq c (d0)))))
              (iff (le (div a (mul b c)) (div (div a b) c)) (le (mul c (div a (mul b c))) (div a b))))
            (ledivmul1 ((div a (mul b c)) (div a b) c))))
        (mpbird ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul b (mul c (div a (mul b c)))) a) (le (mul c (div a (mul b c))) (div a b)))
          (anwl ((not (eq b (d0))) (not (eq c (d0))) (iff (le (mul c (div a (mul b c))) (div a b)) (le (mul b (mul c (div a (mul b c)))) a)))
            (:conv (im (not (eq b (d0))) (iff (le (mul c (div a (mul b c))) (div a b)) (le (mul b (mul c (div a (mul b c)))) a)))
              (im
                (:sym (:unfold ne (b (d0)) ()
                  (not (eq b (d0)))))
                (iff (le (mul c (div a (mul b c))) (div a b)) (le (mul b (mul c (div a (mul b c)))) a)))
              (ledivmul1 ((mul c (div a (mul b c))) a b))))
          (a1i ((an (not (eq b (d0))) (not (eq c (d0)))) (le (mul b (mul c (div a (mul b c)))) a))
            (mpbi ((le (mul (mul b c) (div a (mul b c))) a) (le (mul b (mul c (div a (mul b c)))) a))
              (ax_mp ((eq (mul (mul b c) (div a (mul b c))) (mul b (mul c (div a (mul b c))))) (iff (le (mul (mul b c) (div a (mul b c))) a) (le (mul b (mul c (div a (mul b c)))) a)))
                (leeq1 ((mul (mul b c) (div a (mul b c))) (mul b (mul c (div a (mul b c)))) a))
                (mulass (b c (div a (mul b c)))))
              (muldivle (a (mul b c))))))))))))

(local theorem divmod1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mod (div a b) c) (div (mod a (mul b c)) b))
()
(cases ((eq b (d0)) (eq (mod (div a b) c) (div (mod a (mul b c)) b)))
  (eqtr4d ((eq b (d0)) (mod (div a b) c) (d0) (div (mod a (mul b c)) b))
    (syl6eq ((eq b (d0)) (mod (div a b) c) (mod (d0) c) (d0))
      (mod01 (c))
      (modeq1d ((eq b (d0)) (div a b) (d0) c)
        (syl6eq ((eq b (d0)) (div a b) (div a (d0)) (d0))
          (div0 (a))
          (diveq2 (a b (d0))))))
    (syl6eq ((eq b (d0)) (div (mod a (mul b c)) b) (div (mod a (mul b c)) (d0)) (d0))
      (div0 ((mod a (mul b c))))
      (diveq2 ((mod a (mul b c)) b (d0)))))
  (casesda ((not (eq b (d0))) (eq c (d0)) (eq (mod (div a b) c) (div (mod a (mul b c)) b)))
    (anwr ((not (eq b (d0))) (eq c (d0)) (eq (mod (div a b) c) (div (mod a (mul b c)) b)))
      (eqtr4d ((eq c (d0)) (mod (div a b) c) (div a b) (div (mod a (mul b c)) b))
        (syl6eq ((eq c (d0)) (mod (div a b) c) (mod (div a b) (d0)) (div a b))
          (mod0 ((div a b)))
          (modeq2 ((div a b) c (d0))))
        (diveq1d ((eq c (d0)) (mod a (mul b c)) a b)
          (syl6eq ((eq c (d0)) (mod a (mul b c)) (mod a (d0)) a)
            (mod0 (a))
            (modeq2d ((eq c (d0)) a (mul b c) (d0))
              (syl6eq ((eq c (d0)) (mul b c) (mul b (d0)) (d0))
                (mul02 (b))
                (muleq2 (b c (d0)))))))))
    (anrd ((an (not (eq b (d0))) (not (eq c (d0)))) (eq (div (div a b) c) (div a (mul b c))) (eq (mod (div a b) c) (div (mod a (mul b c)) b)))
      (eqdivmod ((an (not (eq b (d0))) (not (eq c (d0)))) (div a (mul b c)) (div (mod a (mul b c)) b) (div a b) c)
        (mpbird ((an (not (eq b (d0))) (not (eq c (d0)))) (lt (mod a (mul b c)) (mul b c)) (lt (div (mod a (mul b c)) b) c))
          (anwl ((not (eq b (d0))) (not (eq c (d0))) (iff (lt (div (mod a (mul b c)) b) c) (lt (mod a (mul b c)) (mul b c))))
            (:conv (im (not (eq b (d0))) (iff (lt (div (mod a (mul b c)) b) c) (lt (mod a (mul b c)) (mul b c))))
              (im
                (:sym (:unfold ne (b (d0)) ()
                  (not (eq b (d0)))))
                (iff (lt (div (mod a (mul b c)) b) c) (lt (mod a (mul b c)) (mul b c))))
              (ltdivmul1 ((mod a (mul b c)) b c))))
          (sylbir ((an (not (eq b (d0))) (not (eq c (d0)))) (ne (mul b c) (d0)) (lt (mod a (mul b c)) (mul b c)))
            (:conv (iff (ne (mul b c) (d0)) (an (not (eq b (d0))) (not (eq c (d0)))))
              (iff
                (ne (mul b c) (d0))
                (an
                  (:sym (:unfold ne (b (d0)) ()
                    (not (eq b (d0)))))
                  (:sym (:unfold ne (c (d0)) ()
                    (not (eq c (d0)))))))
              (mulne0 (b c)))
            (modlt (a (mul b c)))))
        (eqcomd ((an (not (eq b (d0))) (not (eq c (d0)))) (div a b) (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b)))
          (anld ((an (not (eq b (d0))) (not (eq c (d0)))) (eq (div a b) (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (eq (mod a b) (mod (mod a (mul b c)) b)))
            (eqdivmod ((an (not (eq b (d0))) (not (eq c (d0)))) (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b) a b)
              (anwl ((not (eq b (d0))) (not (eq c (d0))) (lt (mod (mod a (mul b c)) b) b))
                (:conv (im (not (eq b (d0))) (lt (mod (mod a (mul b c)) b) b))
                  (im
                    (:sym (:unfold ne (b (d0)) ()
                      (not (eq b (d0)))))
                    (lt (mod (mod a (mul b c)) b) b))
                  (modlt ((mod a (mul b c)) b))))
              (a1i ((an (not (eq b (d0))) (not (eq c (d0)))) (eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a))
                (ax_mp ((eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a) (eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a))
                  (ax_mp ((eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b))) (im (eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a) (eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a)))
                    (eqtr ((add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a))
                    (ax_mp ((eq (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b)))) (eq (add (mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b))))
                      (addeq1 ((mul b (add (mul c (div a (mul b c))) (div (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)))
                      (muladd (b (mul c (div a (mul b c))) (div (mod a (mul b c)) b)))))
                  (ax_mp ((eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a) (eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a))
                    (ax_mp ((eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b)))) (im (eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a) (eq (add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) a)))
                      (eqtr ((add (add (mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b))) (mod (mod a (mul b c)) b)) (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a))
                      (addass ((mul b (mul c (div a (mul b c)))) (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))))
                    (ax_mp ((eq (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a) (eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a))
                      (ax_mp ((eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c)))) (im (eq (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a) (eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) a)))
                        (eqtr ((add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a))
                        (ax_mp ((eq (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b)) (mod a (mul b c))) (eq (add (mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c)))))
                          (addeq2 ((mul b (mul c (div a (mul b c)))) (add (mul b (div (mod a (mul b c)) b)) (mod (mod a (mul b c)) b)) (mod a (mul b c))))
                          (divmod ((mod a (mul b c)) b))))
                      (ax_mp ((eq (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) a) (eq (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a))
                        (ax_mp ((eq (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c)))) (im (eq (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) a) (eq (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) a)))
                          (eqtr3 ((add (mul b (mul c (div a (mul b c)))) (mod a (mul b c))) (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) a))
                          (ax_mp ((eq (mul (mul b c) (div a (mul b c))) (mul b (mul c (div a (mul b c))))) (eq (add (mul (mul b c) (div a (mul b c))) (mod a (mul b c))) (add (mul b (mul c (div a (mul b c)))) (mod a (mul b c)))))
                            (addeq1 ((mul (mul b c) (div a (mul b c))) (mul b (mul c (div a (mul b c)))) (mod a (mul b c))))
                            (mulass (b c (div a (mul b c))))))
                        (divmod (a (mul b c))))))))))))))))

(local theorem divmod2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (mod (div a b) c) (div (mod a (mul c b)) b))
()
(ax_mp ((eq (div (mod a (mul b c)) b) (div (mod a (mul c b)) b)) (eq (mod (div a b) c) (div (mod a (mul c b)) b)))
  (ax_mp ((eq (mod (div a b) c) (div (mod a (mul b c)) b)) (im (eq (div (mod a (mul b c)) b) (div (mod a (mul c b)) b)) (eq (mod (div a b) c) (div (mod a (mul c b)) b))))
    (eqtr ((mod (div a b) c) (div (mod a (mul b c)) b) (div (mod a (mul c b)) b)))
    (divmod1 (a b c)))
  (ax_mp ((eq (mod a (mul b c)) (mod a (mul c b))) (eq (div (mod a (mul b c)) b) (div (mod a (mul c b)) b)))
    (diveq1 ((mod a (mul b c)) (mod a (mul c b)) b))
    (ax_mp ((eq (mul b c) (mul c b)) (eq (mod a (mul b c)) (mod a (mul c b))))
      (modeq2 (a (mul b c) (mul c b)))
      (mulcom (b c))))))

(def dvd ((a nat ()) (b nat ())) (wff ())
((c nat))
(ex c (eq (mul c a) b)))

(local theorem dvdeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (iff (dvd a1 b1) (dvd a2 b2)))
((c nat))
(:conv (im _G (iff (dvd a1 b1) (dvd a2 b2)))
  (im
    _G
    (iff
      (:unfold dvd (a1 b1) (c)
        (ex c (eq (mul c a1) b1)))
      (:unfold dvd (a2 b2) (c)
        (ex c (eq (mul c a2) b2)))))
  (exeqd (_G c (eq (mul c a1) b1) (eq (mul c a2) b2))
    (eqeqd (_G (mul c a1) (mul c a2) b1 b2)
      (muleqd (_G c c a1 a2)
        (eqidd (_G c))
        ha)
      hb))))

(local theorem dvdeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (iff (dvd a1 b1) (dvd a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (iff (dvd a1 b1) (dvd a2 b2)))
  (dvdeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem dvdeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (iff (dvd a1 b) (dvd a2 b)))
()
(dvdeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem dvdeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (iff (dvd a1 b) (dvd a2 b)))
()
(dvdeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem dvdeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (iff (dvd a b1) (dvd a b2)))
()
(dvdeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem dvdeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (iff (dvd a b1) (dvd a b2)))
()
(dvdeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem idvd ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (mul c a) b) (dvd a b))
((x nat))
(:conv (im (eq (mul c a) b) (dvd a b))
  (im
    (eq (mul c a) b)
    (:unfold dvd (a b) (x)
      (ex x (eq (mul x a) b))))
  (iexe (x c (eq (mul x a) b) (eq (mul c a) b))
    (eqeq1d ((eq x c) (mul x a) (mul c a) b)
      (muleq1 (x c a))))))

(local theorem idvd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq (mul a c) b) (dvd a b))
()
(sylbi ((eq (mul a c) b) (eq (mul c a) b) (dvd a b))
  (ax_mp ((eq (mul a c) (mul c a)) (iff (eq (mul a c) b) (eq (mul c a) b)))
    (eqeq1 ((mul a c) (mul c a) b))
    (mulcom (a c)))
  (idvd (a b c))))

(local theorem divmul ((a nat ()) (b nat ())) ()
  (im (dvd b a) (eq (mul (div a b) b) a))
((x nat))
(:conv (im (dvd b a) (eq (mul (div a b) b) a))
  (im
    (:unfold dvd (b a) (x)
      (ex x (eq (mul x b) a)))
    (eq (mul (div a b) b) a))
  (eex (x (eq (mul x b) a) (eq (mul (div a b) b) a))
    (eqtr3d ((eq (mul x b) a) (mul (div a b) b) (mul (div (mul x b) b) b) a)
      (muleq1d ((eq (mul x b) a) (div (mul x b) b) (div a b) b)
        (diveq1 ((mul x b) a b)))
      (syl5eq ((eq (mul x b) a) (mul (div (mul x b) b) b) (mul x b) a)
        (cases ((eq b (d0)) (eq (mul (div (mul x b) b) b) (mul x b)))
          (eqtr4d ((eq b (d0)) (mul (div (mul x b) b) b) (d0) (mul x b))
            (syl6eq ((eq b (d0)) (mul (div (mul x b) b) b) (mul (div (mul x b) b) (d0)) (d0))
              (mul0 ((div (mul x b) b)))
              (muleq2 ((div (mul x b) b) b (d0))))
            (syl6eq ((eq b (d0)) (mul x b) (mul x (d0)) (d0))
              (mul0 (x))
              (muleq2 (x b (d0)))))
          (muleq1d ((not (eq b (d0))) (div (mul x b) b) x b)
            (:conv (im (not (eq b (d0))) (eq (div (mul x b) b) x))
              (im
                (:sym (:unfold ne (b (d0)) ()
                  (not (eq b (d0)))))
                (eq (div (mul x b) b) x))
              (muldiv1 (x b)))))
        (id ((eq (mul x b) a))))))))

(local theorem muldiv3 ((a nat ()) (b nat ())) ()
  (im (dvd b a) (eq (mul b (div a b)) a))
()
(syl5eq ((dvd b a) (mul b (div a b)) (mul (div a b) b) a)
  (mulcom (b (div a b)))
  (divmul (a b))))

(local theorem dvdadd1 ((a nat ()) (b nat ()) (n nat ())) ()
  (im (dvd n a) (iff (dvd n b) (dvd n (add a b))))
((x nat) (y nat) (z nat))
(:conv (im (dvd n a) (iff (dvd n b) (dvd n (add a b))))
  (im
    (:unfold dvd (n a) (x)
      (ex x (eq (mul x n) a)))
    (iff (dvd n b) (dvd n (add a b))))
  (eex (x (eq (mul x n) a) (iff (dvd n b) (dvd n (add a b))))
    (ibid ((eq (mul x n) a) (dvd n b) (dvd n (add a b)))
      (:conv (im (eq (mul x n) a) (im (dvd n b) (dvd n (add a b))))
        (im
          (eq (mul x n) a)
          (im
            (:unfold dvd (n b) (y)
              (ex y (eq (mul y n) b)))
            (dvd n (add a b))))
        (eexda (y (eq (mul x n) a) (eq (mul y n) b) (dvd n (add a b)))
          (syl ((an (eq (mul x n) a) (eq (mul y n) b)) (eq (mul (add x y) n) (add a b)) (dvd n (add a b)))
            (idvd (n (add a b) (add x y)))
            (syl5eq ((an (eq (mul x n) a) (eq (mul y n) b)) (mul (add x y) n) (add (mul x n) (mul y n)) (add a b))
              (addmul (x y n))
              (imp ((eq (mul x n) a) (eq (mul y n) b) (eq (add (mul x n) (mul y n)) (add a b)))
                (addeq ((mul x n) a (mul y n) b)))))))
      (:conv (im (eq (mul x n) a) (im (dvd n (add a b)) (dvd n b)))
        (im
          (eq (mul x n) a)
          (im
            (:unfold dvd (n (add a b)) (z)
              (ex z (eq (mul z n) (add a b))))
            (dvd n b)))
        (eexda (z (eq (mul x n) a) (eq (mul z n) (add a b)) (dvd n b))
          (syl ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (eq (mul (sub z x) n) b) (dvd n b))
            (idvd (n b (sub z x)))
            (sylib ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (eq (add a (mul (sub z x) n)) (add a b)) (eq (mul (sub z x) n) b))
              (addcan2 (a (mul (sub z x) n) b))
              (eqtr3d ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (add a (mul (sub z x) n)) (add (mul x n) (mul (sub z x) n)) (add a b))
                (anwl ((eq (mul x n) a) (eq (mul z n) (add a b)) (eq (add (mul x n) (mul (sub z x) n)) (add a (mul (sub z x) n))))
                  (addeq1 ((mul x n) a (mul (sub z x) n))))
                (syl5eqr ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (add (mul x n) (mul (sub z x) n)) (mul (add x (sub z x)) n) (add a b))
                  (addmul (x (sub z x) n))
                  (eqtrd ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (mul (add x (sub z x)) n) (mul z n) (add a b))
                    (casesda ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (eq n (d0)) (eq (mul (add x (sub z x)) n) (mul z n)))
                      (anwr ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (eq n (d0)) (eq (mul (add x (sub z x)) n) (mul z n)))
                        (eqtr4d ((eq n (d0)) (mul (add x (sub z x)) n) (d0) (mul z n))
                          (syl6eq ((eq n (d0)) (mul (add x (sub z x)) n) (mul (add x (sub z x)) (d0)) (d0))
                            (mul0 ((add x (sub z x))))
                            (muleq2 ((add x (sub z x)) n (d0))))
                          (syl6eq ((eq n (d0)) (mul z n) (mul z (d0)) (d0))
                            (mul0 (z))
                            (muleq2 (z n (d0))))))
                      (muleq1d ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (add x (sub z x)) z n)
                        (syl ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (le x z) (eq (add x (sub z x)) z))
                          (pncan3 (x z))
                          (mpbiri ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (le a (add a b)) (le x z))
                            (leaddid1 (a b))
                            (bitrd ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (le x z) (le (mul x n) (mul z n)) (le a (add a b)))
                              (anwr ((an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0))) (iff (le x z) (le (mul x n) (mul z n))))
                                (sylbir ((not (eq n (d0))) (lt (d0) n) (iff (le x z) (le (mul x n) (mul z n))))
                                  (:conv (iff (lt (d0) n) (not (eq n (d0))))
                                    (iff
                                      (lt (d0) n)
                                      (:sym (:unfold ne (n (d0)) ()
                                        (not (eq n (d0))))))
                                    (lt01 (n)))
                                  (lemul1 (x z n))))
                              (leeqd ((an (an (eq (mul x n) a) (eq (mul z n) (add a b))) (not (eq n (d0)))) (mul x n) a (mul z n) (add a b))
                                (anll ((eq (mul x n) a) (eq (mul z n) (add a b)) (not (eq n (d0)))))
                                (anlr ((eq (mul x n) a) (eq (mul z n) (add a b)) (not (eq n (d0)))))))))))
                    (anr ((eq (mul x n) a) (eq (mul z n) (add a b)))))))))))))))

(local theorem dvdadd2 ((a nat ()) (b nat ()) (n nat ())) ()
  (im (dvd n a) (iff (dvd n b) (dvd n (add b a))))
()
(syl6bb ((dvd n a) (dvd n b) (dvd n (add a b)) (dvd n (add b a)))
  (ax_mp ((eq (add a b) (add b a)) (iff (dvd n (add a b)) (dvd n (add b a))))
    (dvdeqd ((eq (add a b) (add b a)) n n (add a b) (add b a))
      (eqidd ((eq (add a b) (add b a)) n))
      (id ((eq (add a b) (add b a)))))
    (addcom (a b)))
  (dvdadd1 (a b n))))

(local theorem dvdmul1 ((a nat ()) (b nat ())) ()
  (dvd a (mul b a))
()
(ax_mp ((eq (mul b a) (mul b a)) (dvd a (mul b a)))
  (idvd (a (mul b a) b))
  (eqid ((mul b a)))))

(local theorem dvdmul2 ((a nat ()) (b nat ())) ()
  (dvd a (mul a b))
()
(mpbi ((dvd a (mul b a)) (dvd a (mul a b)))
  (ax_mp ((eq (mul b a) (mul a b)) (iff (dvd a (mul b a)) (dvd a (mul a b))))
    (dvdeq2 (a (mul b a) (mul a b)))
    (mulcom (b a)))
  (dvdmul1 (a b))))

(local theorem dvdtr ((a nat ()) (b nat ()) (c nat ())) ()
  (im (dvd a b) (im (dvd b c) (dvd a c)))
((x nat) (y nat))
(:conv (im (dvd a b) (im (dvd b c) (dvd a c)))
  (im
    (:unfold dvd (a b) (x)
      (ex x (eq (mul x a) b)))
    (im (dvd b c) (dvd a c)))
  (eex (x (eq (mul x a) b) (im (dvd b c) (dvd a c)))
    (:conv (im (eq (mul x a) b) (im (dvd b c) (dvd a c)))
      (im
        (eq (mul x a) b)
        (im
          (:unfold dvd (b c) (y)
            (ex y (eq (mul y b) c)))
          (dvd a c)))
      (eexda (y (eq (mul x a) b) (eq (mul y b) c) (dvd a c))
        (syl ((an (eq (mul x a) b) (eq (mul y b) c)) (eq (mul (mul y x) a) c) (dvd a c))
          (idvd (a c (mul y x)))
          (eqtrd ((an (eq (mul x a) b) (eq (mul y b) c)) (mul (mul y x) a) (mul y b) c)
            (anwl ((eq (mul x a) b) (eq (mul y b) c) (eq (mul (mul y x) a) (mul y b)))
              (syl5eq ((eq (mul x a) b) (mul (mul y x) a) (mul y (mul x a)) (mul y b))
                (mulass (y x a))
                (muleq2 (y (mul x a) b))))
            (anr ((eq (mul x a) b) (eq (mul y b) c))))))))))

(local theorem dvdmul12 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (dvd a b) (dvd a (mul c b)))
()
(mpi ((dvd a b) (dvd b (mul c b)) (dvd a (mul c b)))
  (dvdmul1 (b c))
  (dvdtr (a b (mul c b)))))

(local theorem dvdmul11 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (dvd a b) (dvd a (mul b c)))
()
(mpi ((dvd a b) (dvd b (mul b c)) (dvd a (mul b c)))
  (dvdmul2 (b c))
  (dvdtr (a b (mul b c)))))

(local theorem modeq0 ((a nat ()) (n nat ())) ()
  (iff (eq (mod a n) (d0)) (dvd n a))
((x nat))
(:conv (iff (eq (mod a n) (d0)) (dvd n a))
  (iff
    (eq (mod a n) (d0))
    (:unfold dvd (n a) (x)
      (ex x (eq (mul x n) a))))
  (ibii ((eq (mod a n) (d0)) (ex x (eq (mul x n) a)))
    (iexde (x (eq (mod a n) (d0)) (div a n) (eq (mul x n) a))
      (eqtrd ((an (eq (mod a n) (d0)) (eq x (div a n))) (mul x n) (mul (div a n) n) a)
        (anwr ((eq (mod a n) (d0)) (eq x (div a n)) (eq (mul x n) (mul (div a n) n)))
          (muleq1 (x (div a n) n)))
        (syl5eq ((an (eq (mod a n) (d0)) (eq x (div a n))) (mul (div a n) n) (mul n (div a n)) a)
          (mulcom ((div a n) n))
          (syl5eqr ((an (eq (mod a n) (d0)) (eq x (div a n))) (mul n (div a n)) (add (mul n (div a n)) (d0)) a)
            (add0 ((mul n (div a n))))
            (eqtr3d ((an (eq (mod a n) (d0)) (eq x (div a n))) (add (mul n (div a n)) (d0)) (add (mul n (div a n)) (mod a n)) a)
              (anwl ((eq (mod a n) (d0)) (eq x (div a n)) (eq (add (mul n (div a n)) (mod a n)) (add (mul n (div a n)) (d0))))
                (addeq2 ((mul n (div a n)) (mod a n) (d0))))
              (a1i ((an (eq (mod a n) (d0)) (eq x (div a n))) (eq (add (mul n (div a n)) (mod a n)) a))
                (divmod (a n))))))))
    (eex (x (eq (mul x n) a) (eq (mod a n) (d0)))
      (syl6eq ((eq (mul x n) a) (mod a n) (mod (mul x n) n) (d0))
        (mulmod2 (x n))
        (modeqd ((eq (mul x n) a) a (mul x n) n n)
          (eqcom ((mul x n) a))
          (eqidd ((eq (mul x n) a) n))))))))

(local theorem dvd02 ((a nat ())) ()
  (dvd a (d0))
()
(ax_mp ((eq (mul (d0) a) (d0)) (dvd a (d0)))
  (idvd (a (d0) (d0)))
  (mul01 (a))))

(local theorem dvd01 ((a nat ())) ()
  (iff (dvd (d0) a) (eq a (d0)))
((x nat))
(ibii ((dvd (d0) a) (eq a (d0)))
  (:conv (im (dvd (d0) a) (eq a (d0)))
    (im
      (:unfold dvd ((d0) a) (x)
        (ex x (eq (mul x (d0)) a)))
      (eq a (d0)))
    (eex (x (eq (mul x (d0)) a) (eq a (d0)))
      (eqcomd ((eq (mul x (d0)) a) (d0) a)
        (ax_mp ((iff (eq (mul x (d0)) a) (eq (d0) a)) (im (eq (mul x (d0)) a) (eq (d0) a)))
          (bi1 ((eq (mul x (d0)) a) (eq (d0) a)))
          (ax_mp ((eq (mul x (d0)) (d0)) (iff (eq (mul x (d0)) a) (eq (d0) a)))
            (eqeq1 ((mul x (d0)) (d0) a))
            (mul02 (x)))))))
  (mpbiri ((eq a (d0)) (dvd (d0) (d0)) (dvd (d0) a))
    (dvd02 ((d0)))
    (dvdeq2 ((d0) a (d0))))))

(local theorem dvdid ((a nat ())) ()
  (dvd a a)
()
(ax_mp ((eq (mul (d1) a) a) (dvd a a))
  (idvd (a a (d1)))
  (mul11 (a))))

(local theorem dvdle ((G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (ne b (d0))))
   (h2 (im G (dvd a b))))
  (im G (le a b))
((x nat))
(mpd (G (dvd a b) (le a b))
  h2
  (:conv (im G (im (dvd a b) (le a b)))
    (im
      G
      (im
        (:unfold dvd (a b) (x)
          (ex x (eq (mul x a) b)))
        (le a b)))
    (eexda (x G (eq (mul x a) b) (le a b))
      (mpbid ((an G (eq (mul x a) b)) (le (mul (d1) a) (mul x a)) (le a b))
        (leeqd ((an G (eq (mul x a) b)) (mul (d1) a) a (mul x a) b)
          (a1i ((an G (eq (mul x a) b)) (eq (mul (d1) a) a))
            (mul11 (a)))
          (anr (G (eq (mul x a) b))))
        (syl ((an G (eq (mul x a) b)) (le (d1) x) (le (mul (d1) a) (mul x a)))
          (lemul1a ((d1) x a))
          (sylibr ((an G (eq (mul x a) b)) (ne x (d0)) (le (d1) x))
            (:conv (iff (le (d1) x) (ne x (d0)))
              (iff
                (:sym (:unfold lt ((d0) x) ()
                  (le
                    (:sym (:unfold d1 () ()
                      (suc (d0))))
                    x)))
                (ne x (d0)))
              (lt01 (x)))
            (:conv (im (an G (eq (mul x a) b)) (ne x (d0)))
              (im
                (an G (eq (mul x a) b))
                (:unfold ne (x (d0)) ()
                  (not (eq x (d0)))))
              (mtand ((an G (eq (mul x a) b)) (eq b (d0)) (eq x (d0)))
                (anwl (G (eq (mul x a) b) (not (eq b (d0))))
                  (:conv (im G (not (eq b (d0))))
                    (im
                      G
                      (:sym (:unfold ne (b (d0)) ()
                        (not (eq b (d0))))))
                    h1))
                (eqtr3d ((an (an G (eq (mul x a) b)) (eq x (d0))) b (mul x a) (d0))
                  (anlr (G (eq (mul x a) b) (eq x (d0))))
                  (syl6eq ((an (an G (eq (mul x a) b)) (eq x (d0))) (mul x a) (mul (d0) a) (d0))
                    (mul01 (a))
                    (anwr ((an G (eq (mul x a) b)) (eq x (d0)) (eq (mul x a) (mul (d0) a)))
                      (muleq1 (x (d0) a))))))))))))))

(local theorem dvdasymd ((G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (dvd a b)))
   (h2 (im G (dvd b a))))
  (im G (eq a b))
()
(casesda (G (eq a (d0)) (eq a b))
  (eqtr4d ((an G (eq a (d0))) a (d0) b)
    (anr (G (eq a (d0))))
    (sylib ((an G (eq a (d0))) (dvd (d0) b) (eq b (d0)))
      (dvd01 (b))
      (mpbid ((an G (eq a (d0))) (dvd a b) (dvd (d0) b))
        (anwr (G (eq a (d0)) (iff (dvd a b) (dvd (d0) b)))
          (dvdeq1 (a (d0) b)))
        (anwl (G (eq a (d0)) (dvd a b))
          h1))))
  (casesda ((an G (not (eq a (d0)))) (eq b (d0)) (eq a b))
    (eqtr4d ((an (an G (not (eq a (d0)))) (eq b (d0))) a (d0) b)
      (sylib ((an (an G (not (eq a (d0)))) (eq b (d0))) (dvd (d0) a) (eq a (d0)))
        (dvd01 (a))
        (mpbid ((an (an G (not (eq a (d0)))) (eq b (d0))) (dvd b a) (dvd (d0) a))
          (anwr ((an G (not (eq a (d0)))) (eq b (d0)) (iff (dvd b a) (dvd (d0) a)))
            (dvdeq1 (b (d0) a)))
          (anwll (G (not (eq a (d0))) (eq b (d0)) (dvd b a))
            h2)))
      (anr ((an G (not (eq a (d0)))) (eq b (d0)))))
    (leasymd ((an (an G (not (eq a (d0)))) (not (eq b (d0)))) a b)
      (dvdle ((an (an G (not (eq a (d0)))) (not (eq b (d0)))) a b)
        (:conv (im (an (an G (not (eq a (d0)))) (not (eq b (d0)))) (ne b (d0)))
          (im
            (an (an G (not (eq a (d0)))) (not (eq b (d0))))
            (:unfold ne (b (d0)) ()
              (not (eq b (d0)))))
          (anr ((an G (not (eq a (d0)))) (not (eq b (d0))))))
        (anwll (G (not (eq a (d0))) (not (eq b (d0))) (dvd a b))
          h1))
      (dvdle ((an (an G (not (eq a (d0)))) (not (eq b (d0)))) b a)
        (:conv (im (an (an G (not (eq a (d0)))) (not (eq b (d0)))) (ne a (d0)))
          (im
            (an (an G (not (eq a (d0)))) (not (eq b (d0))))
            (:unfold ne (a (d0)) ()
              (not (eq a (d0)))))
          (anlr (G (not (eq a (d0))) (not (eq b (d0))))))
        (anwll (G (not (eq a (d0))) (not (eq b (d0))) (dvd b a))
          h2))))))

(local theorem dvd11 ((a nat ())) ()
  (dvd (d1) a)
()
(ax_mp ((eq (mul a (d1)) a) (dvd (d1) a))
  (idvd ((d1) a a))
  (mul12 (a))))

(local theorem dvd12 ((a nat ())) ()
  (iff (dvd a (d1)) (eq a (d1)))
()
(:let H1 (d1ne0 ())
(ibii ((dvd a (d1)) (eq a (d1)))
  (leasymd ((dvd a (d1)) a (d1))
    (dvdle ((dvd a (d1)) a (d1))
      (a1i ((dvd a (d1)) (ne (d1) (d0)))
        H1)
      (id ((dvd a (d1)))))
    (sylibr ((dvd a (d1)) (ne a (d0)) (le (d1) a))
      (le11 (a))
      (:conv (im (dvd a (d1)) (ne a (d0)))
        (im
          (dvd a (d1))
          (:unfold ne (a (d0)) ()
            (not (eq a (d0)))))
        (mtani ((dvd a (d1)) (eq (d1) (d0)) (eq a (d0)))
          (:conv (not (eq (d1) (d0)))
            (:sym (:unfold ne ((d1) (d0)) ()
              (not (eq (d1) (d0)))))
            H1)
          (sylib ((an (dvd a (d1)) (eq a (d0))) (dvd (d0) (d1)) (eq (d1) (d0)))
            (dvd01 ((d1)))
            (mpbid ((an (dvd a (d1)) (eq a (d0))) (dvd a (d1)) (dvd (d0) (d1)))
              (anwr ((dvd a (d1)) (eq a (d0)) (iff (dvd a (d1)) (dvd (d0) (d1))))
                (dvdeq1 (a (d0) (d1))))
              (anl ((dvd a (d1)) (eq a (d0))))))))))
  (mpbiri ((eq a (d1)) (dvd (d1) (d1)) (dvd a (d1)))
    (dvdid ((d1)))
    (dvdeq1 (a (d1) (d1)))))))

(local theorem d2dvd1 () ()
  (not (dvd (d2) (d1)))
()
(mt ((le (d2) (d1)) (dvd (d2) (d1)))
  (dvdle ((dvd (d2) (d1)) (d2) (d1))
    (a1i ((dvd (d2) (d1)) (ne (d1) (d0)))
      (d1ne0 ()))
    (id ((dvd (d2) (d1)))))
  (mpbi ((lt (d1) (d2)) (not (le (d2) (d1))))
    (ltnle ((d1) (d2)))
    (d1lt2 ()))))

(local theorem d2dvdS ((n nat ())) ()
  (iff (dvd (d2) (suc n)) (not (dvd (d2) n)))
((x nat) (y nat))
(ibii ((dvd (d2) (suc n)) (not (dvd (d2) n)))
  (mtd ((dvd (d2) (suc n)) (dvd (d2) (d1)) (dvd (d2) n))
    (a1i ((dvd (d2) (suc n)) (not (dvd (d2) (d1))))
      (d2dvd1 ()))
    (exp ((dvd (d2) (suc n)) (dvd (d2) n) (dvd (d2) (d1)))
      (mpbird ((an (dvd (d2) (suc n)) (dvd (d2) n)) (dvd (d2) (suc n)) (dvd (d2) (d1)))
        (syl6bb ((an (dvd (d2) (suc n)) (dvd (d2) n)) (dvd (d2) (d1)) (dvd (d2) (add n (d1))) (dvd (d2) (suc n)))
          (ax_mp ((eq (add n (d1)) (suc n)) (iff (dvd (d2) (add n (d1))) (dvd (d2) (suc n))))
            (dvdeq2 ((d2) (add n (d1)) (suc n)))
            (add12 (n)))
          (anwr ((dvd (d2) (suc n)) (dvd (d2) n) (iff (dvd (d2) (d1)) (dvd (d2) (add n (d1)))))
            (dvdadd1 (n (d1) (d2)))))
        (anl ((dvd (d2) (suc n)) (dvd (d2) n))))))
  (ind (x y n (or (dvd (d2) x) (dvd (d2) (suc x))) (or (dvd (d2) (d0)) (dvd (d2) (suc (d0)))) (im (not (dvd (d2) n)) (dvd (d2) (suc n))) (or (dvd (d2) y) (dvd (d2) (suc y))) (or (dvd (d2) (suc y)) (dvd (d2) (suc (suc y)))))
    (oreqd ((eq x (d0)) (dvd (d2) x) (dvd (d2) (d0)) (dvd (d2) (suc x)) (dvd (d2) (suc (d0))))
      (dvdeq2 ((d2) x (d0)))
      (dvdeq2d ((eq x (d0)) (d2) (suc x) (suc (d0)))
        (suceq (x (d0)))))
    (oreqd ((eq x y) (dvd (d2) x) (dvd (d2) y) (dvd (d2) (suc x)) (dvd (d2) (suc y)))
      (dvdeq2 ((d2) x y))
      (dvdeq2d ((eq x y) (d2) (suc x) (suc y))
        (suceq (x y))))
    (oreqd ((eq x (suc y)) (dvd (d2) x) (dvd (d2) (suc y)) (dvd (d2) (suc x)) (dvd (d2) (suc (suc y))))
      (dvdeq2 ((d2) x (suc y)))
      (dvdeq2d ((eq x (suc y)) (d2) (suc x) (suc (suc y)))
        (suceq (x (suc y)))))
    (:conv (im (eq x n) (iff (or (dvd (d2) x) (dvd (d2) (suc x))) (im (not (dvd (d2) n)) (dvd (d2) (suc n)))))
      (im
        (eq x n)
        (iff
          (or (dvd (d2) x) (dvd (d2) (suc x)))
          (:sym (:unfold or ((dvd (d2) n) (dvd (d2) (suc n))) ()
            (im (not (dvd (d2) n)) (dvd (d2) (suc n)))))))
      (oreqd ((eq x n) (dvd (d2) x) (dvd (d2) n) (dvd (d2) (suc x)) (dvd (d2) (suc n)))
        (dvdeq2 ((d2) x n))
        (dvdeq2d ((eq x n) (d2) (suc x) (suc n))
          (suceq (x n)))))
    (ax_mp ((dvd (d2) (d0)) (or (dvd (d2) (d0)) (dvd (d2) (suc (d0)))))
      (orl ((dvd (d2) (d0)) (dvd (d2) (suc (d0)))))
      (dvd02 ((d2))))
    (:conv (im (or (dvd (d2) y) (dvd (d2) (suc y))) (or (dvd (d2) (suc y)) (dvd (d2) (suc (suc y)))))
      (im
        (or
          (dvd
            (:unfold d2 () ()
              (suc (d1)))
            y)
          (dvd (d2) (suc y)))
        (or
          (dvd (d2) (suc y))
          (dvd
            (:unfold d2 () ()
              (suc (d1)))
            (suc (suc y)))))
      (ax_mp ((im (dvd (d2) (suc y)) (or (dvd (d2) (suc y)) (dvd (suc (d1)) (suc (suc y))))) (im (or (dvd (suc (d1)) y) (dvd (d2) (suc y))) (or (dvd (d2) (suc y)) (dvd (suc (d1)) (suc (suc y))))))
        (ax_mp ((im (dvd (suc (d1)) y) (or (dvd (d2) (suc y)) (dvd (suc (d1)) (suc (suc y))))) (im (im (dvd (d2) (suc y)) (or (dvd (d2) (suc y)) (dvd (suc (d1)) (suc (suc y))))) (im (or (dvd (suc (d1)) y) (dvd (d2) (suc y))) (or (dvd (d2) (suc y)) (dvd (suc (d1)) (suc (suc y)))))))
          (eor ((dvd (suc (d1)) y) (dvd (d2) (suc y)) (or (dvd (d2) (suc y)) (dvd (suc (d1)) (suc (suc y))))))
          (orrd ((dvd (suc (d1)) y) (dvd (d2) (suc y)) (dvd (suc (d1)) (suc (suc y))))
            (sylib ((dvd (suc (d1)) y) (dvd (suc (d1)) (add y (suc (d1)))) (dvd (suc (d1)) (suc (suc y))))
              (ax_mp ((eq (add y (suc (d1))) (suc (suc y))) (iff (dvd (suc (d1)) (add y (suc (d1)))) (dvd (suc (d1)) (suc (suc y)))))
                (dvdeq2 ((suc (d1)) (add y (suc (d1))) (suc (suc y))))
                (ax_mp ((eq (suc (add y (d1))) (suc (suc y))) (eq (add y (suc (d1))) (suc (suc y))))
                  (ax_mp ((eq (add y (suc (d1))) (suc (add y (d1)))) (im (eq (suc (add y (d1))) (suc (suc y))) (eq (add y (suc (d1))) (suc (suc y)))))
                    (eqtr ((add y (suc (d1))) (suc (add y (d1))) (suc (suc y))))
                    (addS (y (d1))))
                  (ax_mp ((eq (add y (d1)) (suc y)) (eq (suc (add y (d1))) (suc (suc y))))
                    (suceq ((add y (d1)) (suc y)))
                    (add12 (y)))))
              (mpbii ((dvd (suc (d1)) y) (dvd (suc (d1)) (suc (d1))) (dvd (suc (d1)) (add y (suc (d1)))))
                (dvdid ((suc (d1))))
                (dvdadd1 (y (suc (d1)) (suc (d1))))))))
        (orl ((dvd (d2) (suc y)) (dvd (suc (d1)) (suc (suc y))))))))))

(local theorem modlteq ((a nat ()) (n nat ())) ()
  (im (lt a n) (eq (mod a n) a))
()
(anrd ((lt a n) (eq (div a n) (d0)) (eq (mod a n) a))
  (eqdivmod ((lt a n) (d0) a a n)
    (id ((lt a n)))
    (a1i ((lt a n) (eq (add (mul n (d0)) a) a))
      (ax_mp ((eq (add (d0) a) a) (eq (add (mul n (d0)) a) a))
        (ax_mp ((eq (add (mul n (d0)) a) (add (d0) a)) (im (eq (add (d0) a) a) (eq (add (mul n (d0)) a) a)))
          (eqtr ((add (mul n (d0)) a) (add (d0) a) a))
          (ax_mp ((eq (mul n (d0)) (d0)) (eq (add (mul n (d0)) a) (add (d0) a)))
            (addeq1 ((mul n (d0)) (d0) a))
            (mul0 (n))))
        (add01 (a)))))))

(local theorem modmodid ((a nat ()) (n nat ())) ()
  (eq (mod (mod a n) n) (mod a n))
()
(cases ((eq n (d0)) (eq (mod (mod a n) n) (mod a n)))
  (modeqd ((eq n (d0)) (mod a n) a n n)
    (syl6eq ((eq n (d0)) (mod a n) (mod a (d0)) a)
      (mod0 (a))
      (modeq2 (a n (d0))))
    (eqidd ((eq n (d0)) n)))
  (syl ((not (eq n (d0))) (lt (mod a n) n) (eq (mod (mod a n) n) (mod a n)))
    (modlteq ((mod a n) n))
    (:conv (im (not (eq n (d0))) (lt (mod a n) n))
      (im
        (:sym (:unfold ne (n (d0)) ()
          (not (eq n (d0)))))
        (lt (mod a n) n))
      (modlt (a n))))))

(local theorem dvdsubmod ((a nat ()) (n nat ())) ()
  (dvd n (sub a (mod a n)))
()
(ax_mp ((eq (mul n (div a n)) (sub a (mod a n))) (dvd n (sub a (mod a n))))
  (idvd2 (n (sub a (mod a n)) (div a n)))
  (ax_mp ((eq (sub a (mod a n)) (mul n (div a n))) (eq (mul n (div a n)) (sub a (mod a n))))
    (eqcom ((sub a (mod a n)) (mul n (div a n))))
    (ax_mp ((eq (add (mul n (div a n)) (mod a n)) a) (eq (sub a (mod a n)) (mul n (div a n))))
      (eqsub1 ((mul n (div a n)) (mod a n) a))
      (divmod (a n))))))

(local theorem div2lt ((n nat ())) ()
  (im (lt (d0) n) (lt (div n (d2)) n))
()
(sylibr ((lt (d0) n) (lt n (mul (d2) n)) (lt (div n (d2)) n))
  (ax_mp ((ne (d2) (d0)) (iff (lt (div n (d2)) n) (lt n (mul (d2) n))))
    (ltdivmul1 (n (d2) n))
    (d2ne0 ()))
  (sylib ((lt (d0) n) (lt (mul (d1) n) (mul (d2) n)) (lt n (mul (d2) n)))
    (ax_mp ((eq (mul (d1) n) n) (iff (lt (mul (d1) n) (mul (d2) n)) (lt n (mul (d2) n))))
      (lteq1 ((mul (d1) n) n (mul (d2) n)))
      (mul11 (n)))
    (mpbii ((lt (d0) n) (lt (d1) (d2)) (lt (mul (d1) n) (mul (d2) n)))
      (d1lt2 ())
      (ltmul1 ((d1) (d2) n))))))

(local theorem boolmod2 ((n nat ())) ()
  (bool (mod n (d2)))
()
(:conv (bool (mod n (d2)))
  (:unfold bool ((mod n (d2))) ()
    (lt (mod n (d2)) (d2)))
  (ax_mp ((ne (d2) (d0)) (lt (mod n (d2)) (d2)))
    (modlt (n (d2)))
    (d2ne0 ()))))

(local def eqm ((n nat ()) (a nat ()) (b nat ())) (wff ())
()
(eq (mod a n) (mod b n)))

(local theorem eqmeqd ((_G wff ()) (n1 nat ()) (n2 nat ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((hn (im _G (eq n1 n2)))
   (ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (iff (eqm n1 a1 b1) (eqm n2 a2 b2)))
()
(:conv (im _G (iff (eqm n1 a1 b1) (eqm n2 a2 b2)))
  (im
    _G
    (iff
      (:unfold eqm (n1 a1 b1) ()
        (eq (mod a1 n1) (mod b1 n1)))
      (:unfold eqm (n2 a2 b2) ()
        (eq (mod a2 n2) (mod b2 n2)))))
  (eqeqd (_G (mod a1 n1) (mod a2 n2) (mod b1 n1) (mod b2 n2))
    (modeqd (_G a1 a2 n1 n2)
      ha
      hn)
    (modeqd (_G b1 b2 n1 n2)
      hb
      hn))))

(local theorem eqmeq ((n1 nat ()) (n2 nat ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq n1 n2) (im (eq a1 a2) (im (eq b1 b2) (iff (eqm n1 a1 b1) (eqm n2 a2 b2)))))
()
(exp ((eq n1 n2) (eq a1 a2) (im (eq b1 b2) (iff (eqm n1 a1 b1) (eqm n2 a2 b2))))
  (exp ((an (eq n1 n2) (eq a1 a2)) (eq b1 b2) (iff (eqm n1 a1 b1) (eqm n2 a2 b2)))
    (eqmeqd ((an (an (eq n1 n2) (eq a1 a2)) (eq b1 b2)) n1 n2 a1 a2 b1 b2)
      (anwl ((an (eq n1 n2) (eq a1 a2)) (eq b1 b2) (eq n1 n2))
        (anl ((eq n1 n2) (eq a1 a2))))
      (anwl ((an (eq n1 n2) (eq a1 a2)) (eq b1 b2) (eq a1 a2))
        (anr ((eq n1 n2) (eq a1 a2))))
      (anr ((an (eq n1 n2) (eq a1 a2)) (eq b1 b2)))))))

(local theorem eqmeq1d ((G wff ()) (n1 nat ()) (n2 nat ()) (a nat ()) (b nat ()))
  ((h (im G (eq n1 n2))))
  (im G (iff (eqm n1 a b) (eqm n2 a b)))
()
(eqmeqd (G n1 n2 a a b b)
  h
  (eqidd (G a))
  (eqidd (G b))))

(local theorem eqmeq1 ((n1 nat ()) (n2 nat ()) (a nat ()) (b nat ())) ()
  (im (eq n1 n2) (iff (eqm n1 a b) (eqm n2 a b)))
()
(eqmeq1d ((eq n1 n2) n1 n2 a b)
  (id ((eq n1 n2)))))

(local theorem eqmeq2d ((G wff ()) (n nat ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (iff (eqm n a1 b) (eqm n a2 b)))
()
(eqmeqd (G n n a1 a2 b b)
  (eqidd (G n))
  h
  (eqidd (G b))))

(local theorem eqmeq2 ((n nat ()) (a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (iff (eqm n a1 b) (eqm n a2 b)))
()
(eqmeq2d ((eq a1 a2) n a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem eqmeq3d ((G wff ()) (n nat ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (iff (eqm n a b1) (eqm n a b2)))
()
(eqmeqd (G n n a a b1 b2)
  (eqidd (G n))
  (eqidd (G a))
  h))

(local theorem eqmeq3 ((n nat ()) (a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (iff (eqm n a b1) (eqm n a b2)))
()
(eqmeq3d ((eq b1 b2) n a b1 b2)
  (id ((eq b1 b2)))))

(local theorem eqmid ((a nat ()) (n nat ())) ()
  (eqm n a a)
()
(:conv (eqm n a a)
  (:unfold eqm (n a a) ()
    (eq (mod a n) (mod a n)))
  (eqid ((mod a n)))))

(local theorem eqmtr ((a nat ()) (b nat ()) (c nat ()) (n nat ())) ()
  (im (eqm n a b) (im (eqm n b c) (eqm n a c)))
()
(:conv (im (eqm n a b) (im (eqm n b c) (eqm n a c)))
  (im
    (:unfold eqm (n a b) ()
      (eq (mod a n) (mod b n)))
    (im
      (:unfold eqm (n b c) ()
        (eq (mod b n) (mod c n)))
      (:unfold eqm (n a c) ()
        (eq (mod a n) (mod c n)))))
  (eqtr ((mod a n) (mod b n) (mod c n)))))

(local theorem eqmcom ((a nat ()) (b nat ()) (n nat ())) ()
  (im (eqm n a b) (eqm n b a))
()
(:conv (im (eqm n a b) (eqm n b a))
  (im
    (:unfold eqm (n a b) ()
      (eq (mod a n) (mod b n)))
    (:unfold eqm (n b a) ()
      (eq (mod b n) (mod a n))))
  (eqcom ((mod a n) (mod b n)))))

(local theorem eqmcomb ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (eqm n a b) (eqm n b a))
()
(ibii ((eqm n a b) (eqm n b a))
  (eqmcom (a b n))
  (eqmcom (b a n))))

(local theorem eqmeq23d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (iff (eqm n a c) (eqm n b d)))
()
(eqmeqd (G n n a b c d)
  (eqidd (G n))
  h1
  h2))

(local theorem eqeqm ((a nat ()) (b nat ()) (n nat ())) ()
  (im (eq a b) (eqm n a b))
()
(mpbii ((eq a b) (eqm n a a) (eqm n a b))
  (eqmid (a n))
  (eqmeq3 (n a a b))))

(local theorem eqmmod ((a nat ()) (n nat ())) ()
  (eqm n (mod a n) a)
()
(:conv (eqm n (mod a n) a)
  (:unfold eqm (n (mod a n) a) ()
    (eq (mod (mod a n) n) (mod a n)))
  (modmodid (a n))))

(local theorem eqm03 ((a nat ()) (n nat ())) ()
  (iff (eqm n a (d0)) (dvd n a))
()
(:conv (iff (eqm n a (d0)) (dvd n a))
  (iff
    (:unfold eqm (n a (d0)) ()
      (eq (mod a n) (mod (d0) n)))
    (dvd n a))
  (ax_mp ((iff (eq (mod a n) (d0)) (dvd n a)) (iff (eq (mod a n) (mod (d0) n)) (dvd n a)))
    (ax_mp ((iff (eq (mod a n) (mod (d0) n)) (eq (mod a n) (d0))) (im (iff (eq (mod a n) (d0)) (dvd n a)) (iff (eq (mod a n) (mod (d0) n)) (dvd n a))))
      (bitr ((eq (mod a n) (mod (d0) n)) (eq (mod a n) (d0)) (dvd n a)))
      (ax_mp ((eq (mod (d0) n) (d0)) (iff (eq (mod a n) (mod (d0) n)) (eq (mod a n) (d0))))
        (eqeq2 ((mod a n) (mod (d0) n) (d0)))
        (mod01 (n))))
    (modeq0 (a n)))))

(local theorem eqmdvdsub ((a nat ()) (b nat ()) (n nat ())) ()
  (im (le a b) (iff (eqm n a b) (dvd n (sub b a))))
()
(:let H1 (modle1 (a n))
(:let H2 (npcan (b a))
(:let H3 (syl ((le a b) (eq (add (add (sub b a) (sub a (mod a n))) (mod a n)) b) (eq (sub b (mod a n)) (add (sub b a) (sub a (mod a n)))))
  (eqsub1 ((add (sub b a) (sub a (mod a n))) (mod a n) b))
  (syl5eq ((le a b) (add (add (sub b a) (sub a (mod a n))) (mod a n)) (add (sub b a) (add (sub a (mod a n)) (mod a n))) b)
    (addass ((sub b a) (sub a (mod a n)) (mod a n)))
    (syl5eq ((le a b) (add (sub b a) (add (sub a (mod a n)) (mod a n))) (add (sub b a) a) b)
      (ax_mp ((eq (add (sub a (mod a n)) (mod a n)) a) (eq (add (sub b a) (add (sub a (mod a n)) (mod a n))) (add (sub b a) a)))
        (addeq2 ((sub b a) (add (sub a (mod a n)) (mod a n)) a))
        (ax_mp ((le (mod a n) a) (eq (add (sub a (mod a n)) (mod a n)) a))
          (npcan (a (mod a n)))
          H1))
      H2)))
(ibida ((le a b) (eqm n a b) (dvd n (sub b a)))
  (sylibr ((an (le a b) (eqm n a b)) (dvd n (add (sub b a) (sub a (mod a n)))) (dvd n (sub b a)))
    (ax_mp ((dvd n (sub a (mod a n))) (iff (dvd n (sub b a)) (dvd n (add (sub b a) (sub a (mod a n))))))
      (dvdadd2 ((sub a (mod a n)) (sub b a) n))
      (dvdsubmod (a n)))
    (mpbiri ((an (le a b) (eqm n a b)) (dvd n (sub b (mod b n))) (dvd n (add (sub b a) (sub a (mod a n)))))
      (dvdsubmod (b n))
      (dvdeqd ((an (le a b) (eqm n a b)) n n (add (sub b a) (sub a (mod a n))) (sub b (mod b n)))
        (eqidd ((an (le a b) (eqm n a b)) n))
        (eqtr3d ((an (le a b) (eqm n a b)) (add (sub b a) (sub a (mod a n))) (sub b (mod a n)) (sub b (mod b n)))
          (anwl ((le a b) (eqm n a b) (eq (sub b (mod a n)) (add (sub b a) (sub a (mod a n)))))
            H3)
          (anwr ((le a b) (eqm n a b) (eq (sub b (mod a n)) (sub b (mod b n))))
            (:conv (im (eqm n a b) (eq (sub b (mod a n)) (sub b (mod b n))))
              (im
                (:unfold eqm (n a b) ()
                  (eq (mod a n) (mod b n)))
                (eq (sub b (mod a n)) (sub b (mod b n))))
              (subeq2 (b (mod a n) (mod b n)))))))))
  (casesda ((an (le a b) (dvd n (sub b a))) (eq n (d0)) (eqm n a b))
    (:conv (im (an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (eqm n a b))
      (im
        (an (an (le a b) (dvd n (sub b a))) (eq n (d0)))
        (:unfold eqm (n a b) ()
          (eq (mod a n) (mod b n))))
      (modeq1d ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) a b n)
        (eqtr3d ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) a (add (sub b a) a) b)
          (syl6eq ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (add (sub b a) a) (add (d0) a) a)
            (add01 (a))
            (addeq1d ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (sub b a) (d0) a)
              (sylib ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (dvd (d0) (sub b a)) (eq (sub b a) (d0)))
                (dvd01 ((sub b a)))
                (mpbid ((an (an (le a b) (dvd n (sub b a))) (eq n (d0))) (dvd n (sub b a)) (dvd (d0) (sub b a)))
                  (anwr ((an (le a b) (dvd n (sub b a))) (eq n (d0)) (iff (dvd n (sub b a)) (dvd (d0) (sub b a))))
                    (dvdeq1 (n (d0) (sub b a))))
                  (anlr ((le a b) (dvd n (sub b a)) (eq n (d0))))))))
          (anwll ((le a b) (dvd n (sub b a)) (eq n (d0)) (eq (add (sub b a) a) b))
            H2))))
    (:conv (im (an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (eqm n a b))
      (im
        (an (an (le a b) (dvd n (sub b a))) (not (eq n (d0))))
        (:unfold eqm (n a b) ()
          (eq (mod a n) (mod b n))))
      (eqcomd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mod b n) (mod a n))
        (anrd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (eq (div b n) (add (div (sub b a) n) (div a n))) (eq (mod b n) (mod a n)))
          (eqdivmod ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (add (div (sub b a) n) (div a n)) (mod a n) b n)
            (anwr ((an (le a b) (dvd n (sub b a))) (not (eq n (d0))) (lt (mod a n) n))
              (:conv (im (not (eq n (d0))) (lt (mod a n) n))
                (im
                  (:sym (:unfold ne (n (d0)) ()
                    (not (eq n (d0)))))
                  (lt (mod a n) n))
                (modlt (a n))))
            (eqtrd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (add (mul n (add (div (sub b a) n) (div a n))) (mod a n)) (add (sub b (mod a n)) (mod a n)) b)
              (addeq1d ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mul n (add (div (sub b a) n) (div a n))) (sub b (mod a n)) (mod a n))
                (syl5eq ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mul n (add (div (sub b a) n) (div a n))) (add (mul n (div (sub b a) n)) (mul n (div a n))) (sub b (mod a n)))
                  (muladd (n (div (sub b a) n) (div a n)))
                  (eqtr4d ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (add (mul n (div (sub b a) n)) (mul n (div a n))) (add (sub b a) (sub a (mod a n))) (sub b (mod a n)))
                    (addeqd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mul n (div (sub b a) n)) (sub b a) (mul n (div a n)) (sub a (mod a n)))
                      (syl ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (dvd n (sub b a)) (eq (mul n (div (sub b a) n)) (sub b a)))
                        (muldiv3 ((sub b a) n))
                        (anlr ((le a b) (dvd n (sub b a)) (not (eq n (d0))))))
                      (a1i ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (eq (mul n (div a n)) (sub a (mod a n))))
                        (ax_mp ((eq (sub a (mod a n)) (mul n (div a n))) (eq (mul n (div a n)) (sub a (mod a n))))
                          (eqcom ((sub a (mod a n)) (mul n (div a n))))
                          (ax_mp ((eq (add (mul n (div a n)) (mod a n)) a) (eq (sub a (mod a n)) (mul n (div a n))))
                            (eqsub1 ((mul n (div a n)) (mod a n) a))
                            (divmod (a n))))))
                    (anwll ((le a b) (dvd n (sub b a)) (not (eq n (d0))) (eq (sub b (mod a n)) (add (sub b a) (sub a (mod a n)))))
                      H3))))
              (syl ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (le (mod a n) b) (eq (add (sub b (mod a n)) (mod a n)) b))
                (npcan (b (mod a n)))
                (letrd ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (mod a n) a b)
                  (a1i ((an (an (le a b) (dvd n (sub b a))) (not (eq n (d0)))) (le (mod a n) a))
                    H1)
                  (anll ((le a b) (dvd n (sub b a)) (not (eq n (d0))))))))))))))))))

(local theorem eqmaddlem ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h1 (im G (le a b)))
   (h2 (im G (eqm n a b))))
  (im G (eqm n (add a c) (add b c)))
()
(mpbird (G (dvd n (sub (add b c) (add a c))) (eqm n (add a c) (add b c)))
  (rsyl (G (le a b) (iff (eqm n (add a c) (add b c)) (dvd n (sub (add b c) (add a c)))))
    h1
    (sylbi ((le a b) (le (add a c) (add b c)) (iff (eqm n (add a c) (add b c)) (dvd n (sub (add b c) (add a c)))))
      (leadd1 (a b c))
      (eqmdvdsub ((add a c) (add b c) n))))
  (sylibr (G (dvd n (sub b a)) (dvd n (sub (add b c) (add a c))))
    (ax_mp ((eq (sub (add b c) (add a c)) (sub b a)) (iff (dvd n (sub (add b c) (add a c))) (dvd n (sub b a))))
      (dvdeq2 (n (sub (add b c) (add a c)) (sub b a)))
      (pnpcan2 (b a c)))
    (mpbid (G (eqm n a b) (dvd n (sub b a)))
      (syl (G (le a b) (iff (eqm n a b) (dvd n (sub b a))))
        (eqmdvdsub (a b n))
        h1)
      h2))))

(local theorem eqmadd1d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h (im G (eqm n a b))))
  (im G (eqm n (add a c) (add b c)))
()
(ax_mp ((or (le a b) (le b a)) (im G (eqm n (add a c) (add b c))))
  (ax_mp ((im (le b a) (im G (eqm n (add a c) (add b c)))) (im (or (le a b) (le b a)) (im G (eqm n (add a c) (add b c)))))
    (ax_mp ((im (le a b) (im G (eqm n (add a c) (add b c)))) (im (im (le b a) (im G (eqm n (add a c) (add b c)))) (im (or (le a b) (le b a)) (im G (eqm n (add a c) (add b c))))))
      (eor ((le a b) (le b a) (im G (eqm n (add a c) (add b c)))))
      (exp ((le a b) G (eqm n (add a c) (add b c)))
        (eqmaddlem ((an (le a b) G) a b c n)
          (anl ((le a b) G))
          (anwr ((le a b) G (eqm n a b))
            h))))
    (exp ((le b a) G (eqm n (add a c) (add b c)))
      (syl ((an (le b a) G) (eqm n (add b c) (add a c)) (eqm n (add a c) (add b c)))
        (eqmcom ((add b c) (add a c) n))
        (eqmaddlem ((an (le b a) G) b a c n)
          (anl ((le b a) G))
          (anwr ((le b a) G (eqm n b a))
            (syl (G (eqm n a b) (eqm n b a))
              (eqmcom (a b n))
              h))))))
  (leorle (a b))))

(local theorem eqmadd2d ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (n nat ()))
  ((h (im G (eqm n b c))))
  (im G (eqm n (add a b) (add a c)))
()
(mpbid (G (eqm n (add b a) (add c a)) (eqm n (add a b) (add a c)))
  (eqmeq23d (G (add b a) (add a b) (add c a) (add a c) n)
    (a1i (G (eq (add b a) (add a b)))
      (addcom (b a)))
    (a1i (G (eq (add c a) (add a c)))
      (addcom (c a))))
  (eqmadd1d (G b c a n)
    h)))

(local theorem eqmaddd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (n nat ()))
  ((h1 (im G (eqm n a b)))
   (h2 (im G (eqm n c d))))
  (im G (eqm n (add a c) (add b d)))
()
(sylc (G (eqm n (add a c) (add b c)) (eqm n (add b c) (add b d)) (eqm n (add a c) (add b d)))
  (eqmtr ((add a c) (add b c) (add b d) n))
  (eqmadd1d (G a b c n)
    h1)
  (eqmadd2d (G b c d n)
    h2)))

(local theorem dvdeqm ((G wff ()) (a nat ()) (b nat ()) (m nat ()) (n nat ()))
  ((h1 (im G (dvd m n)))
   (h2 (im G (eqm n a b))))
  (im G (eqm m a b))
()
(mpi (G (or (le a b) (le b a)) (eqm m a b))
  (leorle (a b))
  (eorda (G (le a b) (le b a) (eqm m a b))
    (mpbird ((an G (le a b)) (dvd m (sub b a)) (eqm m a b))
      (anwr (G (le a b) (iff (eqm m a b) (dvd m (sub b a))))
        (eqmdvdsub (a b m)))
      (sylc ((an G (le a b)) (dvd m n) (dvd n (sub b a)) (dvd m (sub b a)))
        (dvdtr (m n (sub b a)))
        (anwl (G (le a b) (dvd m n))
          h1)
        (mpbid ((an G (le a b)) (eqm n a b) (dvd n (sub b a)))
          (anwr (G (le a b) (iff (eqm n a b) (dvd n (sub b a))))
            (eqmdvdsub (a b n)))
          (anwl (G (le a b) (eqm n a b))
            h2))))
    (syl ((an G (le b a)) (eqm m b a) (eqm m a b))
      (eqmcom (b a m))
      (mpbird ((an G (le b a)) (dvd m (sub a b)) (eqm m b a))
        (anwr (G (le b a) (iff (eqm m b a) (dvd m (sub a b))))
          (eqmdvdsub (b a m)))
        (sylc ((an G (le b a)) (dvd m n) (dvd n (sub a b)) (dvd m (sub a b)))
          (dvdtr (m n (sub a b)))
          (anwl (G (le b a) (dvd m n))
            h1)
          (mpbid ((an G (le b a)) (eqm n b a) (dvd n (sub a b)))
            (anwr (G (le b a) (iff (eqm n b a) (dvd n (sub a b))))
              (eqmdvdsub (b a n)))
            (anwl (G (le b a) (eqm n b a))
              (syl (G (eqm n a b) (eqm n b a))
                (eqmcom (a b n))
                h2)))))))))

(local theorem modmod ((a nat ()) (m nat ()) (n nat ())) ()
  (im (dvd m n) (eq (mod (mod a n) m) (mod a m)))
()
(:conv (im (dvd m n) (eq (mod (mod a n) m) (mod a m)))
  (im
    (dvd m n)
    (:sym (:unfold eqm (m (mod a n) a) ()
      (eq (mod (mod a n) m) (mod a m)))))
  (dvdeqm ((dvd m n) (mod a n) a m n)
    (id ((dvd m n)))
    (a1i ((dvd m n) (eqm n (mod a n) a))
      (eqmmod (a n))))))

(local theorem eqm11 ((a nat ()) (b nat ())) ()
  (eqm (d1) a b)
()
(:conv (eqm (d1) a b)
  (:unfold eqm ((d1) a b) ()
    (eq (mod a (d1)) (mod b (d1))))
  (ax_mp ((eq (mod b (d1)) (d0)) (eq (mod a (d1)) (mod b (d1))))
    (ax_mp ((eq (mod a (d1)) (d0)) (im (eq (mod b (d1)) (d0)) (eq (mod a (d1)) (mod b (d1)))))
      (eqtr4 ((mod a (d1)) (d0) (mod b (d1))))
      (mod12 (a)))
    (mod12 (b)))))

(local theorem eqm01 ((a nat ()) (b nat ())) ()
  (iff (eqm (d0) a b) (eq a b))
()
(:conv (iff (eqm (d0) a b) (eq a b))
  (iff
    (:unfold eqm ((d0) a b) ()
      (eq (mod a (d0)) (mod b (d0))))
    (eq a b))
  (ax_mp ((eq (mod b (d0)) b) (iff (eq (mod a (d0)) (mod b (d0))) (eq a b)))
    (ax_mp ((eq (mod a (d0)) a) (im (eq (mod b (d0)) b) (iff (eq (mod a (d0)) (mod b (d0))) (eq a b))))
      (eqeq ((mod a (d0)) a (mod b (d0)) b))
      (mod0 (a)))
    (mod0 (b)))))

(def b0 ((n nat ())) (nat ())
()
(add n n))

(local theorem b0eqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (b0 n1) (b0 n2)))
()
(:conv (im _G (eq (b0 n1) (b0 n2)))
  (im
    _G
    (eq
      (:unfold b0 (n1) ()
        (add n1 n1))
      (:unfold b0 (n2) ()
        (add n2 n2))))
  (addeqd (_G n1 n2 n1 n2)
    hn
    hn)))

(local theorem b0eq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (b0 n1) (b0 n2)))
()
(b0eqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def b1 ((n nat ())) (nat ())
()
(suc (b0 n)))

(local theorem b1eqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (b1 n1) (b1 n2)))
()
(:conv (im _G (eq (b1 n1) (b1 n2)))
  (im
    _G
    (eq
      (:unfold b1 (n1) ()
        (suc (b0 n1)))
      (:unfold b1 (n2) ()
        (suc (b0 n2)))))
  (suceqd (_G (b0 n1) (b0 n2))
    (b0eqd (_G n1 n2)
      hn))))

(local theorem b1eq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (b1 n1) (b1 n2)))
()
(b1eqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def odd ((n nat ())) (wff ())
()
(eq (mod n (d2)) (d1)))

(local theorem oddeqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (iff (odd n1) (odd n2)))
()
(:conv (im _G (iff (odd n1) (odd n2)))
  (im
    _G
    (iff
      (:unfold odd (n1) ()
        (eq (mod n1 (d2)) (d1)))
      (:unfold odd (n2) ()
        (eq (mod n2 (d2)) (d1)))))
  (eqeqd (_G (mod n1 (d2)) (mod n2 (d2)) (d1) (d1))
    (modeqd (_G n1 n2 (d2) (d2))
      hn
      (eqidd (_G (d2))))
    (eqidd (_G (d1))))))

(local theorem oddeq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (iff (odd n1) (odd n2)))
()
(oddeqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(local theorem b00 () ()
  (eq (b0 (d0)) (d0))
()
(:conv (eq (b0 (d0)) (d0))
  (eq
    (:unfold b0 ((d0)) ()
      (add (d0) (d0)))
    (d0))
  (add0 ((d0)))))

(local theorem b10 () ()
  (eq (b1 (d0)) (d1))
()
(:conv (eq (b1 (d0)) (d1))
  (eq
    (:unfold b1 ((d0)) ()
      (suc (b0 (d0))))
    (:unfold d1 () ()
      (suc (d0))))
  (ax_mp ((eq (b0 (d0)) (d0)) (eq (suc (b0 (d0))) (suc (d0))))
    (suceq ((b0 (d0)) (d0)))
    (b00 ()))))

(local theorem b0mul21 ((n nat ())) ()
  (eq (mul (d2) n) (b0 n))
()
(:conv (eq (mul (d2) n) (b0 n))
  (eq
    (mul (d2) n)
    (:unfold b0 (n) ()
      (add n n)))
  (mul21 (n))))

(local theorem b0mul22 ((n nat ())) ()
  (eq (mul n (d2)) (b0 n))
()
(:conv (eq (mul n (d2)) (b0 n))
  (eq
    (mul n (d2))
    (:unfold b0 (n) ()
      (add n n)))
  (mul22 (n))))

(local theorem b0ne0 ((n nat ())) ()
  (iff (ne (b0 n) (d0)) (ne n (d0)))
()
(ax_mp ((iff (ne (mul (d2) n) (d0)) (ne n (d0))) (iff (ne (b0 n) (d0)) (ne n (d0))))
  (ax_mp ((iff (ne (mul (d2) n) (d0)) (ne (b0 n) (d0))) (im (iff (ne (mul (d2) n) (d0)) (ne n (d0))) (iff (ne (b0 n) (d0)) (ne n (d0)))))
    (bitr3 ((ne (b0 n) (d0)) (ne (mul (d2) n) (d0)) (ne n (d0))))
    (ax_mp ((eq (mul (d2) n) (b0 n)) (iff (ne (mul (d2) n) (d0)) (ne (b0 n) (d0))))
      (neeq1 ((mul (d2) n) (b0 n) (d0)))
      (b0mul21 (n))))
  (ax_mp ((iff (an (ne (d2) (d0)) (ne n (d0))) (ne n (d0))) (iff (ne (mul (d2) n) (d0)) (ne n (d0))))
    (ax_mp ((iff (ne (mul (d2) n) (d0)) (an (ne (d2) (d0)) (ne n (d0)))) (im (iff (an (ne (d2) (d0)) (ne n (d0))) (ne n (d0))) (iff (ne (mul (d2) n) (d0)) (ne n (d0)))))
      (bitr ((ne (mul (d2) n) (d0)) (an (ne (d2) (d0)) (ne n (d0))) (ne n (d0))))
      (mulne0 ((d2) n)))
    (ax_mp ((ne (d2) (d0)) (iff (an (ne (d2) (d0)) (ne n (d0))) (ne n (d0))))
      (bian1 ((ne (d2) (d0)) (ne n (d0))))
      (d2ne0 ())))))

(local theorem b1ne0 ((n nat ())) ()
  (ne (b1 n) (d0))
()
(:conv (ne (b1 n) (d0))
  (ne
    (:unfold b1 (n) ()
      (suc (b0 n)))
    (d0))
  (peano1 ((b0 n)))))

(local theorem b1mul21 ((n nat ())) ()
  (eq (add (mul (d2) n) (d1)) (b1 n))
()
(:conv (eq (add (mul (d2) n) (d1)) (b1 n))
  (eq
    (add (mul (d2) n) (d1))
    (:unfold b1 (n) ()
      (suc (b0 n))))
  (ax_mp ((eq (add (b0 n) (d1)) (suc (b0 n))) (eq (add (mul (d2) n) (d1)) (suc (b0 n))))
    (ax_mp ((eq (add (mul (d2) n) (d1)) (add (b0 n) (d1))) (im (eq (add (b0 n) (d1)) (suc (b0 n))) (eq (add (mul (d2) n) (d1)) (suc (b0 n)))))
      (eqtr ((add (mul (d2) n) (d1)) (add (b0 n) (d1)) (suc (b0 n))))
      (ax_mp ((eq (mul (d2) n) (b0 n)) (eq (add (mul (d2) n) (d1)) (add (b0 n) (d1))))
        (addeq1 ((mul (d2) n) (b0 n) (d1)))
        (b0mul21 (n))))
    (add12 ((b0 n))))))

(local theorem b0dvd2 ((n nat ())) ()
  (dvd (d2) (b0 n))
()
(ax_mp ((eq (mul n (d2)) (b0 n)) (dvd (d2) (b0 n)))
  (idvd ((d2) (b0 n) n))
  (b0mul22 (n))))

(local theorem b1dvd2 ((n nat ())) ()
  (not (dvd (d2) (b1 n)))
()
(mpbi ((dvd (d2) (b0 n)) (not (dvd (d2) (b1 n))))
  (:conv (iff (dvd (d2) (b0 n)) (not (dvd (d2) (b1 n))))
    (iff
      (dvd (d2) (b0 n))
      (not
        (dvd
          (d2)
          (:unfold b1 (n) ()
            (suc (b0 n))))))
    (ax_mp ((iff (dvd (d2) (suc (b0 n))) (not (dvd (d2) (b0 n)))) (iff (dvd (d2) (b0 n)) (not (dvd (d2) (suc (b0 n))))))
      (con2b ((dvd (d2) (suc (b0 n))) (dvd (d2) (b0 n))))
      (d2dvdS ((b0 n)))))
  (b0dvd2 (n))))

(local theorem dfodd2 ((n nat ())) ()
  (iff (odd n) (true (mod n (d2))))
()
(:conv (iff (odd n) (true (mod n (d2))))
  (iff
    (:unfold odd (n) ()
      (eq (mod n (d2)) (d1)))
    (true (mod n (d2))))
  (ax_mp ((iff (true (mod n (d2))) (eq (mod n (d2)) (d1))) (iff (eq (mod n (d2)) (d1)) (true (mod n (d2)))))
    (bicom ((true (mod n (d2))) (eq (mod n (d2)) (d1))))
    (ax_mp ((bool (mod n (d2))) (iff (true (mod n (d2))) (eq (mod n (d2)) (d1))))
      (dftrue2 ((mod n (d2))))
      (boolmod2 (n))))))

(local theorem odddvd ((n nat ())) ()
  (iff (odd n) (not (dvd (d2) n)))
()
(ax_mp ((iff (true (mod n (d2))) (not (dvd (d2) n))) (iff (odd n) (not (dvd (d2) n))))
  (ax_mp ((iff (odd n) (true (mod n (d2)))) (im (iff (true (mod n (d2))) (not (dvd (d2) n))) (iff (odd n) (not (dvd (d2) n)))))
    (bitr ((odd n) (true (mod n (d2))) (not (dvd (d2) n))))
    (dfodd2 (n)))
  (:conv (iff (true (mod n (d2))) (not (dvd (d2) n)))
    (iff
      (:unfold true ((mod n (d2))) ()
        (:unfold ne ((mod n (d2)) (d0)) ()
          (not (eq (mod n (d2)) (d0)))))
      (not (dvd (d2) n)))
    (ax_mp ((iff (eq (mod n (d2)) (d0)) (dvd (d2) n)) (iff (not (eq (mod n (d2)) (d0))) (not (dvd (d2) n))))
      (noteq ((eq (mod n (d2)) (d0)) (dvd (d2) n)))
      (modeq0 (n (d2)))))))

(local theorem b0odd ((n nat ())) ()
  (not (odd (b0 n)))
()
(mpbi ((dvd (d2) (b0 n)) (not (odd (b0 n))))
  (ax_mp ((iff (odd (b0 n)) (not (dvd (d2) (b0 n)))) (iff (dvd (d2) (b0 n)) (not (odd (b0 n)))))
    (con2b ((odd (b0 n)) (dvd (d2) (b0 n))))
    (odddvd ((b0 n))))
  (b0dvd2 (n))))

(local theorem b1odd ((n nat ())) ()
  (odd (b1 n))
()
(mpbir ((not (dvd (d2) (b1 n))) (odd (b1 n)))
  (odddvd ((b1 n)))
  (b1dvd2 (n))))

(local theorem b0mod2 ((n nat ())) ()
  (eq (mod (b0 n) (d2)) (d0))
()
(mpbir ((dvd (d2) (b0 n)) (eq (mod (b0 n) (d2)) (d0)))
  (modeq0 ((b0 n) (d2)))
  (b0dvd2 (n))))

(local theorem b1mod2 ((n nat ())) ()
  (eq (mod (b1 n) (d2)) (d1))
()
(:conv (eq (mod (b1 n) (d2)) (d1))
  (:sym (:unfold odd ((b1 n)) ()
    (eq (mod (b1 n) (d2)) (d1))))
  (b1odd (n))))

(local theorem b0div2 ((n nat ())) ()
  (eq (div (b0 n) (d2)) n)
()
(ax_mp ((eq (div (mul (d2) n) (d2)) n) (eq (div (b0 n) (d2)) n))
  (ax_mp ((eq (div (mul (d2) n) (d2)) (div (b0 n) (d2))) (im (eq (div (mul (d2) n) (d2)) n) (eq (div (b0 n) (d2)) n)))
    (eqtr3 ((div (b0 n) (d2)) (div (mul (d2) n) (d2)) n))
    (ax_mp ((eq (mul (d2) n) (b0 n)) (eq (div (mul (d2) n) (d2)) (div (b0 n) (d2))))
      (diveq1 ((mul (d2) n) (b0 n) (d2)))
      (b0mul21 (n))))
  (ax_mp ((ne (d2) (d0)) (eq (div (mul (d2) n) (d2)) n))
    (muldiv2 (n (d2)))
    (d2ne0 ()))))

(local theorem b1div2 ((n nat ())) ()
  (eq (div (b1 n) (d2)) n)
()
(trud ((eq (div (b1 n) (d2)) n))
  (anld ((wtru) (eq (div (b1 n) (d2)) n) (eq (mod (b1 n) (d2)) (d1)))
    (eqdivmod ((wtru) n (d1) (b1 n) (d2))
      (a1i ((wtru) (lt (d1) (d2)))
        (d1lt2 ()))
      (a1i ((wtru) (eq (add (mul (d2) n) (d1)) (b1 n)))
        (b1mul21 (n)))))))

(local theorem b0can ((a nat ()) (b nat ())) ()
  (iff (eq (b0 a) (b0 b)) (eq a b))
()
(ibii ((eq (b0 a) (b0 b)) (eq a b))
  (sylib ((eq (b0 a) (b0 b)) (eq (div (b0 a) (d2)) (div (b0 b) (d2))) (eq a b))
    (ax_mp ((eq (div (b0 b) (d2)) b) (iff (eq (div (b0 a) (d2)) (div (b0 b) (d2))) (eq a b)))
      (ax_mp ((eq (div (b0 a) (d2)) a) (im (eq (div (b0 b) (d2)) b) (iff (eq (div (b0 a) (d2)) (div (b0 b) (d2))) (eq a b))))
        (eqeq ((div (b0 a) (d2)) a (div (b0 b) (d2)) b))
        (b0div2 (a)))
      (b0div2 (b)))
    (diveq1 ((b0 a) (b0 b) (d2))))
  (b0eq (a b))))

(local theorem b1can ((a nat ()) (b nat ())) ()
  (iff (eq (b1 a) (b1 b)) (eq a b))
()
(ibii ((eq (b1 a) (b1 b)) (eq a b))
  (sylib ((eq (b1 a) (b1 b)) (eq (div (b1 a) (d2)) (div (b1 b) (d2))) (eq a b))
    (ax_mp ((eq (div (b1 b) (d2)) b) (iff (eq (div (b1 a) (d2)) (div (b1 b) (d2))) (eq a b)))
      (ax_mp ((eq (div (b1 a) (d2)) a) (im (eq (div (b1 b) (d2)) b) (iff (eq (div (b1 a) (d2)) (div (b1 b) (d2))) (eq a b))))
        (eqeq ((div (b1 a) (d2)) a (div (b1 b) (d2)) b))
        (b1div2 (a)))
      (b1div2 (b)))
    (diveq1 ((b1 a) (b1 b) (d2))))
  (b1eq (a b))))

(local theorem b1neb0 ((a nat ()) (b nat ())) ()
  (ne (b1 a) (b0 b))
()
(:conv (ne (b1 a) (b0 b))
  (:unfold ne ((b1 a) (b0 b)) ()
    (not (eq (b1 a) (b0 b))))
  (mt ((odd (b0 b)) (eq (b1 a) (b0 b)))
    (mpbii ((eq (b1 a) (b0 b)) (odd (b1 a)) (odd (b0 b)))
      (b1odd (a))
      (oddeq ((b1 a) (b0 b))))
    (b0odd (b)))))

(local theorem b0neb1 ((a nat ()) (b nat ())) ()
  (ne (b0 a) (b1 b))
()
(ax_mp ((ne (b1 b) (b0 a)) (ne (b0 a) (b1 b)))
  (necom ((b1 b) (b0 a)))
  (b1neb0 (b a))))

(local theorem b0le ((a nat ()) (b nat ())) ()
  (iff (le a b) (le (b0 a) (b0 b)))
()
(ax_mp ((iff (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b))) (iff (le a b) (le (b0 a) (b0 b))))
  (ax_mp ((iff (le a b) (le (mul (d2) a) (mul (d2) b))) (im (iff (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b))) (iff (le a b) (le (b0 a) (b0 b)))))
    (bitr ((le a b) (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b))))
    (ax_mp ((lt (d0) (d2)) (iff (le a b) (le (mul (d2) a) (mul (d2) b))))
      (lemul2 ((d2) a b))
      (d0lt2 ())))
  (ax_mp ((eq (mul (d2) b) (b0 b)) (iff (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b))))
    (ax_mp ((eq (mul (d2) a) (b0 a)) (im (eq (mul (d2) b) (b0 b)) (iff (le (mul (d2) a) (mul (d2) b)) (le (b0 a) (b0 b)))))
      (leeq ((mul (d2) a) (b0 a) (mul (d2) b) (b0 b)))
      (b0mul21 (a)))
    (b0mul21 (b)))))

(local theorem b1le ((a nat ()) (b nat ())) ()
  (iff (le a b) (le (b1 a) (b1 b)))
()
(:conv (iff (le a b) (le (b1 a) (b1 b)))
  (iff
    (le a b)
    (le
      (:unfold b1 (a) ()
        (suc (b0 a)))
      (:unfold b1 (b) ()
        (suc (b0 b)))))
  (ax_mp ((iff (le (b0 a) (b0 b)) (le (suc (b0 a)) (suc (b0 b)))) (iff (le a b) (le (suc (b0 a)) (suc (b0 b)))))
    (ax_mp ((iff (le a b) (le (b0 a) (b0 b))) (im (iff (le (b0 a) (b0 b)) (le (suc (b0 a)) (suc (b0 b)))) (iff (le a b) (le (suc (b0 a)) (suc (b0 b))))))
      (bitr ((le a b) (le (b0 a) (b0 b)) (le (suc (b0 a)) (suc (b0 b)))))
      (b0le (a b)))
    (lesuc ((b0 a) (b0 b))))))

(local theorem b0lt ((a nat ()) (b nat ())) ()
  (iff (lt a b) (lt (b0 a) (b0 b)))
()
(ax_mp ((iff (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b))) (iff (lt a b) (lt (b0 a) (b0 b))))
  (ax_mp ((iff (lt a b) (lt (mul (d2) a) (mul (d2) b))) (im (iff (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b))) (iff (lt a b) (lt (b0 a) (b0 b)))))
    (bitr ((lt a b) (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b))))
    (ax_mp ((lt (d0) (d2)) (iff (lt a b) (lt (mul (d2) a) (mul (d2) b))))
      (ltmul2 ((d2) a b))
      (d0lt2 ())))
  (ax_mp ((eq (mul (d2) b) (b0 b)) (iff (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b))))
    (ax_mp ((eq (mul (d2) a) (b0 a)) (im (eq (mul (d2) b) (b0 b)) (iff (lt (mul (d2) a) (mul (d2) b)) (lt (b0 a) (b0 b)))))
      (lteq ((mul (d2) a) (b0 a) (mul (d2) b) (b0 b)))
      (b0mul21 (a)))
    (b0mul21 (b)))))

(local theorem b1lt ((a nat ()) (b nat ())) ()
  (iff (lt a b) (lt (b1 a) (b1 b)))
()
(:conv (iff (lt a b) (lt (b1 a) (b1 b)))
  (iff
    (lt a b)
    (lt
      (:unfold b1 (a) ()
        (suc (b0 a)))
      (:unfold b1 (b) ()
        (suc (b0 b)))))
  (ax_mp ((iff (lt (b0 a) (b0 b)) (lt (suc (b0 a)) (suc (b0 b)))) (iff (lt a b) (lt (suc (b0 a)) (suc (b0 b)))))
    (ax_mp ((iff (lt a b) (lt (b0 a) (b0 b))) (im (iff (lt (b0 a) (b0 b)) (lt (suc (b0 a)) (suc (b0 b)))) (iff (lt a b) (lt (suc (b0 a)) (suc (b0 b))))))
      (bitr ((lt a b) (lt (b0 a) (b0 b)) (lt (suc (b0 a)) (suc (b0 b)))))
      (b0lt (a b)))
    (ltsuc ((b0 a) (b0 b))))))

(local theorem b0orb1 ((n nat ())) ()
  (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2)))))
()
(:conv (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2)))))
  (:unfold or ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) ()
    (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2))))))
  (rsyl ((not (eq n (b0 (div n (d2))))) (not (dvd (d2) n)) (eq n (b1 (div n (d2)))))
    (ax_mp ((im (dvd (d2) n) (eq n (b0 (div n (d2))))) (im (not (eq n (b0 (div n (d2))))) (not (dvd (d2) n))))
      (con3 ((dvd (d2) n) (eq n (b0 (div n (d2))))))
      (eqcomd ((dvd (d2) n) (b0 (div n (d2))) n)
        (syl5eqr ((dvd (d2) n) (b0 (div n (d2))) (mul (d2) (div n (d2))) n)
          (b0mul21 ((div n (d2))))
          (muldiv3 (n (d2))))))
    (sylbir ((not (dvd (d2) n)) (odd n) (eq n (b1 (div n (d2)))))
      (odddvd (n))
      (syl5eqr ((odd n) n (add (mul (d2) (div n (d2))) (mod n (d2))) (b1 (div n (d2))))
        (divmod (n (d2)))
        (syl6eq ((odd n) (add (mul (d2) (div n (d2))) (mod n (d2))) (add (mul (d2) (div n (d2))) (d1)) (b1 (div n (d2))))
          (b1mul21 ((div n (d2))))
          (:conv (im (odd n) (eq (add (mul (d2) (div n (d2))) (mod n (d2))) (add (mul (d2) (div n (d2))) (d1))))
            (im
              (:unfold odd (n) ()
                (eq (mod n (d2)) (d1)))
              (eq (add (mul (d2) (div n (d2))) (mod n (d2))) (add (mul (d2) (div n (d2))) (d1))))
            (addeq2 ((mul (d2) (div n (d2))) (mod n (d2)) (d1))))))))))

(local theorem b0leid ((n nat ())) ()
  (le n (b0 n))
()
(:conv (le n (b0 n))
  (le
    n
    (:unfold b0 (n) ()
      (add n n)))
  (leaddid1 (n n))))

(local theorem b1ltid ((n nat ())) ()
  (lt n (b1 n))
()
(mpbi ((le n (b0 n)) (lt n (b1 n)))
  (:conv (iff (le n (b0 n)) (lt n (b1 n)))
    (iff
      (le n (b0 n))
      (lt
        n
        (:unfold b1 (n) ()
          (suc (b0 n)))))
    (leltsuc (n (b0 n))))
  (b0leid (n))))

(local theorem b1leid ((n nat ())) ()
  (le n (b1 n))
()
(ax_mp ((lt n (b1 n)) (le n (b1 n)))
  (ltle (n (b1 n)))
  (b1ltid (n))))

(local theorem ltb0tr ((a nat ()) (b nat ()))
  ((h (lt a b)))
  (lt a (b0 b))
()
(ax_mp ((le b (b0 b)) (lt a (b0 b)))
  (ax_mp ((lt a b) (im (le b (b0 b)) (lt a (b0 b))))
    (ltletr (a b (b0 b)))
    h)
  (b0leid (b))))

(local theorem ltb1tr ((a nat ()) (b nat ()))
  ((h (le a b)))
  (lt a (b1 b))
()
(ax_mp ((lt b (b1 b)) (lt a (b1 b)))
  (ax_mp ((le a b) (im (lt b (b1 b)) (lt a (b1 b))))
    (lelttr (a b (b1 b)))
    h)
  (b1ltid (b))))

(local theorem leb0tr ((a nat ()) (b nat ()))
  ((h (le a b)))
  (le a (b0 b))
()
(ax_mp ((le b (b0 b)) (le a (b0 b)))
  (ax_mp ((le a b) (im (le b (b0 b)) (le a (b0 b))))
    (letr (a b (b0 b)))
    h)
  (b0leid (b))))

(local theorem leb1tr ((a nat ()) (b nat ()))
  ((h (le a b)))
  (le a (b1 b))
()
(ax_mp ((lt a (b1 b)) (le a (b1 b)))
  (ltle (a (b1 b)))
  (ltb1tr (a b)
    h)))

(local theorem eqb0 ((n nat ())) ()
  (iff (not (odd n)) (eq n (b0 (div n (d2)))))
()
(ibii ((not (odd n)) (eq n (b0 (div n (d2)))))
  (ax_mp ((im (not (eq n (b0 (div n (d2))))) (odd n)) (im (not (odd n)) (eq n (b0 (div n (d2))))))
    (con1 ((eq n (b0 (div n (d2)))) (odd n)))
    (rsyl ((not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))) (odd n))
      (:conv (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))
        (:sym (:unfold or ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) ()
          (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))))
        (b0orb1 (n)))
      (mpbiri ((eq n (b1 (div n (d2)))) (odd (b1 (div n (d2)))) (odd n))
        (b1odd ((div n (d2))))
        (oddeq (n (b1 (div n (d2))))))))
  (mpbiri ((eq n (b0 (div n (d2)))) (not (odd (b0 (div n (d2))))) (not (odd n)))
    (b0odd ((div n (d2))))
    (noteqd ((eq n (b0 (div n (d2)))) (odd n) (odd (b0 (div n (d2)))))
      (oddeq (n (b0 (div n (d2)))))))))

(local theorem eqb1 ((n nat ())) ()
  (iff (odd n) (eq n (b1 (div n (d2)))))
()
(ibii ((odd n) (eq n (b1 (div n (d2)))))
  (syl ((odd n) (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))
    (:conv (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))
      (:sym (:unfold or ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) ()
        (im (not (eq n (b0 (div n (d2))))) (eq n (b1 (div n (d2)))))))
      (b0orb1 (n)))
    (ax_mp ((im (eq n (b0 (div n (d2)))) (not (odd n))) (im (odd n) (not (eq n (b0 (div n (d2)))))))
      (con2 ((eq n (b0 (div n (d2)))) (odd n)))
      (mpbiri ((eq n (b0 (div n (d2)))) (not (odd (b0 (div n (d2))))) (not (odd n)))
        (b0odd ((div n (d2))))
        (noteqd ((eq n (b0 (div n (d2)))) (odd n) (odd (b0 (div n (d2)))))
          (oddeq (n (b0 (div n (d2)))))))))
  (mpbiri ((eq n (b1 (div n (d2)))) (odd (b1 (div n (d2)))) (odd n))
    (b1odd ((div n (d2))))
    (oddeq (n (b1 (div n (d2))))))))

(local theorem splitb ((G wff ()) (a nat ()) (p wff ()))
  ((h0 (im G (im (eq a (b0 (div a (d2)))) p)))
   (h1 (im G (im (eq a (b1 (div a (d2)))) p))))
  (im G p)
()
(mpi (G (or (eq a (b0 (div a (d2)))) (eq a (b1 (div a (d2))))) p)
  (b0orb1 (a))
  (eord (G (eq a (b0 (div a (d2)))) (eq a (b1 (div a (d2)))) p)
    h0
    h1)))

(local theorem splitb0 ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (p wff ()))
  ((h (im G (im (eq a (b0 c)) p))))
  (im G (im (eq b c) (im (eq a (b0 b)) p)))
()
(exp (G (eq b c) (im (eq a (b0 b)) p))
  (exp ((an G (eq b c)) (eq a (b0 b)) p)
    (sylc ((an (an G (eq b c)) (eq a (b0 b))) G (eq a (b0 c)) p)
      h
      (anll (G (eq b c) (eq a (b0 b))))
      (eqtrd ((an (an G (eq b c)) (eq a (b0 b))) a (b0 b) (b0 c))
        (anr ((an G (eq b c)) (eq a (b0 b))))
        (b0eqd ((an (an G (eq b c)) (eq a (b0 b))) b c)
          (anlr (G (eq b c) (eq a (b0 b))))))))))

(local theorem splitb1 ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (p wff ()))
  ((h (im G (im (eq a (b1 c)) p))))
  (im G (im (eq b c) (im (eq a (b1 b)) p)))
()
(exp (G (eq b c) (im (eq a (b1 b)) p))
  (exp ((an G (eq b c)) (eq a (b1 b)) p)
    (sylc ((an (an G (eq b c)) (eq a (b1 b))) G (eq a (b1 c)) p)
      h
      (anll (G (eq b c) (eq a (b1 b))))
      (eqtrd ((an (an G (eq b c)) (eq a (b1 b))) a (b1 b) (b1 c))
        (anr ((an G (eq b c)) (eq a (b1 b))))
        (b1eqd ((an (an G (eq b c)) (eq a (b1 b))) b c)
          (anlr (G (eq b c) (eq a (b1 b))))))))))

(local theorem odd0 () ()
  (not (odd (d0)))
()
(mtbir ((eq (d0) (d1)) (odd (d0)))
  (:conv (iff (odd (d0)) (eq (d0) (d1)))
    (iff
      (:unfold odd ((d0)) ()
        (eq (mod (d0) (d2)) (d1)))
      (eq (d0) (d1)))
    (ax_mp ((eq (mod (d0) (d2)) (d0)) (iff (eq (mod (d0) (d2)) (d1)) (eq (d0) (d1))))
      (eqeq1 ((mod (d0) (d2)) (d0) (d1)))
      (mod01 ((d2)))))
  (mt ((eq (d1) (d0)) (eq (d0) (d1)))
    (eqcom ((d0) (d1)))
    (:conv (not (eq (d1) (d0)))
      (:sym (:unfold ne ((d1) (d0)) ()
        (not (eq (d1) (d0)))))
      (d1ne0 ())))))

(local theorem oddS ((n nat ())) ()
  (iff (odd (suc n)) (not (odd n)))
()
(ax_mp ((iff (not (dvd (d2) (suc n))) (not (odd n))) (iff (odd (suc n)) (not (odd n))))
  (ax_mp ((iff (odd (suc n)) (not (dvd (d2) (suc n)))) (im (iff (not (dvd (d2) (suc n))) (not (odd n))) (iff (odd (suc n)) (not (odd n)))))
    (bitr ((odd (suc n)) (not (dvd (d2) (suc n))) (not (odd n))))
    (odddvd ((suc n))))
  (ax_mp ((iff (dvd (d2) (suc n)) (odd n)) (iff (not (dvd (d2) (suc n))) (not (odd n))))
    (noteq ((dvd (d2) (suc n)) (odd n)))
    (ax_mp ((iff (odd n) (not (dvd (d2) n))) (iff (dvd (d2) (suc n)) (odd n)))
      (ax_mp ((iff (dvd (d2) (suc n)) (not (dvd (d2) n))) (im (iff (odd n) (not (dvd (d2) n))) (iff (dvd (d2) (suc n)) (odd n))))
        (bitr4 ((dvd (d2) (suc n)) (not (dvd (d2) n)) (odd n)))
        (d2dvdS (n)))
      (odddvd (n))))))

(local theorem odd1 () ()
  (odd (d1))
()
(mpbir ((not (odd (d0))) (odd (d1)))
  (:conv (iff (odd (d1)) (not (odd (d0))))
    (iff
      (odd
        (:unfold d1 () ()
          (suc (d0))))
      (not (odd (d0))))
    (oddS ((d0))))
  (odd0 ())))

(def pr ((a nat ()) (b nat ())) (nat ())
()
(add (div (mul (add a b) (suc (add a b))) (d2)) b))

(local theorem preqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (pr a1 b1) (pr a2 b2)))
()
(:let H1 (addeqd (_G a1 a2 b1 b2)
  ha
  hb)
(:conv (im _G (eq (pr a1 b1) (pr a2 b2)))
  (im
    _G
    (eq
      (:unfold pr (a1 b1) ()
        (add (div (mul (add a1 b1) (suc (add a1 b1))) (d2)) b1))
      (:unfold pr (a2 b2) ()
        (add (div (mul (add a2 b2) (suc (add a2 b2))) (d2)) b2))))
  (addeqd (_G (div (mul (add a1 b1) (suc (add a1 b1))) (d2)) (div (mul (add a2 b2) (suc (add a2 b2))) (d2)) b1 b2)
    (diveqd (_G (mul (add a1 b1) (suc (add a1 b1))) (mul (add a2 b2) (suc (add a2 b2))) (d2) (d2))
      (muleqd (_G (add a1 b1) (add a2 b2) (suc (add a1 b1)) (suc (add a2 b2)))
        H1
        (suceqd (_G (add a1 b1) (add a2 b2))
          H1))
      (eqidd (_G (d2))))
    hb))))

(local theorem preq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (pr a1 b1) (pr a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (pr a1 b1) (pr a2 b2)))
  (preqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem preq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (pr a1 b) (pr a2 b)))
()
(preqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem preq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (pr a1 b) (pr a2 b)))
()
(preq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem preq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (pr a b1) (pr a b2)))
()
(preqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem preq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (pr a b1) (pr a b2)))
()
(preq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem nfpr ((x nat) (a nat (x)) (b nat (x)))
  ((h1 (nfn x a))
   (h2 (nfn x b)))
  (nfn x (pr a b))
((y nat) (z nat))
(nfnlem2 (x y z (pr y z) a b (pr a b))
  (preqd ((an (eq y a) (eq z b)) y a z b)
    (anl ((eq y a) (eq z b)))
    (anr ((eq y a) (eq z b))))
  h1
  h2))

(local theorem preqadd ((a nat ()) (b nat ())) ()
  (eq (pr a b) (add (pr (add a b) (d0)) b))
()
(:let H1 (add0 ((add a b)))
(:conv (eq (pr a b) (add (pr (add a b) (d0)) b))
  (eq
    (:unfold pr (a b) ()
      (add (div (mul (add a b) (suc (add a b))) (d2)) b))
    (add
      (:unfold pr ((add a b) (d0)) ()
        (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)))
      b))
  (ax_mp ((eq (add (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) b) (add (div (mul (add a b) (suc (add a b))) (d2)) b)) (eq (add (div (mul (add a b) (suc (add a b))) (d2)) b) (add (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) b)))
    (eqcom ((add (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) b) (add (div (mul (add a b) (suc (add a b))) (d2)) b)))
    (ax_mp ((eq (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) (div (mul (add a b) (suc (add a b))) (d2))) (eq (add (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) b) (add (div (mul (add a b) (suc (add a b))) (d2)) b)))
      (addeq1 ((add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) (div (mul (add a b) (suc (add a b))) (d2)) b))
      (ax_mp ((eq (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (div (mul (add a b) (suc (add a b))) (d2))) (eq (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) (div (mul (add a b) (suc (add a b))) (d2))))
        (ax_mp ((eq (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2))) (im (eq (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (div (mul (add a b) (suc (add a b))) (d2))) (eq (add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) (div (mul (add a b) (suc (add a b))) (d2)))))
          (eqtr ((add (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (d0)) (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (div (mul (add a b) (suc (add a b))) (d2))))
          (add0 ((div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)))))
        (ax_mp ((eq (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (mul (add a b) (suc (add a b)))) (eq (div (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (d2)) (div (mul (add a b) (suc (add a b))) (d2))))
          (diveq1 ((mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (mul (add a b) (suc (add a b))) (d2)))
          (ax_mp ((eq (suc (add (add a b) (d0))) (suc (add a b))) (eq (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (mul (add a b) (suc (add a b)))))
            (ax_mp ((eq (add (add a b) (d0)) (add a b)) (im (eq (suc (add (add a b) (d0))) (suc (add a b))) (eq (mul (add (add a b) (d0)) (suc (add (add a b) (d0)))) (mul (add a b) (suc (add a b))))))
              (muleq ((add (add a b) (d0)) (add a b) (suc (add (add a b) (d0))) (suc (add a b))))
              H1)
            (ax_mp ((eq (add (add a b) (d0)) (add a b)) (eq (suc (add (add a b) (d0))) (suc (add a b))))
              (suceq ((add (add a b) (d0)) (add a b)))
              H1)))))))))

(local theorem prlem1 ((n nat ())) ()
  (dvd (d2) (mul n (suc n)))
()
(cases ((dvd (d2) n) (dvd (d2) (mul n (suc n))))
  (dvdmul11 ((d2) n (suc n)))
  (sylbir ((not (dvd (d2) n)) (dvd (d2) (suc n)) (dvd (d2) (mul n (suc n))))
    (d2dvdS (n))
    (dvdmul12 ((d2) (suc n) n)))))

(local theorem prlem2 ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (im (le (pr a c) (pr b d)) (le (add a c) (add b d)))
()
(:let H1 (anr ((le (pr a c) (pr b d)) (lt (add b d) (add a c))))
(:let H2 (:conv (im (an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (suc (add b d)) (add a c)))
  (im
    (an (le (pr a c) (pr b d)) (lt (add b d) (add a c)))
    (:sym (:unfold lt ((add b d) (add a c)) ()
      (le (suc (add b d)) (add a c)))))
  H1)
(sylibr ((le (pr a c) (pr b d)) (not (lt (add b d) (add a c))) (le (add a c) (add b d)))
  (lenlt ((add a c) (add b d)))
  (mtd ((le (pr a c) (pr b d)) (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))) (lt (add b d) (add a c)))
    (sylib ((le (pr a c) (pr b d)) (lt (div (mul (add a c) (suc (add a c))) (d2)) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (not (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2)))))
      (ltnle ((div (mul (add a c) (suc (add a c))) (d2)) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
      (lelttrd ((le (pr a c) (pr b d)) (div (mul (add a c) (suc (add a c))) (d2)) (pr b d) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))))
        (:conv (im (le (pr a c) (pr b d)) (le (div (mul (add a c) (suc (add a c))) (d2)) (pr b d)))
          (im
            (le
              (:unfold pr (a c) ()
                (add (div (mul (add a c) (suc (add a c))) (d2)) c))
              (pr b d))
            (le (div (mul (add a c) (suc (add a c))) (d2)) (pr b d)))
          (ax_mp ((le (div (mul (add a c) (suc (add a c))) (d2)) (add (div (mul (add a c) (suc (add a c))) (d2)) c)) (im (le (add (div (mul (add a c) (suc (add a c))) (d2)) c) (pr b d)) (le (div (mul (add a c) (suc (add a c))) (d2)) (pr b d))))
            (letr ((div (mul (add a c) (suc (add a c))) (d2)) (add (div (mul (add a c) (suc (add a c))) (d2)) c) (pr b d)))
            (leaddid1 ((div (mul (add a c) (suc (add a c))) (d2)) c))))
        (a1i ((le (pr a c) (pr b d)) (lt (pr b d) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
          (mpbi ((lt d (suc (add b d))) (lt (pr b d) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
            (:conv (iff (lt d (suc (add b d))) (lt (pr b d) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
              (iff
                (lt d (suc (add b d)))
                (lt
                  (:unfold pr (b d) ()
                    (add (div (mul (add b d) (suc (add b d))) (d2)) d))
                  (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))))
              (ltadd2 ((div (mul (add b d) (suc (add b d))) (d2)) d (suc (add b d)))))
            (mpbi ((le d (add b d)) (lt d (suc (add b d))))
              (leltsuc (d (add b d)))
              (leaddid2 (d b)))))))
    (exp ((le (pr a c) (pr b d)) (lt (add b d) (add a c)) (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))))
      (sylibr ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (mul (d2) (div (mul (add a c) (suc (add a c))) (d2)))) (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))))
        (ax_mp ((lt (d0) (d2)) (iff (le (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))) (le (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))))))
          (lemul2 ((d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))) (div (mul (add a c) (suc (add a c))) (d2))))
          (d0lt2 ()))
        (mpbird ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (mul (add (add b d) (d2)) (suc (add b d))) (mul (suc (add a c)) (add a c))) (le (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (mul (d2) (div (mul (add a c) (suc (add a c))) (d2)))))
          (leeqd ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (mul (add (add b d) (d2)) (suc (add b d))) (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (suc (add a c)) (add a c)))
            (syl6eqr ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (add (mul (add b d) (suc (add b d))) (mul (d2) (suc (add b d)))) (mul (add (add b d) (d2)) (suc (add b d))))
              (addmul ((add b d) (d2) (suc (add b d))))
              (syl5eq ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (mul (d2) (add (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d)))) (add (mul (d2) (div (mul (add b d) (suc (add b d))) (d2))) (mul (d2) (suc (add b d)))) (add (mul (add b d) (suc (add b d))) (mul (d2) (suc (add b d)))))
                (muladd ((d2) (div (mul (add b d) (suc (add b d))) (d2)) (suc (add b d))))
                (addeq1d ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (mul (d2) (div (mul (add b d) (suc (add b d))) (d2))) (mul (add b d) (suc (add b d))) (mul (d2) (suc (add b d))))
                  (a1i ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (eq (mul (d2) (div (mul (add b d) (suc (add b d))) (d2))) (mul (add b d) (suc (add b d)))))
                    (ax_mp ((dvd (d2) (mul (add b d) (suc (add b d)))) (eq (mul (d2) (div (mul (add b d) (suc (add b d))) (d2))) (mul (add b d) (suc (add b d)))))
                      (muldiv3 ((mul (add b d) (suc (add b d))) (d2)))
                      (prlem1 ((add b d))))))))
            (a1i ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (suc (add a c)) (add a c))))
              (ax_mp ((eq (mul (add a c) (suc (add a c))) (mul (suc (add a c)) (add a c))) (eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (suc (add a c)) (add a c))))
                (ax_mp ((eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (add a c) (suc (add a c)))) (im (eq (mul (add a c) (suc (add a c))) (mul (suc (add a c)) (add a c))) (eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (suc (add a c)) (add a c)))))
                  (eqtr ((mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (add a c) (suc (add a c))) (mul (suc (add a c)) (add a c))))
                  (ax_mp ((dvd (d2) (mul (add a c) (suc (add a c)))) (eq (mul (d2) (div (mul (add a c) (suc (add a c))) (d2))) (mul (add a c) (suc (add a c)))))
                    (muldiv3 ((mul (add a c) (suc (add a c))) (d2)))
                    (prlem1 ((add a c)))))
                (mulcom ((add a c) (suc (add a c)))))))
          (lemuld ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (add (add b d) (d2)) (suc (add a c)) (suc (add b d)) (add a c))
            (sylibr ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (suc (add (add b d) (d1))) (suc (add a c))) (le (add (add b d) (d2)) (suc (add a c))))
              (:conv (iff (le (add (add b d) (d2)) (suc (add a c))) (le (suc (add (add b d) (d1))) (suc (add a c))))
                (iff
                  (le
                    (add
                      (add b d)
                      (:unfold d2 () ()
                        (suc (d1))))
                    (suc (add a c)))
                  (le (suc (add (add b d) (d1))) (suc (add a c))))
                (ax_mp ((eq (add (add b d) (suc (d1))) (suc (add (add b d) (d1)))) (iff (le (add (add b d) (suc (d1))) (suc (add a c))) (le (suc (add (add b d) (d1))) (suc (add a c)))))
                  (leeq1 ((add (add b d) (suc (d1))) (suc (add (add b d) (d1))) (suc (add a c))))
                  (addS ((add b d) (d1)))))
              (sylib ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (add (add b d) (d1)) (add a c)) (le (suc (add (add b d) (d1))) (suc (add a c))))
                (lesuc ((add (add b d) (d1)) (add a c)))
                (sylibr ((an (le (pr a c) (pr b d)) (lt (add b d) (add a c))) (le (suc (add b d)) (add a c)) (le (add (add b d) (d1)) (add a c)))
                  (ax_mp ((eq (add (add b d) (d1)) (suc (add b d))) (iff (le (add (add b d) (d1)) (add a c)) (le (suc (add b d)) (add a c))))
                    (leeq1 ((add (add b d) (d1)) (suc (add b d)) (add a c)))
                    (add12 ((add b d))))
                  H2)))
            H2)))))))))

(local theorem prth ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (iff (eq (pr a c) (pr b d)) (an (eq a b) (eq c d)))
()
(:let H1 (leasymd ((eq (pr a c) (pr b d)) (add a c) (add b d))
  (syl ((eq (pr a c) (pr b d)) (le (pr a c) (pr b d)) (le (add a c) (add b d)))
    (prlem2 (a b c d))
    (eqle ((pr a c) (pr b d))))
  (syl ((eq (pr a c) (pr b d)) (le (pr b d) (pr a c)) (le (add b d) (add a c)))
    (prlem2 (b a d c))
    (eqler ((pr a c) (pr b d)))))
(:let H2 (sylib ((eq (pr a c) (pr b d)) (eq (add (div (mul (add b d) (suc (add b d))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)) (eq c d))
  (addcan2 ((div (mul (add b d) (suc (add b d))) (d2)) c d))
  (mpbid ((eq (pr a c) (pr b d)) (eq (add (div (mul (add a c) (suc (add a c))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)) (eq (add (div (mul (add b d) (suc (add b d))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)))
    (rsyl ((eq (pr a c) (pr b d)) (eq (add a c) (add b d)) (iff (eq (add (div (mul (add a c) (suc (add a c))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)) (eq (add (div (mul (add b d) (suc (add b d))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d))))
      H1
      (eqeq1d ((eq (add a c) (add b d)) (add (div (mul (add a c) (suc (add a c))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d))
        (addeq1d ((eq (add a c) (add b d)) (div (mul (add a c) (suc (add a c))) (d2)) (div (mul (add b d) (suc (add b d))) (d2)) c)
          (diveq1d ((eq (add a c) (add b d)) (mul (add a c) (suc (add a c))) (mul (add b d) (suc (add b d))) (d2))
            (muleqd ((eq (add a c) (add b d)) (add a c) (add b d) (suc (add a c)) (suc (add b d)))
              (id ((eq (add a c) (add b d))))
              (suceq ((add a c) (add b d))))))))
    (:conv (im (eq (pr a c) (pr b d)) (eq (add (div (mul (add a c) (suc (add a c))) (d2)) c) (add (div (mul (add b d) (suc (add b d))) (d2)) d)))
      (im
        (eq (pr a c) (pr b d))
        (eq
          (:sym (:unfold pr (a c) ()
            (add (div (mul (add a c) (suc (add a c))) (d2)) c)))
          (:sym (:unfold pr (b d) ()
            (add (div (mul (add b d) (suc (add b d))) (d2)) d)))))
      (id ((eq (pr a c) (pr b d)))))))
(ibii ((eq (pr a c) (pr b d)) (an (eq a b) (eq c d)))
  (iand ((eq (pr a c) (pr b d)) (eq a b) (eq c d))
    (sylib ((eq (pr a c) (pr b d)) (eq (add a c) (add b c)) (eq a b))
      (addcan1 (a b c))
      (eqtr4d ((eq (pr a c) (pr b d)) (add a c) (add b d) (add b c))
        H1
        (sylibr ((eq (pr a c) (pr b d)) (eq c d) (eq (add b c) (add b d)))
          (addcan2 (b c d))
          H2)))
    H2)
  (preqd ((an (eq a b) (eq c d)) a b c d)
    (anl ((eq a b) (eq c d)))
    (anr ((eq a b) (eq c d))))))))

(local theorem prltsuc ((a nat ()) (b nat ())) ()
  (lt (pr a b) (pr (suc (add a b)) (d0)))
()
(mpbir ((not (le (pr (suc (add a b)) (d0)) (pr a b))) (lt (pr a b) (pr (suc (add a b)) (d0))))
  (ltnle ((pr a b) (pr (suc (add a b)) (d0))))
  (mt ((le (add (suc (add a b)) (d0)) (add a b)) (le (pr (suc (add a b)) (d0)) (pr a b)))
    (prlem2 ((suc (add a b)) a (d0) b))
    (mpbi ((lt (add a b) (add (suc (add a b)) (d0))) (not (le (add (suc (add a b)) (d0)) (add a b))))
      (ltnle ((add a b) (add (suc (add a b)) (d0))))
      (mpbir ((lt (add a b) (suc (add a b))) (lt (add a b) (add (suc (add a b)) (d0))))
        (ax_mp ((eq (add (suc (add a b)) (d0)) (suc (add a b))) (iff (lt (add a b) (add (suc (add a b)) (d0))) (lt (add a b) (suc (add a b)))))
          (lteq2 ((add a b) (add (suc (add a b)) (d0)) (suc (add a b))))
          (add0 ((suc (add a b)))))
        (ltsucid ((add a b))))))))

(local theorem addlepr ((a nat ()) (b nat ())) ()
  (le (add a b) (pr a b))
()
(:conv (le (add a b) (pr a b))
  (le
    (add a b)
    (:unfold pr (a b) ()
      (add (div (mul (add a b) (suc (add a b))) (d2)) b)))
  (ax_mp ((le (div (mul (add a b) (suc (add a b))) (d2)) (add (div (mul (add a b) (suc (add a b))) (d2)) b)) (le (add a b) (add (div (mul (add a b) (suc (add a b))) (d2)) b)))
    (ax_mp ((le (add a b) (div (mul (add a b) (suc (add a b))) (d2))) (im (le (div (mul (add a b) (suc (add a b))) (d2)) (add (div (mul (add a b) (suc (add a b))) (d2)) b)) (le (add a b) (add (div (mul (add a b) (suc (add a b))) (d2)) b))))
      (letr ((add a b) (div (mul (add a b) (suc (add a b))) (d2)) (add (div (mul (add a b) (suc (add a b))) (d2)) b)))
      (cases ((eq (add a b) (d0)) (le (add a b) (div (mul (add a b) (suc (add a b))) (d2))))
        (mpbiri ((eq (add a b) (d0)) (le (d0) (div (mul (add a b) (suc (add a b))) (d2))) (le (add a b) (div (mul (add a b) (suc (add a b))) (d2))))
          (le01 ((div (mul (add a b) (suc (add a b))) (d2))))
          (leeq1 ((add a b) (d0) (div (mul (add a b) (suc (add a b))) (d2)))))
        (sylibr ((not (eq (add a b) (d0))) (le (mul (add a b) (d2)) (mul (add a b) (suc (add a b)))) (le (add a b) (div (mul (add a b) (suc (add a b))) (d2))))
          (ax_mp ((ne (d2) (d0)) (iff (le (add a b) (div (mul (add a b) (suc (add a b))) (d2))) (le (mul (add a b) (d2)) (mul (add a b) (suc (add a b))))))
            (ledivmul2 ((add a b) (mul (add a b) (suc (add a b))) (d2)))
            (d2ne0 ()))
          (sylbi ((not (eq (add a b) (d0))) (le (suc (d1)) (suc (add a b))) (le (mul (add a b) (d2)) (mul (add a b) (suc (add a b)))))
            (:conv (iff (not (eq (add a b) (d0))) (le (suc (d1)) (suc (add a b))))
              (iff
                (:sym (:unfold ne ((add a b) (d0)) ()
                  (not (eq (add a b) (d0)))))
                (le (suc (d1)) (suc (add a b))))
              (ax_mp ((iff (le (d1) (add a b)) (le (suc (d1)) (suc (add a b)))) (iff (ne (add a b) (d0)) (le (suc (d1)) (suc (add a b)))))
                (ax_mp ((iff (le (d1) (add a b)) (ne (add a b) (d0))) (im (iff (le (d1) (add a b)) (le (suc (d1)) (suc (add a b)))) (iff (ne (add a b) (d0)) (le (suc (d1)) (suc (add a b))))))
                  (bitr3 ((ne (add a b) (d0)) (le (d1) (add a b)) (le (suc (d1)) (suc (add a b)))))
                  (le11 ((add a b))))
                (lesuc ((d1) (add a b)))))
            (:conv (im (le (suc (d1)) (suc (add a b))) (le (mul (add a b) (d2)) (mul (add a b) (suc (add a b)))))
              (im
                (le (suc (d1)) (suc (add a b)))
                (le
                  (mul
                    (add a b)
                    (:unfold d2 () ()
                      (suc (d1))))
                  (mul (add a b) (suc (add a b)))))
              (lemul2a ((add a b) (suc (d1)) (suc (add a b)))))))))
    (leaddid1 ((div (mul (add a b) (suc (add a b))) (d2)) b)))))

(local theorem leprid1 ((a nat ()) (b nat ())) ()
  (le a (pr a b))
()
(ax_mp ((le (add a b) (pr a b)) (le a (pr a b)))
  (ax_mp ((le a (add a b)) (im (le (add a b) (pr a b)) (le a (pr a b))))
    (letr (a (add a b) (pr a b)))
    (leaddid1 (a b)))
  (addlepr (a b))))

(local theorem leprid2 ((a nat ()) (b nat ())) ()
  (le b (pr a b))
()
(ax_mp ((le (add a b) (pr a b)) (le b (pr a b)))
  (ax_mp ((le b (add a b)) (im (le (add a b) (pr a b)) (le b (pr a b))))
    (letr (b (add a b) (pr a b)))
    (leaddid2 (b a)))
  (addlepr (a b))))

(local theorem lepr1tr ((a nat ()) (b nat ()) (c nat ()))
  ((h (le a b)))
  (le a (pr b c))
()
(ax_mp ((le b (pr b c)) (le a (pr b c)))
  (ax_mp ((le a b) (im (le b (pr b c)) (le a (pr b c))))
    (letr (a b (pr b c)))
    h)
  (leprid1 (b c))))

(local theorem lepr2tr ((a nat ()) (b nat ()) (c nat ()))
  ((h (le a c)))
  (le a (pr b c))
()
(ax_mp ((le c (pr b c)) (le a (pr b c)))
  (ax_mp ((le a c) (im (le c (pr b c)) (le a (pr b c))))
    (letr (a c (pr b c)))
    h)
  (leprid2 (b c))))

(local theorem ltpr1tr ((a nat ()) (b nat ()) (c nat ()))
  ((h (lt a b)))
  (lt a (pr b c))
()
(ax_mp ((le b (pr b c)) (lt a (pr b c)))
  (ax_mp ((lt a b) (im (le b (pr b c)) (lt a (pr b c))))
    (ltletr (a b (pr b c)))
    h)
  (leprid1 (b c))))

(local theorem ltpr2tr ((a nat ()) (b nat ()) (c nat ()))
  ((h (lt a c)))
  (lt a (pr b c))
()
(ax_mp ((le c (pr b c)) (lt a (pr b c)))
  (ax_mp ((lt a c) (im (le c (pr b c)) (lt a (pr b c))))
    (ltletr (a c (pr b c)))
    h)
  (leprid2 (b c))))

(local theorem lepr1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a b) (le (pr a c) (pr b c)))
()
(ibii ((le a b) (le (pr a c) (pr b c)))
  (syla ((le a b) (not (le (pr a c) (pr b c))) (le (pr a c) (pr b c)) (le (pr a c) (pr b c)))
    (contra ((le (pr a c) (pr b c))))
    (syl ((an (le a b) (not (le (pr a c) (pr b c)))) (eq (pr a c) (pr b c)) (le (pr a c) (pr b c)))
      (eqle ((pr a c) (pr b c)))
      (preq1d ((an (le a b) (not (le (pr a c) (pr b c)))) a b c)
        (leasymd ((an (le a b) (not (le (pr a c) (pr b c)))) a b)
          (anl ((le a b) (not (le (pr a c) (pr b c)))))
          (sylibr ((an (le a b) (not (le (pr a c) (pr b c)))) (le (add b c) (add a c)) (le b a))
            (leadd1 (b a c))
            (syl ((an (le a b) (not (le (pr a c) (pr b c)))) (le (pr b c) (pr a c)) (le (add b c) (add a c)))
              (prlem2 (b a c c))
              (anwr ((le a b) (not (le (pr a c) (pr b c))) (le (pr b c) (pr a c)))
                (:conv (im (not (le (pr a c) (pr b c))) (le (pr b c) (pr a c)))
                  (:sym (:unfold or ((le (pr a c) (pr b c)) (le (pr b c) (pr a c))) ()
                    (im (not (le (pr a c) (pr b c))) (le (pr b c) (pr a c)))))
                  (leorle ((pr a c) (pr b c)))))))))))
  (sylibr ((le (pr a c) (pr b c)) (le (add a c) (add b c)) (le a b))
    (leadd1 (a b c))
    (prlem2 (a b c c)))))

(local theorem lepr2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le b c) (le (pr a b) (pr a c)))
()
(ibii ((le b c) (le (pr a b) (pr a c)))
  (syla ((le b c) (not (le (pr a b) (pr a c))) (le (pr a b) (pr a c)) (le (pr a b) (pr a c)))
    (contra ((le (pr a b) (pr a c))))
    (syl ((an (le b c) (not (le (pr a b) (pr a c)))) (eq (pr a b) (pr a c)) (le (pr a b) (pr a c)))
      (eqle ((pr a b) (pr a c)))
      (preq2d ((an (le b c) (not (le (pr a b) (pr a c)))) a b c)
        (leasymd ((an (le b c) (not (le (pr a b) (pr a c)))) b c)
          (anl ((le b c) (not (le (pr a b) (pr a c)))))
          (sylibr ((an (le b c) (not (le (pr a b) (pr a c)))) (le (add a c) (add a b)) (le c b))
            (leadd2 (a c b))
            (syl ((an (le b c) (not (le (pr a b) (pr a c)))) (le (pr a c) (pr a b)) (le (add a c) (add a b)))
              (prlem2 (a a c b))
              (anwr ((le b c) (not (le (pr a b) (pr a c))) (le (pr a c) (pr a b)))
                (:conv (im (not (le (pr a b) (pr a c))) (le (pr a c) (pr a b)))
                  (:sym (:unfold or ((le (pr a b) (pr a c)) (le (pr a c) (pr a b))) ()
                    (im (not (le (pr a b) (pr a c))) (le (pr a c) (pr a b)))))
                  (leorle ((pr a b) (pr a c)))))))))))
  (sylibr ((le (pr a b) (pr a c)) (le (add a b) (add a c)) (le b c))
    (leadd2 (a b c))
    (prlem2 (a a b c)))))

(local theorem ltpr1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a b) (lt (pr a c) (pr b c)))
()
(bitr4gi ((not (le b a)) (not (le (pr b c) (pr a c))) (lt a b) (lt (pr a c) (pr b c)))
  (ltnle (a b))
  (ltnle ((pr a c) (pr b c)))
  (ax_mp ((iff (le b a) (le (pr b c) (pr a c))) (iff (not (le b a)) (not (le (pr b c) (pr a c)))))
    (noteq ((le b a) (le (pr b c) (pr a c))))
    (lepr1 (b a c)))))

(local theorem ltpr2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt b c) (lt (pr a b) (pr a c)))
()
(bitr4gi ((not (le c b)) (not (le (pr a c) (pr a b))) (lt b c) (lt (pr a b) (pr a c)))
  (ltnle (b c))
  (ltnle ((pr a b) (pr a c)))
  (ax_mp ((iff (le c b) (le (pr a c) (pr a b))) (iff (not (le c b)) (not (le (pr a c) (pr a b)))))
    (noteq ((le c b) (le (pr a c) (pr a b))))
    (lepr2 (a c b)))))

(def fst ((a nat ())) (nat ())
((x nat) (y nat))
(the (ab x (ex y (eq a (pr x y))))))

(local theorem fsteqd ((_G wff ()) (a1 nat ()) (a2 nat ()))
  ((ha (im _G (eq a1 a2))))
  (im _G (eq (fst a1) (fst a2)))
((x nat) (y nat))
(:conv (im _G (eq (fst a1) (fst a2)))
  (im
    _G
    (eq
      (:unfold fst (a1) (x y)
        (the (ab x (ex y (eq a1 (pr x y))))))
      (:unfold fst (a2) (x y)
        (the (ab x (ex y (eq a2 (pr x y))))))))
  (theeqd (_G (ab x (ex y (eq a1 (pr x y)))) (ab x (ex y (eq a2 (pr x y)))))
    (abeqd (_G x (ex y (eq a1 (pr x y))) (ex y (eq a2 (pr x y))))
      (exeqd (_G y (eq a1 (pr x y)) (eq a2 (pr x y)))
        (eqeqd (_G a1 a2 (pr x y) (pr x y))
          ha
          (eqidd (_G (pr x y)))))))))

(local theorem fsteq ((a1 nat ()) (a2 nat ())) ()
  (im (eq a1 a2) (eq (fst a1) (fst a2)))
()
(fsteqd ((eq a1 a2) a1 a2)
  (id ((eq a1 a2)))))

(def snd ((a nat ())) (nat ())
((x nat) (y nat))
(the (ab y (ex x (eq a (pr x y))))))

(local theorem sndeqd ((_G wff ()) (a1 nat ()) (a2 nat ()))
  ((ha (im _G (eq a1 a2))))
  (im _G (eq (snd a1) (snd a2)))
((x nat) (y nat))
(:conv (im _G (eq (snd a1) (snd a2)))
  (im
    _G
    (eq
      (:unfold snd (a1) (x y)
        (the (ab y (ex x (eq a1 (pr x y))))))
      (:unfold snd (a2) (x y)
        (the (ab y (ex x (eq a2 (pr x y))))))))
  (theeqd (_G (ab y (ex x (eq a1 (pr x y)))) (ab y (ex x (eq a2 (pr x y)))))
    (abeqd (_G y (ex x (eq a1 (pr x y))) (ex x (eq a2 (pr x y))))
      (exeqd (_G x (eq a1 (pr x y)) (eq a2 (pr x y)))
        (eqeqd (_G a1 a2 (pr x y) (pr x y))
          ha
          (eqidd (_G (pr x y)))))))))

(local theorem sndeq ((a1 nat ()) (a2 nat ())) ()
  (im (eq a1 a2) (eq (snd a1) (snd a2)))
()
(sndeqd ((eq a1 a2) a1 a2)
  (id ((eq a1 a2)))))

(theorem pr0 () ()
  (eq (pr (d0) (d0)) (d0))
()
(:let H1 (add0 ((d0)))
(:conv (eq (pr (d0) (d0)) (d0))
  (eq
    (:unfold pr ((d0) (d0)) ()
      (add (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)))
    (d0))
  (ax_mp ((eq (add (d0) (d0)) (d0)) (eq (add (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)) (d0)))
    (ax_mp ((eq (add (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)) (add (d0) (d0))) (im (eq (add (d0) (d0)) (d0)) (eq (add (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)) (d0))))
      (eqtr ((add (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)) (add (d0) (d0)) (d0)))
      (ax_mp ((eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)) (eq (add (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)) (add (d0) (d0))))
        (addeq1 ((div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0) (d0)))
        (ax_mp ((eq (div (d0) (d2)) (d0)) (eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0)))
          (ax_mp ((eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (div (d0) (d2))) (im (eq (div (d0) (d2)) (d0)) (eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (d0))))
            (eqtr ((div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (div (d0) (d2)) (d0)))
            (ax_mp ((eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d0)) (eq (div (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d2)) (div (d0) (d2))))
              (diveq1 ((mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d0) (d2)))
              (ax_mp ((eq (mul (d0) (suc (add (d0) (d0)))) (d0)) (eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d0)))
                (ax_mp ((eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (mul (d0) (suc (add (d0) (d0))))) (im (eq (mul (d0) (suc (add (d0) (d0)))) (d0)) (eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (d0))))
                  (eqtr ((mul (add (d0) (d0)) (suc (add (d0) (d0)))) (mul (d0) (suc (add (d0) (d0)))) (d0)))
                  (ax_mp ((eq (add (d0) (d0)) (d0)) (eq (mul (add (d0) (d0)) (suc (add (d0) (d0)))) (mul (d0) (suc (add (d0) (d0))))))
                    (muleq1 ((add (d0) (d0)) (d0) (suc (add (d0) (d0)))))
                    H1))
                (mul01 ((suc (add (d0) (d0))))))))
          (div01 ((d2))))))
    H1))))

(local theorem expr ((a nat ()) (x nat) (y nat)) ()
  (ex x (ex y (eq a (pr x y))))
((m nat) (n nat) (u nat) (v nat) (z nat))
(:let H1 (addS ((div (mul (add x y) (suc (add x y))) (d2)) y))
(:let H2 (:conv (eq (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (suc (pr x y)))
  (eq
    (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))
    (suc
      (:unfold pr (x y) ()
        (add (div (mul (add x y) (suc (add x y))) (d2)) y))))
  H1)
(:let H3 (syl6eq ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add x y) (add (d0) y) y)
  (add01 (y))
  (addeq1d ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) x (d0) y)
    (anwll ((an (eq v (pr x y)) (eq x (d0))) (eq m (suc y)) (eq n (d0)) (eq x (d0)))
      (anr ((eq v (pr x y)) (eq x (d0)))))))
(:let H4 (anr ((an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))))
(:let H5 (syl6eq ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add m n) (add (suc y) (d0)) (suc y))
  (add0 ((suc y)))
  (addeqd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) m (suc y) n (d0))
    (anlr ((an (eq v (pr x y)) (eq x (d0))) (eq m (suc y)) (eq n (d0))))
    H4))
(:let H6 (anr ((an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))))
(:let H7 (eqtr4d ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (add x y) (add z (suc y)) (add m n))
  (syl6eq ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (add x y) (add (suc z) y) (add z (suc y)))
    (addSass (z y))
    (anwll ((an (eq v (pr x y)) (eq x (suc z))) (eq m z) (eq n (suc y)) (eq (add x y) (add (suc z) y)))
      (anwr ((eq v (pr x y)) (eq x (suc z)) (eq (add x y) (add (suc z) y)))
        (addeq1 (x (suc z) y)))))
  (addeqd ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) m z n (suc y))
    (anlr ((an (eq v (pr x y)) (eq x (suc z))) (eq m z) (eq n (suc y))))
    H6))
(ind (u v a (ex x (ex y (eq u (pr x y)))) (ex x (ex y (eq (d0) (pr x y)))) (ex x (ex y (eq a (pr x y)))) (ex x (ex y (eq v (pr x y)))) (ex x (ex y (eq (suc v) (pr x y)))))
  (exeqd ((eq u (d0)) x (ex y (eq u (pr x y))) (ex y (eq (d0) (pr x y))))
    (exeqd ((eq u (d0)) y (eq u (pr x y)) (eq (d0) (pr x y)))
      (eqeq1 (u (d0) (pr x y)))))
  (exeqd ((eq u v) x (ex y (eq u (pr x y))) (ex y (eq v (pr x y))))
    (exeqd ((eq u v) y (eq u (pr x y)) (eq v (pr x y)))
      (eqeq1 (u v (pr x y)))))
  (exeqd ((eq u (suc v)) x (ex y (eq u (pr x y))) (ex y (eq (suc v) (pr x y))))
    (exeqd ((eq u (suc v)) y (eq u (pr x y)) (eq (suc v) (pr x y)))
      (eqeq1 (u (suc v) (pr x y)))))
  (exeqd ((eq u a) x (ex y (eq u (pr x y))) (ex y (eq a (pr x y))))
    (exeqd ((eq u a) y (eq u (pr x y)) (eq a (pr x y)))
      (eqeq1 (u a (pr x y)))))
  (trud ((ex x (ex y (eq (d0) (pr x y)))))
    (iexde (x (wtru) (d0) (ex y (eq (d0) (pr x y))))
      (iexde (y (an (wtru) (eq x (d0))) (d0) (eq (d0) (pr x y)))
        (syl5eqr ((an (an (wtru) (eq x (d0))) (eq y (d0))) (d0) (pr (d0) (d0)) (pr x y))
          (pr0 ())
          (eqcomd ((an (an (wtru) (eq x (d0))) (eq y (d0))) (pr x y) (pr (d0) (d0)))
            (preqd ((an (an (wtru) (eq x (d0))) (eq y (d0))) x (d0) y (d0))
              (anlr ((wtru) (eq x (d0)) (eq y (d0))))
              (anr ((an (wtru) (eq x (d0))) (eq y (d0))))))))))
  (sylib ((ex x (ex y (eq v (pr x y)))) (ex m (ex n (eq (suc v) (pr m n)))) (ex x (ex y (eq (suc v) (pr x y)))))
    (cbvex (m x (ex n (eq (suc v) (pr m n))) (ex y (eq (suc v) (pr x y))))
      (cbvexd (n y (eq m x) (eq (suc v) (pr m n)) (eq (suc v) (pr x y)))
        (eqeq2d ((an (eq m x) (eq n y)) (suc v) (pr m n) (pr x y))
          (preqd ((an (eq m x) (eq n y)) m x n y)
            (anl ((eq m x) (eq n y)))
            (anr ((eq m x) (eq n y)))))))
    (eex (x (ex y (eq v (pr x y))) (ex m (ex n (eq (suc v) (pr m n)))))
      (eex (y (eq v (pr x y)) (ex m (ex n (eq (suc v) (pr m n)))))
        (casesd ((eq v (pr x y)) (eq x (d0)) (ex m (ex n (eq (suc v) (pr m n)))))
          (exp ((eq v (pr x y)) (eq x (d0)) (ex m (ex n (eq (suc v) (pr m n)))))
            (iexde (m (an (eq v (pr x y)) (eq x (d0))) (suc y) (ex n (eq (suc v) (pr m n))))
              (iexde (n (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (d0) (eq (suc v) (pr m n)))
                (eqtrd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (suc v) (suc (pr x y)) (pr m n))
                  (suceqd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) v (pr x y))
                    (an3l ((eq v (pr x y)) (eq x (d0)) (eq m (suc y)) (eq n (d0)))))
                  (syl5eqr ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (suc (pr x y)) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (pr m n))
                    H2
                    (eqtr4d ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (div (mul (suc y) (suc (suc y))) (d2)) (pr m n))
                      (sylib ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (eq (mul (d2) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))) (mul (d2) (div (mul (suc y) (suc (suc y))) (d2)))) (eq (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (div (mul (suc y) (suc (suc y))) (d2))))
                        (ax_mp ((ne (d2) (d0)) (iff (eq (mul (d2) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))) (mul (d2) (div (mul (suc y) (suc (suc y))) (d2)))) (eq (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (div (mul (suc y) (suc (suc y))) (d2)))))
                          (mulcan2 ((d2) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (div (mul (suc y) (suc (suc y))) (d2))))
                          (d2ne0 ()))
                        (syl5eq ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (mul (d2) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))) (add (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (d2) (suc y))) (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))))
                          (muladd ((d2) (div (mul (add x y) (suc (add x y))) (d2)) (suc y)))
                          (syl6eqr ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (d2) (suc y))) (mul (suc (suc y)) (suc y)) (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))))
                            (ax_mp ((eq (mul (suc y) (suc (suc y))) (mul (suc (suc y)) (suc y))) (eq (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc (suc y)) (suc y))))
                              (ax_mp ((eq (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc y) (suc (suc y)))) (im (eq (mul (suc y) (suc (suc y))) (mul (suc (suc y)) (suc y))) (eq (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc (suc y)) (suc y)))))
                                (eqtr ((mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc y) (suc (suc y))) (mul (suc (suc y)) (suc y))))
                                (ax_mp ((dvd (d2) (mul (suc y) (suc (suc y)))) (eq (mul (d2) (div (mul (suc y) (suc (suc y))) (d2))) (mul (suc y) (suc (suc y)))))
                                  (muldiv3 ((mul (suc y) (suc (suc y))) (d2)))
                                  (prlem1 ((suc y)))))
                              (mulcom ((suc y) (suc (suc y)))))
                            (eqtrd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (d2) (suc y))) (add (mul y (suc y)) (mul (d2) (suc y))) (mul (suc (suc y)) (suc y)))
                              (addeq1d ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul y (suc y)) (mul (d2) (suc y)))
                                (syl5eq ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (add x y) (suc (add x y))) (mul y (suc y)))
                                  (ax_mp ((dvd (d2) (mul (add x y) (suc (add x y)))) (eq (mul (d2) (div (mul (add x y) (suc (add x y))) (d2))) (mul (add x y) (suc (add x y)))))
                                    (muldiv3 ((mul (add x y) (suc (add x y))) (d2)))
                                    (prlem1 ((add x y))))
                                  (muleqd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add x y) y (suc (add x y)) (suc y))
                                    H3
                                    (suceqd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add x y) y)
                                      H3))))
                              (syl5eqr ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add (mul y (suc y)) (mul (d2) (suc y))) (mul (add y (d2)) (suc y)) (mul (suc (suc y)) (suc y)))
                                (addmul (y (d2) (suc y)))
                                (a1i ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (eq (mul (add y (d2)) (suc y)) (mul (suc (suc y)) (suc y))))
                                  (:conv (eq (mul (add y (d2)) (suc y)) (mul (suc (suc y)) (suc y)))
                                    (eq
                                      (mul
                                        (add
                                          y
                                          (:unfold d2 () ()
                                            (suc (d1))))
                                        (suc y))
                                      (mul (suc (suc y)) (suc y)))
                                    (ax_mp ((eq (add y (suc (d1))) (suc (suc y))) (eq (mul (add y (suc (d1))) (suc y)) (mul (suc (suc y)) (suc y))))
                                      (muleq1 ((add y (suc (d1))) (suc (suc y)) (suc y)))
                                      (ax_mp ((eq (suc (add y (d1))) (suc (suc y))) (eq (add y (suc (d1))) (suc (suc y))))
                                        (ax_mp ((eq (add y (suc (d1))) (suc (add y (d1)))) (im (eq (suc (add y (d1))) (suc (suc y))) (eq (add y (suc (d1))) (suc (suc y)))))
                                          (eqtr ((add y (suc (d1))) (suc (add y (d1))) (suc (suc y))))
                                          (addS (y (d1))))
                                        (ax_mp ((eq (add y (d1)) (suc y)) (eq (suc (add y (d1))) (suc (suc y))))
                                          (suceq ((add y (d1)) (suc y)))
                                          (add12 (y))))))))))))
                      (syl6eq ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (pr m n) (add (div (mul (suc y) (suc (suc y))) (d2)) (d0)) (div (mul (suc y) (suc (suc y))) (d2)))
                        (add0 ((div (mul (suc y) (suc (suc y))) (d2))))
                        (:conv (im (an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (eq (pr m n) (add (div (mul (suc y) (suc (suc y))) (d2)) (d0))))
                          (im
                            (an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0)))
                            (eq
                              (:unfold pr (m n) ()
                                (add (div (mul (add m n) (suc (add m n))) (d2)) n))
                              (add (div (mul (suc y) (suc (suc y))) (d2)) (d0))))
                          (addeqd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (div (mul (add m n) (suc (add m n))) (d2)) (div (mul (suc y) (suc (suc y))) (d2)) n (d0))
                            (diveq1d ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (mul (add m n) (suc (add m n))) (mul (suc y) (suc (suc y))) (d2))
                              (muleqd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add m n) (suc y) (suc (add m n)) (suc (suc y)))
                                H5
                                (suceqd ((an (an (an (eq v (pr x y)) (eq x (d0))) (eq m (suc y))) (eq n (d0))) (add m n) (suc y))
                                  H5)))
                            H4)))))))))
          (syl5bi ((eq v (pr x y)) (not (eq x (d0))) (ex z (eq x (suc z))) (ex m (ex n (eq (suc v) (pr m n)))))
            (:conv (iff (not (eq x (d0))) (ex z (eq x (suc z))))
              (iff
                (:sym (:unfold ne (x (d0)) ()
                  (not (eq x (d0)))))
                (ex z (eq x (suc z))))
              (exsuc (z x)))
            (eexda (z (eq v (pr x y)) (eq x (suc z)) (ex m (ex n (eq (suc v) (pr m n)))))
              (iexde (m (an (eq v (pr x y)) (eq x (suc z))) z (ex n (eq (suc v) (pr m n))))
                (iexde (n (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (suc y) (eq (suc v) (pr m n)))
                  (eqtrd ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (suc v) (suc (pr x y)) (pr m n))
                    (anw3l ((eq v (pr x y)) (eq x (suc z)) (eq m z) (eq n (suc y)) (eq (suc v) (suc (pr x y))))
                      (suceq (v (pr x y))))
                    (syl5eqr ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (suc (pr x y)) (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (pr m n))
                      H2
                      (:conv (im (an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (eq (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y)) (pr m n)))
                        (im
                          (an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y)))
                          (eq
                            (add (div (mul (add x y) (suc (add x y))) (d2)) (suc y))
                            (:unfold pr (m n) ()
                              (add (div (mul (add m n) (suc (add m n))) (d2)) n))))
                        (addeqd ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (div (mul (add x y) (suc (add x y))) (d2)) (div (mul (add m n) (suc (add m n))) (d2)) (suc y) n)
                          (diveq1d ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (mul (add x y) (suc (add x y))) (mul (add m n) (suc (add m n))) (d2))
                            (muleqd ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (add x y) (add m n) (suc (add x y)) (suc (add m n)))
                              H7
                              (suceqd ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) (add x y) (add m n))
                                H7)))
                          (eqcomd ((an (an (an (eq v (pr x y)) (eq x (suc z))) (eq m z)) (eq n (suc y))) n (suc y))
                            H6))))))))))))))))))))))

(local theorem splitpr1 ((G wff ()) (a nat ()) (p wff ()) (x nat) (y nat))
  ((h (im G (im (eq a (pr x y)) p))))
  (im G p)
()
(mpi (G (ex x (ex y (eq a (pr x y)))) p)
  (expr (a x y))
  (eexd (x G (ex y (eq a (pr x y))) p)
    (eexd (y G (eq a (pr x y)) p)
      h))))

(local theorem splitpr2 ((G wff ()) (a nat ()) (p wff ()) (x nat ()) (y nat ()) (yz nat ()) (z nat ()))
  ((h (im G (im (eq a (pr x (pr y z))) p))))
  (im G (im (eq yz (pr y z)) (im (eq a (pr x yz)) p)))
()
(exp (G (eq yz (pr y z)) (im (eq a (pr x yz)) p))
  (exp ((an G (eq yz (pr y z))) (eq a (pr x yz)) p)
    (sylc ((an (an G (eq yz (pr y z))) (eq a (pr x yz))) G (eq a (pr x (pr y z))) p)
      h
      (anll (G (eq yz (pr y z)) (eq a (pr x yz))))
      (eqtrd ((an (an G (eq yz (pr y z))) (eq a (pr x yz))) a (pr x yz) (pr x (pr y z)))
        (anr ((an G (eq yz (pr y z))) (eq a (pr x yz))))
        (preq2d ((an (an G (eq yz (pr y z))) (eq a (pr x yz))) x yz (pr y z))
          (anlr (G (eq yz (pr y z)) (eq a (pr x yz))))))))))

(theorem fstpr ((a nat ()) (b nat ())) ()
  (eq (fst (pr a b)) a)
((x nat) (y nat))
(trud ((eq (fst (pr a b)) a))
  (:conv (im (wtru) (eq (fst (pr a b)) a))
    (im
      (wtru)
      (eq
        (:unfold fst ((pr a b)) (x y)
          (the (ab x (ex y (eq (pr a b) (pr x y))))))
        a))
    (eqtheabd ((wtru) a x (ex y (eq (pr a b) (pr x y))))
      (a1i ((wtru) (iff (ex y (eq (pr a b) (pr x y))) (eq x a)))
        (ibii ((ex y (eq (pr a b) (pr x y))) (eq x a))
          (eex (y (eq (pr a b) (pr x y)) (eq x a))
            (sylbi ((eq (pr a b) (pr x y)) (an (eq a x) (eq b y)) (eq x a))
              (prth (a x b y))
              (eqcomd ((an (eq a x) (eq b y)) a x)
                (anl ((eq a x) (eq b y))))))
          (rsyl ((eq x a) (eq (pr a b) (pr x b)) (ex y (eq (pr a b) (pr x y))))
            (eqcomd ((eq x a) (pr x b) (pr a b))
              (preq1 (x a b)))
            (iexe (y b (eq (pr a b) (pr x y)) (eq (pr a b) (pr x b)))
              (eqeq2d ((eq y b) (pr a b) (pr x y) (pr x b))
                (preq2 (x y b)))))))))))

(theorem sndpr ((a nat ()) (b nat ())) ()
  (eq (snd (pr a b)) b)
((x nat) (y nat))
(trud ((eq (snd (pr a b)) b))
  (:conv (im (wtru) (eq (snd (pr a b)) b))
    (im
      (wtru)
      (eq
        (:unfold snd ((pr a b)) (x y)
          (the (ab y (ex x (eq (pr a b) (pr x y))))))
        b))
    (eqtheabd ((wtru) b y (ex x (eq (pr a b) (pr x y))))
      (a1i ((wtru) (iff (ex x (eq (pr a b) (pr x y))) (eq y b)))
        (ibii ((ex x (eq (pr a b) (pr x y))) (eq y b))
          (eex (x (eq (pr a b) (pr x y)) (eq y b))
            (sylbi ((eq (pr a b) (pr x y)) (an (eq a x) (eq b y)) (eq y b))
              (prth (a x b y))
              (eqcomd ((an (eq a x) (eq b y)) b y)
                (anr ((eq a x) (eq b y))))))
          (rsyl ((eq y b) (eq (pr a b) (pr a y)) (ex x (eq (pr a b) (pr x y))))
            (eqcomd ((eq y b) (pr a y) (pr a b))
              (preq2 (a y b)))
            (iexe (x a (eq (pr a b) (pr x y)) (eq (pr a b) (pr a y)))
              (eqeq2d ((eq x a) (pr a b) (pr x y) (pr a y))
                (preq1 (x a y)))))))))))

(theorem fstsnd ((a nat ())) ()
  (eq (pr (fst a) (snd a)) a)
((x nat) (y nat))
(ax_mp ((ex x (ex y (eq a (pr x y)))) (eq (pr (fst a) (snd a)) a))
  (eex (x (ex y (eq a (pr x y))) (eq (pr (fst a) (snd a)) a))
    (eex (y (eq a (pr x y)) (eq (pr (fst a) (snd a)) a))
      (eqtr4d ((eq a (pr x y)) (pr (fst a) (snd a)) (pr x y) a)
        (preqd ((eq a (pr x y)) (fst a) x (snd a) y)
          (syl6eq ((eq a (pr x y)) (fst a) (fst (pr x y)) x)
            (fstpr (x y))
            (fsteq (a (pr x y))))
          (syl6eq ((eq a (pr x y)) (snd a) (snd (pr x y)) y)
            (sndpr (x y))
            (sndeq (a (pr x y)))))
        (id ((eq a (pr x y)))))))
  (expr (a x y))))

(local theorem fstleid ((a nat ())) ()
  (le (fst a) a)
()
(mpbi ((le (fst a) (pr (fst a) (snd a))) (le (fst a) a))
  (ax_mp ((eq (pr (fst a) (snd a)) a) (iff (le (fst a) (pr (fst a) (snd a))) (le (fst a) a)))
    (leeq2 ((fst a) (pr (fst a) (snd a)) a))
    (fstsnd (a)))
  (leprid1 ((fst a) (snd a)))))

(local theorem sndleid ((a nat ())) ()
  (le (snd a) a)
()
(mpbi ((le (snd a) (pr (fst a) (snd a))) (le (snd a) a))
  (ax_mp ((eq (pr (fst a) (snd a)) a) (iff (le (snd a) (pr (fst a) (snd a))) (le (snd a) a)))
    (leeq2 ((snd a) (pr (fst a) (snd a)) a))
    (fstsnd (a)))
  (leprid2 ((fst a) (snd a)))))

(local theorem eqrd2 ((A set ()) (B set ()) (G wff ()) (x nat) (y nat))
  ((h (im G (iff (el (pr x y) A) (el (pr x y) B)))))
  (im G (eqs A B))
((p nat))
(eqrd (A B G p)
  (mpi (G (ex x (ex y (eq p (pr x y)))) (iff (el p A) (el p B)))
    (expr (p x y))
    (eexd (x G (ex y (eq p (pr x y))) (iff (el p A) (el p B)))
      (eexd (y G (eq p (pr x y)) (iff (el p A) (el p B)))
        (syl5ibrcom (G (iff (el p A) (el p B)) (eq p (pr x y)) (iff (el (pr x y) A) (el (pr x y) B)))
          (bieqd ((eq p (pr x y)) (el p A) (el (pr x y) A) (el p B) (el (pr x y) B))
            (eleq1 (A p (pr x y)))
            (eleq1 (B p (pr x y))))
          h))))))

(local theorem eqri2 ((A set ()) (B set ()) (x nat) (y nat))
  ((h (iff (el (pr x y) A) (el (pr x y) B))))
  (eqs A B)
()
(trud ((eqs A B))
  (eqrd2 (A B (wtru) x y)
    (a1i ((wtru) (iff (el (pr x y) A) (el (pr x y) B)))
      h))))

(local theorem fst0 () ()
  (eq (fst (d0)) (d0))
()
(ax_mp ((eq (fst (pr (d0) (d0))) (d0)) (eq (fst (d0)) (d0)))
  (ax_mp ((eq (fst (pr (d0) (d0))) (fst (d0))) (im (eq (fst (pr (d0) (d0))) (d0)) (eq (fst (d0)) (d0))))
    (eqtr3 ((fst (d0)) (fst (pr (d0) (d0))) (d0)))
    (ax_mp ((eq (pr (d0) (d0)) (d0)) (eq (fst (pr (d0) (d0))) (fst (d0))))
      (fsteq ((pr (d0) (d0)) (d0)))
      (pr0 ())))
  (fstpr ((d0) (d0)))))

(local theorem snd0 () ()
  (eq (snd (d0)) (d0))
()
(ax_mp ((eq (snd (pr (d0) (d0))) (d0)) (eq (snd (d0)) (d0)))
  (ax_mp ((eq (snd (pr (d0) (d0))) (snd (d0))) (im (eq (snd (pr (d0) (d0))) (d0)) (eq (snd (d0)) (d0))))
    (eqtr3 ((snd (d0)) (snd (pr (d0) (d0))) (d0)))
    (ax_mp ((eq (pr (d0) (d0)) (d0)) (eq (snd (pr (d0) (d0))) (snd (d0))))
      (sndeq ((pr (d0) (d0)) (d0)))
      (pr0 ())))
  (sndpr ((d0) (d0)))))

(def pi11 ((n nat ())) (nat ())
()
(fst (fst n)))

(local theorem pi11eqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (pi11 n1) (pi11 n2)))
()
(:conv (im _G (eq (pi11 n1) (pi11 n2)))
  (im
    _G
    (eq
      (:unfold pi11 (n1) ()
        (fst (fst n1)))
      (:unfold pi11 (n2) ()
        (fst (fst n2)))))
  (fsteqd (_G (fst n1) (fst n2))
    (fsteqd (_G n1 n2)
      hn))))

(local theorem pi11eq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (pi11 n1) (pi11 n2)))
()
(pi11eqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def pi12 ((n nat ())) (nat ())
()
(snd (fst n)))

(local theorem pi12eqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (pi12 n1) (pi12 n2)))
()
(:conv (im _G (eq (pi12 n1) (pi12 n2)))
  (im
    _G
    (eq
      (:unfold pi12 (n1) ()
        (snd (fst n1)))
      (:unfold pi12 (n2) ()
        (snd (fst n2)))))
  (sndeqd (_G (fst n1) (fst n2))
    (fsteqd (_G n1 n2)
      hn))))

(local theorem pi12eq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (pi12 n1) (pi12 n2)))
()
(pi12eqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def pi21 ((n nat ())) (nat ())
()
(fst (snd n)))

(local theorem pi21eqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (pi21 n1) (pi21 n2)))
()
(:conv (im _G (eq (pi21 n1) (pi21 n2)))
  (im
    _G
    (eq
      (:unfold pi21 (n1) ()
        (fst (snd n1)))
      (:unfold pi21 (n2) ()
        (fst (snd n2)))))
  (fsteqd (_G (snd n1) (snd n2))
    (sndeqd (_G n1 n2)
      hn))))

(local theorem pi21eq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (pi21 n1) (pi21 n2)))
()
(pi21eqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def pi22 ((n nat ())) (nat ())
()
(snd (snd n)))

(local theorem pi22eqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (pi22 n1) (pi22 n2)))
()
(:conv (im _G (eq (pi22 n1) (pi22 n2)))
  (im
    _G
    (eq
      (:unfold pi22 (n1) ()
        (snd (snd n1)))
      (:unfold pi22 (n2) ()
        (snd (snd n2)))))
  (sndeqd (_G (snd n1) (snd n2))
    (sndeqd (_G n1 n2)
      hn))))

(local theorem pi22eq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (pi22 n1) (pi22 n2)))
()
(pi22eqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def pi221 ((n nat ())) (nat ())
()
(fst (pi22 n)))

(local theorem pi221eqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (pi221 n1) (pi221 n2)))
()
(:conv (im _G (eq (pi221 n1) (pi221 n2)))
  (im
    _G
    (eq
      (:unfold pi221 (n1) ()
        (fst (pi22 n1)))
      (:unfold pi221 (n2) ()
        (fst (pi22 n2)))))
  (fsteqd (_G (pi22 n1) (pi22 n2))
    (pi22eqd (_G n1 n2)
      hn))))

(local theorem pi221eq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (pi221 n1) (pi221 n2)))
()
(pi221eqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(def pi222 ((n nat ())) (nat ())
()
(snd (pi22 n)))

(local theorem pi222eqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (pi222 n1) (pi222 n2)))
()
(:conv (im _G (eq (pi222 n1) (pi222 n2)))
  (im
    _G
    (eq
      (:unfold pi222 (n1) ()
        (snd (pi22 n1)))
      (:unfold pi222 (n2) ()
        (snd (pi22 n2)))))
  (sndeqd (_G (pi22 n1) (pi22 n2))
    (pi22eqd (_G n1 n2)
      hn))))

(local theorem pi222eq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (pi222 n1) (pi222 n2)))
()
(pi222eqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(local theorem pi11pr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pi11 (pr (pr a b) c)) a)
()
(:conv (eq (pi11 (pr (pr a b) c)) a)
  (eq
    (:unfold pi11 ((pr (pr a b) c)) ()
      (fst (fst (pr (pr a b) c))))
    a)
  (ax_mp ((eq (fst (pr a b)) a) (eq (fst (fst (pr (pr a b) c))) a))
    (ax_mp ((eq (fst (fst (pr (pr a b) c))) (fst (pr a b))) (im (eq (fst (pr a b)) a) (eq (fst (fst (pr (pr a b) c))) a)))
      (eqtr ((fst (fst (pr (pr a b) c))) (fst (pr a b)) a))
      (ax_mp ((eq (fst (pr (pr a b) c)) (pr a b)) (eq (fst (fst (pr (pr a b) c))) (fst (pr a b))))
        (fsteq ((fst (pr (pr a b) c)) (pr a b)))
        (fstpr ((pr a b) c))))
    (fstpr (a b)))))

(local theorem pi12pr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pi12 (pr (pr a b) c)) b)
()
(:conv (eq (pi12 (pr (pr a b) c)) b)
  (eq
    (:unfold pi12 ((pr (pr a b) c)) ()
      (snd (fst (pr (pr a b) c))))
    b)
  (ax_mp ((eq (snd (pr a b)) b) (eq (snd (fst (pr (pr a b) c))) b))
    (ax_mp ((eq (snd (fst (pr (pr a b) c))) (snd (pr a b))) (im (eq (snd (pr a b)) b) (eq (snd (fst (pr (pr a b) c))) b)))
      (eqtr ((snd (fst (pr (pr a b) c))) (snd (pr a b)) b))
      (ax_mp ((eq (fst (pr (pr a b) c)) (pr a b)) (eq (snd (fst (pr (pr a b) c))) (snd (pr a b))))
        (sndeq ((fst (pr (pr a b) c)) (pr a b)))
        (fstpr ((pr a b) c))))
    (sndpr (a b)))))

(local theorem pi21pr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pi21 (pr a (pr b c))) b)
()
(:conv (eq (pi21 (pr a (pr b c))) b)
  (eq
    (:unfold pi21 ((pr a (pr b c))) ()
      (fst (snd (pr a (pr b c)))))
    b)
  (ax_mp ((eq (fst (pr b c)) b) (eq (fst (snd (pr a (pr b c)))) b))
    (ax_mp ((eq (fst (snd (pr a (pr b c)))) (fst (pr b c))) (im (eq (fst (pr b c)) b) (eq (fst (snd (pr a (pr b c)))) b)))
      (eqtr ((fst (snd (pr a (pr b c)))) (fst (pr b c)) b))
      (ax_mp ((eq (snd (pr a (pr b c))) (pr b c)) (eq (fst (snd (pr a (pr b c)))) (fst (pr b c))))
        (fsteq ((snd (pr a (pr b c))) (pr b c)))
        (sndpr (a (pr b c)))))
    (fstpr (b c)))))

(local theorem pi22pr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pi22 (pr a (pr b c))) c)
()
(:conv (eq (pi22 (pr a (pr b c))) c)
  (eq
    (:unfold pi22 ((pr a (pr b c))) ()
      (snd (snd (pr a (pr b c)))))
    c)
  (ax_mp ((eq (snd (pr b c)) c) (eq (snd (snd (pr a (pr b c)))) c))
    (ax_mp ((eq (snd (snd (pr a (pr b c)))) (snd (pr b c))) (im (eq (snd (pr b c)) c) (eq (snd (snd (pr a (pr b c)))) c)))
      (eqtr ((snd (snd (pr a (pr b c)))) (snd (pr b c)) c))
      (ax_mp ((eq (snd (pr a (pr b c))) (pr b c)) (eq (snd (snd (pr a (pr b c)))) (snd (pr b c))))
        (sndeq ((snd (pr a (pr b c))) (pr b c)))
        (sndpr (a (pr b c)))))
    (sndpr (b c)))))

(local theorem pi221pr ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (pi221 (pr a (pr b (pr c d)))) c)
()
(:conv (eq (pi221 (pr a (pr b (pr c d)))) c)
  (eq
    (:unfold pi221 ((pr a (pr b (pr c d)))) ()
      (fst (pi22 (pr a (pr b (pr c d))))))
    c)
  (ax_mp ((eq (fst (pr c d)) c) (eq (fst (pi22 (pr a (pr b (pr c d))))) c))
    (ax_mp ((eq (fst (pi22 (pr a (pr b (pr c d))))) (fst (pr c d))) (im (eq (fst (pr c d)) c) (eq (fst (pi22 (pr a (pr b (pr c d))))) c)))
      (eqtr ((fst (pi22 (pr a (pr b (pr c d))))) (fst (pr c d)) c))
      (ax_mp ((eq (pi22 (pr a (pr b (pr c d)))) (pr c d)) (eq (fst (pi22 (pr a (pr b (pr c d))))) (fst (pr c d))))
        (fsteq ((pi22 (pr a (pr b (pr c d)))) (pr c d)))
        (pi22pr (a b (pr c d)))))
    (fstpr (c d)))))

(local theorem pi222pr ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (pi222 (pr a (pr b (pr c d)))) d)
()
(:conv (eq (pi222 (pr a (pr b (pr c d)))) d)
  (eq
    (:unfold pi222 ((pr a (pr b (pr c d)))) ()
      (snd (pi22 (pr a (pr b (pr c d))))))
    d)
  (ax_mp ((eq (snd (pr c d)) d) (eq (snd (pi22 (pr a (pr b (pr c d))))) d))
    (ax_mp ((eq (snd (pi22 (pr a (pr b (pr c d))))) (snd (pr c d))) (im (eq (snd (pr c d)) d) (eq (snd (pi22 (pr a (pr b (pr c d))))) d)))
      (eqtr ((snd (pi22 (pr a (pr b (pr c d))))) (snd (pr c d)) d))
      (ax_mp ((eq (pi22 (pr a (pr b (pr c d)))) (pr c d)) (eq (snd (pi22 (pr a (pr b (pr c d))))) (snd (pr c d))))
        (sndeq ((pi22 (pr a (pr b (pr c d)))) (pr c d)))
        (pi22pr (a b (pr c d)))))
    (sndpr (c d)))))

(def isfun ((A set ())) (wff ())
((a nat) (b nat) (b2 nat))
(al a (al b (al b2 (im (el (pr a b) A) (im (el (pr a b2) A) (eq b b2)))))))

(local theorem isfeqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (iff (isfun A1) (isfun A2)))
((a nat) (b nat) (b2 nat))
(:conv (im _G (iff (isfun A1) (isfun A2)))
  (im
    _G
    (iff
      (:unfold isfun (A1) (a b b2)
        (al a (al b (al b2 (im (el (pr a b) A1) (im (el (pr a b2) A1) (eq b b2)))))))
      (:unfold isfun (A2) (a b b2)
        (al a (al b (al b2 (im (el (pr a b) A2) (im (el (pr a b2) A2) (eq b b2)))))))))
  (aleqd (_G a (al b (al b2 (im (el (pr a b) A1) (im (el (pr a b2) A1) (eq b b2))))) (al b (al b2 (im (el (pr a b) A2) (im (el (pr a b2) A2) (eq b b2))))))
    (aleqd (_G b (al b2 (im (el (pr a b) A1) (im (el (pr a b2) A1) (eq b b2)))) (al b2 (im (el (pr a b) A2) (im (el (pr a b2) A2) (eq b b2)))))
      (aleqd (_G b2 (im (el (pr a b) A1) (im (el (pr a b2) A1) (eq b b2))) (im (el (pr a b) A2) (im (el (pr a b2) A2) (eq b b2))))
        (imeqd (_G (el (pr a b) A1) (el (pr a b) A2) (im (el (pr a b2) A1) (eq b b2)) (im (el (pr a b2) A2) (eq b b2)))
          (eleqd (_G (pr a b) (pr a b) A1 A2)
            (eqidd (_G (pr a b)))
            hA)
          (imeqd (_G (el (pr a b2) A1) (el (pr a b2) A2) (eq b b2) (eq b b2))
            (eleqd (_G (pr a b2) (pr a b2) A1 A2)
              (eqidd (_G (pr a b2)))
              hA)
            (biidd (_G (eq b b2))))))))))

(local theorem isfeq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (iff (isfun A1) (isfun A2)))
()
(isfeqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem isfd ((F set ()) (G wff ()) (a nat ()) (b nat ()) (b2 nat ()))
  ((h1 (im G (isfun F)))
   (h2 (im G (el (pr a b) F)))
   (h3 (im G (el (pr a b2) F))))
  (im G (eq b b2))
((x nat) (y nat) (z nat))
(:let H1 (anllr (G (eq x a) (eq y b) (eq z b2)))
(:let H2 (anlr ((an G (eq x a)) (eq y b) (eq z b2)))
(:let H3 (anr ((an (an G (eq x a)) (eq y b)) (eq z b2)))
(mpd (G (el (pr a b2) F) (eq b b2))
  h3
  (mpd (G (el (pr a b) F) (im (el (pr a b2) F) (eq b b2)))
    h2
    (mpd (G (isfun F) (im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))))
      h1
      (:conv (im G (im (isfun F) (im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2)))))
        (im
          G
          (im
            (:unfold isfun (F) (x y z)
              (al x (al y (al z (im (el (pr x y) F) (im (el (pr x z) F) (eq y z)))))))
            (im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2)))))
        (ealde ((im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))) x G a (al y (al z (im (el (pr x y) F) (im (el (pr x z) F) (eq y z))))))
          (ealde ((im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))) y (an G (eq x a)) b (al z (im (el (pr x y) F) (im (el (pr x z) F) (eq y z)))))
            (ealde ((im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))) z (an (an G (eq x a)) (eq y b)) b2 (im (el (pr x y) F) (im (el (pr x z) F) (eq y z))))
              (bi1d ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) (im (el (pr x y) F) (im (el (pr x z) F) (eq y z))) (im (el (pr a b) F) (im (el (pr a b2) F) (eq b b2))))
                (imeqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) (el (pr x y) F) (el (pr a b) F) (im (el (pr x z) F) (eq y z)) (im (el (pr a b2) F) (eq b b2)))
                  (eleq1d (F (an (an (an G (eq x a)) (eq y b)) (eq z b2)) (pr x y) (pr a b))
                    (preqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) x a y b)
                      H1
                      H2))
                  (imeqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) (el (pr x z) F) (el (pr a b2) F) (eq y z) (eq b b2))
                    (eleq1d (F (an (an (an G (eq x a)) (eq y b)) (eq z b2)) (pr x z) (pr a b2))
                      (preqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) x a z b2)
                        H1
                        H3))
                    (eqeqd ((an (an (an G (eq x a)) (eq y b)) (eq z b2)) y b z b2)
                      H2
                      H3)))))))))))))))

(local theorem isfbd ((F set ()) (G wff ()) (a nat ()) (b nat ()) (b2 nat ()))
  ((h1 (im G (isfun F)))
   (h2 (im G (el (pr a b) F))))
  (im G (iff (el (pr a b2) F) (eq b b2)))
()
(ibida (G (el (pr a b2) F) (eq b b2))
  (isfd (F (an G (el (pr a b2) F)) a b b2)
    (anwl (G (el (pr a b2) F) (isfun F))
      h1)
    (anwl (G (el (pr a b2) F) (el (pr a b) F))
      h2)
    (anr (G (el (pr a b2) F))))
  (mpbid ((an G (eq b b2)) (el (pr a b) F) (el (pr a b2) F))
    (eleq1d (F (an G (eq b b2)) (pr a b) (pr a b2))
      (anwr (G (eq b b2) (eq (pr a b) (pr a b2)))
        (preq2 (a b b2))))
    (anwl (G (eq b b2) (el (pr a b) F))
      h2))))

(local theorem isfss ((A set ()) (B set ())) ()
  (im (subset A B) (im (isfun B) (isfun A)))
((a nat) (b nat) (c nat))
(:let H1 (an3l ((subset A B) (isfun B) (el (pr a b) A) (el (pr a c) A)))
(exp ((subset A B) (isfun B) (isfun A))
  (:conv (im (an (subset A B) (isfun B)) (isfun A))
    (im
      (an (subset A B) (isfun B))
      (:unfold isfun (A) (a b c)
        (al a (al b (al c (im (el (pr a b) A) (im (el (pr a c) A) (eq b c))))))))
    (iald (a (an (subset A B) (isfun B)) (al b (al c (im (el (pr a b) A) (im (el (pr a c) A) (eq b c))))))
      (iald (b (an (subset A B) (isfun B)) (al c (im (el (pr a b) A) (im (el (pr a c) A) (eq b c)))))
        (iald (c (an (subset A B) (isfun B)) (im (el (pr a b) A) (im (el (pr a c) A) (eq b c))))
          (exp ((an (subset A B) (isfun B)) (el (pr a b) A) (im (el (pr a c) A) (eq b c)))
            (exp ((an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A) (eq b c))
              (isfd (B (an (an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A)) a b c)
                (anllr ((subset A B) (isfun B) (el (pr a b) A) (el (pr a c) A)))
                (sseld (A B (an (an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A)) (pr a b))
                  H1
                  (anlr ((an (subset A B) (isfun B)) (el (pr a b) A) (el (pr a c) A))))
                (sseld (A B (an (an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A)) (pr a c))
                  H1
                  (anr ((an (an (subset A B) (isfun B)) (el (pr a b) A)) (el (pr a c) A))))))))))))))

(local def sab ((x nat) (A set (x))) (set ())
((z nat))
(ab z (el (snd z) (sbs (fst z) x A))))

(local theorem sabeqd ((_G wff ()) (x nat) (A1 set (x)) (A2 set (x)))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eqs (sab x A1) (sab x A2)))
((z nat))
(:conv (im _G (eqs (sab x A1) (sab x A2)))
  (im
    _G
    (eqs
      (:unfold sab (x A1) (z)
        (ab z (el (snd z) (sbs (fst z) x A1))))
      (:unfold sab (x A2) (z)
        (ab z (el (snd z) (sbs (fst z) x A2))))))
  (abeqd (_G z (el (snd z) (sbs (fst z) x A1)) (el (snd z) (sbs (fst z) x A2)))
    (eleqd (_G (snd z) (snd z) (sbs (fst z) x A1) (sbs (fst z) x A2))
      (eqidd (_G (snd z)))
      (sbseqd (_G x (fst z) (fst z) A1 A2)
        (eqidd (_G (fst z)))
        hA)))))

(local theorem elsabs ((a nat ()) (b nat ()) (x nat) (A set (x))) ()
  (iff (el (pr a b) (sab x A)) (el b (sbs a x A)))
((p nat))
(:conv (iff (el (pr a b) (sab x A)) (el b (sbs a x A)))
  (iff
    (el
      (pr a b)
      (:unfold sab (x A) (p)
        (ab p (el (snd p) (sbs (fst p) x A)))))
    (el b (sbs a x A)))
  (elabe (p (pr a b) (el (snd p) (sbs (fst p) x A)) (el b (sbs a x A)))
    (eleqd ((eq p (pr a b)) (snd p) b (sbs (fst p) x A) (sbs a x A))
      (syl6eq ((eq p (pr a b)) (snd p) (snd (pr a b)) b)
        (sndpr (a b))
        (sndeq (p (pr a b))))
      (sbseq1d (x (eq p (pr a b)) (fst p) a A)
        (syl6eq ((eq p (pr a b)) (fst p) (fst (pr a b)) a)
          (fstpr (a b))
          (fsteq (p (pr a b)))))))))

(local theorem elsab ((B set ()) (a nat ()) (b nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eqs A B))))
  (iff (el (pr a b) (sab x A)) (el b B))
()
(ax_mp ((iff (el b (sbs a x A)) (el b B)) (iff (el (pr a b) (sab x A)) (el b B)))
  (ax_mp ((iff (el (pr a b) (sab x A)) (el b (sbs a x A))) (im (iff (el b (sbs a x A)) (el b B)) (iff (el (pr a b) (sab x A)) (el b B))))
    (bitr ((el (pr a b) (sab x A)) (el b (sbs a x A)) (el b B)))
    (elsabs (a b x A)))
  (ax_mp ((eqs (sbs a x A) B) (iff (el b (sbs a x A)) (el b B)))
    (eleq2 ((sbs a x A) B b))
    (sbse (x a A B)
      h))))

(local theorem elsabed ((G wff ()) (a nat ()) (b nat ()) (p wff ()) (x nat) (A set (x)))
  ((h (im (an G (eq x a)) (iff (el b A) p))))
  (im G (iff (el (pr a b) (sab x A)) p))
()
(syl5bb (G (el (pr a b) (sab x A)) (el b (sbs a x A)) p)
  (elsabs (a b x A))
  (mpi (G (ex x (eq x a)) (iff (el b (sbs a x A)) p))
    (ax_6 (a x))
    (eexdh (x G (eq x a) (iff (el b (sbs a x A)) p))
      (nfv (G x))
      (nfbi (x (el b (sbs a x A)) p)
        (nfel2 (x b (sbs a x A))
          (nfsbs1 (x a A)))
        (nfv (p x)))
      (exp (G (eq x a) (iff (el b (sbs a x A)) p))
        (bitr3d ((an G (eq x a)) (el b (sbs a x A)) (el b A) p)
          (eleq2d (A (sbs a x A) (an G (eq x a)) b)
            (anwr (G (eq x a) (eqs A (sbs a x A)))
              (sbsq (x a A))))
          h))))))

(local theorem elsabe ((a nat ()) (b nat ()) (p wff ()) (x nat) (A set (x)))
  ((h (im (eq x a) (iff (el b A) p))))
  (iff (el (pr a b) (sab x A)) p)
()
(trud ((iff (el (pr a b) (sab x A)) p))
  (elsabed ((wtru) a b p x A)
    (anwr ((wtru) (eq x a) (iff (el b A) p))
      h))))

(def opab ((x nat) (y nat) (p wff (x y))) (set ())
((z nat))
(ab z (ex x (ex y (an (eq z (pr x y)) p)))))

(local theorem opabeqd ((_G wff ()) (x nat) (y nat) (p1 wff (x y)) (p2 wff (x y)))
  ((hp (im _G (iff p1 p2))))
  (im _G (eqs (opab x y p1) (opab x y p2)))
((z nat))
(:conv (im _G (eqs (opab x y p1) (opab x y p2)))
  (im
    _G
    (eqs
      (:unfold opab (x y p1) (z)
        (ab z (ex x (ex y (an (eq z (pr x y)) p1)))))
      (:unfold opab (x y p2) (z)
        (ab z (ex x (ex y (an (eq z (pr x y)) p2)))))))
  (abeqd (_G z (ex x (ex y (an (eq z (pr x y)) p1))) (ex x (ex y (an (eq z (pr x y)) p2))))
    (exeqd (_G x (ex y (an (eq z (pr x y)) p1)) (ex y (an (eq z (pr x y)) p2)))
      (exeqd (_G y (an (eq z (pr x y)) p1) (an (eq z (pr x y)) p2))
        (aneqd (_G (eq z (pr x y)) (eq z (pr x y)) p1 p2)
          (biidd (_G (eq z (pr x y))))
          hp))))))

(local theorem elopabs ((a nat ()) (b nat ()) (x nat) (y nat) (p wff (x y))) ()
  (iff (el (pr a b) (opab x y p)) (sb a x (sb b y p)))
((z nat))
(:conv (iff (el (pr a b) (opab x y p)) (sb a x (sb b y p)))
  (iff
    (el
      (pr a b)
      (:unfold opab (x y p) (z)
        (ab z (ex x (ex y (an (eq z (pr x y)) p))))))
    (sb a x (sb b y p)))
  (elabe (z (pr a b) (ex x (ex y (an (eq z (pr x y)) p))) (sb a x (sb b y p)))
    (syl6bbr ((eq z (pr a b)) (ex x (ex y (an (eq z (pr x y)) p))) (ex x (an (eq x a) (sb b y p))) (sb a x (sb b y p)))
      (dfsb3 (x a (sb b y p)))
      (exeqd ((eq z (pr a b)) x (ex y (an (eq z (pr x y)) p)) (an (eq x a) (sb b y p)))
        (syl6bbr ((eq z (pr a b)) (ex y (an (eq z (pr x y)) p)) (an (eq x a) (ex y (an (eq y b) p))) (an (eq x a) (sb b y p)))
          (aneq2i ((eq x a) (sb b y p) (ex y (an (eq y b) p)))
            (dfsb3 (y b p)))
          (syl6bb ((eq z (pr a b)) (ex y (an (eq z (pr x y)) p)) (ex y (an (eq x a) (an (eq y b) p))) (an (eq x a) (ex y (an (eq y b) p))))
            (exan1 (y (eq x a) (an (eq y b) p)))
            (exeqd ((eq z (pr a b)) y (an (eq z (pr x y)) p) (an (eq x a) (an (eq y b) p)))
              (syl6bb ((eq z (pr a b)) (an (eq z (pr x y)) p) (an (an (eq x a) (eq y b)) p) (an (eq x a) (an (eq y b) p)))
                (anass ((eq x a) (eq y b) p))
                (aneq1d ((eq z (pr a b)) (eq z (pr x y)) (an (eq x a) (eq y b)) p)
                  (syl6bb ((eq z (pr a b)) (eq z (pr x y)) (eq (pr x y) (pr a b)) (an (eq x a) (eq y b)))
                    (prth (x a y b))
                    (syl6bb ((eq z (pr a b)) (eq z (pr x y)) (eq (pr a b) (pr x y)) (eq (pr x y) (pr a b)))
                      (eqcomb ((pr a b) (pr x y)))
                      (eqeq1 (z (pr a b) (pr x y)))))))))))))))

(local theorem opabsab ((x nat) (y nat) (p wff (x y))) ()
  (eqs (opab x y p) (sab x (ab y p)))
((a nat) (b nat))
(eqri2 ((opab x y p) (sab x (ab y p)) a b)
  (ax_mp ((iff (el (pr a b) (sab x (ab y p))) (sb a x (sb b y p))) (iff (el (pr a b) (opab x y p)) (el (pr a b) (sab x (ab y p)))))
    (ax_mp ((iff (el (pr a b) (opab x y p)) (sb a x (sb b y p))) (im (iff (el (pr a b) (sab x (ab y p))) (sb a x (sb b y p))) (iff (el (pr a b) (opab x y p)) (el (pr a b) (sab x (ab y p))))))
      (bitr4 ((el (pr a b) (opab x y p)) (sb a x (sb b y p)) (el (pr a b) (sab x (ab y p)))))
      (elopabs (a b x y p)))
    (ax_mp ((iff (el b (sbs a x (ab y p))) (sb a x (sb b y p))) (iff (el (pr a b) (sab x (ab y p))) (sb a x (sb b y p))))
      (ax_mp ((iff (el (pr a b) (sab x (ab y p))) (el b (sbs a x (ab y p)))) (im (iff (el b (sbs a x (ab y p))) (sb a x (sb b y p))) (iff (el (pr a b) (sab x (ab y p))) (sb a x (sb b y p)))))
        (bitr ((el (pr a b) (sab x (ab y p))) (el b (sbs a x (ab y p))) (sb a x (sb b y p))))
        (elsabs (a b x (ab y p))))
      (ax_mp ((iff (sb a x (el b (ab y p))) (sb a x (sb b y p))) (iff (el b (sbs a x (ab y p))) (sb a x (sb b y p))))
        (ax_mp ((iff (el b (sbs a x (ab y p))) (sb a x (el b (ab y p)))) (im (iff (sb a x (el b (ab y p))) (sb a x (sb b y p))) (iff (el b (sbs a x (ab y p))) (sb a x (sb b y p)))))
          (bitr ((el b (sbs a x (ab y p))) (sb a x (el b (ab y p))) (sb a x (sb b y p))))
          (elsbs (x a b (ab y p))))
        (sbeq2i (x a (el b (ab y p)) (sb b y p))
          (elab (b y p))))))))

(local theorem elopabd ((G wff ()) (a nat ()) (b nat ()) (q wff ()) (x nat) (y nat) (p wff (x y)))
  ((h (im (an (an G (eq x a)) (eq y b)) (iff p q))))
  (im G (iff (el (pr a b) (opab x y p)) q))
()
(syl5bb (G (el (pr a b) (opab x y p)) (sb a x (sb b y p)) q)
  (elopabs (a b x y p))
  (sbed (G x a (sb b y p) q)
    (sbed ((an G (eq x a)) y b p q)
      h))))

(local theorem elopab ((a nat ()) (b nat ()) (q wff ()) (x nat) (y nat) (p wff (x y)))
  ((h (im (an (eq x a) (eq y b)) (iff p q))))
  (iff (el (pr a b) (opab x y p)) q)
()
(ax_mp ((iff (sb a x (sb b y p)) q) (iff (el (pr a b) (opab x y p)) q))
  (ax_mp ((iff (el (pr a b) (opab x y p)) (sb a x (sb b y p))) (im (iff (sb a x (sb b y p)) q) (iff (el (pr a b) (opab x y p)) q)))
    (bitr ((el (pr a b) (opab x y p)) (sb a x (sb b y p)) q))
    (elopabs (a b x y p)))
  (sbe (x a (sb b y p) q)
    (sbed ((eq x a) y b p q)
      h))))

(local theorem nfopab1 ((x nat) (y nat) (p wff (x y))) ()
  (nfs x (opab x y p))
((z nat))
(:conv (nfs x (opab x y p))
  (nfs
    x
    (:unfold opab (x y p) (z)
      (ab z (ex x (ex y (an (eq z (pr x y)) p))))))
  (nfab (x z (ex x (ex y (an (eq z (pr x y)) p))))
    (nfex1 (x (ex y (an (eq z (pr x y)) p)))))))

(local theorem nfopab2 ((x nat) (y nat) (p wff (x y))) ()
  (nfs y (opab x y p))
((z nat))
(:conv (nfs y (opab x y p))
  (nfs
    y
    (:unfold opab (x y p) (z)
      (ab z (ex x (ex y (an (eq z (pr x y)) p))))))
  (nfab (y z (ex x (ex y (an (eq z (pr x y)) p))))
    (nfex (y x (ex y (an (eq z (pr x y)) p)))
      (nfex1 (y (an (eq z (pr x y)) p)))))))

(local theorem nfopab ((x nat) (y nat) (z nat) (p wff (x y z)))
  ((h (nf x p)))
  (nfs x (opab y z p))
((w nat))
(:conv (nfs x (opab y z p))
  (nfs
    x
    (:unfold opab (y z p) (w)
      (ab w (ex y (ex z (an (eq w (pr y z)) p))))))
  (nfab (x w (ex y (ex z (an (eq w (pr y z)) p))))
    (nfex (x y (ex z (an (eq w (pr y z)) p)))
      (nfex (x z (an (eq w (pr y z)) p))
        (nfan (x (eq w (pr y z)) p)
          (nfv ((eq w (pr y z)) x))
          h))))))

(def Xp ((A set ()) (B set ())) (set ())
((x nat) (y nat))
(opab x y (an (el x A) (el y B))))

(local theorem xpeqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (eqs (Xp A1 B1) (Xp A2 B2)))
((x nat) (y nat))
(:conv (im _G (eqs (Xp A1 B1) (Xp A2 B2)))
  (im
    _G
    (eqs
      (:unfold Xp (A1 B1) (x y)
        (opab x y (an (el x A1) (el y B1))))
      (:unfold Xp (A2 B2) (x y)
        (opab x y (an (el x A2) (el y B2))))))
  (opabeqd (_G x y (an (el x A1) (el y B1)) (an (el x A2) (el y B2)))
    (aneqd (_G (el x A1) (el x A2) (el y B1) (el y B2))
      (eleqd (_G x x A1 A2)
        (eqidd (_G x))
        hA)
      (eleqd (_G y y B1 B2)
        (eqidd (_G y))
        hB)))))

(local theorem xpeq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (eqs (Xp A1 B1) (Xp A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (eqs (Xp A1 B1) (Xp A2 B2)))
  (xpeqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem xpeq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (eqs (Xp A1 B) (Xp A2 B)))
()
(xpeqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem xpeq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (eqs (Xp A1 B) (Xp A2 B)))
()
(xpeq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem xpeq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (eqs (Xp A B1) (Xp A B2)))
()
(xpeqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem xpeq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (eqs (Xp A B1) (Xp A B2)))
()
(xpeq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(local theorem nfxp ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nfs x (Xp A B))
((y nat) (z nat))
(:conv (nfs x (Xp A B))
  (nfs
    x
    (:unfold Xp (A B) (y z)
      (opab y z (an (el y A) (el z B)))))
  (nfopab (x y z (an (el y A) (el z B)))
    (nfan (x (el y A) (el z B))
      (nfel2 (x y A)
        h1)
      (nfel2 (x z B)
        h2)))))

(local theorem prelxp ((A set ()) (B set ()) (a nat ()) (b nat ())) ()
  (iff (el (pr a b) (Xp A B)) (an (el a A) (el b B)))
((x nat) (y nat))
(:conv (iff (el (pr a b) (Xp A B)) (an (el a A) (el b B)))
  (iff
    (el
      (pr a b)
      (:unfold Xp (A B) (x y)
        (opab x y (an (el x A) (el y B)))))
    (an (el a A) (el b B)))
  (elopab (a b (an (el a A) (el b B)) x y (an (el x A) (el y B)))
    (aneqd ((an (eq x a) (eq y b)) (el x A) (el a A) (el y B) (el b B))
      (eleq1d (A (an (eq x a) (eq y b)) x a)
        (anl ((eq x a) (eq y b))))
      (eleq1d (B (an (eq x a) (eq y b)) y b)
        (anr ((eq x a) (eq y b))))))))

(local theorem elxp ((A set ()) (B set ()) (a nat ())) ()
  (iff (el a (Xp A B)) (an (el (fst a) A) (el (snd a) B)))
()
(ax_mp ((iff (el (pr (fst a) (snd a)) (Xp A B)) (an (el (fst a) A) (el (snd a) B))) (iff (el a (Xp A B)) (an (el (fst a) A) (el (snd a) B))))
  (ax_mp ((iff (el (pr (fst a) (snd a)) (Xp A B)) (el a (Xp A B))) (im (iff (el (pr (fst a) (snd a)) (Xp A B)) (an (el (fst a) A) (el (snd a) B))) (iff (el a (Xp A B)) (an (el (fst a) A) (el (snd a) B)))))
    (bitr3 ((el a (Xp A B)) (el (pr (fst a) (snd a)) (Xp A B)) (an (el (fst a) A) (el (snd a) B))))
    (ax_mp ((eq (pr (fst a) (snd a)) a) (iff (el (pr (fst a) (snd a)) (Xp A B)) (el a (Xp A B))))
      (eleq1 ((Xp A B) (pr (fst a) (snd a)) a))
      (fstsnd (a))))
  (prelxp (A B (fst a) (snd a)))))

(local theorem xpvv () ()
  (eqs (Xp (Univ) (Univ)) (Univ))
((p nat))
(eqri ((Xp (Univ) (Univ)) (Univ) p)
  (ax_mp ((el p (Univ)) (iff (el p (Xp (Univ) (Univ))) (el p (Univ))))
    (ax_mp ((el p (Xp (Univ) (Univ))) (im (el p (Univ)) (iff (el p (Xp (Univ) (Univ))) (el p (Univ)))))
      (bith ((el p (Xp (Univ) (Univ))) (el p (Univ))))
      (mpbir ((an (el (fst p) (Univ)) (el (snd p) (Univ))) (el p (Xp (Univ) (Univ))))
        (elxp ((Univ) (Univ) p))
        (ax_mp ((el (snd p) (Univ)) (an (el (fst p) (Univ)) (el (snd p) (Univ))))
          (ax_mp ((el (fst p) (Univ)) (im (el (snd p) (Univ)) (an (el (fst p) (Univ)) (el (snd p) (Univ)))))
            (ian ((el (fst p) (Univ)) (el (snd p) (Univ))))
            (elv ((fst p))))
          (elv ((snd p))))))
    (elv (p)))))

(local theorem xpfst ((A set ()) (B set ()) (a nat ())) ()
  (im (el a (Xp A B)) (el (fst a) A))
()
(sylbi ((el a (Xp A B)) (an (el (fst a) A) (el (snd a) B)) (el (fst a) A))
  (elxp (A B a))
  (anl ((el (fst a) A) (el (snd a) B)))))

(local theorem xpsnd ((A set ()) (B set ()) (a nat ())) ()
  (im (el a (Xp A B)) (el (snd a) B))
()
(sylbi ((el a (Xp A B)) (an (el (fst a) A) (el (snd a) B)) (el (snd a) B))
  (elxp (A B a))
  (anr ((el (fst a) A) (el (snd a) B)))))

(local theorem xpfin ((A set ()) (B set ())) ()
  (im (finite A) (im (finite B) (finite (Xp A B))))
((m nat) (n nat) (p nat) (x nat) (y nat) (z nat))
(:conv (im (finite A) (im (finite B) (finite (Xp A B))))
  (im
    (:unfold finite (A) (m x)
      (ex m (al x (im (el x A) (lt x m)))))
    (im (finite B) (finite (Xp A B))))
  (eex (m (al x (im (el x A) (lt x m))) (im (finite B) (finite (Xp A B))))
    (:conv (im (al x (im (el x A) (lt x m))) (im (finite B) (finite (Xp A B))))
      (im
        (al x (im (el x A) (lt x m)))
        (im
          (:unfold finite (B) (n y)
            (ex n (al y (im (el y B) (lt y n)))))
          (finite (Xp A B))))
      (eexda (n (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n))) (finite (Xp A B)))
        (syl ((an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (al p (im (el p (Xp A B)) (lt p (pr (add m n) (d0))))) (finite (Xp A B)))
          (:conv (im (al p (im (el p (Xp A B)) (lt p (pr (add m n) (d0))))) (finite (Xp A B)))
            (im
              (al p (im (el p (Xp A B)) (lt p (pr (add m n) (d0)))))
              (:unfold finite ((Xp A B)) (z p)
                (ex z (al p (im (el p (Xp A B)) (lt p z))))))
            (iexe (z (pr (add m n) (d0)) (al p (im (el p (Xp A B)) (lt p z))) (al p (im (el p (Xp A B)) (lt p (pr (add m n) (d0))))))
              (aleqd ((eq z (pr (add m n) (d0))) p (im (el p (Xp A B)) (lt p z)) (im (el p (Xp A B)) (lt p (pr (add m n) (d0)))))
                (imeq2d ((eq z (pr (add m n) (d0))) (el p (Xp A B)) (lt p z) (lt p (pr (add m n) (d0))))
                  (lteq2 (p z (pr (add m n) (d0))))))))
          (iald (p (an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (im (el p (Xp A B)) (lt p (pr (add m n) (d0)))))
            (syl5bi ((an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (el p (Xp A B)) (an (el (fst p) A) (el (snd p) B)) (lt p (pr (add m n) (d0))))
              (elxp (A B p))
              (syl6 ((an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (an (el (fst p) A) (el (snd p) B)) (an (lt (fst p) m) (lt (snd p) n)) (lt p (pr (add m n) (d0))))
                (sylib ((an (lt (fst p) m) (lt (snd p) n)) (lt (pr (fst p) (snd p)) (pr (add m n) (d0))) (lt p (pr (add m n) (d0))))
                  (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (lt (pr (fst p) (snd p)) (pr (add m n) (d0))) (lt p (pr (add m n) (d0)))))
                    (lteq1 ((pr (fst p) (snd p)) p (pr (add m n) (d0))))
                    (fstsnd (p)))
                  (imp ((lt (fst p) m) (lt (snd p) n) (lt (pr (fst p) (snd p)) (pr (add m n) (d0))))
                    (sylibr ((lt (fst p) m) (im (not (le n (snd p))) (not (le (pr (add m n) (d0)) (pr (fst p) (snd p))))) (im (lt (snd p) n) (lt (pr (fst p) (snd p)) (pr (add m n) (d0)))))
                      (imeqi ((lt (snd p) n) (not (le n (snd p))) (lt (pr (fst p) (snd p)) (pr (add m n) (d0))) (not (le (pr (add m n) (d0)) (pr (fst p) (snd p)))))
                        (ltnle ((snd p) n))
                        (ltnle ((pr (fst p) (snd p)) (pr (add m n) (d0)))))
                      (con3d ((lt (fst p) m) (le (pr (add m n) (d0)) (pr (fst p) (snd p))) (le n (snd p)))
                        (syl5 ((lt (fst p) m) (le (pr (add m n) (d0)) (pr (fst p) (snd p))) (le (add (add m n) (d0)) (add (fst p) (snd p))) (le n (snd p)))
                          (prlem2 ((add m n) (fst p) (d0) (snd p)))
                          (syl5bi ((lt (fst p) m) (le (add (add m n) (d0)) (add (fst p) (snd p))) (le (add m n) (add (fst p) (snd p))) (le n (snd p)))
                            (ax_mp ((eq (add (add m n) (d0)) (add m n)) (iff (le (add (add m n) (d0)) (add (fst p) (snd p))) (le (add m n) (add (fst p) (snd p)))))
                              (leeq1 ((add (add m n) (d0)) (add m n) (add (fst p) (snd p))))
                              (add0 ((add m n))))
                            (syl6ibr ((lt (fst p) m) (le (add m n) (add (fst p) (snd p))) (le (add (fst p) n) (add (fst p) (snd p))) (le n (snd p)))
                              (leadd2 ((fst p) n (snd p)))
                              (syl ((lt (fst p) m) (le (add (fst p) n) (add m n)) (im (le (add m n) (add (fst p) (snd p))) (le (add (fst p) n) (add (fst p) (snd p)))))
                                (letr ((add (fst p) n) (add m n) (add (fst p) (snd p))))
                                (sylib ((lt (fst p) m) (le (fst p) m) (le (add (fst p) n) (add m n)))
                                  (leadd1 ((fst p) m n))
                                  (ltle ((fst p) m)))))))))))
                (animd ((an (al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n)))) (el (fst p) A) (lt (fst p) m) (el (snd p) B) (lt (snd p) n))
                  (anwl ((al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n))) (im (el (fst p) A) (lt (fst p) m)))
                    (eale (x (fst p) (im (el x A) (lt x m)) (im (el (fst p) A) (lt (fst p) m)))
                      (imeqd ((eq x (fst p)) (el x A) (el (fst p) A) (lt x m) (lt (fst p) m))
                        (eleq1 (A x (fst p)))
                        (lteq1 (x (fst p) m)))))
                  (anwr ((al x (im (el x A) (lt x m))) (al y (im (el y B) (lt y n))) (im (el (snd p) B) (lt (snd p) n)))
                    (eale (y (snd p) (im (el y B) (lt y n)) (im (el (snd p) B) (lt (snd p) n)))
                      (imeqd ((eq y (snd p)) (el y B) (el (snd p) B) (lt y n) (lt (snd p) n))
                        (eleq1 (B y (snd p)))
                        (lteq1 (y (snd p) n)))))))))))))))

(def Dom ((A set ())) (set ())
((x nat) (y nat))
(ab x (ex y (el (pr x y) A))))

(local theorem dmeqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eqs (Dom A1) (Dom A2)))
((x nat) (y nat))
(:conv (im _G (eqs (Dom A1) (Dom A2)))
  (im
    _G
    (eqs
      (:unfold Dom (A1) (x y)
        (ab x (ex y (el (pr x y) A1))))
      (:unfold Dom (A2) (x y)
        (ab x (ex y (el (pr x y) A2))))))
  (abeqd (_G x (ex y (el (pr x y) A1)) (ex y (el (pr x y) A2)))
    (exeqd (_G y (el (pr x y) A1) (el (pr x y) A2))
      (eleqd (_G (pr x y) (pr x y) A1 A2)
        (eqidd (_G (pr x y)))
        hA)))))

(local theorem dmeq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eqs (Dom A1) (Dom A2)))
()
(dmeqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(def Ran ((A set ())) (set ())
((x nat) (y nat))
(ab y (ex x (el (pr x y) A))))

(local theorem rneqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eqs (Ran A1) (Ran A2)))
((x nat) (y nat))
(:conv (im _G (eqs (Ran A1) (Ran A2)))
  (im
    _G
    (eqs
      (:unfold Ran (A1) (x y)
        (ab y (ex x (el (pr x y) A1))))
      (:unfold Ran (A2) (x y)
        (ab y (ex x (el (pr x y) A2))))))
  (abeqd (_G y (ex x (el (pr x y) A1)) (ex x (el (pr x y) A2)))
    (exeqd (_G x (el (pr x y) A1) (el (pr x y) A2))
      (eleqd (_G (pr x y) (pr x y) A1 A2)
        (eqidd (_G (pr x y)))
        hA)))))

(local theorem rneq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eqs (Ran A1) (Ran A2)))
()
(rneqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(def Im ((F set ()) (A set ())) (set ())
((x nat) (y nat))
(ab y (ex x (an (el x A) (el (pr x y) F)))))

(local theorem imeq ((b wff ()) (c wff ()) (d wff ()) (e wff ())) ()
  (im (iff b c) (im (iff d e) (iff (im b d) (im c e))))
()
(exp ((iff b c) (iff d e) (iff (im b d) (im c e)))
  (imeqd ((an (iff b c) (iff d e)) b c d e)
    (anl ((iff b c) (iff d e)))
    (anr ((iff b c) (iff d e))))))

(local theorem eldm ((A set ()) (a nat ()) (y nat)) ()
  (iff (el a (Dom A)) (ex y (el (pr a y) A)))
((x nat))
(:conv (iff (el a (Dom A)) (ex y (el (pr a y) A)))
  (iff
    (el
      a
      (:unfold Dom (A) (x y)
        (ab x (ex y (el (pr x y) A)))))
    (ex y (el (pr a y) A)))
  (elabe (x a (ex y (el (pr x y) A)) (ex y (el (pr a y) A)))
    (exeqd ((eq x a) y (el (pr x y) A) (el (pr a y) A))
      (eleq1d (A (eq x a) (pr x y) (pr a y))
        (preq1 (x a y)))))))

(local theorem elrn ((A set ()) (a nat ()) (x nat)) ()
  (iff (el a (Ran A)) (ex x (el (pr x a) A)))
((y nat))
(:conv (iff (el a (Ran A)) (ex x (el (pr x a) A)))
  (iff
    (el
      a
      (:unfold Ran (A) (x y)
        (ab y (ex x (el (pr x y) A)))))
    (ex x (el (pr x a) A)))
  (elabe (y a (ex x (el (pr x y) A)) (ex x (el (pr x a) A)))
    (exeqd ((eq y a) x (el (pr x y) A) (el (pr x a) A))
      (eleq1d (A (eq y a) (pr x y) (pr x a))
        (preq2 (x y a)))))))

(local theorem preldm ((A set ()) (a nat ()) (b nat ())) ()
  (im (el (pr a b) A) (el a (Dom A)))
((y nat))
(sylibr ((el (pr a b) A) (ex y (el (pr a y) A)) (el a (Dom A)))
  (eldm (A a y))
  (iexe (y b (el (pr a y) A) (el (pr a b) A))
    (eleq1d (A (eq y b) (pr a y) (pr a b))
      (preq2 (a y b))))))

(local theorem prelrn ((A set ()) (a nat ()) (b nat ())) ()
  (im (el (pr a b) A) (el b (Ran A)))
((x nat))
(sylibr ((el (pr a b) A) (ex x (el (pr x b) A)) (el b (Ran A)))
  (elrn (A b x))
  (iexe (x a (el (pr x b) A) (el (pr a b) A))
    (eleq1d (A (eq x a) (pr x b) (pr a b))
      (preq1 (x a b))))))

(local theorem fsteldm ((A set ()) (p nat ())) ()
  (im (el p A) (el (fst p) (Dom A)))
()
(sylbir ((el p A) (el (pr (fst p) (snd p)) A) (el (fst p) (Dom A)))
  (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (el (pr (fst p) (snd p)) A) (el p A)))
    (eleq1 (A (pr (fst p) (snd p)) p))
    (fstsnd (p)))
  (preldm (A (fst p) (snd p)))))

(local theorem sndelrn ((A set ()) (p nat ())) ()
  (im (el p A) (el (snd p) (Ran A)))
()
(sylbir ((el p A) (el (pr (fst p) (snd p)) A) (el (snd p) (Ran A)))
  (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (el (pr (fst p) (snd p)) A) (el p A)))
    (eleq1 (A (pr (fst p) (snd p)) p))
    (fstsnd (p)))
  (prelrn (A (fst p) (snd p)))))

(def cnv ((A set ())) (set ())
((x nat) (y nat))
(opab x y (el (pr y x) A)))

(local theorem cnveqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eqs (cnv A1) (cnv A2)))
((x nat) (y nat))
(:conv (im _G (eqs (cnv A1) (cnv A2)))
  (im
    _G
    (eqs
      (:unfold cnv (A1) (x y)
        (opab x y (el (pr y x) A1)))
      (:unfold cnv (A2) (x y)
        (opab x y (el (pr y x) A2)))))
  (opabeqd (_G x y (el (pr y x) A1) (el (pr y x) A2))
    (eleqd (_G (pr y x) (pr y x) A1 A2)
      (eqidd (_G (pr y x)))
      hA))))

(local theorem cnveq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eqs (cnv A1) (cnv A2)))
()
(cnveqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(def comp ((F set ()) (G set ())) (set ())
((x nat) (y nat) (z nat))
(opab x z (ex y (an (el (pr x y) G) (el (pr y z) F)))))

(local theorem coeqd ((_G wff ()) (F1 set ()) (F2 set ()) (G1 set ()) (G2 set ()))
  ((hF (im _G (eqs F1 F2)))
   (hG (im _G (eqs G1 G2))))
  (im _G (eqs (comp F1 G1) (comp F2 G2)))
((x nat) (y nat) (z nat))
(:conv (im _G (eqs (comp F1 G1) (comp F2 G2)))
  (im
    _G
    (eqs
      (:unfold comp (F1 G1) (x y z)
        (opab x z (ex y (an (el (pr x y) G1) (el (pr y z) F1)))))
      (:unfold comp (F2 G2) (x y z)
        (opab x z (ex y (an (el (pr x y) G2) (el (pr y z) F2)))))))
  (opabeqd (_G x z (ex y (an (el (pr x y) G1) (el (pr y z) F1))) (ex y (an (el (pr x y) G2) (el (pr y z) F2))))
    (exeqd (_G y (an (el (pr x y) G1) (el (pr y z) F1)) (an (el (pr x y) G2) (el (pr y z) F2)))
      (aneqd (_G (el (pr x y) G1) (el (pr x y) G2) (el (pr y z) F1) (el (pr y z) F2))
        (eleqd (_G (pr x y) (pr x y) G1 G2)
          (eqidd (_G (pr x y)))
          hG)
        (eleqd (_G (pr y z) (pr y z) F1 F2)
          (eqidd (_G (pr y z)))
          hF))))))

(local theorem coeq ((F1 set ()) (F2 set ()) (G1 set ()) (G2 set ())) ()
  (im (eqs F1 F2) (im (eqs G1 G2) (eqs (comp F1 G1) (comp F2 G2))))
()
(exp ((eqs F1 F2) (eqs G1 G2) (eqs (comp F1 G1) (comp F2 G2)))
  (coeqd ((an (eqs F1 F2) (eqs G1 G2)) F1 F2 G1 G2)
    (anl ((eqs F1 F2) (eqs G1 G2)))
    (anr ((eqs F1 F2) (eqs G1 G2))))))

(local theorem coeq1d ((_G wff ()) (F1 set ()) (F2 set ()) (G set ()))
  ((h (im _G (eqs F1 F2))))
  (im _G (eqs (comp F1 G) (comp F2 G)))
()
(coeqd (_G F1 F2 G G)
  h
  (eqsidd (_G G))))

(local theorem coeq1 ((F1 set ()) (F2 set ()) (G set ())) ()
  (im (eqs F1 F2) (eqs (comp F1 G) (comp F2 G)))
()
(coeq1d ((eqs F1 F2) F1 F2 G)
  (id ((eqs F1 F2)))))

(local theorem coeq2d ((_G wff ()) (F set ()) (G1 set ()) (G2 set ()))
  ((h (im _G (eqs G1 G2))))
  (im _G (eqs (comp F G1) (comp F G2)))
()
(coeqd (_G F F G1 G2)
  (eqsidd (_G F))
  h))

(local theorem coeq2 ((F set ()) (G1 set ()) (G2 set ())) ()
  (im (eqs G1 G2) (eqs (comp F G1) (comp F G2)))
()
(coeq2d ((eqs G1 G2) F G1 G2)
  (id ((eqs G1 G2)))))

(def res ((A set ()) (B set ())) (set ())
()
(Inter A (Xp B (Univ))))

(local theorem reseqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (eqs (res A1 B1) (res A2 B2)))
()
(:conv (im _G (eqs (res A1 B1) (res A2 B2)))
  (im
    _G
    (eqs
      (:unfold res (A1 B1) ()
        (Inter A1 (Xp B1 (Univ))))
      (:unfold res (A2 B2) ()
        (Inter A2 (Xp B2 (Univ))))))
  (ineqd (_G A1 A2 (Xp B1 (Univ)) (Xp B2 (Univ)))
    hA
    (xpeqd (_G B1 B2 (Univ) (Univ))
      hB
      (eqsidd (_G (Univ)))))))

(local theorem reseq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (eqs (res A1 B1) (res A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (eqs (res A1 B1) (res A2 B2)))
  (reseqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem reseq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (eqs (res A1 B) (res A2 B)))
()
(reseqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem reseq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (eqs (res A1 B) (res A2 B)))
()
(reseq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem reseq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (eqs (res A B1) (res A B2)))
()
(reseqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem reseq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (eqs (res A B1) (res A B2)))
()
(reseq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(local theorem nfres ((x nat) (A set (x)) (B set (x)))
  ((h1 (nfs x A))
   (h2 (nfs x B)))
  (nfs x (res A B))
()
(:conv (nfs x (res A B))
  (nfs
    x
    (:unfold res (A B) ()
      (Inter A (Xp B (Univ)))))
  (nfin (x A (Xp B (Univ)))
    h1
    (nfxp (x B (Univ))
      h2
      (nfsv ((Univ) x))))))

(local theorem elres ((A set ()) (B set ()) (a nat ())) ()
  (iff (el a (res A B)) (an (el a A) (el (fst a) B)))
()
(:conv (iff (el a (res A B)) (an (el a A) (el (fst a) B)))
  (iff
    (el
      a
      (:unfold res (A B) ()
        (Inter A (Xp B (Univ)))))
    (an (el a A) (el (fst a) B)))
  (ax_mp ((iff (an (el a A) (el a (Xp B (Univ)))) (an (el a A) (el (fst a) B))) (iff (el a (Inter A (Xp B (Univ)))) (an (el a A) (el (fst a) B))))
    (ax_mp ((iff (el a (Inter A (Xp B (Univ)))) (an (el a A) (el a (Xp B (Univ))))) (im (iff (an (el a A) (el a (Xp B (Univ)))) (an (el a A) (el (fst a) B))) (iff (el a (Inter A (Xp B (Univ)))) (an (el a A) (el (fst a) B)))))
      (bitr ((el a (Inter A (Xp B (Univ)))) (an (el a A) (el a (Xp B (Univ)))) (an (el a A) (el (fst a) B))))
      (elin (A (Xp B (Univ)) a)))
    (aneq2i ((el a A) (el a (Xp B (Univ))) (el (fst a) B))
      (ax_mp ((iff (an (el (fst a) B) (el (snd a) (Univ))) (el (fst a) B)) (iff (el a (Xp B (Univ))) (el (fst a) B)))
        (ax_mp ((iff (el a (Xp B (Univ))) (an (el (fst a) B) (el (snd a) (Univ)))) (im (iff (an (el (fst a) B) (el (snd a) (Univ))) (el (fst a) B)) (iff (el a (Xp B (Univ))) (el (fst a) B))))
          (bitr ((el a (Xp B (Univ))) (an (el (fst a) B) (el (snd a) (Univ))) (el (fst a) B)))
          (elxp (B (Univ) a)))
        (ax_mp ((el (snd a) (Univ)) (iff (an (el (fst a) B) (el (snd a) (Univ))) (el (fst a) B)))
          (bian2 ((el (fst a) B) (el (snd a) (Univ))))
          (elv ((snd a)))))))))

(local theorem prelres ((A set ()) (B set ()) (a nat ()) (b nat ())) ()
  (iff (el (pr a b) (res A B)) (an (el (pr a b) A) (el a B)))
()
(ax_mp ((iff (an (el (pr a b) A) (el (fst (pr a b)) B)) (an (el (pr a b) A) (el a B))) (iff (el (pr a b) (res A B)) (an (el (pr a b) A) (el a B))))
  (ax_mp ((iff (el (pr a b) (res A B)) (an (el (pr a b) A) (el (fst (pr a b)) B))) (im (iff (an (el (pr a b) A) (el (fst (pr a b)) B)) (an (el (pr a b) A) (el a B))) (iff (el (pr a b) (res A B)) (an (el (pr a b) A) (el a B)))))
    (bitr ((el (pr a b) (res A B)) (an (el (pr a b) A) (el (fst (pr a b)) B)) (an (el (pr a b) A) (el a B))))
    (elres (A B (pr a b))))
  (aneq2i ((el (pr a b) A) (el (fst (pr a b)) B) (el a B))
    (ax_mp ((eq (fst (pr a b)) a) (iff (el (fst (pr a b)) B) (el a B)))
      (eleq1 (B (fst (pr a b)) a))
      (fstpr (a b))))))

(local theorem resss ((A set ()) (B set ())) ()
  (subset (res A B) A)
()
(:conv (subset (res A B) A)
  (subset
    (:unfold res (A B) ()
      (Inter A (Xp B (Univ))))
    A)
  (inss1 (A (Xp B (Univ))))))

(local theorem resv ((F set ())) ()
  (eqs (res F (Univ)) F)
()
(:conv (eqs (res F (Univ)) F)
  (eqs
    (:unfold res (F (Univ)) ()
      (Inter F (Xp (Univ) (Univ))))
    F)
  (ax_mp ((eqs (Inter F (Univ)) F) (eqs (Inter F (Xp (Univ) (Univ))) F))
    (ax_mp ((eqs (Inter F (Xp (Univ) (Univ))) (Inter F (Univ))) (im (eqs (Inter F (Univ)) F) (eqs (Inter F (Xp (Univ) (Univ))) F)))
      (eqstr ((Inter F (Xp (Univ) (Univ))) (Inter F (Univ)) F))
      (ax_mp ((eqs (Xp (Univ) (Univ)) (Univ)) (eqs (Inter F (Xp (Univ) (Univ))) (Inter F (Univ))))
        (ineq2 (F (Xp (Univ) (Univ)) (Univ)))
        (xpvv ())))
    (inv2 (F)))))

(local theorem resfin ((A set ()) (F set ())) ()
  (im (finite F) (finite (res F A)))
()
(ax_mp ((subset (res F A) F) (im (finite F) (finite (res F A))))
  (finss ((res F A) F))
  (resss (F A))))

(local theorem resisf ((A set ()) (F set ())) ()
  (im (isfun F) (isfun (res F A)))
()
(ax_mp ((subset (res F A) F) (im (isfun F) (isfun (res F A))))
  (isfss ((res F A) F))
  (resss (F A))))

(local theorem dmres ((A set ()) (F set ())) ()
  (eqs (Dom (res F A)) (Inter (Dom F) A))
((x nat) (y nat))
(eqri ((Dom (res F A)) (Inter (Dom F) A) x)
  (ax_mp ((iff (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A))) (iff (el x (Dom (res F A))) (el x (Inter (Dom F) A))))
    (ax_mp ((iff (el x (Dom (res F A))) (ex y (el (pr x y) (res F A)))) (im (iff (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A))) (iff (el x (Dom (res F A))) (el x (Inter (Dom F) A)))))
      (bitr ((el x (Dom (res F A))) (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A))))
      (eldm ((res F A) x y)))
    (ax_mp ((iff (el x (Inter (Dom F) A)) (ex y (an (el (pr x y) F) (el x A)))) (iff (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A))))
      (ax_mp ((iff (ex y (el (pr x y) (res F A))) (ex y (an (el (pr x y) F) (el x A)))) (im (iff (el x (Inter (Dom F) A)) (ex y (an (el (pr x y) F) (el x A)))) (iff (ex y (el (pr x y) (res F A))) (el x (Inter (Dom F) A)))))
        (bitr4 ((ex y (el (pr x y) (res F A))) (ex y (an (el (pr x y) F) (el x A))) (el x (Inter (Dom F) A))))
        (exeqi (y (el (pr x y) (res F A)) (an (el (pr x y) F) (el x A)))
          (prelres (F A x y))))
      (ax_mp ((iff (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))) (iff (el x (Inter (Dom F) A)) (ex y (an (el (pr x y) F) (el x A)))))
        (ax_mp ((iff (el x (Inter (Dom F) A)) (an (el x (Dom F)) (el x A))) (im (iff (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))) (iff (el x (Inter (Dom F) A)) (ex y (an (el (pr x y) F) (el x A))))))
          (bitr ((el x (Inter (Dom F) A)) (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))))
          (elin ((Dom F) A x)))
        (ax_mp ((iff (ex y (an (el (pr x y) F) (el x A))) (an (ex y (el (pr x y) F)) (el x A))) (iff (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))))
          (ax_mp ((iff (an (el x (Dom F)) (el x A)) (an (ex y (el (pr x y) F)) (el x A))) (im (iff (ex y (an (el (pr x y) F) (el x A))) (an (ex y (el (pr x y) F)) (el x A))) (iff (an (el x (Dom F)) (el x A)) (ex y (an (el (pr x y) F) (el x A))))))
            (bitr4 ((an (el x (Dom F)) (el x A)) (an (ex y (el (pr x y) F)) (el x A)) (ex y (an (el (pr x y) F) (el x A)))))
            (aneq1i ((el x (Dom F)) (ex y (el (pr x y) F)) (el x A))
              (eldm (F x y))))
          (exan2 (y (el (pr x y) F) (el x A)))))))))

(def lam ((x nat) (a nat (x))) (set ())
((p nat))
(ab p (ex x (eq p (pr x a)))))

(local theorem lameqd ((_G wff ()) (x nat) (a1 nat (x)) (a2 nat (x)))
  ((ha (im _G (eq a1 a2))))
  (im _G (eqs (lam x a1) (lam x a2)))
((p nat))
(:conv (im _G (eqs (lam x a1) (lam x a2)))
  (im
    _G
    (eqs
      (:unfold lam (x a1) (p)
        (ab p (ex x (eq p (pr x a1)))))
      (:unfold lam (x a2) (p)
        (ab p (ex x (eq p (pr x a2)))))))
  (abeqd (_G p (ex x (eq p (pr x a1))) (ex x (eq p (pr x a2))))
    (exeqd (_G x (eq p (pr x a1)) (eq p (pr x a2)))
      (eqeqd (_G p p (pr x a1) (pr x a2))
        (eqidd (_G p))
        (preqd (_G x x a1 a2)
          (eqidd (_G x))
          ha))))))

(local theorem ellam ((p nat ()) (x nat) (a nat (x))) ()
  (iff (el p (lam x a)) (ex x (eq p (pr x a))))
((q nat))
(:conv (iff (el p (lam x a)) (ex x (eq p (pr x a))))
  (iff
    (el
      p
      (:unfold lam (x a) (q)
        (ab q (ex x (eq q (pr x a))))))
    (ex x (eq p (pr x a))))
  (elabe (q p (ex x (eq q (pr x a))) (ex x (eq p (pr x a))))
    (exeqd ((eq q p) x (eq q (pr x a)) (eq p (pr x a)))
      (eqeq1 (q p (pr x a)))))))

(local theorem lameq ((x nat) (a nat (x)) (b nat (x))) ()
  (im (al x (eq a b)) (eqs (lam x a) (lam x b)))
((p nat))
(sylib ((al x (eq a b)) (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (eqs (lam x a) (lam x b)))
  (:conv (iff (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (eqs (lam x a) (lam x b)))
    (iff
      (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
      (eqs
        (:unfold lam (x a) (p)
          (ab p (ex x (eq p (pr x a)))))
        (:unfold lam (x b) (p)
          (ab p (ex x (eq p (pr x b)))))))
    (abeqb (p (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))))
  (iald (p (al x (eq a b)) (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
    (syl ((al x (eq a b)) (al x (iff (eq p (pr x a)) (eq p (pr x b)))) (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
      (exeq (x (eq p (pr x a)) (eq p (pr x b))))
      (alimi (x (eq a b) (iff (eq p (pr x a)) (eq p (pr x b))))
        (eqeq2d ((eq a b) p (pr x a) (pr x b))
          (preq2 (x a b))))))))

(local theorem lameqi ((x nat) (a nat (x)) (b nat (x)))
  ((h (eq a b)))
  (eqs (lam x a) (lam x b))
()
(ax_mp ((al x (eq a b)) (eqs (lam x a) (lam x b)))
  (lameq (x a b))
  (ax_gen (x (eq a b))
    h)))

(local theorem nflam1 ((x nat) (a nat (x))) ()
  (nfs x (lam x a))
((p nat))
(:conv (nfs x (lam x a))
  (nfs
    x
    (:unfold lam (x a) (p)
      (ab p (ex x (eq p (pr x a))))))
  (nfab (x p (ex x (eq p (pr x a))))
    (nfex1 (x (eq p (pr x a)))))))

(local theorem nflam ((x nat) (y nat) (a nat (x y)))
  ((h (nfn x a)))
  (nfs x (lam y a))
((p nat))
(:conv (nfs x (lam y a))
  (nfs
    x
    (:unfold lam (y a) (p)
      (ab p (ex y (eq p (pr y a))))))
  (nfab (x p (ex y (eq p (pr y a))))
    (nfex (x y (eq p (pr y a)))
      (nf_eq (x p (pr y a))
        (nfnv (p x))
        (nfpr (x y a)
          (nfnv (y x))
          h))))))

(local theorem cbvlamh ((x nat) (y nat) (a nat (x y)) (b nat (x y)))
  ((h1 (nfn y a))
   (h2 (nfn x b))
   (e (im (eq x y) (eq a b))))
  (eqs (lam x a) (lam y b))
((p1 nat) (p2 nat))
(:conv (eqs (lam x a) (lam y b))
  (eqs
    (:unfold lam (x a) (p1)
      (ab p1 (ex x (eq p1 (pr x a)))))
    (:unfold lam (y b) (p2)
      (ab p2 (ex y (eq p2 (pr y b))))))
  (cbvab (p1 p2 (ex x (eq p1 (pr x a))) (ex y (eq p2 (pr y b))))
    (syl5bb ((eq p1 p2) (ex x (eq p1 (pr x a))) (ex y (eq p1 (pr y b))) (ex y (eq p2 (pr y b))))
      (cbvexh (x y (eq p1 (pr x a)) (eq p1 (pr y b)))
        (nfeq2 (p1 y (pr x a))
          (nfpr (y x a)
            (nfnv (x y))
            h1))
        (nfeq2 (p1 x (pr y b))
          (nfpr (x y b)
            (nfnv (y x))
            h2))
        (eqeq2d ((eq x y) p1 (pr x a) (pr y b))
          (preqd ((eq x y) x y a b)
            (id ((eq x y)))
            e)))
      (exeqd ((eq p1 p2) y (eq p1 (pr y b)) (eq p2 (pr y b)))
        (eqeq1 (p1 p2 (pr y b))))))))

(local theorem cbvlam ((x nat) (y nat) (a nat (x)) (b nat (y)))
  ((e (im (eq x y) (eq a b))))
  (eqs (lam x a) (lam y b))
()
(cbvlamh (x y a b)
  (nfnv (a y))
  (nfnv (b x))
  e))

(local theorem cbvlams ((x nat) (y nat) (a nat (x))) ()
  (eqs (lam x a) (lam y (sbn y x a)))
()
(cbvlamh (x y a (sbn y x a))
  (nfnv (a y))
  (nfsbn1 (x y a))
  (sbnq (x y a))))

(local theorem cbvlamd ((x nat) (y nat) (G wff ()) (a nat (x)) (b nat (y)))
  ((h (im (an G (eq x y)) (eq a b))))
  (im G (eqs (lam x a) (lam y b)))
()
(eqstrd ((lam x a) (lam y (sbn y x a)) (lam y b) G)
  (a1i (G (eqs (lam x a) (lam y (sbn y x a))))
    (cbvlams (x y a)))
  (lameqd (G y (sbn y x a) b)
    (syl (G (al x (im (eq x y) (eq a b))) (eq (sbn y x a) b))
      (sbnet (x y a b))
      (iald (x G (im (eq x y) (eq a b)))
        (exp (G (eq x y) (eq a b))
          h))))))

(local theorem lamisf ((x nat) (a nat (x))) ()
  (isfun (lam x a))
((u nat) (v nat) (w nat) (y nat))
(:let H1 (sbnq (x y a))
(:conv (isfun (lam x a))
  (:unfold isfun ((lam x a)) (u v w)
    (al u (al v (al w (im (el (pr u v) (lam x a)) (im (el (pr u w) (lam x a)) (eq v w)))))))
  (ax_gen (u (al v (al w (im (el (pr u v) (lam x a)) (im (el (pr u w) (lam x a)) (eq v w))))))
    (ax_gen (v (al w (im (el (pr u v) (lam x a)) (im (el (pr u w) (lam x a)) (eq v w)))))
      (ax_gen (w (im (el (pr u v) (lam x a)) (im (el (pr u w) (lam x a)) (eq v w))))
        (sylbi ((el (pr u v) (lam x a)) (ex x (eq (pr u v) (pr x a))) (im (el (pr u w) (lam x a)) (eq v w)))
          (ellam ((pr u v) x a))
          (eexh (x (eq (pr u v) (pr x a)) (im (el (pr u w) (lam x a)) (eq v w)))
            (nfim (x (el (pr u w) (lam x a)) (eq v w))
              (nfel2 (x (pr u w) (lam x a))
                (nflam1 (x a)))
              (nfv ((eq v w) x)))
            (sylbi ((eq (pr u v) (pr x a)) (an (eq u x) (eq v a)) (im (el (pr u w) (lam x a)) (eq v w)))
              (prth (u x v a))
              (syl5bi ((an (eq u x) (eq v a)) (el (pr u w) (lam x a)) (ex y (eq (pr u w) (pr y (sbn y x a)))) (eq v w))
                (ax_mp ((iff (ex x (eq (pr u w) (pr x a))) (ex y (eq (pr u w) (pr y (sbn y x a))))) (iff (el (pr u w) (lam x a)) (ex y (eq (pr u w) (pr y (sbn y x a))))))
                  (ax_mp ((iff (el (pr u w) (lam x a)) (ex x (eq (pr u w) (pr x a)))) (im (iff (ex x (eq (pr u w) (pr x a))) (ex y (eq (pr u w) (pr y (sbn y x a))))) (iff (el (pr u w) (lam x a)) (ex y (eq (pr u w) (pr y (sbn y x a)))))))
                    (bitr ((el (pr u w) (lam x a)) (ex x (eq (pr u w) (pr x a))) (ex y (eq (pr u w) (pr y (sbn y x a))))))
                    (ellam ((pr u w) x a)))
                  (cbvexh (x y (eq (pr u w) (pr x a)) (eq (pr u w) (pr y (sbn y x a))))
                    (nfv ((eq (pr u w) (pr x a)) y))
                    (nfeq2 ((pr u w) x (pr y (sbn y x a)))
                      (nfpr (x y (sbn y x a))
                        (nfnv (y x))
                        (nfsbn1 (x y a))))
                    (eqeq2d ((eq x y) (pr u w) (pr x a) (pr y (sbn y x a)))
                      (preqd ((eq x y) x y a (sbn y x a))
                        (id ((eq x y)))
                        H1))))
                (eexd (y (an (eq u x) (eq v a)) (eq (pr u w) (pr y (sbn y x a))) (eq v w))
                  (syl5bi ((an (eq u x) (eq v a)) (eq (pr u w) (pr y (sbn y x a))) (an (eq u y) (eq w (sbn y x a))) (eq v w))
                    (prth (u y w (sbn y x a)))
                    (exp ((an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a))) (eq v w))
                      (eqtr4d ((an (an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a)))) v a w)
                        (anlr ((eq u x) (eq v a) (an (eq u y) (eq w (sbn y x a)))))
                        (eqtr4d ((an (an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a)))) w (sbn y x a) a)
                          (anrr ((an (eq u x) (eq v a)) (eq u y) (eq w (sbn y x a))))
                          (syl ((an (an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a)))) (eq x y) (eq a (sbn y x a)))
                            H1
                            (eqtr3d ((an (an (eq u x) (eq v a)) (an (eq u y) (eq w (sbn y x a)))) x u y)
                              (anll ((eq u x) (eq v a) (an (eq u y) (eq w (sbn y x a)))))
                              (anrl ((an (eq u x) (eq v a)) (eq u y) (eq w (sbn y x a)))))))))))))))))))))

(local theorem finlam ((A set ()) (x nat) (v nat (x))) ()
  (im (finite A) (finite (res (lam x v) A)))
((a nat) (b nat) (m nat) (n nat) (p nat) (q nat))
(:conv (im (finite A) (finite (res (lam x v) A)))
  (im
    (:unfold finite (A) (m x)
      (ex m (al x (im (el x A) (lt x m)))))
    (finite (res (lam x v) A)))
  (eex (m (al x (im (el x A) (lt x m))) (finite (res (lam x v) A)))
    (mpi ((al x (im (el x A) (lt x m))) (ex n (al x (im (lt x m) (lt (pr x v) n)))) (finite (res (lam x v) A)))
      (ind (a b m (ex n (al x (im (lt x a) (lt (pr x v) n)))) (ex n (al x (im (lt x (d0)) (lt (pr x v) n)))) (ex n (al x (im (lt x m) (lt (pr x v) n)))) (ex n (al x (im (lt x b) (lt (pr x v) n)))) (ex n (al x (im (lt x (suc b)) (lt (pr x v) n)))))
        (exeqd ((eq a (d0)) n (al x (im (lt x a) (lt (pr x v) n))) (al x (im (lt x (d0)) (lt (pr x v) n))))
          (aleqd ((eq a (d0)) x (im (lt x a) (lt (pr x v) n)) (im (lt x (d0)) (lt (pr x v) n)))
            (imeq1d ((eq a (d0)) (lt x a) (lt x (d0)) (lt (pr x v) n))
              (lteq2 (x a (d0))))))
        (exeqd ((eq a b) n (al x (im (lt x a) (lt (pr x v) n))) (al x (im (lt x b) (lt (pr x v) n))))
          (aleqd ((eq a b) x (im (lt x a) (lt (pr x v) n)) (im (lt x b) (lt (pr x v) n)))
            (imeq1d ((eq a b) (lt x a) (lt x b) (lt (pr x v) n))
              (lteq2 (x a b)))))
        (exeqd ((eq a (suc b)) n (al x (im (lt x a) (lt (pr x v) n))) (al x (im (lt x (suc b)) (lt (pr x v) n))))
          (aleqd ((eq a (suc b)) x (im (lt x a) (lt (pr x v) n)) (im (lt x (suc b)) (lt (pr x v) n)))
            (imeq1d ((eq a (suc b)) (lt x a) (lt x (suc b)) (lt (pr x v) n))
              (lteq2 (x a (suc b))))))
        (exeqd ((eq a m) n (al x (im (lt x a) (lt (pr x v) n))) (al x (im (lt x m) (lt (pr x v) n))))
          (aleqd ((eq a m) x (im (lt x a) (lt (pr x v) n)) (im (lt x m) (lt (pr x v) n)))
            (imeq1d ((eq a m) (lt x a) (lt x m) (lt (pr x v) n))
              (lteq2 (x a m)))))
        (trud ((ex n (al x (im (lt x (d0)) (lt (pr x v) n)))))
          (iexde (n (wtru) (d0) (al x (im (lt x (d0)) (lt (pr x v) n))))
            (iald (x (an (wtru) (eq n (d0))) (im (lt x (d0)) (lt (pr x v) n)))
              (a1i ((an (wtru) (eq n (d0))) (im (lt x (d0)) (lt (pr x v) n)))
                (ax_mp ((not (lt x (d0))) (im (lt x (d0)) (lt (pr x v) n)))
                  (absurd ((lt x (d0)) (lt (pr x v) n)))
                  (lt02 (x)))))))
        (sylibr ((ex n (al x (im (lt x b) (lt (pr x v) n)))) (ex m (al x (im (lt x (suc b)) (lt (pr x v) m)))) (ex n (al x (im (lt x (suc b)) (lt (pr x v) n)))))
          (cbvex (n m (al x (im (lt x (suc b)) (lt (pr x v) n))) (al x (im (lt x (suc b)) (lt (pr x v) m))))
            (aleqd ((eq n m) x (im (lt x (suc b)) (lt (pr x v) n)) (im (lt x (suc b)) (lt (pr x v) m)))
              (imeq2d ((eq n m) (lt x (suc b)) (lt (pr x v) n) (lt (pr x v) m))
                (lteq2 ((pr x v) n m)))))
          (eex (n (al x (im (lt x b) (lt (pr x v) n))) (ex m (al x (im (lt x (suc b)) (lt (pr x v) m)))))
            (syl ((al x (im (lt x b) (lt (pr x v) n))) (al x (im (lt x (suc b)) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))) (ex m (al x (im (lt x (suc b)) (lt (pr x v) m)))))
              (iexe (m (max n (suc (pr b (sbn b x v)))) (al x (im (lt x (suc b)) (lt (pr x v) m))) (al x (im (lt x (suc b)) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))))
                (aleqdh (x (eq m (max n (suc (pr b (sbn b x v))))) (im (lt x (suc b)) (lt (pr x v) m)) (im (lt x (suc b)) (lt (pr x v) (max n (suc (pr b (sbn b x v)))))))
                  (nfeq2 (m x (max n (suc (pr b (sbn b x v)))))
                    (nfmax (x n (suc (pr b (sbn b x v))))
                      (nfnv (n x))
                      (nfsuc (x (pr b (sbn b x v)))
                        (nfpr (x b (sbn b x v))
                          (nfnv (b x))
                          (nfsbn1 (x b v))))))
                  (imeq2d ((eq m (max n (suc (pr b (sbn b x v))))) (lt x (suc b)) (lt (pr x v) m) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))
                    (lteq2 ((pr x v) m (max n (suc (pr b (sbn b x v)))))))))
              (alimi (x (im (lt x b) (lt (pr x v) n)) (im (lt x (suc b)) (lt (pr x v) (max n (suc (pr b (sbn b x v)))))))
                (syl5bir ((im (lt x b) (lt (pr x v) n)) (lt x (suc b)) (le x b) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))
                  (leltsuc (x b))
                  (syl5bi ((im (lt x b) (lt (pr x v) n)) (le x b) (or (lt x b) (eq x b)) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))
                    (leloe (x b))
                    (eord ((im (lt x b) (lt (pr x v) n)) (lt x b) (eq x b) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))
                      (imim2i ((lt x b) (lt (pr x v) n) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))
                        (mpi ((lt (pr x v) n) (le n (max n (suc (pr b (sbn b x v))))) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))
                          (lemax1 (n (suc (pr b (sbn b x v)))))
                          (ltletr ((pr x v) n (max n (suc (pr b (sbn b x v))))))))
                      (a1i ((im (lt x b) (lt (pr x v) n)) (im (eq x b) (lt (pr x v) (max n (suc (pr b (sbn b x v)))))))
                        (mpbii ((eq x b) (le (suc (pr x v)) (max n (suc (pr x v)))) (lt (pr x v) (max n (suc (pr b (sbn b x v))))))
                          (lemax2 (n (suc (pr x v))))
                          (:conv (im (eq x b) (iff (le (suc (pr x v)) (max n (suc (pr x v)))) (lt (pr x v) (max n (suc (pr b (sbn b x v)))))))
                            (im
                              (eq x b)
                              (iff
                                (:sym (:unfold lt ((pr x v) (max n (suc (pr x v)))) ()
                                  (le (suc (pr x v)) (max n (suc (pr x v))))))
                                (lt (pr x v) (max n (suc (pr b (sbn b x v)))))))
                            (lteq2d ((eq x b) (pr x v) (max n (suc (pr x v))) (max n (suc (pr b (sbn b x v)))))
                              (maxeqd ((eq x b) n n (suc (pr x v)) (suc (pr b (sbn b x v))))
                                (eqidd ((eq x b) n))
                                (suceqd ((eq x b) (pr x v) (pr b (sbn b x v)))
                                  (preqd ((eq x b) x b v (sbn b x v))
                                    (id ((eq x b)))
                                    (sbnq (x b v)))))))))))))))))
      (:conv (im (al x (im (el x A) (lt x m))) (im (ex n (al x (im (lt x m) (lt (pr x v) n)))) (finite (res (lam x v) A))))
        (im
          (al x (im (el x A) (lt x m)))
          (im
            (ex n (al x (im (lt x m) (lt (pr x v) n))))
            (:unfold finite ((res (lam x v) A)) (n p)
              (ex n (al p (im (el p (res (lam x v) A)) (lt p n)))))))
        (eximd (n (al x (im (el x A) (lt x m))) (al x (im (lt x m) (lt (pr x v) n))) (al p (im (el p (res (lam x v) A)) (lt p n))))
          (syl6 ((al x (im (el x A) (lt x m))) (al x (im (lt x m) (lt (pr x v) n))) (al x (im (el x A) (lt (pr x v) n))) (al p (im (el p (res (lam x v) A)) (lt p n))))
            (iald (p (al x (im (el x A) (lt (pr x v) n))) (im (el p (res (lam x v) A)) (lt p n)))
              (syl5bi ((al x (im (el x A) (lt (pr x v) n))) (el p (res (lam x v) A)) (an (el p (lam x v)) (el (fst p) A)) (lt p n))
                (elres ((lam x v) A p))
                (sylibr ((al x (im (el x A) (lt (pr x v) n))) (im (el p (lam x v)) (im (el (fst p) A) (lt p n))) (im (an (el p (lam x v)) (el (fst p) A)) (lt p n)))
                  (impexp ((el p (lam x v)) (el (fst p) A) (lt p n)))
                  (syl5bi ((al x (im (el x A) (lt (pr x v) n))) (el p (lam x v)) (ex x (eq p (pr x v))) (im (el (fst p) A) (lt p n)))
                    (:conv (iff (el p (lam x v)) (ex x (eq p (pr x v))))
                      (iff
                        (el
                          p
                          (:unfold lam (x v) (q)
                            (ab q (ex x (eq q (pr x v))))))
                        (ex x (eq p (pr x v))))
                      (elabe (q p (ex x (eq q (pr x v))) (ex x (eq p (pr x v))))
                        (exeqd ((eq q p) x (eq q (pr x v)) (eq p (pr x v)))
                          (eqeq1 (q p (pr x v))))))
                    (sylibr ((al x (im (el x A) (lt (pr x v) n))) (al x (im (eq p (pr x v)) (im (el (fst p) A) (lt p n)))) (im (ex x (eq p (pr x v))) (im (el (fst p) A) (lt p n))))
                      (eexb (x (eq p (pr x v)) (im (el (fst p) A) (lt p n))))
                      (alimi (x (im (el x A) (lt (pr x v) n)) (im (eq p (pr x v)) (im (el (fst p) A) (lt p n))))
                        (syl5ibrcom ((im (el x A) (lt (pr x v) n)) (im (el (fst p) A) (lt p n)) (eq p (pr x v)) (im (el x A) (lt (pr x v) n)))
                          (imeqd ((eq p (pr x v)) (el (fst p) A) (el x A) (lt p n) (lt (pr x v) n))
                            (eleq1d (A (eq p (pr x v)) (fst p) x)
                              (syl6eq ((eq p (pr x v)) (fst p) (fst (pr x v)) x)
                                (fstpr (x v))
                                (fsteq (p (pr x v)))))
                            (lteq1 (p (pr x v) n)))
                          (id ((im (el x A) (lt (pr x v) n)))))))))))
            (al2imi (x (im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n)) (im (el x A) (lt (pr x v) n)))
              (exp ((im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n)) (im (el x A) (lt (pr x v) n)))
                (syld ((an (im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n))) (el x A) (lt x m) (lt (pr x v) n))
                  (anl ((im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n))))
                  (anr ((im (el x A) (lt x m)) (im (lt x m) (lt (pr x v) n))))))))))))))

(local theorem lameqb ((x nat) (a nat (x)) (b nat (x))) ()
  (iff (al x (eq a b)) (eqs (lam x a) (lam x b)))
((p nat) (y nat) (z nat))
(:let H1 (nfnv (z x))
(:let H2 (id ((eq x z)))
(ibii ((al x (eq a b)) (eqs (lam x a) (lam x b)))
  (lameq (x a b))
  (sylbir ((eqs (lam x a) (lam x b)) (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (al x (eq a b)))
    (:conv (iff (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (eqs (lam x a) (lam x b)))
      (iff
        (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
        (eqs
          (:unfold lam (x a) (p)
            (ab p (ex x (eq p (pr x a)))))
          (:unfold lam (x b) (p)
            (ab p (ex x (eq p (pr x b)))))))
      (abeqb (p (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))))
    (sylibr ((al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (al y (eq (sbn y x a) (sbn y x b))) (al x (eq a b)))
      (cbvalh (x y (eq a b) (eq (sbn y x a) (sbn y x b)))
        (nfv ((eq a b) y))
        (nf_eq (x (sbn y x a) (sbn y x b))
          (nfsbn1 (x y a))
          (nfsbn1 (x y b)))
        (eqeqd ((eq x y) a (sbn y x a) b (sbn y x b))
          (sbnq (x y a))
          (sbnq (x y b))))
      (iald (y (al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (eq (sbn y x a) (sbn y x b)))
        (syl ((al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b)))) (eq (sbn y x a) (sbn y x b)))
          (eex (z (eq (pr y (sbn y x a)) (pr z (sbn z x b))) (eq (sbn y x a) (sbn y x b)))
            (sylbi ((eq (pr y (sbn y x a)) (pr z (sbn z x b))) (an (eq y z) (eq (sbn y x a) (sbn z x b))) (eq (sbn y x a) (sbn y x b)))
              (prth (y z (sbn y x a) (sbn z x b)))
              (imp ((eq y z) (eq (sbn y x a) (sbn z x b)) (eq (sbn y x a) (sbn y x b)))
                (bi2d ((eq y z) (eq (sbn y x a) (sbn y x b)) (eq (sbn y x a) (sbn z x b)))
                  (eqeq2d ((eq y z) (sbn y x a) (sbn y x b) (sbn z x b))
                    (sbneq1 (x y z b)))))))
          (mpbii ((al p (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b))))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b)))))
            (ax_mp ((eq (pr y (sbn y x a)) (pr y (sbn y x a))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))))
              (iexe (z y (eq (pr y (sbn y x a)) (pr z (sbn z x a))) (eq (pr y (sbn y x a)) (pr y (sbn y x a))))
                (eqeq2d ((eq z y) (pr y (sbn y x a)) (pr z (sbn z x a)) (pr y (sbn y x a)))
                  (preqd ((eq z y) z y (sbn z x a) (sbn y x a))
                    (id ((eq z y)))
                    (sbneq1 (x z y a)))))
              (eqid ((pr y (sbn y x a)))))
            (eale (p (pr y (sbn y x a)) (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))) (iff (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b))))))
              (bieqd ((eq p (pr y (sbn y x a))) (ex x (eq p (pr x a))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))) (ex x (eq p (pr x b))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b)))))
                (syl5bb ((eq p (pr y (sbn y x a))) (ex x (eq p (pr x a))) (ex z (eq p (pr z (sbn z x a)))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))))
                  (cbvexh (x z (eq p (pr x a)) (eq p (pr z (sbn z x a))))
                    (nfv ((eq p (pr x a)) z))
                    (nfeq2 (p x (pr z (sbn z x a)))
                      (nfpr (x z (sbn z x a))
                        H1
                        (nfsbn1 (x z a))))
                    (eqeq2d ((eq x z) p (pr x a) (pr z (sbn z x a)))
                      (preqd ((eq x z) x z a (sbn z x a))
                        H2
                        (sbnq (x z a)))))
                  (exeqd ((eq p (pr y (sbn y x a))) z (eq p (pr z (sbn z x a))) (eq (pr y (sbn y x a)) (pr z (sbn z x a))))
                    (eqeq1 (p (pr y (sbn y x a)) (pr z (sbn z x a))))))
                (syl5bb ((eq p (pr y (sbn y x a))) (ex x (eq p (pr x b))) (ex z (eq p (pr z (sbn z x b)))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x b)))))
                  (cbvexh (x z (eq p (pr x b)) (eq p (pr z (sbn z x b))))
                    (nfv ((eq p (pr x b)) z))
                    (nfeq2 (p x (pr z (sbn z x b)))
                      (nfpr (x z (sbn z x b))
                        H1
                        (nfsbn1 (x z b))))
                    (eqeq2d ((eq x z) p (pr x b) (pr z (sbn z x b)))
                      (preqd ((eq x z) x z b (sbn z x b))
                        H2
                        (sbnq (x z b)))))
                  (exeqd ((eq p (pr y (sbn y x a))) z (eq p (pr z (sbn z x b))) (eq (pr y (sbn y x a)) (pr z (sbn z x b))))
                    (eqeq1 (p (pr y (sbn y x a)) (pr z (sbn z x b)))))))))))))))))

(local theorem reslameq ((A set ()) (x nat) (a nat (x)) (b nat (x))) ()
  (im (al x (im (el x A) (eq a b))) (eqs (res (lam x a) A) (res (lam x b) A)))
((p nat))
(eqrd ((res (lam x a) A) (res (lam x b) A) (al x (im (el x A) (eq a b))) p)
  (bitr4g ((al x (im (el x A) (eq a b))) (an (el p (lam x a)) (el (fst p) A)) (an (el p (lam x b)) (el (fst p) A)) (el p (res (lam x a) A)) (el p (res (lam x b) A)))
    (elres ((lam x a) A p))
    (elres ((lam x b) A p))
    (syla ((al x (im (el x A) (eq a b))) (el (fst p) A) (iff (el p (lam x a)) (el p (lam x b))) (iff (an (el p (lam x a)) (el (fst p) A)) (an (el p (lam x b)) (el (fst p) A))))
      (aneq1a ((el p (lam x a)) (el p (lam x b)) (el (fst p) A)))
      (bitr4g ((an (al x (im (el x A) (eq a b))) (el (fst p) A)) (ex x (eq p (pr x a))) (ex x (eq p (pr x b))) (el p (lam x a)) (el p (lam x b)))
        (ellam (p x a))
        (ellam (p x b))
        (syl ((an (al x (im (el x A) (eq a b))) (el (fst p) A)) (al x (iff (eq p (pr x a)) (eq p (pr x b)))) (iff (ex x (eq p (pr x a))) (ex x (eq p (pr x b)))))
          (exeq (x (eq p (pr x a)) (eq p (pr x b))))
          (impcom ((el (fst p) A) (al x (im (el x A) (eq a b))) (al x (iff (eq p (pr x a)) (eq p (pr x b)))))
            (alimd (x (el (fst p) A) (im (el x A) (eq a b)) (iff (eq p (pr x a)) (eq p (pr x b))))
              (exp ((el (fst p) A) (im (el x A) (eq a b)) (iff (eq p (pr x a)) (eq p (pr x b))))
                (rbida ((an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x) (eq p (pr x a)) (eq p (pr x b)))
                  (syl6eq ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x a))) (fst p) (fst (pr x a)) x)
                    (fstpr (x a))
                    (fsteqd ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x a))) p (pr x a))
                      (anr ((an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x a))))))
                  (syl6eq ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x b))) (fst p) (fst (pr x b)) x)
                    (fstpr (x b))
                    (fsteqd ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x b))) p (pr x b))
                      (anr ((an (el (fst p) A) (im (el x A) (eq a b))) (eq p (pr x b))))))
                  (eqeq2d ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) p (pr x a) (pr x b))
                    (preq2d ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) x a b)
                      (mpd ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) (el x A) (eq a b))
                        (mpbid ((an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) (el (fst p) A) (el x A))
                          (eleq1d (A (an (an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x)) (fst p) x)
                            (anr ((an (el (fst p) A) (im (el x A) (eq a b))) (eq (fst p) x))))
                          (anll ((el (fst p) A) (im (el x A) (eq a b)) (eq (fst p) x))))
                        (anlr ((el (fst p) A) (im (el x A) (eq a b)) (eq (fst p) x))))))))))))))))

(local theorem dmlam ((x nat) (a nat (x))) ()
  (eqs (Dom (lam x a)) (Univ))
((y nat) (z nat))
(eqri ((Dom (lam x a)) (Univ) y)
  (ax_mp ((el y (Univ)) (iff (el y (Dom (lam x a))) (el y (Univ))))
    (ax_mp ((el y (Dom (lam x a))) (im (el y (Univ)) (iff (el y (Dom (lam x a))) (el y (Univ)))))
      (bith ((el y (Dom (lam x a))) (el y (Univ))))
      (ax_mp ((el (pr y (sbn y x a)) (lam x a)) (el y (Dom (lam x a))))
        (preldm ((lam x a) y (sbn y x a)))
        (mpbir ((el (pr y (sbn y x a)) (lam z (sbn z x a))) (el (pr y (sbn y x a)) (lam x a)))
          (ax_mp ((eqs (lam x a) (lam z (sbn z x a))) (iff (el (pr y (sbn y x a)) (lam x a)) (el (pr y (sbn y x a)) (lam z (sbn z x a)))))
            (eleq2 ((lam x a) (lam z (sbn z x a)) (pr y (sbn y x a))))
            (cbvlams (x z a)))
          (mpbir ((ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))) (el (pr y (sbn y x a)) (lam z (sbn z x a))))
            (ellam ((pr y (sbn y x a)) z (sbn z x a)))
            (ax_mp ((eq (pr y (sbn y x a)) (pr y (sbn y x a))) (ex z (eq (pr y (sbn y x a)) (pr z (sbn z x a)))))
              (iexe (z y (eq (pr y (sbn y x a)) (pr z (sbn z x a))) (eq (pr y (sbn y x a)) (pr y (sbn y x a))))
                (eqeq2d ((eq z y) (pr y (sbn y x a)) (pr z (sbn z x a)) (pr y (sbn y x a)))
                  (preqd ((eq z y) z y (sbn z x a) (sbn y x a))
                    (id ((eq z y)))
                    (sbneq1 (x z y a)))))
              (eqid ((pr y (sbn y x a)))))))))
    (elv (y)))))

(local theorem dmreslam ((A set ()) (x nat) (a nat (x))) ()
  (eqs (Dom (res (lam x a) A)) A)
()
(ax_mp ((eqs (Inter (Dom (lam x a)) A) A) (eqs (Dom (res (lam x a) A)) A))
  (ax_mp ((eqs (Dom (res (lam x a) A)) (Inter (Dom (lam x a)) A)) (im (eqs (Inter (Dom (lam x a)) A) A) (eqs (Dom (res (lam x a) A)) A)))
    (eqstr ((Dom (res (lam x a) A)) (Inter (Dom (lam x a)) A) A))
    (dmres (A (lam x a))))
  (ax_mp ((eqs (Inter (Univ) A) A) (eqs (Inter (Dom (lam x a)) A) A))
    (ax_mp ((eqs (Inter (Dom (lam x a)) A) (Inter (Univ) A)) (im (eqs (Inter (Univ) A) A) (eqs (Inter (Dom (lam x a)) A) A)))
      (eqstr ((Inter (Dom (lam x a)) A) (Inter (Univ) A) A))
      (ax_mp ((eqs (Dom (lam x a)) (Univ)) (eqs (Inter (Dom (lam x a)) A) (Inter (Univ) A)))
        (ineq1 ((Dom (lam x a)) (Univ) A))
        (dmlam (x a))))
    (inv1 (A)))))

(def app ((F set ()) (x nat ())) (nat ())
((y nat))
(the (ab y (el (pr x y) F))))

(local theorem appeqd ((_G wff ()) (F1 set ()) (F2 set ()) (x1 nat ()) (x2 nat ()))
  ((hF (im _G (eqs F1 F2)))
   (hx (im _G (eq x1 x2))))
  (im _G (eq (app F1 x1) (app F2 x2)))
((y nat))
(:conv (im _G (eq (app F1 x1) (app F2 x2)))
  (im
    _G
    (eq
      (:unfold app (F1 x1) (y)
        (the (ab y (el (pr x1 y) F1))))
      (:unfold app (F2 x2) (y)
        (the (ab y (el (pr x2 y) F2))))))
  (theeqd (_G (ab y (el (pr x1 y) F1)) (ab y (el (pr x2 y) F2)))
    (abeqd (_G y (el (pr x1 y) F1) (el (pr x2 y) F2))
      (eleqd (_G (pr x1 y) (pr x2 y) F1 F2)
        (preqd (_G x1 x2 y y)
          hx
          (eqidd (_G y)))
        hF)))))

(local theorem appeq ((F1 set ()) (F2 set ()) (x1 nat ()) (x2 nat ())) ()
  (im (eqs F1 F2) (im (eq x1 x2) (eq (app F1 x1) (app F2 x2))))
()
(exp ((eqs F1 F2) (eq x1 x2) (eq (app F1 x1) (app F2 x2)))
  (appeqd ((an (eqs F1 F2) (eq x1 x2)) F1 F2 x1 x2)
    (anl ((eqs F1 F2) (eq x1 x2)))
    (anr ((eqs F1 F2) (eq x1 x2))))))

(local theorem appeq1d ((G wff ()) (F1 set ()) (F2 set ()) (x nat ()))
  ((h (im G (eqs F1 F2))))
  (im G (eq (app F1 x) (app F2 x)))
()
(appeqd (G F1 F2 x x)
  h
  (eqidd (G x))))

(local theorem appeq1 ((F1 set ()) (F2 set ()) (x nat ())) ()
  (im (eqs F1 F2) (eq (app F1 x) (app F2 x)))
()
(appeq1d ((eqs F1 F2) F1 F2 x)
  (id ((eqs F1 F2)))))

(local theorem appeq2d ((G wff ()) (F set ()) (x1 nat ()) (x2 nat ()))
  ((h (im G (eq x1 x2))))
  (im G (eq (app F x1) (app F x2)))
()
(appeqd (G F F x1 x2)
  (eqsidd (G F))
  h))

(local theorem appeq2 ((F set ()) (x1 nat ()) (x2 nat ())) ()
  (im (eq x1 x2) (eq (app F x1) (app F x2)))
()
(appeq2d ((eq x1 x2) F x1 x2)
  (id ((eq x1 x2)))))

(local theorem nfapp ((x nat) (F set (x)) (a nat (x)))
  ((h1 (nfs x F))
   (h2 (nfn x a)))
  (nfn x (app F a))
((y nat))
(:conv (nfn x (app F a))
  (nfn
    x
    (:unfold app (F a) (y)
      (the (ab y (el (pr a y) F)))))
  (nfthe (x (ab y (el (pr a y) F)))
    (nfab (x y (el (pr a y) F))
      (nfel (x (pr a y) F)
        (nfpr (x a y)
          h2
          (nfnv (y x)))
        h1)))))

(local theorem isfappd ((F set ()) (G wff ()) (a nat ()) (b nat ()))
  ((h1 (im G (isfun F)))
   (h2 (im G (el (pr a b) F))))
  (im G (eq (app F a) b))
((x nat))
(:conv (im G (eq (app F a) b))
  (im
    G
    (eq
      (:unfold app (F a) (x)
        (the (ab x (el (pr a x) F))))
      b))
  (eqtheabd (G b x (el (pr a x) F))
    (syl6bb (G (el (pr a x) F) (eq b x) (eq x b))
      (eqcomb (b x))
      (isfbd (F G a b x)
        h1
        h2)))))

(local theorem eqapp ((F set ()) (G set ()) (a nat ()) (y nat)) ()
  (im (al y (iff (el (pr a y) F) (el (pr a y) G))) (eq (app F a) (app G a)))
()
(:conv (im (al y (iff (el (pr a y) F) (el (pr a y) G))) (eq (app F a) (app G a)))
  (im
    (al y (iff (el (pr a y) F) (el (pr a y) G)))
    (eq
      (:unfold app (F a) (y)
        (the (ab y (el (pr a y) F))))
      (:unfold app (G a) (y)
        (the (ab y (el (pr a y) G))))))
  (theeqd ((al y (iff (el (pr a y) F) (el (pr a y) G))) (ab y (el (pr a y) F)) (ab y (el (pr a y) G)))
    (abeq (y (el (pr a y) F) (el (pr a y) G))))))

(local theorem ndmapp ((F set ()) (a nat ())) ()
  (im (not (el a (Dom F))) (eq (app F a) (d0)))
((y nat))
(:conv (im (not (el a (Dom F))) (eq (app F a) (d0)))
  (im
    (not (el a (Dom F)))
    (eq
      (:unfold app (F a) (y)
        (the (ab y (el (pr a y) F))))
      (d0)))
  (eqthe0abd ((not (el a (Dom F))) y (el (pr a y) F))
    (syl5 ((not (el a (Dom F))) (el (pr a y) F) (el a (Dom F)) (eq y (d0)))
      (preldm (F a y))
      (absurd ((el a (Dom F)) (eq y (d0))))))))

(local theorem resapp ((A set ()) (F set ()) (a nat ())) ()
  (im (el a A) (eq (app (res F A) a) (app F a)))
((y nat))
(syl ((el a A) (al y (iff (el (pr a y) (res F A)) (el (pr a y) F))) (eq (app (res F A) a) (app F a)))
  (eqapp ((res F A) F a y))
  (iald (y (el a A) (iff (el (pr a y) (res F A)) (el (pr a y) F)))
    (syl5bb ((el a A) (el (pr a y) (res F A)) (an (el (pr a y) F) (el a A)) (el (pr a y) F))
      (prelres (F A a y))
      (bian2 ((el (pr a y) F) (el a A)))))))

(local theorem applams ((x nat) (a nat (x)) (b nat (x))) ()
  (eq (app (lam x a) b) (sbn b x a))
((p nat) (z nat))
(trud ((eq (app (lam x a) b) (sbn b x a)))
  (isfappd ((lam x a) (wtru) b (sbn b x a))
    (a1i ((wtru) (isfun (lam x a)))
      (lamisf (x a)))
    (a1i ((wtru) (el (pr b (sbn b x a)) (lam x a)))
      (mpbir ((ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))) (el (pr b (sbn b x a)) (lam x a)))
        (:conv (iff (el (pr b (sbn b x a)) (lam x a)) (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
          (iff
            (el
              (pr b (sbn b x a))
              (:unfold lam (x a) (p)
                (ab p (ex x (eq p (pr x a))))))
            (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
          (elabe (p (pr b (sbn b x a)) (ex x (eq p (pr x a))) (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
            (syl5bb ((eq p (pr b (sbn b x a))) (ex x (eq p (pr x a))) (ex z (eq p (pr z (sbn z x a)))) (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
              (cbvexh (x z (eq p (pr x a)) (eq p (pr z (sbn z x a))))
                (nfv ((eq p (pr x a)) z))
                (nfeq2 (p x (pr z (sbn z x a)))
                  (nfpr (x z (sbn z x a))
                    (nfnv (z x))
                    (nfsbn1 (x z a))))
                (eqeq2d ((eq x z) p (pr x a) (pr z (sbn z x a)))
                  (preqd ((eq x z) x z a (sbn z x a))
                    (id ((eq x z)))
                    (sbnq (x z a)))))
              (exeqd ((eq p (pr b (sbn b x a))) z (eq p (pr z (sbn z x a))) (eq (pr b (sbn b x a)) (pr z (sbn z x a))))
                (eqeq1 (p (pr b (sbn b x a)) (pr z (sbn z x a))))))))
        (ax_mp ((eq (pr b (sbn b x a)) (pr b (sbn b x a))) (ex z (eq (pr b (sbn b x a)) (pr z (sbn z x a)))))
          (iexe (z b (eq (pr b (sbn b x a)) (pr z (sbn z x a))) (eq (pr b (sbn b x a)) (pr b (sbn b x a))))
            (eqeq2d ((eq z b) (pr b (sbn b x a)) (pr z (sbn z x a)) (pr b (sbn b x a)))
              (preqd ((eq z b) z b (sbn z x a) (sbn b x a))
                (id ((eq z b)))
                (sbneq1 (x z b a)))))
          (eqid ((pr b (sbn b x a))))))))))

(local theorem applam ((x nat) (a nat (x))) ()
  (eq (app (lam x a) x) a)
()
(ax_mp ((eq (sbn x x a) a) (eq (app (lam x a) x) a))
  (ax_mp ((eq (app (lam x a) x) (sbn x x a)) (im (eq (sbn x x a) a) (eq (app (lam x a) x) a)))
    (eqtr ((app (lam x a) x) (sbn x x a) a))
    (applams (x a x)))
  (sbnid (x a))))

(local theorem applame ((b nat ()) (c nat ()) (x nat) (a nat (x)))
  ((e (im (eq x b) (eq a c))))
  (eq (app (lam x a) b) c)
()
(ax_mp ((eq (sbn b x a) c) (eq (app (lam x a) b) c))
  (ax_mp ((eq (app (lam x a) b) (sbn b x a)) (im (eq (sbn b x a) c) (eq (app (lam x a) b) c)))
    (eqtr ((app (lam x a) b) (sbn b x a) c))
    (applams (x a b)))
  (sbne (x b a c)
    e)))

(local theorem applamed ((G wff ()) (b nat ()) (c nat ()) (x nat) (a nat (x)))
  ((e (im (an G (eq x b)) (eq a c))))
  (im G (eq (app (lam x a) b) c))
()
(syl5eq (G (app (lam x a) b) (sbn b x a) c)
  (applams (x a b))
  (sbned (G x b a c)
    e)))

(local theorem lamapp ((F set ()) (x nat)) ()
  (im (isfun F) (eqs (res (lam x (app F x)) (Dom F)) F))
((p nat) (y nat) (z nat))
(:let H1 (eqeq1 (p (pr y z) (pr x (app F x))))
(:let H2 (exeqd ((eq p (pr y z)) x (eq p (pr x (app F x))) (eq (pr y z) (pr x (app F x))))
  H1)
(:let H3 (elabe (p (pr y z) (ex x (eq p (pr x (app F x)))) (ex x (eq (pr y z) (pr x (app F x)))))
  H2)
(:let H4 (:conv (iff (el (pr y z) (lam x (app F x))) (ex x (eq (pr y z) (pr x (app F x)))))
  (iff
    (el
      (pr y z)
      (:unfold lam (x (app F x)) (p)
        (ab p (ex x (eq p (pr x (app F x)))))))
    (ex x (eq (pr y z) (pr x (app F x)))))
  H3)
(:let H5 (anr ((isfun F) (el (pr x y) F)))
(:let H6 (anr ((an (isfun F) (el (pr y z) F)) (eq x y)))
(eqrd2 ((res (lam x (app F x)) (Dom F)) F (isfun F) y z)
  (syl5bb ((isfun F) (el (pr y z) (res (lam x (app F x)) (Dom F))) (an (el (pr y z) (lam x (app F x))) (el y (Dom F))) (el (pr y z) F))
    (prelres ((lam x (app F x)) (Dom F) y z))
    (ibid ((isfun F) (an (el (pr y z) (lam x (app F x))) (el y (Dom F))) (el (pr y z) F))
      (sylibr ((isfun F) (im (el (pr y z) (lam x (app F x))) (im (el y (Dom F)) (el (pr y z) F))) (im (an (el (pr y z) (lam x (app F x))) (el y (Dom F))) (el (pr y z) F)))
        (impexp ((el (pr y z) (lam x (app F x))) (el y (Dom F)) (el (pr y z) F)))
        (syl5bi ((isfun F) (el (pr y z) (lam x (app F x))) (ex x (eq (pr y z) (pr x (app F x)))) (im (el y (Dom F)) (el (pr y z) F)))
          H4
          (eexd (x (isfun F) (eq (pr y z) (pr x (app F x))) (im (el y (Dom F)) (el (pr y z) F)))
            (syl5ibrcom ((isfun F) (im (el y (Dom F)) (el (pr y z) F)) (eq (pr y z) (pr x (app F x))) (im (el x (Dom F)) (el (pr x (app F x)) F)))
              (imeqd ((eq (pr y z) (pr x (app F x))) (el y (Dom F)) (el x (Dom F)) (el (pr y z) F) (el (pr x (app F x)) F))
                (eleq1d ((Dom F) (eq (pr y z) (pr x (app F x))) y x)
                  (sylbi ((eq (pr y z) (pr x (app F x))) (an (eq y x) (eq z (app F x))) (eq y x))
                    (prth (y x z (app F x)))
                    (anl ((eq y x) (eq z (app F x))))))
                (eleq1 (F (pr y z) (pr x (app F x)))))
              (syl5bi ((isfun F) (el x (Dom F)) (ex y (el (pr x y) F)) (el (pr x (app F x)) F))
                (eldm (F x y))
                (eexda (y (isfun F) (el (pr x y) F) (el (pr x (app F x)) F))
                  (mpbird ((an (isfun F) (el (pr x y) F)) (el (pr x y) F) (el (pr x (app F x)) F))
                    (eleq1d (F (an (isfun F) (el (pr x y) F)) (pr x (app F x)) (pr x y))
                      (preq2d ((an (isfun F) (el (pr x y) F)) x (app F x) y)
                        (isfappd (F (an (isfun F) (el (pr x y) F)) x y)
                          (anl ((isfun F) (el (pr x y) F)))
                          H5)))
                    H5)))))))
      (exp ((isfun F) (el (pr y z) F) (an (el (pr y z) (lam x (app F x))) (el y (Dom F))))
        (iand ((an (isfun F) (el (pr y z) F)) (el (pr y z) (lam x (app F x))) (el y (Dom F)))
          (sylibr ((an (isfun F) (el (pr y z) F)) (ex x (eq (pr y z) (pr x (app F x)))) (el (pr y z) (lam x (app F x))))
            H4
            (iexde (x (an (isfun F) (el (pr y z) F)) y (eq (pr y z) (pr x (app F x))))
              (eqcomd ((an (an (isfun F) (el (pr y z) F)) (eq x y)) (pr x (app F x)) (pr y z))
                (preqd ((an (an (isfun F) (el (pr y z) F)) (eq x y)) x y (app F x) z)
                  H6
                  (eqtrd ((an (an (isfun F) (el (pr y z) F)) (eq x y)) (app F x) (app F y) z)
                    (appeq2d ((an (an (isfun F) (el (pr y z) F)) (eq x y)) F x y)
                      H6)
                    (isfappd (F (an (an (isfun F) (el (pr y z) F)) (eq x y)) y z)
                      (anll ((isfun F) (el (pr y z) F) (eq x y)))
                      (anlr ((isfun F) (el (pr y z) F) (eq x y)))))))))
          (anwr ((isfun F) (el (pr y z) F) (el y (Dom F)))
            (preldm (F y z)))))))))))))))

(def case ((A set ()) (B set ())) (set ())
((n nat))
(lam n (if (odd n) (app B (div n (d2))) (app A (div n (d2))))))

(local theorem caseeqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (eqs (case A1 B1) (case A2 B2)))
((n nat))
(:let H1 (eqidd (_G (div n (d2))))
(:conv (im _G (eqs (case A1 B1) (case A2 B2)))
  (im
    _G
    (eqs
      (:unfold case (A1 B1) (n)
        (lam n (if (odd n) (app B1 (div n (d2))) (app A1 (div n (d2))))))
      (:unfold case (A2 B2) (n)
        (lam n (if (odd n) (app B2 (div n (d2))) (app A2 (div n (d2))))))))
  (lameqd (_G n (if (odd n) (app B1 (div n (d2))) (app A1 (div n (d2)))) (if (odd n) (app B2 (div n (d2))) (app A2 (div n (d2)))))
    (ifeqd (_G (odd n) (odd n) (app B1 (div n (d2))) (app B2 (div n (d2))) (app A1 (div n (d2))) (app A2 (div n (d2))))
      (biidd (_G (odd n)))
      (appeqd (_G B1 B2 (div n (d2)) (div n (d2)))
        hB
        H1)
      (appeqd (_G A1 A2 (div n (d2)) (div n (d2)))
        hA
        H1))))))

(local theorem caseeq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (eqs (case A1 B1) (case A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (eqs (case A1 B1) (case A2 B2)))
  (caseeqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem caseeq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (eqs (case A1 B) (case A2 B)))
()
(caseeqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem caseeq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (eqs (case A1 B) (case A2 B)))
()
(caseeq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem caseeq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (eqs (case A B1) (case A B2)))
()
(caseeqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem caseeq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (eqs (case A B1) (case A B2)))
()
(caseeq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(theorem casel ((A set ()) (B set ()) (n nat ())) ()
  (eq (app (case A B) (b0 n)) (app A n))
((i nat))
(:conv (eq (app (case A B) (b0 n)) (app A n))
  (eq
    (app
      (:unfold case (A B) (i)
        (lam i (if (odd i) (app B (div i (d2))) (app A (div i (d2))))))
      (b0 n))
    (app A n))
  (applame ((b0 n) (app A n) i (if (odd i) (app B (div i (d2))) (app A (div i (d2)))))
    (eqtrd ((eq i (b0 n)) (if (odd i) (app B (div i (d2))) (app A (div i (d2)))) (app A (div i (d2))) (app A n))
      (syl ((eq i (b0 n)) (not (odd i)) (eq (if (odd i) (app B (div i (d2))) (app A (div i (d2)))) (app A (div i (d2)))))
        (ifneg ((odd i) (app B (div i (d2))) (app A (div i (d2)))))
        (mtbird ((eq i (b0 n)) (odd (b0 n)) (odd i))
          (oddeq (i (b0 n)))
          (a1i ((eq i (b0 n)) (not (odd (b0 n))))
            (b0odd (n)))))
      (appeq2d ((eq i (b0 n)) A (div i (d2)) n)
        (syl6eq ((eq i (b0 n)) (div i (d2)) (div (b0 n) (d2)) n)
          (b0div2 (n))
          (diveq1 (i (b0 n) (d2)))))))))

(theorem caser ((A set ()) (B set ()) (n nat ())) ()
  (eq (app (case A B) (b1 n)) (app B n))
((i nat))
(:conv (eq (app (case A B) (b1 n)) (app B n))
  (eq
    (app
      (:unfold case (A B) (i)
        (lam i (if (odd i) (app B (div i (d2))) (app A (div i (d2))))))
      (b1 n))
    (app B n))
  (applame ((b1 n) (app B n) i (if (odd i) (app B (div i (d2))) (app A (div i (d2)))))
    (eqtrd ((eq i (b1 n)) (if (odd i) (app B (div i (d2))) (app A (div i (d2)))) (app B (div i (d2))) (app B n))
      (syl ((eq i (b1 n)) (odd i) (eq (if (odd i) (app B (div i (d2))) (app A (div i (d2)))) (app B (div i (d2)))))
        (ifpos ((odd i) (app B (div i (d2))) (app A (div i (d2)))))
        (mpbird ((eq i (b1 n)) (odd (b1 n)) (odd i))
          (oddeq (i (b1 n)))
          (a1i ((eq i (b1 n)) (odd (b1 n)))
            (b1odd (n)))))
      (appeq2d ((eq i (b1 n)) B (div i (d2)) n)
        (syl6eq ((eq i (b1 n)) (div i (d2)) (div (b1 n) (d2)) n)
          (b1div2 (n))
          (diveq1 (i (b1 n) (d2)))))))))

(def Sum ((A set ()) (B set ())) (set ())
((n nat))
(ab n (ifp (odd n) (el (div n (d2)) B) (el (div n (d2)) A))))

(local theorem Sumeqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (eqs (Sum A1 B1) (Sum A2 B2)))
((n nat))
(:let H1 (eqidd (_G (div n (d2))))
(:conv (im _G (eqs (Sum A1 B1) (Sum A2 B2)))
  (im
    _G
    (eqs
      (:unfold Sum (A1 B1) (n)
        (ab n (ifp (odd n) (el (div n (d2)) B1) (el (div n (d2)) A1))))
      (:unfold Sum (A2 B2) (n)
        (ab n (ifp (odd n) (el (div n (d2)) B2) (el (div n (d2)) A2))))))
  (abeqd (_G n (ifp (odd n) (el (div n (d2)) B1) (el (div n (d2)) A1)) (ifp (odd n) (el (div n (d2)) B2) (el (div n (d2)) A2)))
    (ifpeqd (_G (odd n) (odd n) (el (div n (d2)) B1) (el (div n (d2)) B2) (el (div n (d2)) A1) (el (div n (d2)) A2))
      (biidd (_G (odd n)))
      (eleqd (_G (div n (d2)) (div n (d2)) B1 B2)
        H1
        hB)
      (eleqd (_G (div n (d2)) (div n (d2)) A1 A2)
        H1
        hA))))))

(local theorem Sumeq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (eqs (Sum A1 B1) (Sum A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (eqs (Sum A1 B1) (Sum A2 B2)))
  (Sumeqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem Sumeq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (eqs (Sum A1 B) (Sum A2 B)))
()
(Sumeqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem Sumeq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (eqs (Sum A1 B) (Sum A2 B)))
()
(Sumeq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem Sumeq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (eqs (Sum A B1) (Sum A B2)))
()
(Sumeqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem Sumeq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (eqs (Sum A B1) (Sum A B2)))
()
(Sumeq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(theorem Suml ((A set ()) (B set ()) (n nat ())) ()
  (iff (el (b0 n) (Sum A B)) (el n A))
((i nat))
(:conv (iff (el (b0 n) (Sum A B)) (el n A))
  (iff
    (el
      (b0 n)
      (:unfold Sum (A B) (i)
        (ab i (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)))))
    (el n A))
  (elabe (i (b0 n) (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el n A))
    (bitrd ((eq i (b0 n)) (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el (div i (d2)) A) (el n A))
      (syl ((eq i (b0 n)) (not (odd i)) (iff (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el (div i (d2)) A)))
        (ifpneg ((odd i) (el (div i (d2)) B) (el (div i (d2)) A)))
        (mtbird ((eq i (b0 n)) (odd (b0 n)) (odd i))
          (oddeq (i (b0 n)))
          (a1i ((eq i (b0 n)) (not (odd (b0 n))))
            (b0odd (n)))))
      (eleq1d (A (eq i (b0 n)) (div i (d2)) n)
        (syl6eq ((eq i (b0 n)) (div i (d2)) (div (b0 n) (d2)) n)
          (b0div2 (n))
          (diveq1 (i (b0 n) (d2)))))))))

(theorem Sumr ((A set ()) (B set ()) (n nat ())) ()
  (iff (el (b1 n) (Sum A B)) (el n B))
((i nat))
(:conv (iff (el (b1 n) (Sum A B)) (el n B))
  (iff
    (el
      (b1 n)
      (:unfold Sum (A B) (i)
        (ab i (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)))))
    (el n B))
  (elabe (i (b1 n) (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el n B))
    (bitrd ((eq i (b1 n)) (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el (div i (d2)) B) (el n B))
      (syl ((eq i (b1 n)) (odd i) (iff (ifp (odd i) (el (div i (d2)) B) (el (div i (d2)) A)) (el (div i (d2)) B)))
        (ifppos ((odd i) (el (div i (d2)) B) (el (div i (d2)) A)))
        (mpbird ((eq i (b1 n)) (odd (b1 n)) (odd i))
          (oddeq (i (b1 n)))
          (a1i ((eq i (b1 n)) (odd (b1 n)))
            (b1odd (n)))))
      (eleq1d (B (eq i (b1 n)) (div i (d2)) n)
        (syl6eq ((eq i (b1 n)) (div i (d2)) (div (b1 n) (d2)) n)
          (b1div2 (n))
          (diveq1 (i (b1 n) (d2)))))))))

(local def slam ((x nat) (A set (x))) (set ())
((p nat))
(lam p (app (sbs (fst p) x A) (snd p))))

(local theorem slameqd ((_G wff ()) (x nat) (A1 set (x)) (A2 set (x)))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eqs (slam x A1) (slam x A2)))
((p nat))
(:conv (im _G (eqs (slam x A1) (slam x A2)))
  (im
    _G
    (eqs
      (:unfold slam (x A1) (p)
        (lam p (app (sbs (fst p) x A1) (snd p))))
      (:unfold slam (x A2) (p)
        (lam p (app (sbs (fst p) x A2) (snd p))))))
  (lameqd (_G p (app (sbs (fst p) x A1) (snd p)) (app (sbs (fst p) x A2) (snd p)))
    (appeqd (_G (sbs (fst p) x A1) (sbs (fst p) x A2) (snd p) (snd p))
      (sbseqd (_G x (fst p) (fst p) A1 A2)
        (eqidd (_G (fst p)))
        hA)
      (eqidd (_G (snd p)))))))

(local theorem appslams ((a nat ()) (b nat ()) (x nat) (A set (x))) ()
  (eq (app (slam x A) (pr a b)) (app (sbs a x A) b))
((p nat))
(:conv (eq (app (slam x A) (pr a b)) (app (sbs a x A) b))
  (eq
    (app
      (:unfold slam (x A) (p)
        (lam p (app (sbs (fst p) x A) (snd p))))
      (pr a b))
    (app (sbs a x A) b))
  (applame ((pr a b) (app (sbs a x A) b) p (app (sbs (fst p) x A) (snd p)))
    (appeqd ((eq p (pr a b)) (sbs (fst p) x A) (sbs a x A) (snd p) b)
      (sbseq1d (x (eq p (pr a b)) (fst p) a A)
        (syl6eq ((eq p (pr a b)) (fst p) (fst (pr a b)) a)
          (fstpr (a b))
          (fsteq (p (pr a b)))))
      (syl6eq ((eq p (pr a b)) (snd p) (snd (pr a b)) b)
        (sndpr (a b))
        (sndeq (p (pr a b))))))))

(local theorem appslam ((B set ()) (a nat ()) (b nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eqs A B))))
  (eq (app (slam x A) (pr a b)) (app B b))
()
(ax_mp ((eq (app (sbs a x A) b) (app B b)) (eq (app (slam x A) (pr a b)) (app B b)))
  (ax_mp ((eq (app (slam x A) (pr a b)) (app (sbs a x A) b)) (im (eq (app (sbs a x A) b) (app B b)) (eq (app (slam x A) (pr a b)) (app B b))))
    (eqtr ((app (slam x A) (pr a b)) (app (sbs a x A) b) (app B b)))
    (appslams (a b x A)))
  (ax_mp ((eqs (sbs a x A) B) (eq (app (sbs a x A) b) (app B b)))
    (appeq1 ((sbs a x A) B b))
    (sbse (x a A B)
      h))))

(local theorem appslamed ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (x nat) (A set (x)))
  ((h (im (an G (eq x a)) (eq (app A b) c))))
  (im G (eq (app (slam x A) (pr a b)) c))
()
(syl5eq (G (app (slam x A) (pr a b)) (app (sbs a x A) b) c)
  (appslams (a b x A))
  (mpi (G (ex x (eq x a)) (eq (app (sbs a x A) b) c))
    (ax_6 (a x))
    (eexdh (x G (eq x a) (eq (app (sbs a x A) b) c))
      (nfv (G x))
      (nf_eq (x (app (sbs a x A) b) c)
        (nfapp (x (sbs a x A) b)
          (nfsbs1 (x a A))
          (nfnv (b x)))
        (nfnv (c x)))
      (exp (G (eq x a) (eq (app (sbs a x A) b) c))
        (eqtr3d ((an G (eq x a)) (app (sbs a x A) b) (app A b) c)
          (appeq1d ((an G (eq x a)) A (sbs a x A) b)
            (anwr (G (eq x a) (eqs A (sbs a x A)))
              (sbsq (x a A))))
          h))))))

(local theorem appslame ((a nat ()) (b nat ()) (c nat ()) (x nat) (A set (x)))
  ((h (im (eq x a) (eq (app A b) c))))
  (eq (app (slam x A) (pr a b)) c)
()
(trud ((eq (app (slam x A) (pr a b)) c))
  (appslamed ((wtru) a b c x A)
    (anwr ((wtru) (eq x a) (eq (app A b) c))
      h))))

(local def least ((A set ())) (nat ())
((x nat) (y nat))
(the (ab x (an (el x A) (al y (im (el y A) (le x y)))))))

(local theorem leasteqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eq (least A1) (least A2)))
((x nat) (y nat))
(:conv (im _G (eq (least A1) (least A2)))
  (im
    _G
    (eq
      (:unfold least (A1) (x y)
        (the (ab x (an (el x A1) (al y (im (el y A1) (le x y)))))))
      (:unfold least (A2) (x y)
        (the (ab x (an (el x A2) (al y (im (el y A2) (le x y)))))))))
  (theeqd (_G (ab x (an (el x A1) (al y (im (el y A1) (le x y))))) (ab x (an (el x A2) (al y (im (el y A2) (le x y))))))
    (abeqd (_G x (an (el x A1) (al y (im (el y A1) (le x y)))) (an (el x A2) (al y (im (el y A2) (le x y)))))
      (aneqd (_G (el x A1) (el x A2) (al y (im (el y A1) (le x y))) (al y (im (el y A2) (le x y))))
        (eleqd (_G x x A1 A2)
          (eqidd (_G x))
          hA)
        (aleqd (_G y (im (el y A1) (le x y)) (im (el y A2) (le x y)))
          (imeqd (_G (el y A1) (el y A2) (le x y) (le x y))
            (eleqd (_G y y A1 A2)
              (eqidd (_G y))
              hA)
            (biidd (_G (le x y))))))))))

(local theorem leasteq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eq (least A1) (least A2)))
()
(leasteqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem leastlem ((A set ()) (a nat ()) (z nat)) ()
  (im (el a A) (an (el (least A) A) (al z (im (el z A) (le (least A) z)))))
((u nat) (v nat) (x nat) (y nat))
(rsyl ((el a A) (ex u (an (el u A) (al z (im (el z A) (le u z))))) (an (el (least A) A) (al z (im (el z A) (le (least A) z)))))
  (syl ((el a A) (not (al z (im (el z A) (lt a z)))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
    (:conv (im (not (al z (im (el z A) (lt a z)))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
      (:sym (:unfold or ((al z (im (el z A) (lt a z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) ()
        (im (not (al z (im (el z A) (lt a z)))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
      (ind (x y a (or (al z (im (el z A) (lt x z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt a z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt y z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))
        (oreq1d ((eq x (d0)) (al z (im (el z A) (lt x z))) (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
          (aleqd ((eq x (d0)) z (im (el z A) (lt x z)) (im (el z A) (lt (d0) z)))
            (imeq2d ((eq x (d0)) (el z A) (lt x z) (lt (d0) z))
              (lteq1 (x (d0) z)))))
        (oreq1d ((eq x y) (al z (im (el z A) (lt x z))) (al z (im (el z A) (lt y z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
          (aleqd ((eq x y) z (im (el z A) (lt x z)) (im (el z A) (lt y z)))
            (imeq2d ((eq x y) (el z A) (lt x z) (lt y z))
              (lteq1 (x y z)))))
        (oreq1d ((eq x (suc y)) (al z (im (el z A) (lt x z))) (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
          (aleqd ((eq x (suc y)) z (im (el z A) (lt x z)) (im (el z A) (lt (suc y) z)))
            (imeq2d ((eq x (suc y)) (el z A) (lt x z) (lt (suc y) z))
              (lteq1 (x (suc y) z)))))
        (oreq1d ((eq x a) (al z (im (el z A) (lt x z))) (al z (im (el z A) (lt a z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
          (aleqd ((eq x a) z (im (el z A) (lt x z)) (im (el z A) (lt a z)))
            (imeq2d ((eq x a) (el z A) (lt x z) (lt a z))
              (lteq1 (x a z)))))
        (cases ((el (d0) A) (or (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))
          (orrd ((el (d0) A) (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
            (sylan ((el (d0) A) (el (d0) A) (al z (im (el z A) (le (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
              (iexe (u (d0) (an (el u A) (al z (im (el z A) (le u z)))) (an (el (d0) A) (al z (im (el z A) (le (d0) z)))))
                (aneqd ((eq u (d0)) (el u A) (el (d0) A) (al z (im (el z A) (le u z))) (al z (im (el z A) (le (d0) z))))
                  (eleq1 (A u (d0)))
                  (aleqd ((eq u (d0)) z (im (el z A) (le u z)) (im (el z A) (le (d0) z)))
                    (imeq2d ((eq u (d0)) (el z A) (le u z) (le (d0) z))
                      (leeq1 (u (d0) z))))))
              (id ((el (d0) A)))
              (a1i ((el (d0) A) (al z (im (el z A) (le (d0) z))))
                (ax_gen (z (im (el z A) (le (d0) z)))
                  (a1i ((el z A) (le (d0) z))
                    (le01 (z)))))))
          (orld ((not (el (d0) A)) (al z (im (el z A) (lt (d0) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
            (iald (z (not (el (d0) A)) (im (el z A) (lt (d0) z)))
              (exp ((not (el (d0) A)) (el z A) (lt (d0) z))
                (sylibr ((an (not (el (d0) A)) (el z A)) (ne z (d0)) (lt (d0) z))
                  (lt01 (z))
                  (:conv (im (an (not (el (d0) A)) (el z A)) (ne z (d0)))
                    (im
                      (an (not (el (d0) A)) (el z A))
                      (:unfold ne (z (d0)) ()
                        (not (eq z (d0)))))
                    (mtd ((an (not (el (d0) A)) (el z A)) (el (d0) A) (eq z (d0)))
                      (anl ((not (el (d0) A)) (el z A)))
                      (com12 ((eq z (d0)) (an (not (el (d0) A)) (el z A)) (el (d0) A))
                        (syl5 ((eq z (d0)) (an (not (el (d0) A)) (el z A)) (el z A) (el (d0) A))
                          (anr ((not (el (d0) A)) (el z A)))
                          (bi1d ((eq z (d0)) (el z A) (el (d0) A))
                            (eleq1 (A z (d0)))))))))))))
        (:conv (im (or (al z (im (el z A) (lt y z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))
          (im
            (or
              (al
                z
                (im
                  (el z A)
                  (:unfold lt (y z) ()
                    (le (suc y) z))))
              (ex u (an (el u A) (al z (im (el z A) (le u z))))))
            (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))
          (ax_mp ((im (ex u (an (el u A) (al z (im (el z A) (le u z))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))) (im (or (al z (im (el z A) (le (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
            (ax_mp ((im (al z (im (el z A) (le (suc y) z))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))) (im (im (ex u (an (el u A) (al z (im (el z A) (le u z))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))) (im (or (al z (im (el z A) (le (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))))
              (eor ((al z (im (el z A) (le (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))))
              (casesda ((al z (im (el z A) (le (suc y) z))) (el (suc y) A) (or (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))
                (orrd ((an (al z (im (el z A) (le (suc y) z))) (el (suc y) A)) (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
                  (sylan ((an (al z (im (el z A) (le (suc y) z))) (el (suc y) A)) (el (suc y) A) (al z (im (el z A) (le (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
                    (iexe (u (suc y) (an (el u A) (al z (im (el z A) (le u z)))) (an (el (suc y) A) (al z (im (el z A) (le (suc y) z)))))
                      (aneqd ((eq u (suc y)) (el u A) (el (suc y) A) (al z (im (el z A) (le u z))) (al z (im (el z A) (le (suc y) z))))
                        (eleq1 (A u (suc y)))
                        (aleqd ((eq u (suc y)) z (im (el z A) (le u z)) (im (el z A) (le (suc y) z)))
                          (imeq2d ((eq u (suc y)) (el z A) (le u z) (le (suc y) z))
                            (leeq1 (u (suc y) z))))))
                    (anr ((al z (im (el z A) (le (suc y) z))) (el (suc y) A)))
                    (anl ((al z (im (el z A) (le (suc y) z))) (el (suc y) A)))))
                (orld ((an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z))))))
                  (ialdh (z (an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (im (el z A) (lt (suc y) z)))
                    (nfan (z (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A)))
                      (nfal1 (z (im (el z A) (le (suc y) z))))
                      (nfv ((not (el (suc y) A)) z)))
                    (exp ((an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A) (lt (suc y) z))
                      (sylibr ((an (an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A)) (an (le (suc y) z) (ne (suc y) z)) (lt (suc y) z))
                        (ltlene ((suc y) z))
                        (iand ((an (an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A)) (le (suc y) z) (ne (suc y) z))
                          (imp ((an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A) (le (suc y) z))
                            (anwl ((al z (im (el z A) (le (suc y) z))) (not (el (suc y) A)) (im (el z A) (le (suc y) z)))
                              (eal (z (im (el z A) (le (suc y) z))))))
                          (:conv (im (an (an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A)) (ne (suc y) z))
                            (im
                              (an (an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A))
                              (:unfold ne ((suc y) z) ()
                                (not (eq (suc y) z))))
                            (mtand ((an (an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A)) (el (suc y) A) (eq (suc y) z))
                              (anlr ((al z (im (el z A) (le (suc y) z))) (not (el (suc y) A)) (el z A)))
                              (mpbird ((an (an (an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A)) (eq (suc y) z)) (el z A) (el (suc y) A))
                                (anwr ((an (an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A)) (eq (suc y) z) (iff (el (suc y) A) (el z A)))
                                  (eleq1 (A (suc y) z)))
                                (anlr ((an (al z (im (el z A) (le (suc y) z))) (not (el (suc y) A))) (el z A) (eq (suc y) z)))))))))))))
            (orr ((al z (im (el z A) (lt (suc y) z))) (ex u (an (el u A) (al z (im (el z A) (le u z)))))))))))
    (mtd ((el a A) (lt a a) (al z (im (el z A) (lt a z))))
      (a1i ((el a A) (not (lt a a)))
        (ltirr (a)))
      (com12 ((al z (im (el z A) (lt a z))) (el a A) (lt a a))
        (eale (z a (im (el z A) (lt a z)) (im (el a A) (lt a a)))
          (imeqd ((eq z a) (el z A) (el a A) (lt a z) (lt a a))
            (eleq1 (A z a))
            (lteq2 (a z a)))))))
  (eex (u (an (el u A) (al z (im (el z A) (le u z)))) (an (el (least A) A) (al z (im (el z A) (le (least A) z)))))
    (mpbird ((an (el u A) (al z (im (el z A) (le u z)))) (an (el u A) (al z (im (el z A) (le u z)))) (an (el (least A) A) (al z (im (el z A) (le (least A) z)))))
      (rsyl ((an (el u A) (al z (im (el z A) (le u z)))) (eq (least A) u) (iff (an (el (least A) A) (al z (im (el z A) (le (least A) z)))) (an (el u A) (al z (im (el z A) (le u z))))))
        (:conv (im (an (el u A) (al z (im (el z A) (le u z)))) (eq (least A) u))
          (im
            (an (el u A) (al z (im (el z A) (le u z))))
            (eq
              (:unfold least (A) (v z)
                (the (ab v (an (el v A) (al z (im (el z A) (le v z)))))))
              u))
          (eqtheabd ((an (el u A) (al z (im (el z A) (le u z)))) u v (an (el v A) (al z (im (el z A) (le v z)))))
            (ibid ((an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))) (eq v u))
              (exp ((an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))) (eq v u))
                (leasymd ((an (an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z))))) v u)
                  (mpd ((an (an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z))))) (el u A) (le v u))
                    (anll ((el u A) (al z (im (el z A) (le u z))) (an (el v A) (al z (im (el z A) (le v z))))))
                    (anwr ((an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))) (im (el u A) (le v u)))
                      (anwr ((el v A) (al z (im (el z A) (le v z))) (im (el u A) (le v u)))
                        (eale (z u (im (el z A) (le v z)) (im (el u A) (le v u)))
                          (imeqd ((eq z u) (el z A) (el u A) (le v z) (le v u))
                            (eleq1 (A z u))
                            (leeq2 (v z u)))))))
                  (mpd ((an (an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z))))) (el v A) (le u v))
                    (anrl ((an (el u A) (al z (im (el z A) (le u z)))) (el v A) (al z (im (el z A) (le v z)))))
                    (anwl ((an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))) (im (el v A) (le u v)))
                      (anwr ((el u A) (al z (im (el z A) (le u z))) (im (el v A) (le u v)))
                        (eale (z v (im (el z A) (le u z)) (im (el v A) (le u v)))
                          (imeqd ((eq z v) (el z A) (el v A) (le u z) (le u v))
                            (eleq1 (A z v))
                            (leeq2 (u z v)))))))))
              (com12 ((eq v u) (an (el u A) (al z (im (el z A) (le u z)))) (an (el v A) (al z (im (el z A) (le v z)))))
                (bi2d ((eq v u) (an (el v A) (al z (im (el z A) (le v z)))) (an (el u A) (al z (im (el z A) (le u z)))))
                  (aneqd ((eq v u) (el v A) (el u A) (al z (im (el z A) (le v z))) (al z (im (el z A) (le u z))))
                    (eleq1 (A v u))
                    (aleqd ((eq v u) z (im (el z A) (le v z)) (im (el z A) (le u z)))
                      (imeq2d ((eq v u) (el z A) (le v z) (le u z))
                        (leeq1 (v u z))))))))))
        (aneqd ((eq (least A) u) (el (least A) A) (el u A) (al z (im (el z A) (le (least A) z))) (al z (im (el z A) (le u z))))
          (eleq1 (A (least A) u))
          (aleqd ((eq (least A) u) z (im (el z A) (le (least A) z)) (im (el z A) (le u z)))
            (imeq2d ((eq (least A) u) (el z A) (le (least A) z) (le u z))
              (leeq1 ((least A) u z))))))
      (id ((an (el u A) (al z (im (el z A) (le u z))))))))))

(local theorem leastel ((A set ()) (a nat ())) ()
  (im (el a A) (el (least A) A))
((x nat))
(anld ((el a A) (el (least A) A) (al x (im (el x A) (le (least A) x))))
  (leastlem (A a x))))

(local theorem leastle ((A set ()) (a nat ())) ()
  (im (el a A) (le (least A) a))
((x nat))
(mpd ((el a A) (an (el (least A) A) (al x (im (el x A) (le (least A) x)))) (le (least A) a))
  (leastlem (A a x))
  (com12 ((an (el (least A) A) (al x (im (el x A) (le (least A) x)))) (el a A) (le (least A) a))
    (anwr ((el (least A) A) (al x (im (el x A) (le (least A) x))) (im (el a A) (le (least A) a)))
      (eale (x a (im (el x A) (le (least A) x)) (im (el a A) (le (least A) a)))
        (imeqd ((eq x a) (el x A) (el a A) (le (least A) x) (le (least A) a))
          (eleq1 (A x a))
          (leeq2 ((least A) x a))))))))

(local theorem least0 ((A set ()) (x nat)) ()
  (im (not (ex x (el x A))) (eq (least A) (d0)))
((y nat) (z nat))
(:conv (im (not (ex x (el x A))) (eq (least A) (d0)))
  (im
    (not (ex x (el x A)))
    (eq
      (:unfold least (A) (y z)
        (the (ab y (an (el y A) (al z (im (el z A) (le y z)))))))
      (d0)))
  (eqthe0abd ((not (ex x (el x A))) y (an (el y A) (al z (im (el z A) (le y z)))))
    (com12 ((an (el y A) (al z (im (el z A) (le y z)))) (not (ex x (el x A))) (eq y (d0)))
      (syl ((an (el y A) (al z (im (el z A) (le y z)))) (ex x (el x A)) (im (not (ex x (el x A))) (eq y (d0))))
        (absurdr ((ex x (el x A)) (eq y (d0))))
        (anwl ((el y A) (al z (im (el z A) (le y z))) (ex x (el x A)))
          (iexe (x y (el x A) (el y A))
            (eleq1 (A x y)))))))))

(local theorem subsnfin ((A set ())) ()
  (im (subsn A) (finite A))
((x1 nat))
(syl ((subsn A) (subset A (ab x1 (eq x1 (least A)))) (finite A))
  (mpi ((subset A (ab x1 (eq x1 (least A)))) (finite (ab x1 (eq x1 (least A)))) (finite A))
    (snfin ((least A) x1))
    (finss (A (ab x1 (eq x1 (least A))))))
  (sylib ((subsn A) (al x1 (im (el x1 A) (eq x1 (least A)))) (subset A (ab x1 (eq x1 (least A)))))
    (ssab2 (A x1 (eq x1 (least A))))
    (iald (x1 (subsn A) (im (el x1 A) (eq x1 (least A))))
      (exp ((subsn A) (el x1 A) (eq x1 (least A)))
        (subsni (A (an (subsn A) (el x1 A)) x1 (least A))
          (anl ((subsn A) (el x1 A)))
          (anr ((subsn A) (el x1 A)))
          (anwr ((subsn A) (el x1 A) (el (least A) A))
            (leastel (A x1)))))))))

(local def znsub ((m nat ()) (n nat ())) (nat ())
()
(if (lt m n) (b1 (sub n (suc m))) (b0 (sub m n))))

(local theorem znsubeqd ((_G wff ()) (m1 nat ()) (m2 nat ()) (n1 nat ()) (n2 nat ()))
  ((hm (im _G (eq m1 m2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (znsub m1 n1) (znsub m2 n2)))
()
(:conv (im _G (eq (znsub m1 n1) (znsub m2 n2)))
  (im
    _G
    (eq
      (:unfold znsub (m1 n1) ()
        (if (lt m1 n1) (b1 (sub n1 (suc m1))) (b0 (sub m1 n1))))
      (:unfold znsub (m2 n2) ()
        (if (lt m2 n2) (b1 (sub n2 (suc m2))) (b0 (sub m2 n2))))))
  (ifeqd (_G (lt m1 n1) (lt m2 n2) (b1 (sub n1 (suc m1))) (b1 (sub n2 (suc m2))) (b0 (sub m1 n1)) (b0 (sub m2 n2)))
    (lteqd (_G m1 m2 n1 n2)
      hm
      hn)
    (b1eqd (_G (sub n1 (suc m1)) (sub n2 (suc m2)))
      (subeqd (_G n1 n2 (suc m1) (suc m2))
        hn
        (suceqd (_G m1 m2)
          hm)))
    (b0eqd (_G (sub m1 n1) (sub m2 n2))
      (subeqd (_G m1 m2 n1 n2)
        hm
        hn)))))

(local theorem znsubeq ((m1 nat ()) (m2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq m1 m2) (im (eq n1 n2) (eq (znsub m1 n1) (znsub m2 n2))))
()
(exp ((eq m1 m2) (eq n1 n2) (eq (znsub m1 n1) (znsub m2 n2)))
  (znsubeqd ((an (eq m1 m2) (eq n1 n2)) m1 m2 n1 n2)
    (anl ((eq m1 m2) (eq n1 n2)))
    (anr ((eq m1 m2) (eq n1 n2))))))

(local theorem znsubeq1d ((G wff ()) (m1 nat ()) (m2 nat ()) (n nat ()))
  ((h (im G (eq m1 m2))))
  (im G (eq (znsub m1 n) (znsub m2 n)))
()
(znsubeqd (G m1 m2 n n)
  h
  (eqidd (G n))))

(local theorem znsubeq1 ((m1 nat ()) (m2 nat ()) (n nat ())) ()
  (im (eq m1 m2) (eq (znsub m1 n) (znsub m2 n)))
()
(znsubeq1d ((eq m1 m2) m1 m2 n)
  (id ((eq m1 m2)))))

(local theorem znsubeq2d ((G wff ()) (m nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (znsub m n1) (znsub m n2)))
()
(znsubeqd (G m m n1 n2)
  (eqidd (G m))
  h))

(local theorem znsubeq2 ((m nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (znsub m n1) (znsub m n2)))
()
(znsubeq2d ((eq n1 n2) m n1 n2)
  (id ((eq n1 n2)))))

(local def zfst ((n nat ())) (nat ())
((mneg nat) (mpos nat))
(app (case (lam mpos mpos) (lam mneg (d0))) n))

(local theorem zfsteqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (zfst n1) (zfst n2)))
((mneg nat) (mpos nat))
(:conv (im _G (eq (zfst n1) (zfst n2)))
  (im
    _G
    (eq
      (:unfold zfst (n1) (mneg mpos)
        (app (case (lam mpos mpos) (lam mneg (d0))) n1))
      (:unfold zfst (n2) (mneg mpos)
        (app (case (lam mpos mpos) (lam mneg (d0))) n2))))
  (appeqd (_G (case (lam mpos mpos) (lam mneg (d0))) (case (lam mpos mpos) (lam mneg (d0))) n1 n2)
    (eqsidd (_G (case (lam mpos mpos) (lam mneg (d0)))))
    hn)))

(local theorem zfsteq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (zfst n1) (zfst n2)))
()
(zfsteqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(local def zsnd ((n nat ())) (nat ())
((mneg nat) (mpos nat))
(app (case (lam mpos (d0)) (lam mneg (suc mneg))) n))

(local theorem zsndeqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (zsnd n1) (zsnd n2)))
((mneg nat) (mpos nat))
(:conv (im _G (eq (zsnd n1) (zsnd n2)))
  (im
    _G
    (eq
      (:unfold zsnd (n1) (mneg mpos)
        (app (case (lam mpos (d0)) (lam mneg (suc mneg))) n1))
      (:unfold zsnd (n2) (mneg mpos)
        (app (case (lam mpos (d0)) (lam mneg (suc mneg))) n2))))
  (appeqd (_G (case (lam mpos (d0)) (lam mneg (suc mneg))) (case (lam mpos (d0)) (lam mneg (suc mneg))) n1 n2)
    (eqsidd (_G (case (lam mpos (d0)) (lam mneg (suc mneg)))))
    hn)))

(local theorem zsndeq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (zsnd n1) (zsnd n2)))
()
(zsndeqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(local theorem zfstb0 ((n nat ())) ()
  (eq (zfst (b0 n)) n)
((x1 nat) (x2 nat))
(:conv (eq (zfst (b0 n)) n)
  (eq
    (:unfold zfst ((b0 n)) (x2 x1)
      (app (case (lam x1 x1) (lam x2 (d0))) (b0 n)))
    n)
  (ax_mp ((eq (app (lam x1 x1) n) n) (eq (app (case (lam x1 x1) (lam x2 (d0))) (b0 n)) n))
    (ax_mp ((eq (app (case (lam x1 x1) (lam x2 (d0))) (b0 n)) (app (lam x1 x1) n)) (im (eq (app (lam x1 x1) n) n) (eq (app (case (lam x1 x1) (lam x2 (d0))) (b0 n)) n)))
      (eqtr ((app (case (lam x1 x1) (lam x2 (d0))) (b0 n)) (app (lam x1 x1) n) n))
      (casel ((lam x1 x1) (lam x2 (d0)) n)))
    (applame (n n x1 x1)
      (id ((eq x1 n)))))))

(local theorem zfstb1 ((n nat ())) ()
  (eq (zfst (b1 n)) (d0))
((x1 nat) (x2 nat))
(:conv (eq (zfst (b1 n)) (d0))
  (eq
    (:unfold zfst ((b1 n)) (x1 x2)
      (app (case (lam x2 x2) (lam x1 (d0))) (b1 n)))
    (d0))
  (ax_mp ((eq (app (lam x1 (d0)) n) (d0)) (eq (app (case (lam x2 x2) (lam x1 (d0))) (b1 n)) (d0)))
    (ax_mp ((eq (app (case (lam x2 x2) (lam x1 (d0))) (b1 n)) (app (lam x1 (d0)) n)) (im (eq (app (lam x1 (d0)) n) (d0)) (eq (app (case (lam x2 x2) (lam x1 (d0))) (b1 n)) (d0))))
      (eqtr ((app (case (lam x2 x2) (lam x1 (d0))) (b1 n)) (app (lam x1 (d0)) n) (d0)))
      (caser ((lam x2 x2) (lam x1 (d0)) n)))
    (applame (n (d0) x1 (d0))
      (eqidd ((eq x1 n) (d0)))))))

(local theorem zsndb0 ((n nat ())) ()
  (eq (zsnd (b0 n)) (d0))
((x1 nat) (x2 nat))
(:conv (eq (zsnd (b0 n)) (d0))
  (eq
    (:unfold zsnd ((b0 n)) (x2 x1)
      (app (case (lam x1 (d0)) (lam x2 (suc x2))) (b0 n)))
    (d0))
  (ax_mp ((eq (app (lam x1 (d0)) n) (d0)) (eq (app (case (lam x1 (d0)) (lam x2 (suc x2))) (b0 n)) (d0)))
    (ax_mp ((eq (app (case (lam x1 (d0)) (lam x2 (suc x2))) (b0 n)) (app (lam x1 (d0)) n)) (im (eq (app (lam x1 (d0)) n) (d0)) (eq (app (case (lam x1 (d0)) (lam x2 (suc x2))) (b0 n)) (d0))))
      (eqtr ((app (case (lam x1 (d0)) (lam x2 (suc x2))) (b0 n)) (app (lam x1 (d0)) n) (d0)))
      (casel ((lam x1 (d0)) (lam x2 (suc x2)) n)))
    (applame (n (d0) x1 (d0))
      (eqidd ((eq x1 n) (d0)))))))

(local theorem zsndb1 ((n nat ())) ()
  (eq (zsnd (b1 n)) (suc n))
((x1 nat) (x2 nat))
(:conv (eq (zsnd (b1 n)) (suc n))
  (eq
    (:unfold zsnd ((b1 n)) (x1 x2)
      (app (case (lam x2 (d0)) (lam x1 (suc x1))) (b1 n)))
    (suc n))
  (ax_mp ((eq (app (lam x1 (suc x1)) n) (suc n)) (eq (app (case (lam x2 (d0)) (lam x1 (suc x1))) (b1 n)) (suc n)))
    (ax_mp ((eq (app (case (lam x2 (d0)) (lam x1 (suc x1))) (b1 n)) (app (lam x1 (suc x1)) n)) (im (eq (app (lam x1 (suc x1)) n) (suc n)) (eq (app (case (lam x2 (d0)) (lam x1 (suc x1))) (b1 n)) (suc n))))
      (eqtr ((app (case (lam x2 (d0)) (lam x1 (suc x1))) (b1 n)) (app (lam x1 (suc x1)) n) (suc n)))
      (caser ((lam x2 (d0)) (lam x1 (suc x1)) n)))
    (applame (n (suc n) x1 (suc x1))
      (suceq (x1 n))))))

(local theorem zfstsnd ((n nat ())) ()
  (eq (znsub (zfst n) (zsnd n)) n)
()
(:let H1 (zsndb0 ((div n (d2))))
(:let H2 (zsndeq (n (b0 (div n (d2)))))
(:let H3 (syl6eq ((eq n (b0 (div n (d2)))) (zsnd n) (zsnd (b0 (div n (d2)))) (d0))
  H1
  H2)
(:let H4 (zfstb0 ((div n (d2))))
(:let H5 (zfsteq (n (b0 (div n (d2)))))
(:let H6 (syl6eq ((eq n (b0 (div n (d2)))) (zfst n) (zfst (b0 (div n (d2)))) (div n (d2)))
  H4
  H5)
(:let H7 (sub02 ((div n (d2))))
(:let H8 (zfstb1 ((div n (d2))))
(:let H9 (zfsteq (n (b1 (div n (d2)))))
(:let H10 (syl6eq ((eq n (b1 (div n (d2)))) (zfst n) (zfst (b1 (div n (d2)))) (d0))
  H8
  H9)
(:let H11 (zsndb1 ((div n (d2))))
(:let H12 (zsndeq (n (b1 (div n (d2)))))
(:let H13 (syl6eq ((eq n (b1 (div n (d2)))) (zsnd n) (zsnd (b1 (div n (d2)))) (suc (div n (d2))))
  H11
  H12)
(:conv (eq (znsub (zfst n) (zsnd n)) n)
  (eq
    (:unfold znsub ((zfst n) (zsnd n)) ()
      (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))))
    n)
  (ax_mp ((or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) n))
    (ax_mp ((im (eq n (b1 (div n (d2)))) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) n)) (im (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) n)))
      (ax_mp ((im (eq n (b0 (div n (d2)))) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) n)) (im (im (eq n (b1 (div n (d2)))) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) n)) (im (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) n))))
        (eor ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2)))) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) n)))
        (eqtrd ((eq n (b0 (div n (d2)))) (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) (b0 (sub (zfst n) (zsnd n))) n)
          (syl ((eq n (b0 (div n (d2)))) (not (lt (zfst n) (zsnd n))) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) (b0 (sub (zfst n) (zsnd n)))))
            (ifneg ((lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))))
            (sylib ((eq n (b0 (div n (d2)))) (le (zsnd n) (zfst n)) (not (lt (zfst n) (zsnd n))))
              (lenlt ((zsnd n) (zfst n)))
              (mpbiri ((eq n (b0 (div n (d2)))) (le (d0) (div n (d2))) (le (zsnd n) (zfst n)))
                (le01 ((div n (d2))))
                (leeqd ((eq n (b0 (div n (d2)))) (zsnd n) (d0) (zfst n) (div n (d2)))
                  H3
                  H6))))
          (eqtr4d ((eq n (b0 (div n (d2)))) (b0 (sub (zfst n) (zsnd n))) (b0 (div n (d2))) n)
            (b0eqd ((eq n (b0 (div n (d2)))) (sub (zfst n) (zsnd n)) (div n (d2)))
              (syl6eq ((eq n (b0 (div n (d2)))) (sub (zfst n) (zsnd n)) (sub (div n (d2)) (d0)) (div n (d2)))
                H7
                (subeqd ((eq n (b0 (div n (d2)))) (zfst n) (div n (d2)) (zsnd n) (d0))
                  H6
                  H3)))
            (id ((eq n (b0 (div n (d2)))))))))
      (eqtrd ((eq n (b1 (div n (d2)))) (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) (b1 (sub (zsnd n) (suc (zfst n)))) n)
        (syl ((eq n (b1 (div n (d2)))) (lt (zfst n) (zsnd n)) (eq (if (lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))) (b1 (sub (zsnd n) (suc (zfst n))))))
          (ifpos ((lt (zfst n) (zsnd n)) (b1 (sub (zsnd n) (suc (zfst n)))) (b0 (sub (zfst n) (zsnd n)))))
          (mpbiri ((eq n (b1 (div n (d2)))) (lt (d0) (suc (div n (d2)))) (lt (zfst n) (zsnd n)))
            (lt01S ((div n (d2))))
            (lteqd ((eq n (b1 (div n (d2)))) (zfst n) (d0) (zsnd n) (suc (div n (d2))))
              H10
              H13)))
        (eqtr4d ((eq n (b1 (div n (d2)))) (b1 (sub (zsnd n) (suc (zfst n)))) (b1 (div n (d2))) n)
          (b1eqd ((eq n (b1 (div n (d2)))) (sub (zsnd n) (suc (zfst n))) (div n (d2)))
            (syl6eq ((eq n (b1 (div n (d2)))) (sub (zsnd n) (suc (zfst n))) (sub (suc (div n (d2))) (suc (d0))) (div n (d2)))
              (ax_mp ((eq (sub (div n (d2)) (d0)) (div n (d2))) (eq (sub (suc (div n (d2))) (suc (d0))) (div n (d2))))
                (ax_mp ((eq (sub (suc (div n (d2))) (suc (d0))) (sub (div n (d2)) (d0))) (im (eq (sub (div n (d2)) (d0)) (div n (d2))) (eq (sub (suc (div n (d2))) (suc (d0))) (div n (d2)))))
                  (eqtr ((sub (suc (div n (d2))) (suc (d0))) (sub (div n (d2)) (d0)) (div n (d2))))
                  (subSS ((div n (d2)) (d0))))
                H7)
              (subeqd ((eq n (b1 (div n (d2)))) (zsnd n) (suc (div n (d2))) (suc (zfst n)) (suc (d0)))
                H13
                (suceqd ((eq n (b1 (div n (d2)))) (zfst n) (d0))
                  H10))))
          (id ((eq n (b1 (div n (d2)))))))))
    (b0orb1 (n))))))))))))))))))

(local theorem zfstznsub ((m nat ()) (n nat ())) ()
  (eq (zfst (znsub m n)) (sub m n))
()
(cases ((lt m n) (eq (zfst (znsub m n)) (sub m n)))
  (eqtr4d ((lt m n) (zfst (znsub m n)) (d0) (sub m n))
    (syl6eq ((lt m n) (zfst (znsub m n)) (zfst (b1 (sub n (suc m)))) (d0))
      (zfstb1 ((sub n (suc m))))
      (zfsteqd ((lt m n) (znsub m n) (b1 (sub n (suc m))))
        (:conv (im (lt m n) (eq (znsub m n) (b1 (sub n (suc m)))))
          (im
            (lt m n)
            (eq
              (:unfold znsub (m n) ()
                (if (lt m n) (b1 (sub n (suc m))) (b0 (sub m n))))
              (b1 (sub n (suc m)))))
          (ifpos ((lt m n) (b1 (sub n (suc m))) (b0 (sub m n)))))))
    (ltsubeq0 (m n)))
  (syl6eq ((not (lt m n)) (zfst (znsub m n)) (zfst (b0 (sub m n))) (sub m n))
    (zfstb0 ((sub m n)))
    (zfsteqd ((not (lt m n)) (znsub m n) (b0 (sub m n)))
      (:conv (im (not (lt m n)) (eq (znsub m n) (b0 (sub m n))))
        (im
          (not (lt m n))
          (eq
            (:unfold znsub (m n) ()
              (if (lt m n) (b1 (sub n (suc m))) (b0 (sub m n))))
            (b0 (sub m n))))
        (ifneg ((lt m n) (b1 (sub n (suc m))) (b0 (sub m n)))))))))

(local theorem zfstsnd0 ((n nat ())) ()
  (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))
()
(ax_mp ((or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))))
  (ax_mp ((im (eq n (b1 (div n (d2)))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))) (im (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))))
    (ax_mp ((im (eq n (b0 (div n (d2)))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))) (im (im (eq n (b1 (div n (d2)))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))) (im (or (eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2))))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))))))
      (eor ((eq n (b0 (div n (d2)))) (eq n (b1 (div n (d2)))) (or (eq (zfst n) (d0)) (eq (zsnd n) (d0)))))
      (orrd ((eq n (b0 (div n (d2)))) (eq (zfst n) (d0)) (eq (zsnd n) (d0)))
        (syl6eq ((eq n (b0 (div n (d2)))) (zsnd n) (zsnd (b0 (div n (d2)))) (d0))
          (zsndb0 ((div n (d2))))
          (zsndeq (n (b0 (div n (d2))))))))
    (orld ((eq n (b1 (div n (d2)))) (eq (zfst n) (d0)) (eq (zsnd n) (d0)))
      (syl6eq ((eq n (b1 (div n (d2)))) (zfst n) (zfst (b1 (div n (d2)))) (d0))
        (zfstb1 ((div n (d2))))
        (zfsteq (n (b1 (div n (d2))))))))
  (b0orb1 (n))))

(local theorem zneqb ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (iff (eq (znsub a c) (znsub b d)) (eq (add a d) (add b c)))
()
(:let H1 (ifpos ((lt a c) (b1 (sub c (suc a))) (b0 (sub a c))))
(:let H2 (:conv (im (lt a c) (eq (znsub a c) (b1 (sub c (suc a)))))
  (im
    (lt a c)
    (eq
      (:unfold znsub (a c) ()
        (if (lt a c) (b1 (sub c (suc a))) (b0 (sub a c))))
      (b1 (sub c (suc a)))))
  H1)
(:let H3 (ifpos ((lt b d) (b1 (sub d (suc b))) (b0 (sub b d))))
(:let H4 (:conv (im (lt b d) (eq (znsub b d) (b1 (sub d (suc b)))))
  (im
    (lt b d)
    (eq
      (:unfold znsub (b d) ()
        (if (lt b d) (b1 (sub d (suc b))) (b0 (sub b d))))
      (b1 (sub d (suc b)))))
  H3)
(:let H5 (ifneg ((lt b d) (b1 (sub d (suc b))) (b0 (sub b d))))
(:let H6 (:conv (im (not (lt b d)) (eq (znsub b d) (b0 (sub b d))))
  (im
    (not (lt b d))
    (eq
      (:unfold znsub (b d) ()
        (if (lt b d) (b1 (sub d (suc b))) (b0 (sub b d))))
      (b0 (sub b d))))
  H5)
(:let H7 (lenlt (d b))
(:let H8 (ifneg ((lt a c) (b1 (sub c (suc a))) (b0 (sub a c))))
(:let H9 (:conv (im (not (lt a c)) (eq (znsub a c) (b0 (sub a c))))
  (im
    (not (lt a c))
    (eq
      (:unfold znsub (a c) ()
        (if (lt a c) (b1 (sub c (suc a))) (b0 (sub a c))))
      (b0 (sub a c))))
  H8)
(:let H10 (lenlt (c a))
(cases ((lt a c) (iff (eq (znsub a c) (znsub b d)) (eq (add a d) (add b c))))
  (casesda ((lt a c) (lt b d) (iff (eq (znsub a c) (znsub b d)) (eq (add a d) (add b c))))
    (bitrd ((an (lt a c) (lt b d)) (eq (znsub a c) (znsub b d)) (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (add a d) (add b c)))
      (eqeqd ((an (lt a c) (lt b d)) (znsub a c) (b1 (sub c (suc a))) (znsub b d) (b1 (sub d (suc b))))
        (anwl ((lt a c) (lt b d) (eq (znsub a c) (b1 (sub c (suc a)))))
          H2)
        (anwr ((lt a c) (lt b d) (eq (znsub b d) (b1 (sub d (suc b)))))
          H4))
      (syl5bb ((an (lt a c) (lt b d)) (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (add a d) (add b c)))
        (ax_mp ((iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub c (suc a)) (sub d (suc b)))) (iff (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a))))))
          (ax_mp ((iff (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (sub c (suc a)) (sub d (suc b)))) (im (iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub c (suc a)) (sub d (suc b)))) (iff (eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))))))
            (bitr4 ((eq (b1 (sub c (suc a))) (b1 (sub d (suc b)))) (eq (sub c (suc a)) (sub d (suc b))) (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a))))))
            (b1can ((sub c (suc a)) (sub d (suc b)))))
          (ax_mp ((iff (eq (sub d (suc b)) (sub c (suc a))) (eq (sub c (suc a)) (sub d (suc b)))) (iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub c (suc a)) (sub d (suc b)))))
            (ax_mp ((iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub d (suc b)) (sub c (suc a)))) (im (iff (eq (sub d (suc b)) (sub c (suc a))) (eq (sub c (suc a)) (sub d (suc b)))) (iff (eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub c (suc a)) (sub d (suc b))))))
              (bitr ((eq (add (suc (add a b)) (sub d (suc b))) (add (suc (add a b)) (sub c (suc a)))) (eq (sub d (suc b)) (sub c (suc a))) (eq (sub c (suc a)) (sub d (suc b)))))
              (addcan2 ((suc (add a b)) (sub d (suc b)) (sub c (suc a)))))
            (eqcomb ((sub d (suc b)) (sub c (suc a))))))
        (eqeqd ((an (lt a c) (lt b d)) (add (suc (add a b)) (sub d (suc b))) (add a d) (add (suc (add a b)) (sub c (suc a))) (add b c))
          (syl5eq ((an (lt a c) (lt b d)) (add (suc (add a b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b)))) (add a d))
            (ax_mp ((eq (add (add a (suc b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b))))) (eq (add (suc (add a b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b))))))
              (ax_mp ((eq (add (add a (suc b)) (sub d (suc b))) (add (suc (add a b)) (sub d (suc b)))) (im (eq (add (add a (suc b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b))))) (eq (add (suc (add a b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b)))))))
                (eqtr3 ((add (suc (add a b)) (sub d (suc b))) (add (add a (suc b)) (sub d (suc b))) (add a (add (suc b) (sub d (suc b))))))
                (ax_mp ((eq (add a (suc b)) (suc (add a b))) (eq (add (add a (suc b)) (sub d (suc b))) (add (suc (add a b)) (sub d (suc b)))))
                  (addeq1 ((add a (suc b)) (suc (add a b)) (sub d (suc b))))
                  (addS2 (a b))))
              (addass (a (suc b) (sub d (suc b)))))
            (addeq2d ((an (lt a c) (lt b d)) a (add (suc b) (sub d (suc b))) d)
              (anwr ((lt a c) (lt b d) (eq (add (suc b) (sub d (suc b))) d))
                (:conv (im (lt b d) (eq (add (suc b) (sub d (suc b))) d))
                  (im
                    (:unfold lt (b d) ()
                      (le (suc b) d))
                    (eq (add (suc b) (sub d (suc b))) d))
                  (pncan3 ((suc b) d))))))
          (syl5eq ((an (lt a c) (lt b d)) (add (suc (add a b)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a)))) (add b c))
            (ax_mp ((eq (add (add b (suc a)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a))))) (eq (add (suc (add a b)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a))))))
              (ax_mp ((eq (add (add b (suc a)) (sub c (suc a))) (add (suc (add a b)) (sub c (suc a)))) (im (eq (add (add b (suc a)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a))))) (eq (add (suc (add a b)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a)))))))
                (eqtr3 ((add (suc (add a b)) (sub c (suc a))) (add (add b (suc a)) (sub c (suc a))) (add b (add (suc a) (sub c (suc a))))))
                (ax_mp ((eq (add b (suc a)) (suc (add a b))) (eq (add (add b (suc a)) (sub c (suc a))) (add (suc (add a b)) (sub c (suc a)))))
                  (addeq1 ((add b (suc a)) (suc (add a b)) (sub c (suc a))))
                  (ax_mp ((eq (add (suc a) b) (suc (add a b))) (eq (add b (suc a)) (suc (add a b))))
                    (ax_mp ((eq (add b (suc a)) (add (suc a) b)) (im (eq (add (suc a) b) (suc (add a b))) (eq (add b (suc a)) (suc (add a b)))))
                      (eqtr ((add b (suc a)) (add (suc a) b) (suc (add a b))))
                      (addcom (b (suc a))))
                    (addS1 (a b)))))
              (addass (b (suc a) (sub c (suc a)))))
            (addeq2d ((an (lt a c) (lt b d)) b (add (suc a) (sub c (suc a))) c)
              (anwl ((lt a c) (lt b d) (eq (add (suc a) (sub c (suc a))) c))
                (:conv (im (lt a c) (eq (add (suc a) (sub c (suc a))) c))
                  (im
                    (:unfold lt (a c) ()
                      (le (suc a) c))
                    (eq (add (suc a) (sub c (suc a))) c))
                  (pncan3 ((suc a) c)))))))))
    (bitrd ((an (lt a c) (not (lt b d))) (eq (znsub a c) (znsub b d)) (eq (b1 (sub c (suc a))) (b0 (sub b d))) (eq (add a d) (add b c)))
      (eqeqd ((an (lt a c) (not (lt b d))) (znsub a c) (b1 (sub c (suc a))) (znsub b d) (b0 (sub b d)))
        (anwl ((lt a c) (not (lt b d)) (eq (znsub a c) (b1 (sub c (suc a)))))
          H2)
        (anwr ((lt a c) (not (lt b d)) (eq (znsub b d) (b0 (sub b d))))
          H6))
      (binthd ((an (lt a c) (not (lt b d))) (eq (b1 (sub c (suc a))) (b0 (sub b d))) (eq (add a d) (add b c)))
        (a1i ((an (lt a c) (not (lt b d))) (not (eq (b1 (sub c (suc a))) (b0 (sub b d)))))
          (:conv (not (eq (b1 (sub c (suc a))) (b0 (sub b d))))
            (:sym (:unfold ne ((b1 (sub c (suc a))) (b0 (sub b d))) ()
              (not (eq (b1 (sub c (suc a))) (b0 (sub b d))))))
            (b1neb0 ((sub c (suc a)) (sub b d)))))
        (syl ((an (lt a c) (not (lt b d))) (lt (add a d) (add b c)) (not (eq (add a d) (add b c))))
          (:conv (im (lt (add a d) (add b c)) (not (eq (add a d) (add b c))))
            (im
              (lt (add a d) (add b c))
              (:sym (:unfold ne ((add a d) (add b c)) ()
                (not (eq (add a d) (add b c))))))
            (ltne ((add a d) (add b c))))
          (ltletrd ((an (lt a c) (not (lt b d))) (add a d) (add c d) (add b c))
            (sylib ((an (lt a c) (not (lt b d))) (lt a c) (lt (add a d) (add c d)))
              (ltadd1 (a c d))
              (anl ((lt a c) (not (lt b d)))))
            (sylib ((an (lt a c) (not (lt b d))) (le (add c d) (add c b)) (le (add c d) (add b c)))
              (ax_mp ((eq (add c b) (add b c)) (iff (le (add c d) (add c b)) (le (add c d) (add b c))))
                (leeq2 ((add c d) (add c b) (add b c)))
                (addcom (c b)))
              (sylib ((an (lt a c) (not (lt b d))) (le d b) (le (add c d) (add c b)))
                (leadd2 (c d b))
                (sylibr ((an (lt a c) (not (lt b d))) (not (lt b d)) (le d b))
                  H7
                  (anr ((lt a c) (not (lt b d))))))))))))
  (casesda ((not (lt a c)) (lt b d) (iff (eq (znsub a c) (znsub b d)) (eq (add a d) (add b c))))
    (bitrd ((an (not (lt a c)) (lt b d)) (eq (znsub a c) (znsub b d)) (eq (b0 (sub a c)) (b1 (sub d (suc b)))) (eq (add a d) (add b c)))
      (eqeqd ((an (not (lt a c)) (lt b d)) (znsub a c) (b0 (sub a c)) (znsub b d) (b1 (sub d (suc b))))
        (anwl ((not (lt a c)) (lt b d) (eq (znsub a c) (b0 (sub a c))))
          H9)
        (anwr ((not (lt a c)) (lt b d) (eq (znsub b d) (b1 (sub d (suc b)))))
          H4))
      (binthd ((an (not (lt a c)) (lt b d)) (eq (b0 (sub a c)) (b1 (sub d (suc b)))) (eq (add a d) (add b c)))
        (a1i ((an (not (lt a c)) (lt b d)) (not (eq (b0 (sub a c)) (b1 (sub d (suc b))))))
          (:conv (not (eq (b0 (sub a c)) (b1 (sub d (suc b)))))
            (:sym (:unfold ne ((b0 (sub a c)) (b1 (sub d (suc b)))) ()
              (not (eq (b0 (sub a c)) (b1 (sub d (suc b)))))))
            (b0neb1 ((sub a c) (sub d (suc b))))))
        (syl ((an (not (lt a c)) (lt b d)) (lt (add b c) (add a d)) (not (eq (add a d) (add b c))))
          (:conv (im (lt (add b c) (add a d)) (not (eq (add a d) (add b c))))
            (im
              (lt (add b c) (add a d))
              (:sym (:unfold ne ((add a d) (add b c)) ()
                (not (eq (add a d) (add b c))))))
            (ltner ((add b c) (add a d))))
          (lelttrd ((an (not (lt a c)) (lt b d)) (add b c) (add b a) (add a d))
            (sylib ((an (not (lt a c)) (lt b d)) (le c a) (le (add b c) (add b a)))
              (leadd2 (b c a))
              (sylibr ((an (not (lt a c)) (lt b d)) (not (lt a c)) (le c a))
                H10
                (anl ((not (lt a c)) (lt b d)))))
            (sylib ((an (not (lt a c)) (lt b d)) (lt b d) (lt (add b a) (add a d)))
              (ax_mp ((iff (lt (add a b) (add a d)) (lt (add b a) (add a d))) (iff (lt b d) (lt (add b a) (add a d))))
                (ax_mp ((iff (lt b d) (lt (add a b) (add a d))) (im (iff (lt (add a b) (add a d)) (lt (add b a) (add a d))) (iff (lt b d) (lt (add b a) (add a d)))))
                  (bitr ((lt b d) (lt (add a b) (add a d)) (lt (add b a) (add a d))))
                  (ltadd2 (a b d)))
                (ax_mp ((eq (add a b) (add b a)) (iff (lt (add a b) (add a d)) (lt (add b a) (add a d))))
                  (lteq1 ((add a b) (add b a) (add a d)))
                  (addcom (a b))))
              (anr ((not (lt a c)) (lt b d))))))))
    (bitrd ((an (not (lt a c)) (not (lt b d))) (eq (znsub a c) (znsub b d)) (eq (b0 (sub a c)) (b0 (sub b d))) (eq (add a d) (add b c)))
      (eqeqd ((an (not (lt a c)) (not (lt b d))) (znsub a c) (b0 (sub a c)) (znsub b d) (b0 (sub b d)))
        (anwl ((not (lt a c)) (not (lt b d)) (eq (znsub a c) (b0 (sub a c))))
          H9)
        (anwr ((not (lt a c)) (not (lt b d)) (eq (znsub b d) (b0 (sub b d))))
          H6))
      (syl5bb ((an (not (lt a c)) (not (lt b d))) (eq (b0 (sub a c)) (b0 (sub b d))) (eq (sub a c) (sub b d)) (eq (add a d) (add b c)))
        (b0can ((sub a c) (sub b d)))
        (syl5bbr ((an (not (lt a c)) (not (lt b d))) (eq (sub a c) (sub b d)) (eq (add (sub a c) (add c d)) (add (sub b d) (add c d))) (eq (add a d) (add b c)))
          (addcan1 ((sub a c) (sub b d) (add c d)))
          (eqeqd ((an (not (lt a c)) (not (lt b d))) (add (sub a c) (add c d)) (add a d) (add (sub b d) (add c d)) (add b c))
            (syl5eqr ((an (not (lt a c)) (not (lt b d))) (add (sub a c) (add c d)) (add (add (sub a c) c) d) (add a d))
              (addass ((sub a c) c d))
              (addeq1d ((an (not (lt a c)) (not (lt b d))) (add (sub a c) c) a d)
                (syl ((an (not (lt a c)) (not (lt b d))) (le c a) (eq (add (sub a c) c) a))
                  (npcan (a c))
                  (sylibr ((an (not (lt a c)) (not (lt b d))) (not (lt a c)) (le c a))
                    H10
                    (anl ((not (lt a c)) (not (lt b d))))))))
            (syl5eqr ((an (not (lt a c)) (not (lt b d))) (add (sub b d) (add c d)) (add (add (sub b d) c) d) (add b c))
              (addass ((sub b d) c d))
              (syl5eq ((an (not (lt a c)) (not (lt b d))) (add (add (sub b d) c) d) (add (add (sub b d) d) c) (add b c))
                (add32 ((sub b d) c d))
                (addeq1d ((an (not (lt a c)) (not (lt b d))) (add (sub b d) d) b c)
                  (syl ((an (not (lt a c)) (not (lt b d))) (le d b) (eq (add (sub b d) d) b))
                    (npcan (b d))
                    (sylibr ((an (not (lt a c)) (not (lt b d))) (not (lt b d)) (le d b))
                      H7
                      (anr ((not (lt a c)) (not (lt b d))))))))))))))))))))))))))

(local def zneg ((n nat ())) (nat ())
()
(znsub (zsnd n) (zfst n)))

(local theorem znegeqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (zneg n1) (zneg n2)))
()
(:conv (im _G (eq (zneg n1) (zneg n2)))
  (im
    _G
    (eq
      (:unfold zneg (n1) ()
        (znsub (zsnd n1) (zfst n1)))
      (:unfold zneg (n2) ()
        (znsub (zsnd n2) (zfst n2)))))
  (znsubeqd (_G (zsnd n1) (zsnd n2) (zfst n1) (zfst n2))
    (zsndeqd (_G n1 n2)
      hn)
    (zfsteqd (_G n1 n2)
      hn))))

(local theorem znegeq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (zneg n1) (zneg n2)))
()
(znegeqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(local theorem znegzn ((a nat ()) (b nat ())) ()
  (eq (zneg (znsub a b)) (znsub b a))
()
(mpbir ((eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b)))) (eq (zneg (znsub a b)) (znsub b a)))
  (:conv (iff (eq (zneg (znsub a b)) (znsub b a)) (eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b)))))
    (iff
      (eq
        (:unfold zneg ((znsub a b)) ()
          (znsub (zsnd (znsub a b)) (zfst (znsub a b))))
        (znsub b a))
      (eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b)))))
    (zneqb ((zsnd (znsub a b)) b (zfst (znsub a b)) a)))
  (ax_mp ((eq (add a (zsnd (znsub a b))) (add b (zfst (znsub a b)))) (eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b)))))
    (ax_mp ((eq (add (zsnd (znsub a b)) a) (add a (zsnd (znsub a b)))) (im (eq (add a (zsnd (znsub a b))) (add b (zfst (znsub a b)))) (eq (add (zsnd (znsub a b)) a) (add b (zfst (znsub a b))))))
      (eqtr ((add (zsnd (znsub a b)) a) (add a (zsnd (znsub a b))) (add b (zfst (znsub a b)))))
      (addcom ((zsnd (znsub a b)) a)))
    (ax_mp ((eq (add (zfst (znsub a b)) b) (add b (zfst (znsub a b)))) (eq (add a (zsnd (znsub a b))) (add b (zfst (znsub a b)))))
      (ax_mp ((eq (add (zfst (znsub a b)) b) (add a (zsnd (znsub a b)))) (im (eq (add (zfst (znsub a b)) b) (add b (zfst (znsub a b)))) (eq (add a (zsnd (znsub a b))) (add b (zfst (znsub a b))))))
        (eqtr3 ((add a (zsnd (znsub a b))) (add (zfst (znsub a b)) b) (add b (zfst (znsub a b)))))
        (mpbi ((eq (znsub (zfst (znsub a b)) (zsnd (znsub a b))) (znsub a b)) (eq (add (zfst (znsub a b)) b) (add a (zsnd (znsub a b)))))
          (zneqb ((zfst (znsub a b)) a (zsnd (znsub a b)) b))
          (zfstsnd ((znsub a b)))))
      (addcom ((zfst (znsub a b)) b))))))

(local theorem znegneg ((n nat ())) ()
  (eq (zneg (zneg n)) n)
()
(:conv (eq (zneg (zneg n)) n)
  (eq
    (zneg
      (:unfold zneg (n) ()
        (znsub (zsnd n) (zfst n))))
    n)
  (ax_mp ((eq (znsub (zfst n) (zsnd n)) n) (eq (zneg (znsub (zsnd n) (zfst n))) n))
    (ax_mp ((eq (zneg (znsub (zsnd n) (zfst n))) (znsub (zfst n) (zsnd n))) (im (eq (znsub (zfst n) (zsnd n)) n) (eq (zneg (znsub (zsnd n) (zfst n))) n)))
      (eqtr ((zneg (znsub (zsnd n) (zfst n))) (znsub (zfst n) (zsnd n)) n))
      (znegzn ((zsnd n) (zfst n))))
    (zfstsnd (n)))))

(local theorem zfstneg ((n nat ())) ()
  (eq (zfst (zneg n)) (zsnd n))
()
(:conv (eq (zfst (zneg n)) (zsnd n))
  (eq
    (zfst
      (:unfold zneg (n) ()
        (znsub (zsnd n) (zfst n))))
    (zsnd n))
  (ax_mp ((eq (zfst (zneg n)) (zsnd n)) (eq (zfst (znsub (zsnd n) (zfst n))) (zsnd n)))
    (ax_mp ((eq (zfst (znsub (zsnd n) (zfst n))) (zfst (zneg n))) (im (eq (zfst (zneg n)) (zsnd n)) (eq (zfst (znsub (zsnd n) (zfst n))) (zsnd n))))
      (eqtr ((zfst (znsub (zsnd n) (zfst n))) (zfst (zneg n)) (zsnd n)))
      (ax_mp ((eq (znsub (zsnd n) (zfst n)) (zneg n)) (eq (zfst (znsub (zsnd n) (zfst n))) (zfst (zneg n))))
        (zfsteq ((znsub (zsnd n) (zfst n)) (zneg n)))
        (ax_mp ((eq (zneg (znsub (zfst n) (zsnd n))) (zneg n)) (eq (znsub (zsnd n) (zfst n)) (zneg n)))
          (ax_mp ((eq (zneg (znsub (zfst n) (zsnd n))) (znsub (zsnd n) (zfst n))) (im (eq (zneg (znsub (zfst n) (zsnd n))) (zneg n)) (eq (znsub (zsnd n) (zfst n)) (zneg n))))
            (eqtr3 ((znsub (zsnd n) (zfst n)) (zneg (znsub (zfst n) (zsnd n))) (zneg n)))
            (znegzn ((zfst n) (zsnd n))))
          (ax_mp ((eq (znsub (zfst n) (zsnd n)) n) (eq (zneg (znsub (zfst n) (zsnd n))) (zneg n)))
            (znegeq ((znsub (zfst n) (zsnd n)) n))
            (zfstsnd (n))))))
    (:conv (eq (zfst (zneg n)) (zsnd n))
      (eq
        (zfst
          (:unfold zneg (n) ()
            (znsub (zsnd n) (zfst n))))
        (zsnd n))
      (ax_mp ((eq (sub (zsnd n) (zfst n)) (zsnd n)) (eq (zfst (znsub (zsnd n) (zfst n))) (zsnd n)))
        (ax_mp ((eq (zfst (znsub (zsnd n) (zfst n))) (sub (zsnd n) (zfst n))) (im (eq (sub (zsnd n) (zfst n)) (zsnd n)) (eq (zfst (znsub (zsnd n) (zfst n))) (zsnd n))))
          (eqtr ((zfst (znsub (zsnd n) (zfst n))) (sub (zsnd n) (zfst n)) (zsnd n)))
          (zfstznsub ((zsnd n) (zfst n))))
        (ax_mp ((or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zsnd n) (zfst n)) (zsnd n)))
          (ax_mp ((im (eq (zsnd n) (d0)) (eq (sub (zsnd n) (zfst n)) (zsnd n))) (im (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zsnd n) (zfst n)) (zsnd n))))
            (ax_mp ((im (eq (zfst n) (d0)) (eq (sub (zsnd n) (zfst n)) (zsnd n))) (im (im (eq (zsnd n) (d0)) (eq (sub (zsnd n) (zfst n)) (zsnd n))) (im (or (eq (zfst n) (d0)) (eq (zsnd n) (d0))) (eq (sub (zsnd n) (zfst n)) (zsnd n)))))
              (eor ((eq (zfst n) (d0)) (eq (zsnd n) (d0)) (eq (sub (zsnd n) (zfst n)) (zsnd n))))
              (syl6eq ((eq (zfst n) (d0)) (sub (zsnd n) (zfst n)) (sub (zsnd n) (d0)) (zsnd n))
                (sub02 ((zsnd n)))
                (subeq2 ((zsnd n) (zfst n) (d0)))))
            (eqtr4d ((eq (zsnd n) (d0)) (sub (zsnd n) (zfst n)) (sub (d0) (zfst n)) (zsnd n))
              (subeq1 ((zsnd n) (d0) (zfst n)))
              (syl6eqr ((eq (zsnd n) (d0)) (zsnd n) (d0) (sub (d0) (zfst n)))
                (sub01 ((zfst n)))
                (id ((eq (zsnd n) (d0)))))))
          (zfstsnd0 (n))))))))

(local theorem zsndneg ((n nat ())) ()
  (eq (zsnd (zneg n)) (zfst n))
()
(ax_mp ((eq (zfst (zneg (zneg n))) (zfst n)) (eq (zsnd (zneg n)) (zfst n)))
  (ax_mp ((eq (zfst (zneg (zneg n))) (zsnd (zneg n))) (im (eq (zfst (zneg (zneg n))) (zfst n)) (eq (zsnd (zneg n)) (zfst n))))
    (eqtr3 ((zsnd (zneg n)) (zfst (zneg (zneg n))) (zfst n)))
    (zfstneg ((zneg n))))
  (ax_mp ((eq (zneg (zneg n)) n) (eq (zfst (zneg (zneg n))) (zfst n)))
    (zfsteq ((zneg (zneg n)) n))
    (znegneg (n)))))

(local theorem zsndznsub ((m nat ()) (n nat ())) ()
  (eq (zsnd (znsub m n)) (sub n m))
()
(ax_mp ((eq (zfst (zneg (znsub m n))) (sub n m)) (eq (zsnd (znsub m n)) (sub n m)))
  (ax_mp ((eq (zfst (zneg (znsub m n))) (zsnd (znsub m n))) (im (eq (zfst (zneg (znsub m n))) (sub n m)) (eq (zsnd (znsub m n)) (sub n m))))
    (eqtr3 ((zsnd (znsub m n)) (zfst (zneg (znsub m n))) (sub n m)))
    (zfstneg ((znsub m n))))
  (ax_mp ((eq (zfst (znsub n m)) (sub n m)) (eq (zfst (zneg (znsub m n))) (sub n m)))
    (ax_mp ((eq (zfst (zneg (znsub m n))) (zfst (znsub n m))) (im (eq (zfst (znsub n m)) (sub n m)) (eq (zfst (zneg (znsub m n))) (sub n m))))
      (eqtr ((zfst (zneg (znsub m n))) (zfst (znsub n m)) (sub n m)))
      (ax_mp ((eq (zneg (znsub m n)) (znsub n m)) (eq (zfst (zneg (znsub m n))) (zfst (znsub n m))))
        (zfsteq ((zneg (znsub m n)) (znsub n m)))
        (znegzn (m n))))
    (zfstznsub (n m)))))

(local def zadd ((m nat ()) (n nat ())) (nat ())
()
(znsub (add (zfst m) (zfst n)) (add (zsnd m) (zsnd n))))

(local theorem zaddeqd ((_G wff ()) (m1 nat ()) (m2 nat ()) (n1 nat ()) (n2 nat ()))
  ((hm (im _G (eq m1 m2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (zadd m1 n1) (zadd m2 n2)))
()
(:conv (im _G (eq (zadd m1 n1) (zadd m2 n2)))
  (im
    _G
    (eq
      (:unfold zadd (m1 n1) ()
        (znsub (add (zfst m1) (zfst n1)) (add (zsnd m1) (zsnd n1))))
      (:unfold zadd (m2 n2) ()
        (znsub (add (zfst m2) (zfst n2)) (add (zsnd m2) (zsnd n2))))))
  (znsubeqd (_G (add (zfst m1) (zfst n1)) (add (zfst m2) (zfst n2)) (add (zsnd m1) (zsnd n1)) (add (zsnd m2) (zsnd n2)))
    (addeqd (_G (zfst m1) (zfst m2) (zfst n1) (zfst n2))
      (zfsteqd (_G m1 m2)
        hm)
      (zfsteqd (_G n1 n2)
        hn))
    (addeqd (_G (zsnd m1) (zsnd m2) (zsnd n1) (zsnd n2))
      (zsndeqd (_G m1 m2)
        hm)
      (zsndeqd (_G n1 n2)
        hn)))))

(local theorem zaddeq ((m1 nat ()) (m2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq m1 m2) (im (eq n1 n2) (eq (zadd m1 n1) (zadd m2 n2))))
()
(exp ((eq m1 m2) (eq n1 n2) (eq (zadd m1 n1) (zadd m2 n2)))
  (zaddeqd ((an (eq m1 m2) (eq n1 n2)) m1 m2 n1 n2)
    (anl ((eq m1 m2) (eq n1 n2)))
    (anr ((eq m1 m2) (eq n1 n2))))))

(local theorem zaddeq1d ((G wff ()) (m1 nat ()) (m2 nat ()) (n nat ()))
  ((h (im G (eq m1 m2))))
  (im G (eq (zadd m1 n) (zadd m2 n)))
()
(zaddeqd (G m1 m2 n n)
  h
  (eqidd (G n))))

(local theorem zaddeq1 ((m1 nat ()) (m2 nat ()) (n nat ())) ()
  (im (eq m1 m2) (eq (zadd m1 n) (zadd m2 n)))
()
(zaddeq1d ((eq m1 m2) m1 m2 n)
  (id ((eq m1 m2)))))

(local theorem zaddeq2d ((G wff ()) (m nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (zadd m n1) (zadd m n2)))
()
(zaddeqd (G m m n1 n2)
  (eqidd (G m))
  h))

(local theorem zaddeq2 ((m nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (zadd m n1) (zadd m n2)))
()
(zaddeq2d ((eq n1 n2) m n1 n2)
  (id ((eq n1 n2)))))

(local theorem zaddzn ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (zadd (znsub a c) (znsub b d)) (znsub (add a b) (add c d)))
()
(mpbir ((eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (zadd (znsub a c) (znsub b d)) (znsub (add a b) (add c d))))
  (:conv (iff (eq (zadd (znsub a c) (znsub b d)) (znsub (add a b) (add c d))) (eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
    (iff
      (eq
        (:unfold zadd ((znsub a c) (znsub b d)) ()
          (znsub (add (zfst (znsub a c)) (zfst (znsub b d))) (add (zsnd (znsub a c)) (zsnd (znsub b d)))))
        (znsub (add a b) (add c d)))
      (eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
    (zneqb ((add (zfst (znsub a c)) (zfst (znsub b d))) (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))) (add c d))))
  (ax_mp ((eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
    (ax_mp ((eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d))) (im (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d)))))))
      (eqtr ((add (add (zfst (znsub a c)) (zfst (znsub b d))) (add c d)) (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
      (add4 ((zfst (znsub a c)) (zfst (znsub b d)) c d)))
    (ax_mp ((eq (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d)))) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
      (ax_mp ((eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d))))) (im (eq (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d)))) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))) (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d)))))))
        (eqtr ((add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d)))) (add (add a b) (add (zsnd (znsub a c)) (zsnd (znsub b d))))))
        (ax_mp ((eq (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))) (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d))))))
          (ax_mp ((eq (add (zfst (znsub a c)) c) (add a (zsnd (znsub a c)))) (im (eq (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))) (eq (add (add (zfst (znsub a c)) c) (add (zfst (znsub b d)) d)) (add (add a (zsnd (znsub a c))) (add b (zsnd (znsub b d)))))))
            (addeq ((add (zfst (znsub a c)) c) (add a (zsnd (znsub a c))) (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))))
            (mpbi ((eq (znsub (zfst (znsub a c)) (zsnd (znsub a c))) (znsub a c)) (eq (add (zfst (znsub a c)) c) (add a (zsnd (znsub a c)))))
              (zneqb ((zfst (znsub a c)) a (zsnd (znsub a c)) c))
              (zfstsnd ((znsub a c)))))
          (mpbi ((eq (znsub (zfst (znsub b d)) (zsnd (znsub b d))) (znsub b d)) (eq (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))))
            (zneqb ((zfst (znsub b d)) b (zsnd (znsub b d)) d))
            (zfstsnd ((znsub b d))))))
      (add4 (a (zsnd (znsub a c)) b (zsnd (znsub b d))))))))

(local def zmul ((m nat ()) (n nat ())) (nat ())
()
(znsub (add (mul (zfst m) (zfst n)) (mul (zsnd m) (zsnd n))) (add (mul (zfst m) (zsnd n)) (mul (zsnd m) (zfst n)))))

(local theorem zmuleqd ((_G wff ()) (m1 nat ()) (m2 nat ()) (n1 nat ()) (n2 nat ()))
  ((hm (im _G (eq m1 m2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (zmul m1 n1) (zmul m2 n2)))
()
(:let H1 (zfsteqd (_G m1 m2)
  hm)
(:let H2 (zfsteqd (_G n1 n2)
  hn)
(:let H3 (zsndeqd (_G m1 m2)
  hm)
(:let H4 (zsndeqd (_G n1 n2)
  hn)
(:conv (im _G (eq (zmul m1 n1) (zmul m2 n2)))
  (im
    _G
    (eq
      (:unfold zmul (m1 n1) ()
        (znsub (add (mul (zfst m1) (zfst n1)) (mul (zsnd m1) (zsnd n1))) (add (mul (zfst m1) (zsnd n1)) (mul (zsnd m1) (zfst n1)))))
      (:unfold zmul (m2 n2) ()
        (znsub (add (mul (zfst m2) (zfst n2)) (mul (zsnd m2) (zsnd n2))) (add (mul (zfst m2) (zsnd n2)) (mul (zsnd m2) (zfst n2)))))))
  (znsubeqd (_G (add (mul (zfst m1) (zfst n1)) (mul (zsnd m1) (zsnd n1))) (add (mul (zfst m2) (zfst n2)) (mul (zsnd m2) (zsnd n2))) (add (mul (zfst m1) (zsnd n1)) (mul (zsnd m1) (zfst n1))) (add (mul (zfst m2) (zsnd n2)) (mul (zsnd m2) (zfst n2))))
    (addeqd (_G (mul (zfst m1) (zfst n1)) (mul (zfst m2) (zfst n2)) (mul (zsnd m1) (zsnd n1)) (mul (zsnd m2) (zsnd n2)))
      (muleqd (_G (zfst m1) (zfst m2) (zfst n1) (zfst n2))
        H1
        H2)
      (muleqd (_G (zsnd m1) (zsnd m2) (zsnd n1) (zsnd n2))
        H3
        H4))
    (addeqd (_G (mul (zfst m1) (zsnd n1)) (mul (zfst m2) (zsnd n2)) (mul (zsnd m1) (zfst n1)) (mul (zsnd m2) (zfst n2)))
      (muleqd (_G (zfst m1) (zfst m2) (zsnd n1) (zsnd n2))
        H1
        H4)
      (muleqd (_G (zsnd m1) (zsnd m2) (zfst n1) (zfst n2))
        H3
        H2)))))))))

(local theorem zmuleq ((m1 nat ()) (m2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq m1 m2) (im (eq n1 n2) (eq (zmul m1 n1) (zmul m2 n2))))
()
(exp ((eq m1 m2) (eq n1 n2) (eq (zmul m1 n1) (zmul m2 n2)))
  (zmuleqd ((an (eq m1 m2) (eq n1 n2)) m1 m2 n1 n2)
    (anl ((eq m1 m2) (eq n1 n2)))
    (anr ((eq m1 m2) (eq n1 n2))))))

(local theorem zmuleq1d ((G wff ()) (m1 nat ()) (m2 nat ()) (n nat ()))
  ((h (im G (eq m1 m2))))
  (im G (eq (zmul m1 n) (zmul m2 n)))
()
(zmuleqd (G m1 m2 n n)
  h
  (eqidd (G n))))

(local theorem zmuleq1 ((m1 nat ()) (m2 nat ()) (n nat ())) ()
  (im (eq m1 m2) (eq (zmul m1 n) (zmul m2 n)))
()
(zmuleq1d ((eq m1 m2) m1 m2 n)
  (id ((eq m1 m2)))))

(local theorem zmuleq2d ((G wff ()) (m nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (zmul m n1) (zmul m n2)))
()
(zmuleqd (G m m n1 n2)
  (eqidd (G m))
  h))

(local theorem zmuleq2 ((m nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (zmul m n1) (zmul m n2)))
()
(zmuleq2d ((eq n1 n2) m n1 n2)
  (id ((eq n1 n2)))))

(local theorem zmulznlem ((a1 nat ()) (b1 nat ()) (c1 nat ()) (d1 nat ()) (a2 nat ()) (b2 nat ()) (c2 nat ()) (d2 nat ()))
  ((h1 (eq (add a1 c2) (add a2 c1)))
   (h2 (eq (add b1 d2) (add b2 d1))))
  (eq (add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1))))
()
(ax_mp ((eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
  (ax_mp ((eq (add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (im (eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1))))))
    (eqtr ((add (add (mul a1 b1) (mul c1 d1)) (add (mul a2 d2) (mul b2 c2))) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
    (add4 ((mul a1 b1) (mul c1 d1) (mul a2 d2) (mul b2 c2))))
  (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
    (ax_mp ((eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))) (im (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1))))))
      (eqtr ((add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
      (mpbi ((eq (add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))
        (addcan2 ((mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))
        (ax_mp ((eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
          (ax_mp ((eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2))))) (im (eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
            (eqtr3 ((add (mul b1 c2) (add (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))) (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
            (addass ((mul b1 c2) (add (mul a1 b1) (mul a2 d2)) (add (mul c1 d1) (mul b2 c2)))))
          (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
            (ax_mp ((eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2)))) (im (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
              (eqtr ((add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
              (ax_mp ((eq (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (mul c1 d1) (mul b2 c2))) (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2)))))
                (addeq1 ((add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))))
                (ax_mp ((eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                  (ax_mp ((eq (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2))) (im (eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                    (eqtr ((add (mul b1 c2) (add (mul a1 b1) (mul a2 d2))) (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                    (addcom ((mul b1 c2) (add (mul a1 b1) (mul a2 d2)))))
                  (ax_mp ((eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                    (ax_mp ((eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2))) (im (eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                      (eqtr ((add (add (mul a1 b1) (mul a2 d2)) (mul b1 c2)) (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                      (add32 ((mul a1 b1) (mul a2 d2) (mul b1 c2))))
                    (ax_mp ((eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                      (ax_mp ((eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2))) (im (eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                        (eqtr ((add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                        (ax_mp ((eq (add (mul a1 b1) (mul b1 c2)) (add (mul a2 b1) (mul c1 b1))) (eq (add (add (mul a1 b1) (mul b1 c2)) (mul a2 d2)) (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2))))
                          (addeq1 ((add (mul a1 b1) (mul b1 c2)) (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)))
                          (ax_mp ((eq (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1))) (eq (add (mul a1 b1) (mul b1 c2)) (add (mul a2 b1) (mul c1 b1))))
                            (ax_mp ((eq (add (mul a1 b1) (mul b1 c2)) (add (mul a1 b1) (mul c2 b1))) (im (eq (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1))) (eq (add (mul a1 b1) (mul b1 c2)) (add (mul a2 b1) (mul c1 b1)))))
                              (eqtr ((add (mul a1 b1) (mul b1 c2)) (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1))))
                              (ax_mp ((eq (mul b1 c2) (mul c2 b1)) (eq (add (mul a1 b1) (mul b1 c2)) (add (mul a1 b1) (mul c2 b1))))
                                (addeq2 ((mul a1 b1) (mul b1 c2) (mul c2 b1)))
                                (mulcom (b1 c2))))
                            (ax_mp ((eq (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1))) (eq (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1))))
                              (ax_mp ((eq (mul (add a1 c2) b1) (add (mul a1 b1) (mul c2 b1))) (im (eq (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1))) (eq (add (mul a1 b1) (mul c2 b1)) (add (mul a2 b1) (mul c1 b1)))))
                                (eqtr3 ((add (mul a1 b1) (mul c2 b1)) (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1))))
                                (addmul (a1 c2 b1)))
                              (ax_mp ((eq (mul (add a2 c1) b1) (add (mul a2 b1) (mul c1 b1))) (eq (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1))))
                                (ax_mp ((eq (mul (add a1 c2) b1) (mul (add a2 c1) b1)) (im (eq (mul (add a2 c1) b1) (add (mul a2 b1) (mul c1 b1))) (eq (mul (add a1 c2) b1) (add (mul a2 b1) (mul c1 b1)))))
                                  (eqtr ((mul (add a1 c2) b1) (mul (add a2 c1) b1) (add (mul a2 b1) (mul c1 b1))))
                                  (ax_mp ((eq (add a1 c2) (add a2 c1)) (eq (mul (add a1 c2) b1) (mul (add a2 c1) b1)))
                                    (muleq1 ((add a1 c2) (add a2 c1) b1))
                                    h1))
                                (addmul (a2 c1 b1)))))))
                      (ax_mp ((eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                        (ax_mp ((eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1))) (im (eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                          (eqtr ((add (add (mul a2 b1) (mul c1 b1)) (mul a2 d2)) (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                          (add32 ((mul a2 b1) (mul c1 b1) (mul a2 d2))))
                        (ax_mp ((eq (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                          (ax_mp ((eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1))) (im (eq (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)))))
                            (eqtr ((add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1)) (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1))))
                            (ax_mp ((eq (add (mul a2 b1) (mul a2 d2)) (add (mul a2 b2) (mul a2 d1))) (eq (add (add (mul a2 b1) (mul a2 d2)) (mul c1 b1)) (add (add (mul a2 b2) (mul a2 d1)) (mul c1 b1))))
                              (addeq1 ((add (mul a2 b1) (mul a2 d2)) (add (mul a2 b2) (mul a2 d1)) (mul c1 b1)))
                              (ax_mp ((eq (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1))) (eq (add (mul a2 b1) (mul a2 d2)) (add (mul a2 b2) (mul a2 d1))))
                                (ax_mp ((eq (mul a2 (add b1 d2)) (add (mul a2 b1) (mul a2 d2))) (im (eq (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1))) (eq (add (mul a2 b1) (mul a2 d2)) (add (mul a2 b2) (mul a2 d1)))))
                                  (eqtr3 ((add (mul a2 b1) (mul a2 d2)) (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1))))
                                  (muladd (a2 b1 d2)))
                                (ax_mp ((eq (mul a2 (add b2 d1)) (add (mul a2 b2) (mul a2 d1))) (eq (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1))))
                                  (ax_mp ((eq (mul a2 (add b1 d2)) (mul a2 (add b2 d1))) (im (eq (mul a2 (add b2 d1)) (add (mul a2 b2) (mul a2 d1))) (eq (mul a2 (add b1 d2)) (add (mul a2 b2) (mul a2 d1)))))
                                    (eqtr ((mul a2 (add b1 d2)) (mul a2 (add b2 d1)) (add (mul a2 b2) (mul a2 d1))))
                                    (ax_mp ((eq (add b1 d2) (add b2 d1)) (eq (mul a2 (add b1 d2)) (mul a2 (add b2 d1))))
                                      (muleq2 (a2 (add b1 d2) (add b2 d1)))
                                      h2))
                                  (muladd (a2 b2 d1))))))
                          (add32 ((mul a2 b2) (mul a2 d1) (mul c1 b1))))))))))
            (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
              (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))) (im (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
                (eqtr ((add (add (add (mul a2 b2) (mul c1 b1)) (mul a2 d1)) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                (addass ((add (mul a2 b2) (mul c1 b1)) (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
              (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))) (im (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
                  (eqtr3 ((add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                  (ax_mp ((eq (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                    (addeq2 ((add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                    (ax_mp ((eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                      (ax_mp ((eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (im (eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                        (eqtr3 ((add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))) (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                        (addass ((mul b1 c2) (mul c2 d2) (mul a1 d1))))
                      (ax_mp ((eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                        (ax_mp ((eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1))) (im (eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                          (eqtr ((add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                          (ax_mp ((eq (add (mul b1 c2) (mul c2 d2)) (add (mul b2 c2) (mul d1 c2))) (eq (add (add (mul b1 c2) (mul c2 d2)) (mul a1 d1)) (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1))))
                            (addeq1 ((add (mul b1 c2) (mul c2 d2)) (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)))
                            (ax_mp ((eq (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2))) (eq (add (mul b1 c2) (mul c2 d2)) (add (mul b2 c2) (mul d1 c2))))
                              (ax_mp ((eq (add (mul b1 c2) (mul c2 d2)) (add (mul b1 c2) (mul d2 c2))) (im (eq (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2))) (eq (add (mul b1 c2) (mul c2 d2)) (add (mul b2 c2) (mul d1 c2)))))
                                (eqtr ((add (mul b1 c2) (mul c2 d2)) (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2))))
                                (ax_mp ((eq (mul c2 d2) (mul d2 c2)) (eq (add (mul b1 c2) (mul c2 d2)) (add (mul b1 c2) (mul d2 c2))))
                                  (addeq2 ((mul b1 c2) (mul c2 d2) (mul d2 c2)))
                                  (mulcom (c2 d2))))
                              (ax_mp ((eq (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2))) (eq (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2))))
                                (ax_mp ((eq (mul (add b1 d2) c2) (add (mul b1 c2) (mul d2 c2))) (im (eq (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2))) (eq (add (mul b1 c2) (mul d2 c2)) (add (mul b2 c2) (mul d1 c2)))))
                                  (eqtr3 ((add (mul b1 c2) (mul d2 c2)) (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2))))
                                  (addmul (b1 d2 c2)))
                                (ax_mp ((eq (mul (add b2 d1) c2) (add (mul b2 c2) (mul d1 c2))) (eq (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2))))
                                  (ax_mp ((eq (mul (add b1 d2) c2) (mul (add b2 d1) c2)) (im (eq (mul (add b2 d1) c2) (add (mul b2 c2) (mul d1 c2))) (eq (mul (add b1 d2) c2) (add (mul b2 c2) (mul d1 c2)))))
                                    (eqtr ((mul (add b1 d2) c2) (mul (add b2 d1) c2) (add (mul b2 c2) (mul d1 c2))))
                                    (ax_mp ((eq (add b1 d2) (add b2 d1)) (eq (mul (add b1 d2) c2) (mul (add b2 d1) c2)))
                                      (muleq1 ((add b1 d2) (add b2 d1) c2))
                                      h2))
                                  (addmul (b2 d1 c2)))))))
                        (ax_mp ((eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                          (ax_mp ((eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1)))) (im (eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (eq (add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                            (eqtr ((add (add (mul b2 c2) (mul d1 c2)) (mul a1 d1)) (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                            (addass ((mul b2 c2) (mul d1 c2) (mul a1 d1))))
                          (ax_mp ((eq (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                            (ax_mp ((eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (im (eq (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))))))
                              (eqtr4 ((add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1))) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))))
                              (ax_mp ((eq (add (mul d1 c2) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul b2 c2) (add (mul d1 c2) (mul a1 d1))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))))
                                (addeq2 ((mul b2 c2) (add (mul d1 c2) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))))
                                (ax_mp ((eq (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul d1 c2) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))))
                                  (ax_mp ((eq (add (mul d1 c2) (mul a1 d1)) (add (mul c2 d1) (mul a1 d1))) (im (eq (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul d1 c2) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1)))))
                                    (eqtr ((add (mul d1 c2) (mul a1 d1)) (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))))
                                    (ax_mp ((eq (mul d1 c2) (mul c2 d1)) (eq (add (mul d1 c2) (mul a1 d1)) (add (mul c2 d1) (mul a1 d1))))
                                      (addeq1 ((mul d1 c2) (mul c2 d1) (mul a1 d1)))
                                      (mulcom (d1 c2))))
                                  (ax_mp ((eq (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1))))
                                    (ax_mp ((eq (add (mul c2 d1) (mul a1 d1)) (add (mul a1 d1) (mul c2 d1))) (im (eq (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul c2 d1) (mul a1 d1)) (add (mul a2 d1) (mul c1 d1)))))
                                      (eqtr ((add (mul c2 d1) (mul a1 d1)) (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1))))
                                      (addcom ((mul c2 d1) (mul a1 d1))))
                                    (ax_mp ((eq (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1))))
                                      (ax_mp ((eq (mul (add a1 c2) d1) (add (mul a1 d1) (mul c2 d1))) (im (eq (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1))) (eq (add (mul a1 d1) (mul c2 d1)) (add (mul a2 d1) (mul c1 d1)))))
                                        (eqtr3 ((add (mul a1 d1) (mul c2 d1)) (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1))))
                                        (addmul (a1 c2 d1)))
                                      (ax_mp ((eq (mul (add a2 c1) d1) (add (mul a2 d1) (mul c1 d1))) (eq (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1))))
                                        (ax_mp ((eq (mul (add a1 c2) d1) (mul (add a2 c1) d1)) (im (eq (mul (add a2 c1) d1) (add (mul a2 d1) (mul c1 d1))) (eq (mul (add a1 c2) d1) (add (mul a2 d1) (mul c1 d1)))))
                                          (eqtr ((mul (add a1 c2) d1) (mul (add a2 c1) d1) (add (mul a2 d1) (mul c1 d1))))
                                          (ax_mp ((eq (add a1 c2) (add a2 c1)) (eq (mul (add a1 c2) d1) (mul (add a2 c1) d1)))
                                            (muleq1 ((add a1 c2) (add a2 c1) d1))
                                            h1))
                                        (addmul (a2 c1 d1))))))))
                            (ax_mp ((eq (add (add (mul a2 d1) (mul c1 d1)) (mul b2 c2)) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (eq (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))))
                              (ax_mp ((eq (add (add (mul a2 d1) (mul c1 d1)) (mul b2 c2)) (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2)))) (im (eq (add (add (mul a2 d1) (mul c1 d1)) (mul b2 c2)) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))) (eq (add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1))))))
                                (eqtr3 ((add (mul a2 d1) (add (mul c1 d1) (mul b2 c2))) (add (add (mul a2 d1) (mul c1 d1)) (mul b2 c2)) (add (mul b2 c2) (add (mul a2 d1) (mul c1 d1)))))
                                (addass ((mul a2 d1) (mul c1 d1) (mul b2 c2))))
                              (addcom ((add (mul a2 d1) (mul c1 d1)) (mul b2 c2))))))))))
                (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                  (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1))))) (im (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
                    (eqtr3 ((add (add (mul a2 b2) (mul c1 b1)) (add (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))) (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                    (addass ((add (mul a2 b2) (mul c1 b1)) (mul b1 c2) (add (mul c2 d2) (mul a1 d1)))))
                  (ax_mp ((eq (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                    (ax_mp ((eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1)))) (im (eq (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1)))))))
                      (eqtr ((add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1))) (add (mul b1 c2) (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))
                      (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1)))) (eq (add (add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1)))))
                        (addeq1 ((add (add (mul a2 b2) (mul c1 b1)) (mul b1 c2)) (add (mul b1 c2) (add (mul a2 b2) (mul c1 b1))) (add (mul c2 d2) (mul a1 d1))))
                        (addcom ((add (mul a2 b2) (mul c1 b1)) (mul b1 c2)))))
                    (addass ((mul b1 c2) (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))))))))))))
    (ax_mp ((eq (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
      (ax_mp ((eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1)))) (im (eq (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))) (eq (add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1))))))
        (eqtr ((add (add (mul a2 b2) (mul c1 b1)) (add (mul c2 d2) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
        (add4 ((mul a2 b2) (mul c1 b1) (mul c2 d2) (mul a1 d1))))
      (ax_mp ((eq (add (mul c1 b1) (mul a1 d1)) (add (mul a1 d1) (mul c1 b1))) (eq (add (add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1))) (add (add (mul a2 b2) (mul c2 d2)) (add (mul a1 d1) (mul c1 b1)))))
        (addeq2 ((add (mul a2 b2) (mul c2 d2)) (add (mul c1 b1) (mul a1 d1)) (add (mul a1 d1) (mul c1 b1))))
        (addcom ((mul c1 b1) (mul a1 d1))))))))

(local theorem zmulzn ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (eq (zmul (znsub a c) (znsub b d)) (znsub (add (mul a b) (mul c d)) (add (mul a d) (mul b c))))
()
(mpbir ((eq (add (add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul a d) (mul b c))) (add (add (mul a b) (mul c d)) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d)))))) (eq (zmul (znsub a c) (znsub b d)) (znsub (add (mul a b) (mul c d)) (add (mul a d) (mul b c)))))
  (:conv (iff (eq (zmul (znsub a c) (znsub b d)) (znsub (add (mul a b) (mul c d)) (add (mul a d) (mul b c)))) (eq (add (add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul a d) (mul b c))) (add (add (mul a b) (mul c d)) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d)))))))
    (iff
      (eq
        (:unfold zmul ((znsub a c) (znsub b d)) ()
          (znsub (add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d))))))
        (znsub (add (mul a b) (mul c d)) (add (mul a d) (mul b c))))
      (eq (add (add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul a d) (mul b c))) (add (add (mul a b) (mul c d)) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d)))))))
    (zneqb ((add (mul (zfst (znsub a c)) (zfst (znsub b d))) (mul (zsnd (znsub a c)) (zsnd (znsub b d)))) (add (mul a b) (mul c d)) (add (mul (zfst (znsub a c)) (zsnd (znsub b d))) (mul (zsnd (znsub a c)) (zfst (znsub b d)))) (add (mul a d) (mul b c)))))
  (zmulznlem ((zfst (znsub a c)) (zfst (znsub b d)) (zsnd (znsub a c)) (zsnd (znsub b d)) a b c d)
    (mpbi ((eq (znsub (zfst (znsub a c)) (zsnd (znsub a c))) (znsub a c)) (eq (add (zfst (znsub a c)) c) (add a (zsnd (znsub a c)))))
      (zneqb ((zfst (znsub a c)) a (zsnd (znsub a c)) c))
      (zfstsnd ((znsub a c))))
    (mpbi ((eq (znsub (zfst (znsub b d)) (zsnd (znsub b d))) (znsub b d)) (eq (add (zfst (znsub b d)) d) (add b (zsnd (znsub b d)))))
      (zneqb ((zfst (znsub b d)) b (zsnd (znsub b d)) d))
      (zfstsnd ((znsub b d)))))))

(local def zabs ((n nat ())) (nat ())
()
(add (zfst n) (zsnd n)))

(local theorem zabseqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (zabs n1) (zabs n2)))
()
(:conv (im _G (eq (zabs n1) (zabs n2)))
  (im
    _G
    (eq
      (:unfold zabs (n1) ()
        (add (zfst n1) (zsnd n1)))
      (:unfold zabs (n2) ()
        (add (zfst n2) (zsnd n2)))))
  (addeqd (_G (zfst n1) (zfst n2) (zsnd n1) (zsnd n2))
    (zfsteqd (_G n1 n2)
      hn)
    (zsndeqd (_G n1 n2)
      hn))))

(local theorem zabseq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (zabs n1) (zabs n2)))
()
(zabseqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(local theorem zabsb0 ((n nat ())) ()
  (eq (zabs (b0 n)) n)
()
(:conv (eq (zabs (b0 n)) n)
  (eq
    (:unfold zabs ((b0 n)) ()
      (add (zfst (b0 n)) (zsnd (b0 n))))
    n)
  (ax_mp ((eq (add n (d0)) n) (eq (add (zfst (b0 n)) (zsnd (b0 n))) n))
    (ax_mp ((eq (add (zfst (b0 n)) (zsnd (b0 n))) (add n (d0))) (im (eq (add n (d0)) n) (eq (add (zfst (b0 n)) (zsnd (b0 n))) n)))
      (eqtr ((add (zfst (b0 n)) (zsnd (b0 n))) (add n (d0)) n))
      (ax_mp ((eq (zsnd (b0 n)) (d0)) (eq (add (zfst (b0 n)) (zsnd (b0 n))) (add n (d0))))
        (ax_mp ((eq (zfst (b0 n)) n) (im (eq (zsnd (b0 n)) (d0)) (eq (add (zfst (b0 n)) (zsnd (b0 n))) (add n (d0)))))
          (addeq ((zfst (b0 n)) n (zsnd (b0 n)) (d0)))
          (zfstb0 (n)))
        (zsndb0 (n))))
    (add0 (n)))))

(local theorem zabsneg ((n nat ())) ()
  (eq (zabs (zneg n)) (zabs n))
()
(:conv (eq (zabs (zneg n)) (zabs n))
  (eq
    (:unfold zabs ((zneg n)) ()
      (add (zfst (zneg n)) (zsnd (zneg n))))
    (:unfold zabs (n) ()
      (add (zfst n) (zsnd n))))
  (ax_mp ((eq (add (zsnd (zneg n)) (zfst (zneg n))) (add (zfst n) (zsnd n))) (eq (add (zfst (zneg n)) (zsnd (zneg n))) (add (zfst n) (zsnd n))))
    (ax_mp ((eq (add (zfst (zneg n)) (zsnd (zneg n))) (add (zsnd (zneg n)) (zfst (zneg n)))) (im (eq (add (zsnd (zneg n)) (zfst (zneg n))) (add (zfst n) (zsnd n))) (eq (add (zfst (zneg n)) (zsnd (zneg n))) (add (zfst n) (zsnd n)))))
      (eqtr ((add (zfst (zneg n)) (zsnd (zneg n))) (add (zsnd (zneg n)) (zfst (zneg n))) (add (zfst n) (zsnd n))))
      (addcom ((zfst (zneg n)) (zsnd (zneg n)))))
    (ax_mp ((eq (zfst (zneg n)) (zsnd n)) (eq (add (zsnd (zneg n)) (zfst (zneg n))) (add (zfst n) (zsnd n))))
      (ax_mp ((eq (zsnd (zneg n)) (zfst n)) (im (eq (zfst (zneg n)) (zsnd n)) (eq (add (zsnd (zneg n)) (zfst (zneg n))) (add (zfst n) (zsnd n)))))
        (addeq ((zsnd (zneg n)) (zfst n) (zfst (zneg n)) (zsnd n)))
        (zsndneg (n)))
      (zfstneg (n))))))

(local theorem zabszn ((m nat ()) (n nat ())) ()
  (eq (zabs (znsub m n)) (add (sub m n) (sub n m)))
()
(:conv (eq (zabs (znsub m n)) (add (sub m n) (sub n m)))
  (eq
    (:unfold zabs ((znsub m n)) ()
      (add (zfst (znsub m n)) (zsnd (znsub m n))))
    (add (sub m n) (sub n m)))
  (ax_mp ((eq (zsnd (znsub m n)) (sub n m)) (eq (add (zfst (znsub m n)) (zsnd (znsub m n))) (add (sub m n) (sub n m))))
    (ax_mp ((eq (zfst (znsub m n)) (sub m n)) (im (eq (zsnd (znsub m n)) (sub n m)) (eq (add (zfst (znsub m n)) (zsnd (znsub m n))) (add (sub m n) (sub n m)))))
      (addeq ((zfst (znsub m n)) (sub m n) (zsnd (znsub m n)) (sub n m)))
      (zfstznsub (m n)))
    (zsndznsub (m n)))))

(local theorem lezabszn ((m nat ()) (n nat ())) ()
  (im (le n m) (eq (zabs (znsub m n)) (sub m n)))
()
(syl5eq ((le n m) (zabs (znsub m n)) (add (sub m n) (sub n m)) (sub m n))
  (zabszn (m n))
  (syl6eq ((le n m) (add (sub m n) (sub n m)) (add (sub m n) (d0)) (sub m n))
    (add0 ((sub m n)))
    (sylbi ((le n m) (eq (sub n m) (d0)) (eq (add (sub m n) (sub n m)) (add (sub m n) (d0))))
      (lesubeq0 (n m))
      (addeq2 ((sub m n) (sub n m) (d0)))))))

(local theorem zabscom ((m nat ()) (n nat ())) ()
  (eq (zabs (znsub m n)) (zabs (znsub n m)))
()
(ax_mp ((eq (add (sub m n) (sub n m)) (zabs (znsub n m))) (eq (zabs (znsub m n)) (zabs (znsub n m))))
  (ax_mp ((eq (zabs (znsub m n)) (add (sub m n) (sub n m))) (im (eq (add (sub m n) (sub n m)) (zabs (znsub n m))) (eq (zabs (znsub m n)) (zabs (znsub n m)))))
    (eqtr ((zabs (znsub m n)) (add (sub m n) (sub n m)) (zabs (znsub n m))))
    (zabszn (m n)))
  (ax_mp ((eq (zabs (znsub n m)) (add (sub n m) (sub m n))) (eq (add (sub m n) (sub n m)) (zabs (znsub n m))))
    (ax_mp ((eq (add (sub m n) (sub n m)) (add (sub n m) (sub m n))) (im (eq (zabs (znsub n m)) (add (sub n m) (sub m n))) (eq (add (sub m n) (sub n m)) (zabs (znsub n m)))))
      (eqtr4 ((add (sub m n) (sub n m)) (add (sub n m) (sub m n)) (zabs (znsub n m))))
      (addcom ((sub m n) (sub n m))))
    (zabszn (n m)))))

(local def zdvd ((m nat ()) (n nat ())) (wff ())
()
(dvd (zabs m) (zabs n)))

(local theorem zdvdeqd ((_G wff ()) (m1 nat ()) (m2 nat ()) (n1 nat ()) (n2 nat ()))
  ((hm (im _G (eq m1 m2)))
   (hn (im _G (eq n1 n2))))
  (im _G (iff (zdvd m1 n1) (zdvd m2 n2)))
()
(:conv (im _G (iff (zdvd m1 n1) (zdvd m2 n2)))
  (im
    _G
    (iff
      (:unfold zdvd (m1 n1) ()
        (dvd (zabs m1) (zabs n1)))
      (:unfold zdvd (m2 n2) ()
        (dvd (zabs m2) (zabs n2)))))
  (dvdeqd (_G (zabs m1) (zabs m2) (zabs n1) (zabs n2))
    (zabseqd (_G m1 m2)
      hm)
    (zabseqd (_G n1 n2)
      hn))))

(local theorem zdvdeq ((m1 nat ()) (m2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq m1 m2) (im (eq n1 n2) (iff (zdvd m1 n1) (zdvd m2 n2))))
()
(exp ((eq m1 m2) (eq n1 n2) (iff (zdvd m1 n1) (zdvd m2 n2)))
  (zdvdeqd ((an (eq m1 m2) (eq n1 n2)) m1 m2 n1 n2)
    (anl ((eq m1 m2) (eq n1 n2)))
    (anr ((eq m1 m2) (eq n1 n2))))))

(local theorem zdvdeq1d ((G wff ()) (m1 nat ()) (m2 nat ()) (n nat ()))
  ((h (im G (eq m1 m2))))
  (im G (iff (zdvd m1 n) (zdvd m2 n)))
()
(zdvdeqd (G m1 m2 n n)
  h
  (eqidd (G n))))

(local theorem zdvdeq1 ((m1 nat ()) (m2 nat ()) (n nat ())) ()
  (im (eq m1 m2) (iff (zdvd m1 n) (zdvd m2 n)))
()
(zdvdeq1d ((eq m1 m2) m1 m2 n)
  (id ((eq m1 m2)))))

(local theorem zdvdeq2d ((G wff ()) (m nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (iff (zdvd m n1) (zdvd m n2)))
()
(zdvdeqd (G m m n1 n2)
  (eqidd (G m))
  h))

(local theorem zdvdeq2 ((m nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (iff (zdvd m n1) (zdvd m n2)))
()
(zdvdeq2d ((eq n1 n2) m n1 n2)
  (id ((eq n1 n2)))))

(local theorem eqmdvdsub2 ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (eqm n a b) (dvd n (zabs (znsub b a))))
()
(ax_mp ((or (le a b) (le b a)) (iff (eqm n a b) (dvd n (zabs (znsub b a)))))
  (ax_mp ((im (le b a) (iff (eqm n a b) (dvd n (zabs (znsub b a))))) (im (or (le a b) (le b a)) (iff (eqm n a b) (dvd n (zabs (znsub b a))))))
    (ax_mp ((im (le a b) (iff (eqm n a b) (dvd n (zabs (znsub b a))))) (im (im (le b a) (iff (eqm n a b) (dvd n (zabs (znsub b a))))) (im (or (le a b) (le b a)) (iff (eqm n a b) (dvd n (zabs (znsub b a)))))))
      (eor ((le a b) (le b a) (iff (eqm n a b) (dvd n (zabs (znsub b a))))))
      (bitr4d ((le a b) (eqm n a b) (dvd n (sub b a)) (dvd n (zabs (znsub b a))))
        (eqmdvdsub (a b n))
        (dvdeq2d ((le a b) n (zabs (znsub b a)) (sub b a))
          (lezabszn (b a)))))
    (syl5bb ((le b a) (eqm n a b) (eqm n b a) (dvd n (zabs (znsub b a))))
      (eqmcomb (a b n))
      (bitr4d ((le b a) (eqm n b a) (dvd n (sub a b)) (dvd n (zabs (znsub b a))))
        (eqmdvdsub (b a n))
        (dvdeq2d ((le b a) n (zabs (znsub b a)) (sub a b))
          (syl5eq ((le b a) (zabs (znsub b a)) (zabs (znsub a b)) (sub a b))
            (zabscom (b a))
            (lezabszn (a b)))))))
  (leorle (a b))))

(local theorem eqmzdvdsub ((a nat ()) (b nat ()) (n nat ())) ()
  (iff (eqm n a b) (zdvd (b0 n) (znsub b a)))
()
(:conv (iff (eqm n a b) (zdvd (b0 n) (znsub b a)))
  (iff
    (eqm n a b)
    (:unfold zdvd ((b0 n) (znsub b a)) ()
      (dvd (zabs (b0 n)) (zabs (znsub b a)))))
  (ax_mp ((iff (dvd (zabs (b0 n)) (zabs (znsub b a))) (dvd n (zabs (znsub b a)))) (iff (eqm n a b) (dvd (zabs (b0 n)) (zabs (znsub b a)))))
    (ax_mp ((iff (eqm n a b) (dvd n (zabs (znsub b a)))) (im (iff (dvd (zabs (b0 n)) (zabs (znsub b a))) (dvd n (zabs (znsub b a)))) (iff (eqm n a b) (dvd (zabs (b0 n)) (zabs (znsub b a))))))
      (bitr4 ((eqm n a b) (dvd n (zabs (znsub b a))) (dvd (zabs (b0 n)) (zabs (znsub b a)))))
      (eqmdvdsub2 (a b n)))
    (ax_mp ((eq (zabs (b0 n)) n) (iff (dvd (zabs (b0 n)) (zabs (znsub b a))) (dvd n (zabs (znsub b a)))))
      (dvdeq1 ((zabs (b0 n)) n (zabs (znsub b a))))
      (zabsb0 (n))))))

(local def zmod ((a nat ()) (n nat ())) (nat ())
()
(mod (sub (add (zfst a) n) (mod (zsnd a) n)) n))

(local theorem zmodeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (zmod a1 n1) (zmod a2 n2)))
()
(:conv (im _G (eq (zmod a1 n1) (zmod a2 n2)))
  (im
    _G
    (eq
      (:unfold zmod (a1 n1) ()
        (mod (sub (add (zfst a1) n1) (mod (zsnd a1) n1)) n1))
      (:unfold zmod (a2 n2) ()
        (mod (sub (add (zfst a2) n2) (mod (zsnd a2) n2)) n2))))
  (modeqd (_G (sub (add (zfst a1) n1) (mod (zsnd a1) n1)) (sub (add (zfst a2) n2) (mod (zsnd a2) n2)) n1 n2)
    (subeqd (_G (add (zfst a1) n1) (add (zfst a2) n2) (mod (zsnd a1) n1) (mod (zsnd a2) n2))
      (addeqd (_G (zfst a1) (zfst a2) n1 n2)
        (zfsteqd (_G a1 a2)
          ha)
        hn)
      (modeqd (_G (zsnd a1) (zsnd a2) n1 n2)
        (zsndeqd (_G a1 a2)
          ha)
        hn))
    hn)))

(local theorem zmodeq ((a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq a1 a2) (im (eq n1 n2) (eq (zmod a1 n1) (zmod a2 n2))))
()
(exp ((eq a1 a2) (eq n1 n2) (eq (zmod a1 n1) (zmod a2 n2)))
  (zmodeqd ((an (eq a1 a2) (eq n1 n2)) a1 a2 n1 n2)
    (anl ((eq a1 a2) (eq n1 n2)))
    (anr ((eq a1 a2) (eq n1 n2))))))

(local theorem zmodeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (n nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (zmod a1 n) (zmod a2 n)))
()
(zmodeqd (G a1 a2 n n)
  h
  (eqidd (G n))))

(local theorem zmodeq1 ((a1 nat ()) (a2 nat ()) (n nat ())) ()
  (im (eq a1 a2) (eq (zmod a1 n) (zmod a2 n)))
()
(zmodeq1d ((eq a1 a2) a1 a2 n)
  (id ((eq a1 a2)))))

(local theorem zmodeq2d ((G wff ()) (a nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (zmod a n1) (zmod a n2)))
()
(zmodeqd (G a a n1 n2)
  (eqidd (G a))
  h))

(local theorem zmodeq2 ((a nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (zmod a n1) (zmod a n2)))
()
(zmodeq2d ((eq n1 n2) a n1 n2)
  (id ((eq n1 n2)))))

(local def gcd ((a nat ()) (b nat ())) (nat ())
((d nat) (x nat))
(the (ab d (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))))))

(local theorem gcdeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (gcd a1 b1) (gcd a2 b2)))
((d nat) (x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (eq (gcd a1 b1) (gcd a2 b2)))
  (im
    _G
    (eq
      (:unfold gcd (a1 b1) (d x)
        (the (ab d (al x (iff (dvd x d) (an (dvd x a1) (dvd x b1)))))))
      (:unfold gcd (a2 b2) (d x)
        (the (ab d (al x (iff (dvd x d) (an (dvd x a2) (dvd x b2)))))))))
  (theeqd (_G (ab d (al x (iff (dvd x d) (an (dvd x a1) (dvd x b1))))) (ab d (al x (iff (dvd x d) (an (dvd x a2) (dvd x b2))))))
    (abeqd (_G d (al x (iff (dvd x d) (an (dvd x a1) (dvd x b1)))) (al x (iff (dvd x d) (an (dvd x a2) (dvd x b2)))))
      (aleqd (_G x (iff (dvd x d) (an (dvd x a1) (dvd x b1))) (iff (dvd x d) (an (dvd x a2) (dvd x b2))))
        (bieqd (_G (dvd x d) (dvd x d) (an (dvd x a1) (dvd x b1)) (an (dvd x a2) (dvd x b2)))
          (biidd (_G (dvd x d)))
          (aneqd (_G (dvd x a1) (dvd x a2) (dvd x b1) (dvd x b2))
            (dvdeqd (_G x x a1 a2)
              H1
              ha)
            (dvdeqd (_G x x b1 b2)
              H1
              hb)))))))))

(local theorem gcdeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (gcd a1 b1) (gcd a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (gcd a1 b1) (gcd a2 b2)))
  (gcdeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem gcdeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (gcd a1 b) (gcd a2 b)))
()
(gcdeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem gcdeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (gcd a1 b) (gcd a2 b)))
()
(gcdeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem gcdeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (gcd a b1) (gcd a b2)))
()
(gcdeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem gcdeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (gcd a b1) (gcd a b2)))
()
(gcdeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem gcdcom ((a nat ()) (b nat ())) ()
  (eq (gcd a b) (gcd b a))
((d1 nat) (d2 nat) (x nat) (y nat))
(:conv (eq (gcd a b) (gcd b a))
  (eq
    (:unfold gcd (a b) (d1 x)
      (the (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b)))))))
    (:unfold gcd (b a) (d2 y)
      (the (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a))))))))
  (ax_mp ((eqs (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))) (eq (the (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b)))))) (the (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a))))))))
    (theeqd ((eqs (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))) (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a))))))
      (id ((eqs (ab d1 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b))))) (ab d2 (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))))))
    (cbvab (d1 d2 (al x (iff (dvd x d1) (an (dvd x a) (dvd x b)))) (al y (iff (dvd y d2) (an (dvd y b) (dvd y a)))))
      (cbvald (x y (eq d1 d2) (iff (dvd x d1) (an (dvd x a) (dvd x b))) (iff (dvd y d2) (an (dvd y b) (dvd y a))))
        (bieqd ((an (eq d1 d2) (eq x y)) (dvd x d1) (dvd y d2) (an (dvd x a) (dvd x b)) (an (dvd y b) (dvd y a)))
          (dvdeqd ((an (eq d1 d2) (eq x y)) x y d1 d2)
            (anr ((eq d1 d2) (eq x y)))
            (anl ((eq d1 d2) (eq x y))))
          (syl5bb ((an (eq d1 d2) (eq x y)) (an (dvd x a) (dvd x b)) (an (dvd x b) (dvd x a)) (an (dvd y b) (dvd y a)))
            (ancomb ((dvd x a) (dvd x b)))
            (anwr ((eq d1 d2) (eq x y) (iff (an (dvd x b) (dvd x a)) (an (dvd y b) (dvd y a))))
              (aneqd ((eq x y) (dvd x b) (dvd y b) (dvd x a) (dvd y a))
                (dvdeq1 (x y b))
                (dvdeq1 (x y a)))))))))))

(local theorem eqgcd ((G wff ()) (a nat ()) (b nat ()) (d nat ()) (x nat))
  ((h (im G (iff (dvd x d) (an (dvd x a) (dvd x b))))))
  (im G (eq (gcd a b) d))
((d2 nat) (y nat))
(:let H1 (iald (x G (iff (dvd x d) (an (dvd x a) (dvd x b))))
  h)
(:let H2 (anwl (G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))))
  H1)
(:conv (im G (eq (gcd a b) d))
  (im
    G
    (eq
      (:unfold gcd (a b) (d2 y)
        (the (ab d2 (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))))))
      d))
  (eqtheabd (G d d2 (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))))
    (ibida (G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))) (eq d2 d))
      (dvdasymd ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) d2 d)
        (mpbird ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (an (dvd d2 a) (dvd d2 b)) (dvd d2 d))
          (rsyl ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))) (iff (dvd d2 d) (an (dvd d2 a) (dvd d2 b))))
            H2
            (eale (x d2 (iff (dvd x d) (an (dvd x a) (dvd x b))) (iff (dvd d2 d) (an (dvd d2 a) (dvd d2 b))))
              (bieqd ((eq x d2) (dvd x d) (dvd d2 d) (an (dvd x a) (dvd x b)) (an (dvd d2 a) (dvd d2 b)))
                (dvdeq1 (x d2 d))
                (aneqd ((eq x d2) (dvd x a) (dvd d2 a) (dvd x b) (dvd d2 b))
                  (dvdeq1 (x d2 a))
                  (dvdeq1 (x d2 b))))))
          (mpbii ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (dvd d2 d2) (an (dvd d2 a) (dvd d2 b)))
            (dvdid (d2))
            (anwr (G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))) (iff (dvd d2 d2) (an (dvd d2 a) (dvd d2 b))))
              (eale (y d2 (iff (dvd y d2) (an (dvd y a) (dvd y b))) (iff (dvd d2 d2) (an (dvd d2 a) (dvd d2 b))))
                (bieqd ((eq y d2) (dvd y d2) (dvd d2 d2) (an (dvd y a) (dvd y b)) (an (dvd d2 a) (dvd d2 b)))
                  (dvdeq1 (y d2 d2))
                  (aneqd ((eq y d2) (dvd y a) (dvd d2 a) (dvd y b) (dvd d2 b))
                    (dvdeq1 (y d2 a))
                    (dvdeq1 (y d2 b))))))))
        (mpbird ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (an (dvd d a) (dvd d b)) (dvd d d2))
          (anwr (G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))) (iff (dvd d d2) (an (dvd d a) (dvd d b))))
            (eale (y d (iff (dvd y d2) (an (dvd y a) (dvd y b))) (iff (dvd d d2) (an (dvd d a) (dvd d b))))
              (bieqd ((eq y d) (dvd y d2) (dvd d d2) (an (dvd y a) (dvd y b)) (an (dvd d a) (dvd d b)))
                (dvdeq1 (y d d2))
                (aneqd ((eq y d) (dvd y a) (dvd d a) (dvd y b) (dvd d b))
                  (dvdeq1 (y d a))
                  (dvdeq1 (y d b))))))
          (mpbii ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (dvd d d) (an (dvd d a) (dvd d b)))
            (dvdid (d))
            (rsyl ((an G (al y (iff (dvd y d2) (an (dvd y a) (dvd y b))))) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))) (iff (dvd d d) (an (dvd d a) (dvd d b))))
              H2
              (eale (x d (iff (dvd x d) (an (dvd x a) (dvd x b))) (iff (dvd d d) (an (dvd d a) (dvd d b))))
                (bieqd ((eq x d) (dvd x d) (dvd d d) (an (dvd x a) (dvd x b)) (an (dvd d a) (dvd d b)))
                  (dvdeq1 (x d d))
                  (aneqd ((eq x d) (dvd x a) (dvd d a) (dvd x b) (dvd d b))
                    (dvdeq1 (x d a))
                    (dvdeq1 (x d b)))))))))
      (mpbird ((an G (eq d2 d)) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))) (al y (iff (dvd y d2) (an (dvd y a) (dvd y b)))))
        (cbvald (y x (an G (eq d2 d)) (iff (dvd y d2) (an (dvd y a) (dvd y b))) (iff (dvd x d) (an (dvd x a) (dvd x b))))
          (bieqd ((an (an G (eq d2 d)) (eq y x)) (dvd y d2) (dvd x d) (an (dvd y a) (dvd y b)) (an (dvd x a) (dvd x b)))
            (dvdeqd ((an (an G (eq d2 d)) (eq y x)) y x d2 d)
              (anr ((an G (eq d2 d)) (eq y x)))
              (anlr (G (eq d2 d) (eq y x))))
            (anwr ((an G (eq d2 d)) (eq y x) (iff (an (dvd y a) (dvd y b)) (an (dvd x a) (dvd x b))))
              (aneqd ((eq y x) (dvd y a) (dvd x a) (dvd y b) (dvd x b))
                (dvdeq1 (y x a))
                (dvdeq1 (y x b))))))
        (anwl (G (eq d2 d) (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))))
          H1))))))))

(local theorem gcd00 () ()
  (eq (gcd (d0) (d0)) (d0))
((x nat))
(:let H1 (dvd02 (x))
(trud ((eq (gcd (d0) (d0)) (d0)))
  (eqgcd ((wtru) (d0) (d0) (d0) x)
    (a1i ((wtru) (iff (dvd x (d0)) (an (dvd x (d0)) (dvd x (d0)))))
      (ax_mp ((an (dvd x (d0)) (dvd x (d0))) (iff (dvd x (d0)) (an (dvd x (d0)) (dvd x (d0)))))
        (ax_mp ((dvd x (d0)) (im (an (dvd x (d0)) (dvd x (d0))) (iff (dvd x (d0)) (an (dvd x (d0)) (dvd x (d0))))))
          (bith ((dvd x (d0)) (an (dvd x (d0)) (dvd x (d0)))))
          H1)
        (ax_mp ((dvd x (d0)) (an (dvd x (d0)) (dvd x (d0))))
          (ax_mp ((dvd x (d0)) (im (dvd x (d0)) (an (dvd x (d0)) (dvd x (d0)))))
            (ian ((dvd x (d0)) (dvd x (d0))))
            H1)
          H1)))))))

(local def bgcd ((a nat ()) (b nat ())) (nat ())
((d nat) (x nat) (y nat))
(least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))))

(local theorem bgcdeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (bgcd a1 b1) (bgcd a2 b2)))
((d nat) (x nat) (y nat))
(:conv (im _G (eq (bgcd a1 b1) (bgcd a2 b2)))
  (im
    _G
    (eq
      (:unfold bgcd (a1 b1) (d x y)
        (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a1) (add (mul y b1) d))))))))
      (:unfold bgcd (a2 b2) (d x y)
        (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a2) (add (mul y b2) d))))))))))
  (leasteqd (_G (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a1) (add (mul y b1) d)))))) (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a2) (add (mul y b2) d)))))))
    (abeqd (_G d (an (lt (d0) d) (ex x (ex y (eq (mul x a1) (add (mul y b1) d))))) (an (lt (d0) d) (ex x (ex y (eq (mul x a2) (add (mul y b2) d))))))
      (aneqd (_G (lt (d0) d) (lt (d0) d) (ex x (ex y (eq (mul x a1) (add (mul y b1) d)))) (ex x (ex y (eq (mul x a2) (add (mul y b2) d)))))
        (biidd (_G (lt (d0) d)))
        (exeqd (_G x (ex y (eq (mul x a1) (add (mul y b1) d))) (ex y (eq (mul x a2) (add (mul y b2) d))))
          (exeqd (_G y (eq (mul x a1) (add (mul y b1) d)) (eq (mul x a2) (add (mul y b2) d)))
            (eqeqd (_G (mul x a1) (mul x a2) (add (mul y b1) d) (add (mul y b2) d))
              (muleqd (_G x x a1 a2)
                (eqidd (_G x))
                ha)
              (addeqd (_G (mul y b1) (mul y b2) d d)
                (muleqd (_G y y b1 b2)
                  (eqidd (_G y))
                  hb)
                (eqidd (_G d)))))))))))

(local theorem bgcdeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (bgcd a1 b1) (bgcd a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (bgcd a1 b1) (bgcd a2 b2)))
  (bgcdeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem bgcdeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (bgcd a1 b) (bgcd a2 b)))
()
(bgcdeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem bgcdeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (bgcd a1 b) (bgcd a2 b)))
()
(bgcdeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem bgcdeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (bgcd a b1) (bgcd a b2)))
()
(bgcdeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem bgcdeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (bgcd a b1) (bgcd a b2)))
()
(bgcdeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem dfbgcd ((a nat ()) (b nat ()) (d nat) (x nat) (y nat)) ()
  (eq (bgcd a b) (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))))
((d2 nat) (w nat) (z nat))
(:conv (eq (bgcd a b) (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))))
  (eq
    (:unfold bgcd (a b) (d2 z w)
      (least (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))))
    (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))))
  (ax_mp ((eqs (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))) (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))) (eq (least (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))) (least (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d)))))))))
    (leasteq ((ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))) (ab d (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))))
    (cbvab (d2 d (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))) (an (lt (d0) d) (ex x (ex y (eq (mul x a) (add (mul y b) d))))))
      (aneqd ((eq d2 d) (lt (d0) d2) (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))) (ex x (ex y (eq (mul x a) (add (mul y b) d)))))
        (lteq2 ((d0) d2 d))
        (cbvexd (z x (eq d2 d) (ex w (eq (mul z a) (add (mul w b) d2))) (ex y (eq (mul x a) (add (mul y b) d))))
          (cbvexd (w y (an (eq d2 d) (eq z x)) (eq (mul z a) (add (mul w b) d2)) (eq (mul x a) (add (mul y b) d)))
            (eqeqd ((an (an (eq d2 d) (eq z x)) (eq w y)) (mul z a) (mul x a) (add (mul w b) d2) (add (mul y b) d))
              (muleq1d ((an (an (eq d2 d) (eq z x)) (eq w y)) z x a)
                (anlr ((eq d2 d) (eq z x) (eq w y))))
              (addeqd ((an (an (eq d2 d) (eq z x)) (eq w y)) (mul w b) (mul y b) d2 d)
                (anwr ((an (eq d2 d) (eq z x)) (eq w y) (eq (mul w b) (mul y b)))
                  (muleq1 (w y b)))
                (anll ((eq d2 d) (eq z x) (eq w y))))))))))))

(local theorem bgcd01 ((b nat ())) ()
  (eq (bgcd (d0) b) (d0))
((d nat) (d2 nat) (x nat) (y nat))
(:conv (eq (bgcd (d0) b) (d0))
  (eq
    (:unfold bgcd ((d0) b) (d2 x y)
      (least (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))
    (d0))
  (ax_mp ((not (ex d (el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))) (eq (least (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))) (d0)))
    (least0 ((ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2)))))) d))
    (ngen (d (el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))
      (mt ((fal) (el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))))
        (sylbi ((el d (ab d2 (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))))) (an (lt (d0) d) (ex x (ex y (eq (d0) (add (mul y b) d))))) (fal))
          (elabe (d2 d (an (lt (d0) d2) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2))))) (an (lt (d0) d) (ex x (ex y (eq (d0) (add (mul y b) d))))))
            (aneqd ((eq d2 d) (lt (d0) d2) (lt (d0) d) (ex x (ex y (eq (mul x (d0)) (add (mul y b) d2)))) (ex x (ex y (eq (d0) (add (mul y b) d)))))
              (lteq2 ((d0) d2 d))
              (exeqd ((eq d2 d) x (ex y (eq (mul x (d0)) (add (mul y b) d2))) (ex y (eq (d0) (add (mul y b) d))))
                (exeqd ((eq d2 d) y (eq (mul x (d0)) (add (mul y b) d2)) (eq (d0) (add (mul y b) d)))
                  (eqeqd ((eq d2 d) (mul x (d0)) (d0) (add (mul y b) d2) (add (mul y b) d))
                    (a1i ((eq d2 d) (eq (mul x (d0)) (d0)))
                      (mul02 (x)))
                    (addeq2 ((mul y b) d2 d)))))))
          (imp ((lt (d0) d) (ex x (ex y (eq (d0) (add (mul y b) d)))) (fal))
            (eexd (x (lt (d0) d) (ex y (eq (d0) (add (mul y b) d))) (fal))
              (eexd (y (lt (d0) d) (eq (d0) (add (mul y b) d)) (fal))
                (syl ((lt (d0) d) (not (eq (d0) (add (mul y b) d))) (im (eq (d0) (add (mul y b) d)) (fal)))
                  (absurd ((eq (d0) (add (mul y b) d)) (fal)))
                  (syl ((lt (d0) d) (lt (d0) (add (mul y b) d)) (not (eq (d0) (add (mul y b) d))))
                    (:conv (im (lt (d0) (add (mul y b) d)) (not (eq (d0) (add (mul y b) d))))
                      (im
                        (lt (d0) (add (mul y b) d))
                        (:sym (:unfold ne ((d0) (add (mul y b) d)) ()
                          (not (eq (d0) (add (mul y b) d))))))
                      (ltne ((d0) (add (mul y b) d))))
                    (mpi ((lt (d0) d) (le d (add (mul y b) d)) (lt (d0) (add (mul y b) d)))
                      (leaddid2 (d (mul y b)))
                      (ltletr ((d0) d (add (mul y b) d))))))))))
        (notfal ()))))))

(local theorem bgcdlem ((a nat ()) (b nat ()) (x nat) (y nat)) ()
  (im (ne a (d0)) (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
((d nat) (w nat) (z nat))
(sylib ((ne a (d0)) (el (bgcd a b) (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))) (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
  (elabe (d (bgcd a b) (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))) (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
    (aneqd ((eq d (bgcd a b)) (lt (d0) d) (lt (d0) (bgcd a b)) (ex z (ex w (eq (mul z a) (add (mul w b) d)))) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))))
      (lteq2 ((d0) d (bgcd a b)))
      (cbvexd (z x (eq d (bgcd a b)) (ex w (eq (mul z a) (add (mul w b) d))) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))
        (cbvexd (w y (an (eq d (bgcd a b)) (eq z x)) (eq (mul z a) (add (mul w b) d)) (eq (mul x a) (add (mul y b) (bgcd a b))))
          (eqeqd ((an (an (eq d (bgcd a b)) (eq z x)) (eq w y)) (mul z a) (mul x a) (add (mul w b) d) (add (mul y b) (bgcd a b)))
            (muleq1d ((an (an (eq d (bgcd a b)) (eq z x)) (eq w y)) z x a)
              (anlr ((eq d (bgcd a b)) (eq z x) (eq w y))))
            (addeqd ((an (an (eq d (bgcd a b)) (eq z x)) (eq w y)) (mul w b) (mul y b) d (bgcd a b))
              (anwr ((an (eq d (bgcd a b)) (eq z x)) (eq w y) (eq (mul w b) (mul y b)))
                (muleq1 (w y b)))
              (anll ((eq d (bgcd a b)) (eq z x) (eq w y)))))))))
  (syl ((ne a (d0)) (el a (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))) (el (bgcd a b) (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
    (:conv (im (el a (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))) (el (bgcd a b) (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
      (im
        (el a (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d)))))))
        (el
          (:unfold bgcd (a b) (d z w)
            (least (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
          (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
      (leastel ((ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d)))))) a)))
    (sylibr ((ne a (d0)) (an (lt (d0) a) (ex z (ex w (eq (mul z a) (add (mul w b) a))))) (el a (ab d (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))))
      (elabe (d a (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))) (an (lt (d0) a) (ex z (ex w (eq (mul z a) (add (mul w b) a))))))
        (aneqd ((eq d a) (lt (d0) d) (lt (d0) a) (ex z (ex w (eq (mul z a) (add (mul w b) d)))) (ex z (ex w (eq (mul z a) (add (mul w b) a)))))
          (lteq2 ((d0) d a))
          (exeqd ((eq d a) z (ex w (eq (mul z a) (add (mul w b) d))) (ex w (eq (mul z a) (add (mul w b) a))))
            (exeqd ((eq d a) w (eq (mul z a) (add (mul w b) d)) (eq (mul z a) (add (mul w b) a)))
              (eqeq2d ((eq d a) (mul z a) (add (mul w b) d) (add (mul w b) a))
                (addeq2 ((mul w b) d a)))))))
      (iand ((ne a (d0)) (lt (d0) a) (ex z (ex w (eq (mul z a) (add (mul w b) a)))))
        (ax_mp ((iff (lt (d0) a) (ne a (d0))) (im (ne a (d0)) (lt (d0) a)))
          (bi2 ((lt (d0) a) (ne a (d0))))
          (lt01 (a)))
        (iexde (z (ne a (d0)) (d1) (ex w (eq (mul z a) (add (mul w b) a))))
          (iexde (w (an (ne a (d0)) (eq z (d1))) (d0) (eq (mul z a) (add (mul w b) a)))
            (eqtr4d ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (mul z a) a (add (mul w b) a))
              (syl6eq ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (mul z a) (mul (d1) a) a)
                (mul11 (a))
                (muleq1d ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) z (d1) a)
                  (anlr ((ne a (d0)) (eq z (d1)) (eq w (d0))))))
              (syl6eq ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (add (mul w b) a) (add (d0) a) a)
                (add01 (a))
                (addeq1d ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (mul w b) (d0) a)
                  (syl6eq ((an (an (ne a (d0)) (eq z (d1))) (eq w (d0))) (mul w b) (mul (d0) b) (d0))
                    (mul01 (b))
                    (anwr ((an (ne a (d0)) (eq z (d1))) (eq w (d0)) (eq (mul w b) (mul (d0) b)))
                      (muleq1 (w (d0) b))))))))))))))

(local theorem bgcdpos ((a nat ()) (b nat ())) ()
  (im (ne a (d0)) (lt (d0) (bgcd a b)))
((x nat) (y nat))
(anld ((ne a (d0)) (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))))
  (bgcdlem (a b x y))))

(local theorem bgcdbezout ((a nat ()) (b nat ()) (x nat) (y nat)) ()
  (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))
()
(:let H1 (anll ((eq a (d0)) (eq x (d0)) (eq y (d0))))
(cases ((eq a (d0)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))))
  (iexde (x (eq a (d0)) (d0) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))
    (iexde (y (an (eq a (d0)) (eq x (d0))) (d0) (eq (mul x a) (add (mul y b) (bgcd a b))))
      (eqtr4d ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (mul x a) (mul (d0) (d0)) (add (mul y b) (bgcd a b)))
        (muleqd ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) x (d0) a (d0))
          (anlr ((eq a (d0)) (eq x (d0)) (eq y (d0))))
          H1)
        (syl6eqr ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (add (mul y b) (bgcd a b)) (d0) (mul (d0) (d0)))
          (mul01 ((d0)))
          (syl6eq ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (add (mul y b) (bgcd a b)) (add (d0) (d0)) (d0))
            (add0 ((d0)))
            (addeqd ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (mul y b) (d0) (bgcd a b) (d0))
              (syl6eq ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (mul y b) (mul (d0) b) (d0))
                (mul01 (b))
                (anwr ((an (eq a (d0)) (eq x (d0))) (eq y (d0)) (eq (mul y b) (mul (d0) b)))
                  (muleq1 (y (d0) b))))
              (syl6eq ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) (bgcd a b) (bgcd (d0) b) (d0))
                (bgcd01 (b))
                (bgcdeq1d ((an (an (eq a (d0)) (eq x (d0))) (eq y (d0))) a (d0) b)
                  H1))))))))
  (anrd ((not (eq a (d0))) (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))))
    (:conv (im (not (eq a (d0))) (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
      (im
        (:sym (:unfold ne (a (d0)) ()
          (not (eq a (d0)))))
        (an (lt (d0) (bgcd a b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))))
      (bgcdlem (a b x y)))))))

(local theorem bgcdled ((G wff ()) (a nat ()) (b nat ()) (d nat ()) (x nat ()) (y nat ()))
  ((h (im G (lt (d0) d)))
   (h2 (im G (eq (mul x a) (add (mul y b) d)))))
  (im G (le (bgcd a b) d))
((d2 nat) (w nat) (z nat))
(syl (G (el d (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))) (le (bgcd a b) d))
  (:conv (im (el d (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))) (le (bgcd a b) d))
    (im
      (el d (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))))
      (le
        (:unfold bgcd (a b) (d2 z w)
          (least (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))))
        d))
    (leastle ((ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))))) d)))
  (sylibr (G (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))) (el d (ab d2 (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))))))
    (elabe (d2 d (an (lt (d0) d2) (ex z (ex w (eq (mul z a) (add (mul w b) d2))))) (an (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d))))))
      (aneqd ((eq d2 d) (lt (d0) d2) (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d2)))) (ex z (ex w (eq (mul z a) (add (mul w b) d)))))
        (lteq2 ((d0) d2 d))
        (exeqd ((eq d2 d) z (ex w (eq (mul z a) (add (mul w b) d2))) (ex w (eq (mul z a) (add (mul w b) d))))
          (exeqd ((eq d2 d) w (eq (mul z a) (add (mul w b) d2)) (eq (mul z a) (add (mul w b) d)))
            (eqeq2d ((eq d2 d) (mul z a) (add (mul w b) d2) (add (mul w b) d))
              (addeq2 ((mul w b) d2 d)))))))
    (iand (G (lt (d0) d) (ex z (ex w (eq (mul z a) (add (mul w b) d)))))
      h
      (iexde (z G x (ex w (eq (mul z a) (add (mul w b) d))))
        (iexde (w (an G (eq z x)) y (eq (mul z a) (add (mul w b) d)))
          (mpbird ((an (an G (eq z x)) (eq w y)) (eq (mul x a) (add (mul y b) d)) (eq (mul z a) (add (mul w b) d)))
            (eqeqd ((an (an G (eq z x)) (eq w y)) (mul z a) (mul x a) (add (mul w b) d) (add (mul y b) d))
              (muleq1d ((an (an G (eq z x)) (eq w y)) z x a)
                (anlr (G (eq z x) (eq w y))))
              (addeq1d ((an (an G (eq z x)) (eq w y)) (mul w b) (mul y b) d)
                (anwr ((an G (eq z x)) (eq w y) (eq (mul w b) (mul y b)))
                  (muleq1 (w y b)))))
            (anwll (G (eq z x) (eq w y) (eq (mul x a) (add (mul y b) d)))
              h2))))))))

(local theorem bgcd02 ((a nat ())) ()
  (eq (bgcd a (d0)) a)
((x nat) (y nat))
(:let H1 (mul11 (a))
(:let H2 (add01 ((bgcd a (d0))))
(:let H3 (addeq1 ((mul y (d0)) (d0) (bgcd a (d0))))
(:let H4 (mul0 (y))
(:let H5 (ax_mp ((eq (mul y (d0)) (d0)) (eq (add (mul y (d0)) (bgcd a (d0))) (add (d0) (bgcd a (d0)))))
  H3
  H4)
(:let H6 (anr ((not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))))
(:let H7 (syl6eq ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (mul x a) (add (mul y (d0)) (bgcd a (d0))) (add (d0) (bgcd a (d0))))
  H5
  H6)
(:let H8 (syl6eq ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (mul x a) (add (d0) (bgcd a (d0))) (bgcd a (d0)))
  H2
  H7)
(cases ((eq a (d0)) (eq (bgcd a (d0)) a))
  (eqtr4d ((eq a (d0)) (bgcd a (d0)) (d0) a)
    (syl6eq ((eq a (d0)) (bgcd a (d0)) (bgcd (d0) (d0)) (d0))
      (bgcd01 ((d0)))
      (bgcdeq1 (a (d0) (d0))))
    (id ((eq a (d0)))))
  (leasymd ((not (eq a (d0))) (bgcd a (d0)) a)
    (bgcdled ((not (eq a (d0))) a (d0) a (d1) (d0))
      (bi2i ((lt (d0) a) (not (eq a (d0))))
        (:conv (iff (lt (d0) a) (not (eq a (d0))))
          (iff
            (lt (d0) a)
            (:sym (:unfold ne (a (d0)) ()
              (not (eq a (d0))))))
          (lt01 (a))))
      (a1i ((not (eq a (d0))) (eq (mul (d1) a) (add (mul (d0) (d0)) a)))
        (ax_mp ((eq a (add (mul (d0) (d0)) a)) (eq (mul (d1) a) (add (mul (d0) (d0)) a)))
          (ax_mp ((eq (mul (d1) a) a) (im (eq a (add (mul (d0) (d0)) a)) (eq (mul (d1) a) (add (mul (d0) (d0)) a))))
            (eqtr ((mul (d1) a) a (add (mul (d0) (d0)) a)))
            H1)
          (ax_mp ((eq (add (mul (d0) (d0)) a) a) (eq a (add (mul (d0) (d0)) a)))
            (eqcom ((add (mul (d0) (d0)) a) a))
            (ax_mp ((eq (add (d0) a) a) (eq (add (mul (d0) (d0)) a) a))
              (ax_mp ((eq (add (mul (d0) (d0)) a) (add (d0) a)) (im (eq (add (d0) a) a) (eq (add (mul (d0) (d0)) a) a)))
                (eqtr ((add (mul (d0) (d0)) a) (add (d0) a) a))
                (ax_mp ((eq (mul (d0) (d0)) (d0)) (eq (add (mul (d0) (d0)) a) (add (d0) a)))
                  (addeq1 ((mul (d0) (d0)) (d0) a))
                  (mul01 ((d0)))))
              (add01 (a)))))))
    (mpi ((not (eq a (d0))) (ex x (ex y (eq (mul x a) (add (mul y (d0)) (bgcd a (d0)))))) (le a (bgcd a (d0))))
      (bgcdbezout (a (d0) x y))
      (eexd (x (not (eq a (d0))) (ex y (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (le a (bgcd a (d0))))
        (eexda (y (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0)))) (le a (bgcd a (d0))))
          (mpbid ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (le (mul (d1) a) (mul x a)) (le a (bgcd a (d0))))
            (leeqd ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (mul (d1) a) a (mul x a) (bgcd a (d0)))
              (a1i ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq (mul (d1) a) a))
                H1)
              H8)
            (syl ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (le (d1) x) (le (mul (d1) a) (mul x a)))
              (lemul1a ((d1) x a))
              (sylibr ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (ne x (d0)) (le (d1) x))
                (:conv (iff (le (d1) x) (ne x (d0)))
                  (iff
                    (:sym (:unfold lt ((d0) x) ()
                      (le
                        (:sym (:unfold d1 () ()
                          (suc (d0))))
                        x)))
                    (ne x (d0)))
                  (lt01 (x)))
                (:conv (im (an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (ne x (d0)))
                  (im
                    (an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0)))))
                    (:unfold ne (x (d0)) ()
                      (not (eq x (d0)))))
                  (mtand ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq (bgcd a (d0)) (d0)) (eq x (d0)))
                    (anwl ((not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0)))) (not (eq (bgcd a (d0)) (d0))))
                      (syl ((not (eq a (d0))) (lt (d0) (bgcd a (d0))) (not (eq (bgcd a (d0)) (d0))))
                        (:conv (im (lt (d0) (bgcd a (d0))) (not (eq (bgcd a (d0)) (d0))))
                          (im
                            (lt (d0) (bgcd a (d0)))
                            (:sym (:unfold ne ((bgcd a (d0)) (d0)) ()
                              (not (eq (bgcd a (d0)) (d0))))))
                          (ltner ((d0) (bgcd a (d0)))))
                        (:conv (im (not (eq a (d0))) (lt (d0) (bgcd a (d0))))
                          (im
                            (:sym (:unfold ne (a (d0)) ()
                              (not (eq a (d0)))))
                            (lt (d0) (bgcd a (d0))))
                          (bgcdpos (a (d0))))))
                    (eqtr3d ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq x (d0))) (bgcd a (d0)) (mul x a) (d0))
                      (anwl ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq x (d0)) (eq (mul x a) (bgcd a (d0))))
                        H8)
                      (syl6eq ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq x (d0))) (mul x a) (mul (d0) a) (d0))
                        (mul01 (a))
                        (anwr ((an (not (eq a (d0))) (eq (mul x a) (add (mul y (d0)) (bgcd a (d0))))) (eq x (d0)) (eq (mul x a) (mul (d0) a)))
                          (muleq1 (x (d0) a))))))))))))))))))))))))

(local theorem dvdbgcd ((a nat ()) (b nat ()) (d nat ())) ()
  (im (an (dvd d a) (dvd d b)) (dvd d (bgcd a b)))
((x nat) (y nat))
(mpi ((an (dvd d a) (dvd d b)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))) (dvd d (bgcd a b)))
  (bgcdbezout (a b x y))
  (eexd (x (an (dvd d a) (dvd d b)) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d (bgcd a b)))
    (eexda (y (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b))) (dvd d (bgcd a b)))
      (mpbird ((an (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d (add (mul y b) (bgcd a b))) (dvd d (bgcd a b)))
        (syl ((an (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d (mul y b)) (iff (dvd d (bgcd a b)) (dvd d (add (mul y b) (bgcd a b)))))
          (dvdadd1 ((mul y b) (bgcd a b) d))
          (syl ((an (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d b) (dvd d (mul y b)))
            (dvdmul12 (d b y))
            (anlr ((dvd d a) (dvd d b) (eq (mul x a) (add (mul y b) (bgcd a b)))))))
        (mpbid ((an (an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd d (mul x a)) (dvd d (add (mul y b) (bgcd a b))))
          (anwr ((an (dvd d a) (dvd d b)) (eq (mul x a) (add (mul y b) (bgcd a b))) (iff (dvd d (mul x a)) (dvd d (add (mul y b) (bgcd a b)))))
            (dvdeq2 (d (mul x a) (add (mul y b) (bgcd a b)))))
          (anwll ((dvd d a) (dvd d b) (eq (mul x a) (add (mul y b) (bgcd a b))) (dvd d (mul x a)))
            (dvdmul12 (d a x)))))))))

(local theorem bgcddvd1lem ((G wff ()) (a nat ()) (b nat ()) (d nat ()) (q nat ()) (r nat ()) (u nat ()) (x nat ()) (y nat ()))
  ((h1 (im G (ne a (d0))))
   (h2 (im G (eq (mul x a) (add (mul y b) d))))
   (h3 (im G (ne b (d0))))
   (h4 (im G (eq (add (mul d q) r) a)))
   (h5 (im G (le x u)))
   (h6 (im G (le y u))))
  (im G (eq (mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul (sub (mul u a) y) q) b) r)))
()
(:let H1 (mul12 (u))
(sylib (G (eq (add (mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul x q) a) (mul (mul y q) b))) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b)))) (eq (mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul (sub (mul u a) y) q) b) r)))
  (addcan1 ((mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))))
  (syl5eqr (G (add (mul (suc (mul (sub (mul u b) x) q)) a) (add (mul (mul x q) a) (mul (mul y q) b))) (add (add (mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a)) (mul (mul y q) b)) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))))
    (addass ((mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a) (mul (mul y q) b)))
    (eqtr4d (G (add (add (mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a)) (mul (mul y q) b)) (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))))
      (addeq1d (G (add (mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a)) (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b))
        (syl5eqr (G (add (mul (suc (mul (sub (mul u b) x) q)) a) (mul (mul x q) a)) (mul (add (suc (mul (sub (mul u b) x) q)) (mul x q)) a) (mul (suc (mul (mul u b) q)) a))
          (addmul ((suc (mul (sub (mul u b) x) q)) (mul x q) a))
          (muleq1d (G (add (suc (mul (sub (mul u b) x) q)) (mul x q)) (suc (mul (mul u b) q)) a)
            (syl5eq (G (add (suc (mul (sub (mul u b) x) q)) (mul x q)) (suc (add (mul (sub (mul u b) x) q) (mul x q))) (suc (mul (mul u b) q)))
              (addS1 ((mul (sub (mul u b) x) q) (mul x q)))
              (suceqd (G (add (mul (sub (mul u b) x) q) (mul x q)) (mul (mul u b) q))
                (syl5eqr (G (add (mul (sub (mul u b) x) q) (mul x q)) (mul (add (sub (mul u b) x) x) q) (mul (mul u b) q))
                  (addmul ((sub (mul u b) x) x q))
                  (muleq1d (G (add (sub (mul u b) x) x) (mul u b) q)
                    (syl (G (le x (mul u b)) (eq (add (sub (mul u b) x) x) (mul u b)))
                      (npcan ((mul u b) x))
                      (letrd (G x u (mul u b))
                        h5
                        (sylib (G (le (mul u (d1)) (mul u b)) (le u (mul u b)))
                          (ax_mp ((eq (mul u (d1)) u) (iff (le (mul u (d1)) (mul u b)) (le u (mul u b))))
                            (leeq1 ((mul u (d1)) u (mul u b)))
                            H1)
                          (syl (G (le (d1) b) (le (mul u (d1)) (mul u b)))
                            (lemul2a (u (d1) b))
                            (sylibr (G (ne b (d0)) (le (d1) b))
                              (:conv (iff (le (d1) b) (ne b (d0)))
                                (iff
                                  (:sym (:unfold lt ((d0) b) ()
                                    (le
                                      (:sym (:unfold d1 () ()
                                        (suc (d0))))
                                      b)))
                                  (ne b (d0)))
                                (lt01 (b)))
                              h3))))))))))))
      (syl5eq (G (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul y q) b) (mul (mul x q) a))) (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)))
        (ax_mp ((eq (add (mul (mul x q) a) (mul (mul y q) b)) (add (mul (mul y q) b) (mul (mul x q) a))) (eq (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b))) (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul y q) b) (mul (mul x q) a)))))
          (addeq2 ((add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul x q) a) (mul (mul y q) b)) (add (mul (mul y q) b) (mul (mul x q) a))))
          (addcom ((mul (mul x q) a) (mul (mul y q) b))))
        (syl5eqr (G (add (add (mul (mul (sub (mul u a) y) q) b) r) (add (mul (mul y q) b) (mul (mul x q) a))) (add (add (add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b)) (mul (mul x q) a)) (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)))
          (addass ((add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b) (mul (mul x q) a)))
          (eqtr4d (G (add (add (add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b)) (mul (mul x q) a)) (add (add (mul (mul (mul u a) q) b) r) (mul (mul x q) a)) (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)))
            (addeq1d (G (add (add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b)) (add (mul (mul (mul u a) q) b) r) (mul (mul x q) a))
              (syl5eq (G (add (add (mul (mul (sub (mul u a) y) q) b) r) (mul (mul y q) b)) (add (add (mul (mul (sub (mul u a) y) q) b) (mul (mul y q) b)) r) (add (mul (mul (mul u a) q) b) r))
                (add32 ((mul (mul (sub (mul u a) y) q) b) r (mul (mul y q) b)))
                (addeq1d (G (add (mul (mul (sub (mul u a) y) q) b) (mul (mul y q) b)) (mul (mul (mul u a) q) b) r)
                  (syl5eqr (G (add (mul (mul (sub (mul u a) y) q) b) (mul (mul y q) b)) (mul (add (mul (sub (mul u a) y) q) (mul y q)) b) (mul (mul (mul u a) q) b))
                    (addmul ((mul (sub (mul u a) y) q) (mul y q) b))
                    (muleq1d (G (add (mul (sub (mul u a) y) q) (mul y q)) (mul (mul u a) q) b)
                      (syl5eqr (G (add (mul (sub (mul u a) y) q) (mul y q)) (mul (add (sub (mul u a) y) y) q) (mul (mul u a) q))
                        (addmul ((sub (mul u a) y) y q))
                        (muleq1d (G (add (sub (mul u a) y) y) (mul u a) q)
                          (syl (G (le y (mul u a)) (eq (add (sub (mul u a) y) y) (mul u a)))
                            (npcan ((mul u a) y))
                            (letrd (G y u (mul u a))
                              h6
                              (sylib (G (le (mul u (d1)) (mul u a)) (le u (mul u a)))
                                (ax_mp ((eq (mul u (d1)) u) (iff (le (mul u (d1)) (mul u a)) (le u (mul u a))))
                                  (leeq1 ((mul u (d1)) u (mul u a)))
                                  H1)
                                (syl (G (le (d1) a) (le (mul u (d1)) (mul u a)))
                                  (lemul2a (u (d1) a))
                                  (sylibr (G (ne a (d0)) (le (d1) a))
                                    (:conv (iff (le (d1) a) (ne a (d0)))
                                      (iff
                                        (:sym (:unfold lt ((d0) a) ()
                                          (le
                                            (:sym (:unfold d1 () ()
                                              (suc (d0))))
                                            a)))
                                        (ne a (d0)))
                                      (lt01 (a)))
                                    h1))))))))))))
            (syl6eqr (G (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (add (mul (mul (mul u a) q) b) (mul (mul x q) a)) r) (add (add (mul (mul (mul u a) q) b) r) (mul (mul x q) a)))
              (add32 ((mul (mul (mul u a) q) b) r (mul (mul x q) a)))
              (syl6eqr (G (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (mul (mul (mul u a) q) b) (add (mul (mul x q) a) r)) (add (add (mul (mul (mul u a) q) b) (mul (mul x q) a)) r))
                (addass ((mul (mul (mul u a) q) b) (mul (mul x q) a) r))
                (syl5eq (G (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (add (mul (mul (mul u a) q) b) a) (mul (mul y q) b)) (add (mul (mul (mul u a) q) b) (add (mul (mul x q) a) r)))
                  (ax_mp ((eq (mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u a) q) b) a)) (eq (add (mul (suc (mul (mul u b) q)) a) (mul (mul y q) b)) (add (add (mul (mul (mul u a) q) b) a) (mul (mul y q) b))))
                    (addeq1 ((mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u a) q) b) a) (mul (mul y q) b)))
                    (ax_mp ((eq (add (mul (mul (mul u b) q) a) a) (add (mul (mul (mul u a) q) b) a)) (eq (mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u a) q) b) a)))
                      (ax_mp ((eq (mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u b) q) a) a)) (im (eq (add (mul (mul (mul u b) q) a) a) (add (mul (mul (mul u a) q) b) a)) (eq (mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u a) q) b) a))))
                        (eqtr ((mul (suc (mul (mul u b) q)) a) (add (mul (mul (mul u b) q) a) a) (add (mul (mul (mul u a) q) b) a)))
                        (mulS1 ((mul (mul u b) q) a)))
                      (ax_mp ((eq (mul (mul (mul u b) q) a) (mul (mul (mul u a) q) b)) (eq (add (mul (mul (mul u b) q) a) a) (add (mul (mul (mul u a) q) b) a)))
                        (addeq1 ((mul (mul (mul u b) q) a) (mul (mul (mul u a) q) b) a))
                        (ax_mp ((eq (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b)) (eq (mul (mul (mul u b) q) a) (mul (mul (mul u a) q) b)))
                          (ax_mp ((eq (mul (mul (mul u b) q) a) (mul (mul u b) (mul q a))) (im (eq (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b)) (eq (mul (mul (mul u b) q) a) (mul (mul (mul u a) q) b))))
                            (eqtr ((mul (mul (mul u b) q) a) (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b)))
                            (mulass ((mul u b) q a)))
                          (ax_mp ((eq (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b)) (eq (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b)))
                            (ax_mp ((eq (mul (mul u b) (mul q a)) (mul u (mul b (mul q a)))) (im (eq (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b)) (eq (mul (mul u b) (mul q a)) (mul (mul (mul u a) q) b))))
                              (eqtr ((mul (mul u b) (mul q a)) (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b)))
                              (mulass (u b (mul q a))))
                            (ax_mp ((eq (mul (mul (mul u a) q) b) (mul u (mul (mul a q) b))) (eq (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b)))
                              (ax_mp ((eq (mul u (mul b (mul q a))) (mul u (mul (mul a q) b))) (im (eq (mul (mul (mul u a) q) b) (mul u (mul (mul a q) b))) (eq (mul u (mul b (mul q a))) (mul (mul (mul u a) q) b))))
                                (eqtr4 ((mul u (mul b (mul q a))) (mul u (mul (mul a q) b)) (mul (mul (mul u a) q) b)))
                                (ax_mp ((eq (mul b (mul q a)) (mul (mul a q) b)) (eq (mul u (mul b (mul q a))) (mul u (mul (mul a q) b))))
                                  (muleq2 (u (mul b (mul q a)) (mul (mul a q) b)))
                                  (ax_mp ((eq (mul (mul q a) b) (mul (mul a q) b)) (eq (mul b (mul q a)) (mul (mul a q) b)))
                                    (ax_mp ((eq (mul b (mul q a)) (mul (mul q a) b)) (im (eq (mul (mul q a) b) (mul (mul a q) b)) (eq (mul b (mul q a)) (mul (mul a q) b))))
                                      (eqtr ((mul b (mul q a)) (mul (mul q a) b) (mul (mul a q) b)))
                                      (mulcom (b (mul q a))))
                                    (ax_mp ((eq (mul q a) (mul a q)) (eq (mul (mul q a) b) (mul (mul a q) b)))
                                      (muleq1 ((mul q a) (mul a q) b))
                                      (mulcom (q a))))))
                              (ax_mp ((eq (mul (mul u (mul a q)) b) (mul u (mul (mul a q) b))) (eq (mul (mul (mul u a) q) b) (mul u (mul (mul a q) b))))
                                (ax_mp ((eq (mul (mul (mul u a) q) b) (mul (mul u (mul a q)) b)) (im (eq (mul (mul u (mul a q)) b) (mul u (mul (mul a q) b))) (eq (mul (mul (mul u a) q) b) (mul u (mul (mul a q) b)))))
                                  (eqtr ((mul (mul (mul u a) q) b) (mul (mul u (mul a q)) b) (mul u (mul (mul a q) b))))
                                  (ax_mp ((eq (mul (mul u a) q) (mul u (mul a q))) (eq (mul (mul (mul u a) q) b) (mul (mul u (mul a q)) b)))
                                    (muleq1 ((mul (mul u a) q) (mul u (mul a q)) b))
                                    (mulass (u a q))))
                                (mulass (u (mul a q) b)))))))))
                  (syl5eq (G (add (add (mul (mul (mul u a) q) b) a) (mul (mul y q) b)) (add (mul (mul (mul u a) q) b) (add a (mul (mul y q) b))) (add (mul (mul (mul u a) q) b) (add (mul (mul x q) a) r)))
                    (addass ((mul (mul (mul u a) q) b) a (mul (mul y q) b)))
                    (addeq2d (G (mul (mul (mul u a) q) b) (add a (mul (mul y q) b)) (add (mul (mul x q) a) r))
                      (syl5eq (G (add a (mul (mul y q) b)) (add (mul (mul y q) b) a) (add (mul (mul x q) a) r))
                        (addcom (a (mul (mul y q) b)))
                        (eqtr3d (G (add (mul (mul y q) b) a) (add (mul (mul y q) b) (add (mul d q) r)) (add (mul (mul x q) a) r))
                          (addeq2d (G (mul (mul y q) b) (add (mul d q) r) a)
                            h4)
                          (syl5eqr (G (add (mul (mul y q) b) (add (mul d q) r)) (add (add (mul (mul y q) b) (mul d q)) r) (add (mul (mul x q) a) r))
                            (addass ((mul (mul y q) b) (mul d q) r))
                            (addeq1d (G (add (mul (mul y q) b) (mul d q)) (mul (mul x q) a) r)
                              (syl5eq (G (add (mul (mul y q) b) (mul d q)) (add (mul (mul y b) q) (mul d q)) (mul (mul x q) a))
                                (ax_mp ((eq (mul (mul y q) b) (mul (mul y b) q)) (eq (add (mul (mul y q) b) (mul d q)) (add (mul (mul y b) q) (mul d q))))
                                  (addeq1 ((mul (mul y q) b) (mul (mul y b) q) (mul d q)))
                                  (mul32 (y q b)))
                                (syl5eqr (G (add (mul (mul y b) q) (mul d q)) (mul (add (mul y b) d) q) (mul (mul x q) a))
                                  (addmul ((mul y b) d q))
                                  (syl6eq (G (mul (add (mul y b) d) q) (mul (mul x a) q) (mul (mul x q) a))
                                    (mul32 (x a q))
                                    (muleq1d (G (add (mul y b) d) (mul x a) q)
                                      (eqcomd (G (mul x a) (add (mul y b) d))
                                        h2))))))))))))))))))))))

(local theorem bgcddvd2lem ((G wff ()) (a nat ()) (b nat ()) (d nat ()) (q nat ()) (r nat ()) (u nat ()) (x nat ()) (y nat ()))
  ((h1 (im G (ne a (d0))))
   (h2 (im G (eq (mul x a) (add (mul y b) d))))
   (h3 (im G (ne b (d0))))
   (h4 (im G (eq (add (mul d q) r) b)))
   (h5 (im G (le (mul x q) u)))
   (h6 (im G (lt (mul y q) u))))
  (im G (eq (mul (sub (mul u b) (mul x q)) a) (add (mul (sub (mul u a) (suc (mul y q))) b) r)))
()
(:let H1 (mul12 (u))
(sylib (G (eq (add (mul (sub (mul u b) (mul x q)) a) (add (mul (mul x q) a) (mul (suc (mul y q)) b))) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b)))) (eq (mul (sub (mul u b) (mul x q)) a) (add (mul (sub (mul u a) (suc (mul y q))) b) r)))
  (addcan1 ((mul (sub (mul u b) (mul x q)) a) (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))))
  (syl5eqr (G (add (mul (sub (mul u b) (mul x q)) a) (add (mul (mul x q) a) (mul (suc (mul y q)) b))) (add (add (mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a)) (mul (suc (mul y q)) b)) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))))
    (addass ((mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a) (mul (suc (mul y q)) b)))
    (eqtr4d (G (add (add (mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a)) (mul (suc (mul y q)) b)) (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))))
      (addeq1d (G (add (mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a)) (mul (mul u b) a) (mul (suc (mul y q)) b))
        (syl5eqr (G (add (mul (sub (mul u b) (mul x q)) a) (mul (mul x q) a)) (mul (add (sub (mul u b) (mul x q)) (mul x q)) a) (mul (mul u b) a))
          (addmul ((sub (mul u b) (mul x q)) (mul x q) a))
          (muleq1d (G (add (sub (mul u b) (mul x q)) (mul x q)) (mul u b) a)
            (syl (G (le (mul x q) (mul u b)) (eq (add (sub (mul u b) (mul x q)) (mul x q)) (mul u b)))
              (npcan ((mul u b) (mul x q)))
              (letrd (G (mul x q) u (mul u b))
                h5
                (sylib (G (le (mul u (d1)) (mul u b)) (le u (mul u b)))
                  (ax_mp ((eq (mul u (d1)) u) (iff (le (mul u (d1)) (mul u b)) (le u (mul u b))))
                    (leeq1 ((mul u (d1)) u (mul u b)))
                    H1)
                  (syl (G (le (d1) b) (le (mul u (d1)) (mul u b)))
                    (lemul2a (u (d1) b))
                    (sylibr (G (ne b (d0)) (le (d1) b))
                      (:conv (iff (le (d1) b) (ne b (d0)))
                        (iff
                          (:sym (:unfold lt ((d0) b) ()
                            (le
                              (:sym (:unfold d1 () ()
                                (suc (d0))))
                              b)))
                          (ne b (d0)))
                        (lt01 (b)))
                      h3))))))))
      (syl5eq (G (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (suc (mul y q)) b) (mul (mul x q) a))) (add (mul (mul u b) a) (mul (suc (mul y q)) b)))
        (ax_mp ((eq (add (mul (mul x q) a) (mul (suc (mul y q)) b)) (add (mul (suc (mul y q)) b) (mul (mul x q) a))) (eq (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b))) (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (suc (mul y q)) b) (mul (mul x q) a)))))
          (addeq2 ((add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (mul x q) a) (mul (suc (mul y q)) b)) (add (mul (suc (mul y q)) b) (mul (mul x q) a))))
          (addcom ((mul (mul x q) a) (mul (suc (mul y q)) b))))
        (syl5eqr (G (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (add (mul (suc (mul y q)) b) (mul (mul x q) a))) (add (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b)) (mul (mul x q) a)) (add (mul (mul u b) a) (mul (suc (mul y q)) b)))
          (addass ((add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b) (mul (mul x q) a)))
          (eqtr4d (G (add (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b)) (mul (mul x q) a)) (add (add (mul (mul u a) b) r) (mul (mul x q) a)) (add (mul (mul u b) a) (mul (suc (mul y q)) b)))
            (addeq1d (G (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) r) (mul (mul x q) a))
              (syl5eq (G (add (add (mul (sub (mul u a) (suc (mul y q))) b) r) (mul (suc (mul y q)) b)) (add (add (mul (sub (mul u a) (suc (mul y q))) b) (mul (suc (mul y q)) b)) r) (add (mul (mul u a) b) r))
                (add32 ((mul (sub (mul u a) (suc (mul y q))) b) r (mul (suc (mul y q)) b)))
                (addeq1d (G (add (mul (sub (mul u a) (suc (mul y q))) b) (mul (suc (mul y q)) b)) (mul (mul u a) b) r)
                  (syl5eqr (G (add (mul (sub (mul u a) (suc (mul y q))) b) (mul (suc (mul y q)) b)) (mul (add (sub (mul u a) (suc (mul y q))) (suc (mul y q))) b) (mul (mul u a) b))
                    (addmul ((sub (mul u a) (suc (mul y q))) (suc (mul y q)) b))
                    (muleq1d (G (add (sub (mul u a) (suc (mul y q))) (suc (mul y q))) (mul u a) b)
                      (syl (G (le (suc (mul y q)) (mul u a)) (eq (add (sub (mul u a) (suc (mul y q))) (suc (mul y q))) (mul u a)))
                        (npcan ((mul u a) (suc (mul y q))))
                        (letrd (G (suc (mul y q)) u (mul u a))
                          (:conv (im G (le (suc (mul y q)) u))
                            (im
                              G
                              (:sym (:unfold lt ((mul y q) u) ()
                                (le (suc (mul y q)) u))))
                            h6)
                          (sylib (G (le (mul u (d1)) (mul u a)) (le u (mul u a)))
                            (ax_mp ((eq (mul u (d1)) u) (iff (le (mul u (d1)) (mul u a)) (le u (mul u a))))
                              (leeq1 ((mul u (d1)) u (mul u a)))
                              H1)
                            (syl (G (le (d1) a) (le (mul u (d1)) (mul u a)))
                              (lemul2a (u (d1) a))
                              (sylibr (G (ne a (d0)) (le (d1) a))
                                (:conv (iff (le (d1) a) (ne a (d0)))
                                  (iff
                                    (:sym (:unfold lt ((d0) a) ()
                                      (le
                                        (:sym (:unfold d1 () ()
                                          (suc (d0))))
                                        a)))
                                    (ne a (d0)))
                                  (lt01 (a)))
                                h1))))))))))
            (syl6eqr (G (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (add (mul (mul u a) b) (mul (mul x q) a)) r) (add (add (mul (mul u a) b) r) (mul (mul x q) a)))
              (add32 ((mul (mul u a) b) r (mul (mul x q) a)))
              (syl6eqr (G (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) (add (mul (mul x q) a) r)) (add (add (mul (mul u a) b) (mul (mul x q) a)) r))
                (addass ((mul (mul u a) b) (mul (mul x q) a) r))
                (syl5eq (G (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) (add (mul (mul x q) a) r)))
                  (ax_mp ((eq (mul (mul u b) a) (mul (mul u a) b)) (eq (add (mul (mul u b) a) (mul (suc (mul y q)) b)) (add (mul (mul u a) b) (mul (suc (mul y q)) b))))
                    (addeq1 ((mul (mul u b) a) (mul (mul u a) b) (mul (suc (mul y q)) b)))
                    (mul32 (u b a)))
                  (addeq2d (G (mul (mul u a) b) (mul (suc (mul y q)) b) (add (mul (mul x q) a) r))
                    (syl5eq (G (mul (suc (mul y q)) b) (add (mul (mul y q) b) b) (add (mul (mul x q) a) r))
                      (mulS1 ((mul y q) b))
                      (eqtr3d (G (add (mul (mul y q) b) b) (add (mul (mul y q) b) (add (mul d q) r)) (add (mul (mul x q) a) r))
                        (addeq2d (G (mul (mul y q) b) (add (mul d q) r) b)
                          h4)
                        (syl5eqr (G (add (mul (mul y q) b) (add (mul d q) r)) (add (add (mul (mul y q) b) (mul d q)) r) (add (mul (mul x q) a) r))
                          (addass ((mul (mul y q) b) (mul d q) r))
                          (addeq1d (G (add (mul (mul y q) b) (mul d q)) (mul (mul x q) a) r)
                            (syl5eq (G (add (mul (mul y q) b) (mul d q)) (add (mul (mul y b) q) (mul d q)) (mul (mul x q) a))
                              (ax_mp ((eq (mul (mul y q) b) (mul (mul y b) q)) (eq (add (mul (mul y q) b) (mul d q)) (add (mul (mul y b) q) (mul d q))))
                                (addeq1 ((mul (mul y q) b) (mul (mul y b) q) (mul d q)))
                                (mul32 (y q b)))
                              (syl5eqr (G (add (mul (mul y b) q) (mul d q)) (mul (add (mul y b) d) q) (mul (mul x q) a))
                                (addmul ((mul y b) d q))
                                (syl6eq (G (mul (add (mul y b) d) q) (mul (mul x a) q) (mul (mul x q) a))
                                  (mul32 (x a q))
                                  (muleq1d (G (add (mul y b) d) (mul x a) q)
                                    (eqcomd (G (mul x a) (add (mul y b) d))
                                      h2)))))))))))))))))))))

(local theorem bgcddvd1 ((a nat ()) (b nat ())) ()
  (dvd (bgcd a b) a)
((x nat) (y nat))
(cases ((eq a (d0)) (dvd (bgcd a b) a))
  (mpbiri ((eq a (d0)) (dvd (bgcd a b) (d0)) (dvd (bgcd a b) a))
    (dvd02 ((bgcd a b)))
    (dvdeq2 ((bgcd a b) a (d0))))
  (mpi ((not (eq a (d0))) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))) (dvd (bgcd a b) a))
    (bgcdbezout (a b x y))
    (eexd (x (not (eq a (d0))) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd (bgcd a b) a))
      (eexda (y (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (dvd (bgcd a b) a))
        (casesda ((an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (eq b (d0)) (dvd (bgcd a b) a))
          (anwr ((an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (eq b (d0)) (dvd (bgcd a b) a))
            (mpbii ((eq b (d0)) (dvd (bgcd a b) (bgcd a b)) (dvd (bgcd a b) a))
              (dvdid ((bgcd a b)))
              (dvdeq2d ((eq b (d0)) (bgcd a b) (bgcd a b) a)
                (syl6eq ((eq b (d0)) (bgcd a b) (bgcd a (d0)) a)
                  (bgcd02 (a))
                  (bgcdeq2 (a b (d0)))))))
          (sylib ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (eq (mod a (bgcd a b)) (d0)) (dvd (bgcd a b) a))
            (modeq0 (a (bgcd a b)))
            (mpd ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (lt (mod a (bgcd a b)) (bgcd a b)) (eq (mod a (bgcd a b)) (d0)))
              (anwll ((not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq b (d0))) (lt (mod a (bgcd a b)) (bgcd a b)))
                (syl ((not (eq a (d0))) (ne (bgcd a b) (d0)) (lt (mod a (bgcd a b)) (bgcd a b)))
                  (modlt (a (bgcd a b)))
                  (sylib ((not (eq a (d0))) (lt (d0) (bgcd a b)) (ne (bgcd a b) (d0)))
                    (lt01 ((bgcd a b)))
                    (:conv (im (not (eq a (d0))) (lt (d0) (bgcd a b)))
                      (im
                        (:sym (:unfold ne (a (d0)) ()
                          (not (eq a (d0)))))
                        (lt (d0) (bgcd a b)))
                      (bgcdpos (a b))))))
              (syl5bi ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (lt (mod a (bgcd a b)) (bgcd a b)) (not (le (bgcd a b) (mod a (bgcd a b)))) (eq (mod a (bgcd a b)) (d0)))
                (ltnle ((mod a (bgcd a b)) (bgcd a b)))
                (con1d ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (eq (mod a (bgcd a b)) (d0)) (le (bgcd a b) (mod a (bgcd a b))))
                  (exp ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0))) (le (bgcd a b) (mod a (bgcd a b))))
                    (bgcdled ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) a b (mod a (bgcd a b)) (suc (mul (sub (mul (max x y) b) x) (div a (bgcd a b)))) (mul (sub (mul (max x y) a) y) (div a (bgcd a b))))
                      (sylibr ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (ne (mod a (bgcd a b)) (d0)) (lt (d0) (mod a (bgcd a b))))
                        (lt01 ((mod a (bgcd a b))))
                        (:conv (im (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (ne (mod a (bgcd a b)) (d0)))
                          (im
                            (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0))))
                            (:unfold ne ((mod a (bgcd a b)) (d0)) ()
                              (not (eq (mod a (bgcd a b)) (d0)))))
                          (anr ((an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))))))
                      (bgcddvd1lem ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) a b (bgcd a b) (div a (bgcd a b)) (mod a (bgcd a b)) (max x y) x y)
                        (:conv (im (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (ne a (d0)))
                          (im
                            (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0))))
                            (:unfold ne (a (d0)) ()
                              (not (eq a (d0)))))
                          (an3l ((not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq b (d0))) (not (eq (mod a (bgcd a b)) (d0))))))
                        (anllr ((not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq b (d0))) (not (eq (mod a (bgcd a b)) (d0)))))
                        (:conv (im (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (ne b (d0)))
                          (im
                            (an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0))))
                            (:unfold ne (b (d0)) ()
                              (not (eq b (d0)))))
                          (anlr ((an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0))) (not (eq (mod a (bgcd a b)) (d0))))))
                        (a1i ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (eq (add (mul (bgcd a b) (div a (bgcd a b))) (mod a (bgcd a b))) a))
                          (divmod (a (bgcd a b))))
                        (a1i ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (le x (max x y)))
                          (lemax1 (x y)))
                        (a1i ((an (an (an (not (eq a (d0))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq b (d0)))) (not (eq (mod a (bgcd a b)) (d0)))) (le y (max x y)))
                          (lemax2 (x y))))))))))))))))

(local theorem bgcddvd2 ((a nat ()) (b nat ())) ()
  (im (ne a (d0)) (dvd (bgcd a b) b))
((x nat) (y nat))
(casesda ((ne a (d0)) (eq b (d0)) (dvd (bgcd a b) b))
  (anwr ((ne a (d0)) (eq b (d0)) (dvd (bgcd a b) b))
    (mpbiri ((eq b (d0)) (dvd (bgcd a b) (d0)) (dvd (bgcd a b) b))
      (dvd02 ((bgcd a b)))
      (dvdeq2 ((bgcd a b) b (d0)))))
  (mpi ((an (ne a (d0)) (not (eq b (d0)))) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))) (dvd (bgcd a b) b))
    (bgcdbezout (a b x y))
    (eexd (x (an (ne a (d0)) (not (eq b (d0)))) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))) (dvd (bgcd a b) b))
      (eexda (y (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b))) (dvd (bgcd a b) b))
        (sylib ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (eq (mod b (bgcd a b)) (d0)) (dvd (bgcd a b) b))
          (modeq0 (b (bgcd a b)))
          (mpd ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (lt (mod b (bgcd a b)) (bgcd a b)) (eq (mod b (bgcd a b)) (d0)))
            (anwll ((ne a (d0)) (not (eq b (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (lt (mod b (bgcd a b)) (bgcd a b)))
              (syl ((ne a (d0)) (ne (bgcd a b) (d0)) (lt (mod b (bgcd a b)) (bgcd a b)))
                (modlt (b (bgcd a b)))
                (sylib ((ne a (d0)) (lt (d0) (bgcd a b)) (ne (bgcd a b) (d0)))
                  (lt01 ((bgcd a b)))
                  (bgcdpos (a b)))))
            (syl5bi ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (lt (mod b (bgcd a b)) (bgcd a b)) (not (le (bgcd a b) (mod b (bgcd a b)))) (eq (mod b (bgcd a b)) (d0)))
              (ltnle ((mod b (bgcd a b)) (bgcd a b)))
              (con1d ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (eq (mod b (bgcd a b)) (d0)) (le (bgcd a b) (mod b (bgcd a b))))
                (exp ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0))) (le (bgcd a b) (mod b (bgcd a b))))
                  (bgcdled ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) a b (mod b (bgcd a b)) (sub (mul (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))) b) (mul x (div b (bgcd a b)))) (sub (mul (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))) a) (suc (mul y (div b (bgcd a b))))))
                    (sylibr ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (ne (mod b (bgcd a b)) (d0)) (lt (d0) (mod b (bgcd a b))))
                      (lt01 ((mod b (bgcd a b))))
                      (:conv (im (an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (ne (mod b (bgcd a b)) (d0)))
                        (im
                          (an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0))))
                          (:unfold ne ((mod b (bgcd a b)) (d0)) ()
                            (not (eq (mod b (bgcd a b)) (d0)))))
                        (anr ((an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))))))
                    (bgcddvd2lem ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) a b (bgcd a b) (div b (bgcd a b)) (mod b (bgcd a b)) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))) x y)
                      (an3l ((ne a (d0)) (not (eq b (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq (mod b (bgcd a b)) (d0)))))
                      (anlr ((an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq (mod b (bgcd a b)) (d0)))))
                      (:conv (im (an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (ne b (d0)))
                        (im
                          (an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0))))
                          (:unfold ne (b (d0)) ()
                            (not (eq b (d0)))))
                        (anllr ((ne a (d0)) (not (eq b (d0))) (eq (mul x a) (add (mul y b) (bgcd a b))) (not (eq (mod b (bgcd a b)) (d0))))))
                      (a1i ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (eq (add (mul (bgcd a b) (div b (bgcd a b))) (mod b (bgcd a b))) b))
                        (divmod (b (bgcd a b))))
                      (a1i ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (le (mul x (div b (bgcd a b))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))))
                        (lemax1 ((mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))))
                      (a1i ((an (an (an (ne a (d0)) (not (eq b (d0)))) (eq (mul x a) (add (mul y b) (bgcd a b)))) (not (eq (mod b (bgcd a b)) (d0)))) (lt (mul y (div b (bgcd a b))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))))
                        (:conv (lt (mul y (div b (bgcd a b))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))))
                          (:unfold lt ((mul y (div b (bgcd a b))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))) ()
                            (le (suc (mul y (div b (bgcd a b)))) (max (mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b)))))))
                          (lemax2 ((mul x (div b (bgcd a b))) (suc (mul y (div b (bgcd a b))))))))))))))))))))

(local theorem dvdbgcdb ((a nat ()) (b nat ()) (d nat ())) ()
  (im (ne a (d0)) (iff (dvd d (bgcd a b)) (an (dvd d a) (dvd d b))))
()
(:let H1 (anr ((ne a (d0)) (dvd d (bgcd a b))))
(ibid ((ne a (d0)) (dvd d (bgcd a b)) (an (dvd d a) (dvd d b)))
  (exp ((ne a (d0)) (dvd d (bgcd a b)) (an (dvd d a) (dvd d b)))
    (iand ((an (ne a (d0)) (dvd d (bgcd a b))) (dvd d a) (dvd d b))
      (sylc ((an (ne a (d0)) (dvd d (bgcd a b))) (dvd d (bgcd a b)) (dvd (bgcd a b) a) (dvd d a))
        (dvdtr (d (bgcd a b) a))
        H1
        (a1i ((an (ne a (d0)) (dvd d (bgcd a b))) (dvd (bgcd a b) a))
          (bgcddvd1 (a b))))
      (sylc ((an (ne a (d0)) (dvd d (bgcd a b))) (dvd d (bgcd a b)) (dvd (bgcd a b) b) (dvd d b))
        (dvdtr (d (bgcd a b) b))
        H1
        (anwl ((ne a (d0)) (dvd d (bgcd a b)) (dvd (bgcd a b) b))
          (bgcddvd2 (a b))))))
  (a1i ((ne a (d0)) (im (an (dvd d a) (dvd d b)) (dvd d (bgcd a b))))
    (dvdbgcd (a b d))))))

(local theorem gcdbgcd ((a nat ()) (b nat ())) ()
  (im (ne a (d0)) (eq (gcd a b) (bgcd a b)))
((d nat))
(eqgcd ((ne a (d0)) a b (bgcd a b) d)
  (dvdbgcdb (a b d))))

(local theorem gcd01 ((b nat ())) ()
  (eq (gcd (d0) b) b)
((d nat))
(trud ((eq (gcd (d0) b) b))
  (eqgcd ((wtru) (d0) b b d)
    (a1i ((wtru) (iff (dvd d b) (an (dvd d (d0)) (dvd d b))))
      (ax_mp ((iff (an (dvd d (d0)) (dvd d b)) (dvd d b)) (iff (dvd d b) (an (dvd d (d0)) (dvd d b))))
        (bicom ((an (dvd d (d0)) (dvd d b)) (dvd d b)))
        (ax_mp ((dvd d (d0)) (iff (an (dvd d (d0)) (dvd d b)) (dvd d b)))
          (bian1 ((dvd d (d0)) (dvd d b)))
          (dvd02 (d))))))))

(local theorem dvdgcdlem ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()) (x nat))
  ((h (im G (iff (dvd x d) (an (dvd x a) (dvd x b))))))
  (im G (iff (dvd c (gcd a b)) (an (dvd c a) (dvd c b))))
()
(bitrd (G (dvd c (gcd a b)) (dvd c d) (an (dvd c a) (dvd c b)))
  (dvdeq2d (G c (gcd a b) d)
    (eqgcd (G a b d x)
      h))
  (syl (G (al x (iff (dvd x d) (an (dvd x a) (dvd x b)))) (iff (dvd c d) (an (dvd c a) (dvd c b))))
    (eale (x c (iff (dvd x d) (an (dvd x a) (dvd x b))) (iff (dvd c d) (an (dvd c a) (dvd c b))))
      (bieqd ((eq x c) (dvd x d) (dvd c d) (an (dvd x a) (dvd x b)) (an (dvd c a) (dvd c b)))
        (dvdeq1 (x c d))
        (aneqd ((eq x c) (dvd x a) (dvd c a) (dvd x b) (dvd c b))
          (dvdeq1 (x c a))
          (dvdeq1 (x c b)))))
    (iald (x G (iff (dvd x d) (an (dvd x a) (dvd x b))))
      h))))

(local theorem dvdgcd ((a nat ()) (b nat ()) (d nat ())) ()
  (iff (dvd d (gcd a b)) (an (dvd d a) (dvd d b)))
((x nat))
(cases ((eq a (d0)) (iff (dvd d (gcd a b)) (an (dvd d a) (dvd d b))))
  (dvdgcdlem ((eq a (d0)) a b d b x)
    (bicomd ((eq a (d0)) (an (dvd x a) (dvd x b)) (dvd x b))
      (syl ((eq a (d0)) (dvd x a) (iff (an (dvd x a) (dvd x b)) (dvd x b)))
        (bian1 ((dvd x a) (dvd x b)))
        (mpbiri ((eq a (d0)) (dvd x (d0)) (dvd x a))
          (dvd02 (x))
          (dvdeq2 (x a (d0)))))))
  (dvdgcdlem ((not (eq a (d0))) a b d (bgcd a b) x)
    (:conv (im (not (eq a (d0))) (iff (dvd x (bgcd a b)) (an (dvd x a) (dvd x b))))
      (im
        (:sym (:unfold ne (a (d0)) ()
          (not (eq a (d0)))))
        (iff (dvd x (bgcd a b)) (an (dvd x a) (dvd x b))))
      (dvdbgcdb (a b x))))))

(local theorem gcddvd1 ((a nat ()) (b nat ())) ()
  (dvd (gcd a b) a)
()
(ax_mp ((an (dvd (gcd a b) a) (dvd (gcd a b) b)) (dvd (gcd a b) a))
  (anl ((dvd (gcd a b) a) (dvd (gcd a b) b)))
  (mpbi ((dvd (gcd a b) (gcd a b)) (an (dvd (gcd a b) a) (dvd (gcd a b) b)))
    (dvdgcd (a b (gcd a b)))
    (dvdid ((gcd a b))))))

(local theorem gcddvd2 ((a nat ()) (b nat ())) ()
  (dvd (gcd a b) b)
()
(ax_mp ((an (dvd (gcd a b) a) (dvd (gcd a b) b)) (dvd (gcd a b) b))
  (anr ((dvd (gcd a b) a) (dvd (gcd a b) b)))
  (mpbi ((dvd (gcd a b) (gcd a b)) (an (dvd (gcd a b) a) (dvd (gcd a b) b)))
    (dvdgcd (a b (gcd a b)))
    (dvdid ((gcd a b))))))

(local theorem gcd02 ((a nat ())) ()
  (eq (gcd a (d0)) a)
()
(ax_mp ((eq (gcd (d0) a) a) (eq (gcd a (d0)) a))
  (ax_mp ((eq (gcd a (d0)) (gcd (d0) a)) (im (eq (gcd (d0) a) a) (eq (gcd a (d0)) a)))
    (eqtr ((gcd a (d0)) (gcd (d0) a) a))
    (gcdcom (a (d0))))
  (gcd01 (a))))

(local theorem bezout ((a nat ()) (b nat ()) (x nat) (y nat)) ()
  (im (ne a (d0)) (ex x (ex y (eq (mul x a) (add (mul y b) (gcd a b))))))
()
(mpbiri ((ne a (d0)) (ex x (ex y (eq (mul x a) (add (mul y b) (bgcd a b))))) (ex x (ex y (eq (mul x a) (add (mul y b) (gcd a b))))))
  (bgcdbezout (a b x y))
  (exeqd ((ne a (d0)) x (ex y (eq (mul x a) (add (mul y b) (gcd a b)))) (ex y (eq (mul x a) (add (mul y b) (bgcd a b)))))
    (exeqd ((ne a (d0)) y (eq (mul x a) (add (mul y b) (gcd a b))) (eq (mul x a) (add (mul y b) (bgcd a b))))
      (eqeq2d ((ne a (d0)) (mul x a) (add (mul y b) (gcd a b)) (add (mul y b) (bgcd a b)))
        (addeq2d ((ne a (d0)) (mul y b) (gcd a b) (bgcd a b))
          (gcdbgcd (a b))))))))

(local def coprime ((a nat ()) (b nat ())) (wff ())
()
(eq (gcd a b) (d1)))

(local theorem coprimeeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (iff (coprime a1 b1) (coprime a2 b2)))
()
(:conv (im _G (iff (coprime a1 b1) (coprime a2 b2)))
  (im
    _G
    (iff
      (:unfold coprime (a1 b1) ()
        (eq (gcd a1 b1) (d1)))
      (:unfold coprime (a2 b2) ()
        (eq (gcd a2 b2) (d1)))))
  (eqeqd (_G (gcd a1 b1) (gcd a2 b2) (d1) (d1))
    (gcdeqd (_G a1 a2 b1 b2)
      ha
      hb)
    (eqidd (_G (d1))))))

(local theorem coprimeeq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (iff (coprime a1 b1) (coprime a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (iff (coprime a1 b1) (coprime a2 b2)))
  (coprimeeqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem coprimeeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (iff (coprime a1 b) (coprime a2 b)))
()
(coprimeeqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem coprimeeq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (iff (coprime a1 b) (coprime a2 b)))
()
(coprimeeq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem coprimeeq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (iff (coprime a b1) (coprime a b2)))
()
(coprimeeqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem coprimeeq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (iff (coprime a b1) (coprime a b2)))
()
(coprimeeq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem copcom ((a nat ()) (b nat ())) ()
  (iff (coprime a b) (coprime b a))
()
(:conv (iff (coprime a b) (coprime b a))
  (iff
    (:unfold coprime (a b) ()
      (eq (gcd a b) (d1)))
    (:unfold coprime (b a) ()
      (eq (gcd b a) (d1))))
  (ax_mp ((eq (gcd a b) (gcd b a)) (iff (eq (gcd a b) (d1)) (eq (gcd b a) (d1))))
    (eqeq1 ((gcd a b) (gcd b a) (d1)))
    (gcdcom (a b)))))

(local theorem dvdcop ((G wff ()) (a nat ()) (b nat ()) (d nat ()))
  ((h1 (im G (coprime a b)))
   (h2 (im G (dvd d a)))
   (h3 (im G (dvd d b))))
  (im G (eq d (d1)))
()
(sylib (G (dvd d (d1)) (eq d (d1)))
  (dvd12 (d))
  (mpbid (G (dvd d (gcd a b)) (dvd d (d1)))
    (dvdeq2d (G d (gcd a b) (d1))
      (:conv (im G (eq (gcd a b) (d1)))
        (im
          G
          (:sym (:unfold coprime (a b) ()
            (eq (gcd a b) (d1)))))
        h1))
    (sylibr (G (an (dvd d a) (dvd d b)) (dvd d (gcd a b)))
      (dvdgcd (a b d))
      (iand (G (dvd d a) (dvd d b))
        h2
        h3)))))

(local theorem dfcop2 ((a nat ()) (b nat ()) (x nat)) ()
  (iff (coprime a b) (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))))
((y nat))
(ibii ((coprime a b) (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))))
  (iald (x (coprime a b) (im (dvd x a) (im (dvd x b) (eq x (d1)))))
    (exp ((coprime a b) (dvd x a) (im (dvd x b) (eq x (d1))))
      (exp ((an (coprime a b) (dvd x a)) (dvd x b) (eq x (d1)))
        (dvdcop ((an (an (coprime a b) (dvd x a)) (dvd x b)) a b x)
          (anll ((coprime a b) (dvd x a) (dvd x b)))
          (anlr ((coprime a b) (dvd x a) (dvd x b)))
          (anr ((an (coprime a b) (dvd x a)) (dvd x b)))))))
  (:conv (im (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (coprime a b))
    (im
      (al x (im (dvd x a) (im (dvd x b) (eq x (d1)))))
      (:unfold coprime (a b) ()
        (eq (gcd a b) (d1))))
    (eqgcd ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) a b (d1) y)
      (ibid ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (dvd y (d1)) (an (dvd y a) (dvd y b)))
        (a1i ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (im (dvd y (d1)) (an (dvd y a) (dvd y b))))
          (iand ((dvd y (d1)) (dvd y a) (dvd y b))
            (mpi ((dvd y (d1)) (dvd (d1) a) (dvd y a))
              (dvd11 (a))
              (dvdtr (y (d1) a)))
            (mpi ((dvd y (d1)) (dvd (d1) b) (dvd y b))
              (dvd11 (b))
              (dvdtr (y (d1) b)))))
        (exp ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b)) (dvd y (d1)))
          (sylibr ((an (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b))) (eq y (d1)) (dvd y (d1)))
            (dvd12 (y))
            (mpd ((an (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b))) (dvd y b) (eq y (d1)))
              (anrr ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (dvd y a) (dvd y b)))
              (mpd ((an (al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b))) (dvd y a) (im (dvd y b) (eq y (d1))))
                (anrl ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (dvd y a) (dvd y b)))
                (anwl ((al x (im (dvd x a) (im (dvd x b) (eq x (d1))))) (an (dvd y a) (dvd y b)) (im (dvd y a) (im (dvd y b) (eq y (d1)))))
                  (eale (x y (im (dvd x a) (im (dvd x b) (eq x (d1)))) (im (dvd y a) (im (dvd y b) (eq y (d1)))))
                    (imeqd ((eq x y) (dvd x a) (dvd y a) (im (dvd x b) (eq x (d1))) (im (dvd y b) (eq y (d1))))
                      (dvdeq1 (x y a))
                      (imeqd ((eq x y) (dvd x b) (dvd y b) (eq x (d1)) (eq y (d1)))
                        (dvdeq1 (x y b))
                        (eqeq1 (x y (d1))))))))))))))))

(local theorem copbezout ((G wff ()) (a nat ()) (b nat ()) (x nat) (y nat))
  ((h1 (im G (coprime a b)))
   (h2 (im G (ne a (d0)))))
  (im G (ex x (ex y (eq (mul x a) (add (mul y b) (d1))))))
()
(mpbid (G (ex x (ex y (eq (mul x a) (add (mul y b) (gcd a b))))) (ex x (ex y (eq (mul x a) (add (mul y b) (d1))))))
  (exeqd (G x (ex y (eq (mul x a) (add (mul y b) (gcd a b)))) (ex y (eq (mul x a) (add (mul y b) (d1)))))
    (exeqd (G y (eq (mul x a) (add (mul y b) (gcd a b))) (eq (mul x a) (add (mul y b) (d1))))
      (eqeq2d (G (mul x a) (add (mul y b) (gcd a b)) (add (mul y b) (d1)))
        (addeq2d (G (mul y b) (gcd a b) (d1))
          (:conv (im G (eq (gcd a b) (d1)))
            (im
              G
              (:sym (:unfold coprime (a b) ()
                (eq (gcd a b) (d1)))))
            h1)))))
  (syl (G (ne a (d0)) (ex x (ex y (eq (mul x a) (add (mul y b) (gcd a b))))))
    (bezout (a b x y))
    h2)))

(local theorem copdvdmul2 ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (coprime a b)))
   (h2 (im G (dvd a (mul b c)))))
  (im G (dvd a c))
((x nat) (y nat))
(:let H1 (mul11 (c))
(casesda (G (eq a (d0)) (dvd a c))
  (mpbid ((an G (eq a (d0))) (dvd a (mul b c)) (dvd a c))
    (dvdeq2d ((an G (eq a (d0))) a (mul b c) c)
      (syl6eq ((an G (eq a (d0))) (mul b c) (mul (d1) c) c)
        H1
        (muleq1d ((an G (eq a (d0))) b (d1) c)
          (eqtr3d ((an G (eq a (d0))) b (gcd a b) (d1))
            (anwr (G (eq a (d0)) (eq (gcd a b) b))
              (syl6eq ((eq a (d0)) (gcd a b) (gcd (d0) b) b)
                (gcd01 (b))
                (gcdeq1 (a (d0) b))))
            (anwl (G (eq a (d0)) (eq (gcd a b) (d1)))
              (:conv (im G (eq (gcd a b) (d1)))
                (im
                  G
                  (:sym (:unfold coprime (a b) ()
                    (eq (gcd a b) (d1)))))
                h1))))))
    (anwl (G (eq a (d0)) (dvd a (mul b c)))
      h2))
  (mpd ((an G (not (eq a (d0)))) (ex x (ex y (eq (mul x a) (add (mul y b) (d1))))) (dvd a c))
    (copbezout ((an G (not (eq a (d0)))) a b x y)
      (anwl (G (not (eq a (d0))) (coprime a b))
        h1)
      (:conv (im (an G (not (eq a (d0)))) (ne a (d0)))
        (im
          (an G (not (eq a (d0))))
          (:unfold ne (a (d0)) ()
            (not (eq a (d0)))))
        (anr (G (not (eq a (d0)))))))
    (eexd (x (an G (not (eq a (d0)))) (ex y (eq (mul x a) (add (mul y b) (d1)))) (dvd a c))
      (eexda (y (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1))) (dvd a c))
        (mpbird ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (dvd a (add (mul (mul b c) y) c)) (dvd a c))
          (syl ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (dvd a (mul (mul b c) y)) (iff (dvd a c) (dvd a (add (mul (mul b c) y) c))))
            (dvdadd1 ((mul (mul b c) y) c a))
            (syl ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (dvd a (mul b c)) (dvd a (mul (mul b c) y)))
              (dvdmul11 (a (mul b c) y))
              (anwll (G (not (eq a (d0))) (eq (mul x a) (add (mul y b) (d1))) (dvd a (mul b c)))
                h2)))
          (mpbii ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (dvd a (mul (mul x c) a)) (dvd a (add (mul (mul b c) y) c)))
            (dvdmul1 (a (mul x c)))
            (dvdeq2d ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) a (mul (mul x c) a) (add (mul (mul b c) y) c))
              (syl5eq ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul (mul x c) a) (mul (mul x a) c) (add (mul (mul b c) y) c))
                (mul32 (x c a))
                (syl6eq ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul (mul x a) c) (add (mul (mul b y) c) (mul (d1) c)) (add (mul (mul b c) y) c))
                  (ax_mp ((eq (mul (d1) c) c) (eq (add (mul (mul b y) c) (mul (d1) c)) (add (mul (mul b c) y) c)))
                    (ax_mp ((eq (mul (mul b y) c) (mul (mul b c) y)) (im (eq (mul (d1) c) c) (eq (add (mul (mul b y) c) (mul (d1) c)) (add (mul (mul b c) y) c))))
                      (addeq ((mul (mul b y) c) (mul (mul b c) y) (mul (d1) c) c))
                      (mul32 (b y c)))
                    H1)
                  (syl6eq ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul (mul x a) c) (mul (add (mul b y) (d1)) c) (add (mul (mul b y) c) (mul (d1) c)))
                    (addmul ((mul b y) (d1) c))
                    (muleq1d ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul x a) (add (mul b y) (d1)) c)
                      (syl6eq ((an (an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))) (mul x a) (add (mul y b) (d1)) (add (mul b y) (d1)))
                        (ax_mp ((eq (mul y b) (mul b y)) (eq (add (mul y b) (d1)) (add (mul b y) (d1))))
                          (addeq1 ((mul y b) (mul b y) (d1)))
                          (mulcom (y b)))
                        (anr ((an G (not (eq a (d0)))) (eq (mul x a) (add (mul y b) (d1)))))))))))))))))))

(local theorem copdvdmul1 ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h1 (im G (coprime a c)))
   (h2 (im G (dvd a (mul b c)))))
  (im G (dvd a b))
()
(copdvdmul2 (G a c b)
  h1
  (sylib (G (dvd a (mul b c)) (dvd a (mul c b)))
    (ax_mp ((eq (mul b c) (mul c b)) (iff (dvd a (mul b c)) (dvd a (mul c b))))
      (dvdeq2 (a (mul b c) (mul c b)))
      (mulcom (b c)))
    h2)))

(local def invm ((a nat ()) (n nat ())) (nat ())
((b nat))
(least (ab b (eqm n (mul a b) (d1)))))

(local theorem invmeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (invm a1 n1) (invm a2 n2)))
((b nat))
(:conv (im _G (eq (invm a1 n1) (invm a2 n2)))
  (im
    _G
    (eq
      (:unfold invm (a1 n1) (b)
        (least (ab b (eqm n1 (mul a1 b) (d1)))))
      (:unfold invm (a2 n2) (b)
        (least (ab b (eqm n2 (mul a2 b) (d1)))))))
  (leasteqd (_G (ab b (eqm n1 (mul a1 b) (d1))) (ab b (eqm n2 (mul a2 b) (d1))))
    (abeqd (_G b (eqm n1 (mul a1 b) (d1)) (eqm n2 (mul a2 b) (d1)))
      (eqmeqd (_G n1 n2 (mul a1 b) (mul a2 b) (d1) (d1))
        hn
        (muleqd (_G a1 a2 b b)
          ha
          (eqidd (_G b)))
        (eqidd (_G (d1))))))))

(local theorem invmeq ((a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq a1 a2) (im (eq n1 n2) (eq (invm a1 n1) (invm a2 n2))))
()
(exp ((eq a1 a2) (eq n1 n2) (eq (invm a1 n1) (invm a2 n2)))
  (invmeqd ((an (eq a1 a2) (eq n1 n2)) a1 a2 n1 n2)
    (anl ((eq a1 a2) (eq n1 n2)))
    (anr ((eq a1 a2) (eq n1 n2))))))

(local theorem invmeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (n nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (invm a1 n) (invm a2 n)))
()
(invmeqd (G a1 a2 n n)
  h
  (eqidd (G n))))

(local theorem invmeq1 ((a1 nat ()) (a2 nat ()) (n nat ())) ()
  (im (eq a1 a2) (eq (invm a1 n) (invm a2 n)))
()
(invmeq1d ((eq a1 a2) a1 a2 n)
  (id ((eq a1 a2)))))

(local theorem invmeq2d ((G wff ()) (a nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (invm a n1) (invm a n2)))
()
(invmeqd (G a a n1 n2)
  (eqidd (G a))
  h))

(local theorem invmeq2 ((a nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (invm a n1) (invm a n2)))
()
(invmeq2d ((eq n1 n2) a n1 n2)
  (id ((eq n1 n2)))))

(local theorem mulinvmlem ((G wff ()) (a nat ()) (b nat ()) (n nat ()))
  ((h (im G (eqm n (mul a b) (d1)))))
  (im G (eqm n (mul a (invm a n)) (d1)))
((x nat))
(sylib (G (el (invm a n) (ab x (eqm n (mul a x) (d1)))) (eqm n (mul a (invm a n)) (d1)))
  (elabe (x (invm a n) (eqm n (mul a x) (d1)) (eqm n (mul a (invm a n)) (d1)))
    (eqmeq2d ((eq x (invm a n)) n (mul a x) (mul a (invm a n)) (d1))
      (muleq2 (a x (invm a n)))))
  (syl (G (el b (ab x (eqm n (mul a x) (d1)))) (el (invm a n) (ab x (eqm n (mul a x) (d1)))))
    (:conv (im (el b (ab x (eqm n (mul a x) (d1)))) (el (invm a n) (ab x (eqm n (mul a x) (d1)))))
      (im
        (el b (ab x (eqm n (mul a x) (d1))))
        (el
          (:unfold invm (a n) (x)
            (least (ab x (eqm n (mul a x) (d1)))))
          (ab x (eqm n (mul a x) (d1)))))
      (leastel ((ab x (eqm n (mul a x) (d1))) b)))
    (sylibr (G (eqm n (mul a b) (d1)) (el b (ab x (eqm n (mul a x) (d1)))))
      (elabe (x b (eqm n (mul a x) (d1)) (eqm n (mul a b) (d1)))
        (eqmeq2d ((eq x b) n (mul a x) (mul a b) (d1))
          (muleq2 (a x b))))
      h))))

(local theorem mulinvm ((G wff ()) (a nat ()) (n nat ()))
  ((h (im G (coprime a n))))
  (im G (eqm n (mul a (invm a n)) (d1)))
((x nat) (y nat))
(:let H1 (:conv (im G (eq (gcd a n) (d1)))
  (im
    G
    (:sym (:unfold coprime (a n) ()
      (eq (gcd a n) (d1)))))
  h)
(casesda (G (eq a (d0)) (eqm n (mul a (invm a n)) (d1)))
  (mpbiri ((an G (eq a (d0))) (eqm (d1) (mul a (invm a n)) (d1)) (eqm n (mul a (invm a n)) (d1)))
    (eqm11 ((mul a (invm a n)) (d1)))
    (eqmeq1d ((an G (eq a (d0))) n (d1) (mul a (invm a n)) (d1))
      (eqtr3d ((an G (eq a (d0))) n (gcd a n) (d1))
        (syl6eq ((an G (eq a (d0))) (gcd a n) (gcd (d0) n) n)
          (gcd01 (n))
          (anwr (G (eq a (d0)) (eq (gcd a n) (gcd (d0) n)))
            (gcdeq1 (a (d0) n))))
        (anwl (G (eq a (d0)) (eq (gcd a n) (d1)))
          H1))))
  (casesda ((an G (not (eq a (d0)))) (eq n (d0)) (eqm n (mul a (invm a n)) (d1)))
    (mulinvmlem ((an (an G (not (eq a (d0)))) (eq n (d0))) a (d1) n)
      (syl ((an (an G (not (eq a (d0)))) (eq n (d0))) (eq (mul a (d1)) (d1)) (eqm n (mul a (d1)) (d1)))
        (eqeqm ((mul a (d1)) (d1) n))
        (syl5eq ((an (an G (not (eq a (d0)))) (eq n (d0))) (mul a (d1)) a (d1))
          (mul12 (a))
          (eqtr3d ((an (an G (not (eq a (d0)))) (eq n (d0))) a (gcd a n) (d1))
            (syl6eq ((an (an G (not (eq a (d0)))) (eq n (d0))) (gcd a n) (gcd a (d0)) a)
              (gcd02 (a))
              (anwr ((an G (not (eq a (d0)))) (eq n (d0)) (eq (gcd a n) (gcd a (d0))))
                (gcdeq2 (a n (d0)))))
            (anwll (G (not (eq a (d0))) (eq n (d0)) (eq (gcd a n) (d1)))
              H1)))))
    (mpd ((an (an G (not (eq a (d0)))) (not (eq n (d0)))) (ex x (ex y (eq (mul x a) (add (mul y n) (d1))))) (eqm n (mul a (invm a n)) (d1)))
      (copbezout ((an (an G (not (eq a (d0)))) (not (eq n (d0)))) a n x y)
        (anwll (G (not (eq a (d0))) (not (eq n (d0))) (coprime a n))
          h)
        (:conv (im (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (ne a (d0)))
          (im
            (an (an G (not (eq a (d0)))) (not (eq n (d0))))
            (:unfold ne (a (d0)) ()
              (not (eq a (d0)))))
          (anlr (G (not (eq a (d0))) (not (eq n (d0)))))))
      (eexd (x (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (ex y (eq (mul x a) (add (mul y n) (d1)))) (eqm n (mul a (invm a n)) (d1)))
        (eexda (y (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1))) (eqm n (mul a (invm a n)) (d1)))
          (mulinvmlem ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) a x n)
            (mpbid ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (eqm n (add (mul y n) (d1)) (add (d0) (d1))) (eqm n (mul a x) (d1)))
              (eqmeq23d ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (add (mul y n) (d1)) (mul a x) (add (d0) (d1)) (d1) n)
                (eqtr3d ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (add (mul y n) (d1)) (mul x a) (mul a x))
                  (anr ((an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))))
                  (a1i ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (eq (mul x a) (mul a x)))
                    (mulcom (x a))))
                (a1i ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (eq (add (d0) (d1)) (d1)))
                  (add01 ((d1)))))
              (eqmadd1d ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (mul y n) (d0) (d1) n)
                (a1i ((an (an (an G (not (eq a (d0)))) (not (eq n (d0)))) (eq (mul x a) (add (mul y n) (d1)))) (eqm n (mul y n) (d0)))
                  (mpbir ((dvd n (mul y n)) (eqm n (mul y n) (d0)))
                    (eqm03 ((mul y n) n))
                    (dvdmul1 (n y))))))))))))))

(local def pset ((a nat ())) (set ())
((n nat) (x nat))
(ab n (an (an (an (lt (d0) (fst a)) (lt (d0) (snd a))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a))))) (dvd (suc (mul (fst a) (suc n))) (snd a)))))

(local theorem pseteqd ((_G wff ()) (a1 nat ()) (a2 nat ()))
  ((ha (im _G (eq a1 a2))))
  (im _G (eqs (pset a1) (pset a2)))
((n nat) (x nat))
(:let H1 (eqidd (_G (d0)))
(:let H2 (fsteqd (_G a1 a2)
  ha)
(:let H3 (sndeqd (_G a1 a2)
  ha)
(:conv (im _G (eqs (pset a1) (pset a2)))
  (im
    _G
    (eqs
      (:unfold pset (a1) (n x)
        (ab n (an (an (an (lt (d0) (fst a1)) (lt (d0) (snd a1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a1))))) (dvd (suc (mul (fst a1) (suc n))) (snd a1)))))
      (:unfold pset (a2) (n x)
        (ab n (an (an (an (lt (d0) (fst a2)) (lt (d0) (snd a2))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a2))))) (dvd (suc (mul (fst a2) (suc n))) (snd a2)))))))
  (abeqd (_G n (an (an (an (lt (d0) (fst a1)) (lt (d0) (snd a1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a1))))) (dvd (suc (mul (fst a1) (suc n))) (snd a1))) (an (an (an (lt (d0) (fst a2)) (lt (d0) (snd a2))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a2))))) (dvd (suc (mul (fst a2) (suc n))) (snd a2))))
    (aneqd (_G (an (an (lt (d0) (fst a1)) (lt (d0) (snd a1))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a1))))) (an (an (lt (d0) (fst a2)) (lt (d0) (snd a2))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a2))))) (dvd (suc (mul (fst a1) (suc n))) (snd a1)) (dvd (suc (mul (fst a2) (suc n))) (snd a2)))
      (aneqd (_G (an (lt (d0) (fst a1)) (lt (d0) (snd a1))) (an (lt (d0) (fst a2)) (lt (d0) (snd a2))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a1)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x (fst a2)))))
        (aneqd (_G (lt (d0) (fst a1)) (lt (d0) (fst a2)) (lt (d0) (snd a1)) (lt (d0) (snd a2)))
          (lteqd (_G (d0) (d0) (fst a1) (fst a2))
            H1
            H2)
          (lteqd (_G (d0) (d0) (snd a1) (snd a2))
            H1
            H3))
        (aleqd (_G x (im (an (lt (d0) x) (le x n)) (dvd x (fst a1))) (im (an (lt (d0) x) (le x n)) (dvd x (fst a2))))
          (imeqd (_G (an (lt (d0) x) (le x n)) (an (lt (d0) x) (le x n)) (dvd x (fst a1)) (dvd x (fst a2)))
            (biidd (_G (an (lt (d0) x) (le x n))))
            (dvdeqd (_G x x (fst a1) (fst a2))
              (eqidd (_G x))
              H2))))
      (dvdeqd (_G (suc (mul (fst a1) (suc n))) (suc (mul (fst a2) (suc n))) (snd a1) (snd a2))
        (suceqd (_G (mul (fst a1) (suc n)) (mul (fst a2) (suc n)))
          (muleqd (_G (fst a1) (fst a2) (suc n) (suc n))
            H2
            (eqidd (_G (suc n)))))
        H3))))))))

(local theorem pseteq ((a1 nat ()) (a2 nat ())) ()
  (im (eq a1 a2) (eqs (pset a1) (pset a2)))
()
(pseteqd ((eq a1 a2) a1 a2)
  (id ((eq a1 a2)))))

(local theorem elpset ((m nat ()) (n nat ()) (v nat ()) (x nat)) ()
  (iff (el n (pset (pr m v))) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) v)))
((x1 nat) (y nat))
(:let H1 (fstpr (m v))
(:let H2 (a1i ((eq y n) (eq (fst (pr m v)) m))
  H1)
(:let H3 (sndpr (m v))
(:let H4 (a1i ((eq y n) (eq (snd (pr m v)) v))
  H3)
(:let H5 (anr ((eq y n) (eq x1 x)))
(:conv (iff (el n (pset (pr m v))) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) v)))
  (iff
    (el
      n
      (:unfold pset ((pr m v)) (y x1)
        (ab y (an (an (an (lt (d0) (fst (pr m v))) (lt (d0) (snd (pr m v)))) (al x1 (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v)))))) (dvd (suc (mul (fst (pr m v)) (suc y))) (snd (pr m v)))))))
    (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) v)))
  (elabe (y n (an (an (an (lt (d0) (fst (pr m v))) (lt (d0) (snd (pr m v)))) (al x1 (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v)))))) (dvd (suc (mul (fst (pr m v)) (suc y))) (snd (pr m v)))) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) v)))
    (aneqd ((eq y n) (an (an (lt (d0) (fst (pr m v))) (lt (d0) (snd (pr m v)))) (al x1 (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v)))))) (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul (fst (pr m v)) (suc y))) (snd (pr m v))) (dvd (suc (mul m (suc n))) v))
      (aneqd ((eq y n) (an (lt (d0) (fst (pr m v))) (lt (d0) (snd (pr m v)))) (an (lt (d0) m) (lt (d0) v)) (al x1 (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
        (aneqd ((eq y n) (lt (d0) (fst (pr m v))) (lt (d0) m) (lt (d0) (snd (pr m v))) (lt (d0) v))
          (lteq2d ((eq y n) (d0) (fst (pr m v)) m)
            H2)
          (lteq2d ((eq y n) (d0) (snd (pr m v)) v)
            H4))
        (cbvald (x1 x (eq y n) (im (an (lt (d0) x1) (le x1 y)) (dvd x1 (fst (pr m v)))) (im (an (lt (d0) x) (le x n)) (dvd x m)))
          (imeqd ((an (eq y n) (eq x1 x)) (an (lt (d0) x1) (le x1 y)) (an (lt (d0) x) (le x n)) (dvd x1 (fst (pr m v))) (dvd x m))
            (aneqd ((an (eq y n) (eq x1 x)) (lt (d0) x1) (lt (d0) x) (le x1 y) (le x n))
              (anwr ((eq y n) (eq x1 x) (iff (lt (d0) x1) (lt (d0) x)))
                (lteq2 ((d0) x1 x)))
              (leeqd ((an (eq y n) (eq x1 x)) x1 x y n)
                H5
                (anl ((eq y n) (eq x1 x)))))
            (dvdeqd ((an (eq y n) (eq x1 x)) x1 x (fst (pr m v)) m)
              H5
              (a1i ((an (eq y n) (eq x1 x)) (eq (fst (pr m v)) m))
                H1)))))
      (dvdeqd ((eq y n) (suc (mul (fst (pr m v)) (suc y))) (suc (mul m (suc n))) (snd (pr m v)) v)
        (suceqd ((eq y n) (mul (fst (pr m v)) (suc y)) (mul m (suc n)))
          (muleqd ((eq y n) (fst (pr m v)) m (suc y) (suc n))
            H2
            (suceq (y n))))
        H4))))))))))

(local theorem elpset1 ((m nat ()) (n nat ())) ()
  (not (el n (pset (pr m (d1)))))
((x nat))
(:conv (not (el n (pset (pr m (d1)))))
  (not
    (el
      n
      (pset
        (pr
          m
          (:unfold d1 () ()
            (suc (d0)))))))
  (ax_mp ((im (el n (pset (pr m (suc (d0))))) (not (el n (pset (pr m (suc (d0))))))) (not (el n (pset (pr m (suc (d0)))))))
    (inot ((el n (pset (pr m (suc (d0)))))))
    (sylbi ((el n (pset (pr m (suc (d0))))) (an (an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0)))) (not (el n (pset (pr m (suc (d0)))))))
      (elpset (m n (suc (d0)) x))
      (sylc ((an (an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0)))) (not (lt (mul m (suc n)) (suc (d0)))) (lt (mul m (suc n)) (suc (d0))) (not (el n (pset (pr m (suc (d0)))))))
        (absurd ((lt (mul m (suc n)) (suc (d0))) (not (el n (pset (pr m (suc (d0))))))))
        (sylib ((an (an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0)))) (le (suc (d0)) (mul m (suc n))) (not (lt (mul m (suc n)) (suc (d0)))))
          (lenlt ((suc (d0)) (mul m (suc n))))
          (syl ((an (an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0)))) (lt (d0) m) (le (suc (d0)) (mul m (suc n))))
            (sylibr ((lt (d0) m) (an (lt (d0) m) (lt (d0) (suc n))) (le (suc (d0)) (mul m (suc n))))
              (:conv (iff (le (suc (d0)) (mul m (suc n))) (an (lt (d0) m) (lt (d0) (suc n))))
                (iff
                  (:sym (:unfold lt ((d0) (mul m (suc n))) ()
                    (le (suc (d0)) (mul m (suc n)))))
                  (an (lt (d0) m) (lt (d0) (suc n))))
                (mulpos (m (suc n))))
              (iand ((lt (d0) m) (lt (d0) m) (lt (d0) (suc n)))
                (id ((lt (d0) m)))
                (a1i ((lt (d0) m) (lt (d0) (suc n)))
                  (lt01S (n)))))
            (an3l ((lt (d0) m) (lt (d0) (suc (d0))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))) (dvd (suc (mul m (suc n))) (suc (d0)))))))
        (:conv (im (an (an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0)))) (lt (mul m (suc n)) (suc (d0))))
          (im
            (an (an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0))))
            (:unfold lt ((mul m (suc n)) (suc (d0))) ()
              (le (suc (mul m (suc n))) (suc (d0)))))
          (dvdle ((an (an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0)))) (suc (mul m (suc n))) (suc (d0)))
            (a1i ((an (an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0)))) (ne (suc (d0)) (d0)))
              (:conv (ne (suc (d0)) (d0))
                (ne
                  (:sym (:unfold d1 () ()
                    (suc (d0))))
                  (d0))
                (d1ne0 ())))
            (anr ((an (an (lt (d0) m) (lt (d0) (suc (d0)))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (suc (d0))))))))))))

(local theorem psetSlem1 ((G wff ()) (i nat ()) (j nat ()) (m nat ()) (n nat ()) (x nat))
  ((h1 (im G (al x (im (an (lt (d0) x) (lt x n)) (dvd x m)))))
   (h2 (im G (lt i j)))
   (h3 (im G (lt j n))))
  (im G (coprime (suc (mul m (suc i))) (suc (mul m (suc j)))))
((u nat))
(:let H1 (anwll (G (dvd u (suc (mul m (suc i)))) (dvd u (suc (mul m (suc j)))) (lt i j))
  h2)
(:let H2 (anlr (G (dvd u (suc (mul m (suc i)))) (dvd u (suc (mul m (suc j))))))
(sylibr (G (al u (im (dvd u (suc (mul m (suc i)))) (im (dvd u (suc (mul m (suc j)))) (eq u (d1))))) (coprime (suc (mul m (suc i))) (suc (mul m (suc j)))))
  (dfcop2 ((suc (mul m (suc i))) (suc (mul m (suc j))) u))
  (iald (u G (im (dvd u (suc (mul m (suc i)))) (im (dvd u (suc (mul m (suc j)))) (eq u (d1)))))
    (exp (G (dvd u (suc (mul m (suc i)))) (im (dvd u (suc (mul m (suc j)))) (eq u (d1))))
      (exp ((an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j)))) (eq u (d1)))
        (sylib ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (d1)) (eq u (d1)))
          (dvd12 (u))
          (mpbird ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (add (mul m (suc i)) (d1))) (dvd u (d1)))
            (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (mul m (suc i))) (iff (dvd u (d1)) (dvd u (add (mul m (suc i)) (d1)))))
              (dvdadd1 ((mul m (suc i)) (d1) u))
              (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u m) (dvd u (mul m (suc i))))
                (dvdmul11 (u m (suc i)))
                (sylc ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (sub j i)) (dvd (sub j i) m) (dvd u m))
                  (dvdtr (u (sub j i) m))
                  (mpbird ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (add (mul (suc (mul m (suc j))) (suc i)) (sub j i))) (dvd u (sub j i)))
                    (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (mul (suc (mul m (suc j))) (suc i))) (iff (dvd u (sub j i)) (dvd u (add (mul (suc (mul m (suc j))) (suc i)) (sub j i)))))
                      (dvdadd1 ((mul (suc (mul m (suc j))) (suc i)) (sub j i) u))
                      (anwr ((an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j)))) (dvd u (mul (suc (mul m (suc j))) (suc i))))
                        (dvdmul11 (u (suc (mul m (suc j))) (suc i)))))
                    (mpbird ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (mul (suc (mul m (suc i))) (suc j))) (dvd u (add (mul (suc (mul m (suc j))) (suc i)) (sub j i))))
                      (dvdeq2d ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) u (add (mul (suc (mul m (suc j))) (suc i)) (sub j i)) (mul (suc (mul m (suc i))) (suc j)))
                        (syl5eq ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (mul (suc (mul m (suc j))) (suc i)) (sub j i)) (add (add (mul (mul m (suc j)) (suc i)) (suc i)) (sub j i)) (mul (suc (mul m (suc i))) (suc j)))
                          (ax_mp ((eq (mul (suc (mul m (suc j))) (suc i)) (add (mul (mul m (suc j)) (suc i)) (suc i))) (eq (add (mul (suc (mul m (suc j))) (suc i)) (sub j i)) (add (add (mul (mul m (suc j)) (suc i)) (suc i)) (sub j i))))
                            (addeq1 ((mul (suc (mul m (suc j))) (suc i)) (add (mul (mul m (suc j)) (suc i)) (suc i)) (sub j i)))
                            (mulS1 ((mul m (suc j)) (suc i))))
                          (syl5eq ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (add (mul (mul m (suc j)) (suc i)) (suc i)) (sub j i)) (add (mul (mul m (suc j)) (suc i)) (add (suc i) (sub j i))) (mul (suc (mul m (suc i))) (suc j)))
                            (addass ((mul (mul m (suc j)) (suc i)) (suc i) (sub j i)))
                            (syl6eqr ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (mul (mul m (suc j)) (suc i)) (add (suc i) (sub j i))) (add (mul (mul m (suc i)) (suc j)) (suc j)) (mul (suc (mul m (suc i))) (suc j)))
                              (mulS1 ((mul m (suc i)) (suc j)))
                              (syl6eq ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (mul (mul m (suc j)) (suc i)) (add (suc i) (sub j i))) (add (mul (mul m (suc j)) (suc i)) (suc j)) (add (mul (mul m (suc i)) (suc j)) (suc j)))
                                (ax_mp ((eq (mul (mul m (suc j)) (suc i)) (mul (mul m (suc i)) (suc j))) (eq (add (mul (mul m (suc j)) (suc i)) (suc j)) (add (mul (mul m (suc i)) (suc j)) (suc j))))
                                  (addeq1 ((mul (mul m (suc j)) (suc i)) (mul (mul m (suc i)) (suc j)) (suc j)))
                                  (mul32 (m (suc j) (suc i))))
                                (addeq2d ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (mul (mul m (suc j)) (suc i)) (add (suc i) (sub j i)) (suc j))
                                  (syl5eq ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add (suc i) (sub j i)) (suc (add i (sub j i))) (suc j))
                                    (addS1 (i (sub j i)))
                                    (suceqd ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (add i (sub j i)) j)
                                      (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (le i j) (eq (add i (sub j i)) j))
                                        (pncan3 (i j))
                                        (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (lt i j) (le i j))
                                          (ltle (i j))
                                          H1))))))))))
                      (syl ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (suc (mul m (suc i)))) (dvd u (mul (suc (mul m (suc i))) (suc j))))
                        (dvdmul11 (u (suc (mul m (suc i))) (suc j)))
                        H2)))
                  (sylc ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (al x (im (an (lt (d0) x) (lt x n)) (dvd x m))) (an (lt (d0) (sub j i)) (lt (sub j i) n)) (dvd (sub j i) m))
                    (eale (x (sub j i) (im (an (lt (d0) x) (lt x n)) (dvd x m)) (im (an (lt (d0) (sub j i)) (lt (sub j i) n)) (dvd (sub j i) m)))
                      (imeqd ((eq x (sub j i)) (an (lt (d0) x) (lt x n)) (an (lt (d0) (sub j i)) (lt (sub j i) n)) (dvd x m) (dvd (sub j i) m))
                        (aneqd ((eq x (sub j i)) (lt (d0) x) (lt (d0) (sub j i)) (lt x n) (lt (sub j i) n))
                          (lteq2 ((d0) x (sub j i)))
                          (lteq1 (x (sub j i) n)))
                        (dvdeq1 (x (sub j i) m))))
                    (anwll (G (dvd u (suc (mul m (suc i)))) (dvd u (suc (mul m (suc j)))) (al x (im (an (lt (d0) x) (lt x n)) (dvd x m))))
                      h1)
                    (iand ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (lt (d0) (sub j i)) (lt (sub j i) n))
                      (sylib ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (lt i j) (lt (d0) (sub j i)))
                        (subpos (i j))
                        H1)
                      (lelttrd ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (sub j i) j n)
                        (a1i ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (le (sub j i) j))
                          (subleid (j i)))
                        (anwll (G (dvd u (suc (mul m (suc i)))) (dvd u (suc (mul m (suc j)))) (lt j n))
                          h3)))))))
            (sylibr ((an (an G (dvd u (suc (mul m (suc i))))) (dvd u (suc (mul m (suc j))))) (dvd u (suc (mul m (suc i)))) (dvd u (add (mul m (suc i)) (d1))))
              (ax_mp ((eq (add (mul m (suc i)) (d1)) (suc (mul m (suc i)))) (iff (dvd u (add (mul m (suc i)) (d1))) (dvd u (suc (mul m (suc i))))))
                (dvdeq2 (u (add (mul m (suc i)) (d1)) (suc (mul m (suc i)))))
                (add12 ((mul m (suc i)))))
              H2))))))))))

(local theorem psetSlem2 ((G wff ()) (a nat ()) (b nat ()) (m nat ()) (n nat ()) (x nat))
  ((h1 (im G (al x (im (an (lt (d0) x) (lt x n)) (dvd x m)))))
   (h2 (im G (ne a b)))
   (h3 (im G (lt a n)))
   (h4 (im G (lt b n))))
  (im G (coprime (suc (mul m (suc a))) (suc (mul m (suc b)))))
()
(mpd (G (or (lt a b) (lt b a)) (coprime (suc (mul m (suc a))) (suc (mul m (suc b)))))
  (sylib (G (ne a b) (or (lt a b) (lt b a)))
    (neltlt (a b))
    h2)
  (eorda (G (lt a b) (lt b a) (coprime (suc (mul m (suc a))) (suc (mul m (suc b)))))
    (psetSlem1 ((an G (lt a b)) a b m n x)
      (anwl (G (lt a b) (al x (im (an (lt (d0) x) (lt x n)) (dvd x m))))
        h1)
      (anr (G (lt a b)))
      (anwl (G (lt a b) (lt b n))
        h4))
    (sylib ((an G (lt b a)) (coprime (suc (mul m (suc b))) (suc (mul m (suc a)))) (coprime (suc (mul m (suc a))) (suc (mul m (suc b)))))
      (copcom ((suc (mul m (suc b))) (suc (mul m (suc a)))))
      (psetSlem1 ((an G (lt b a)) b a m n x)
        (anwl (G (lt b a) (al x (im (an (lt (d0) x) (lt x n)) (dvd x m))))
          h1)
        (anr (G (lt b a)))
        (anwl (G (lt b a) (lt a n))
          h3))))))

(local theorem psetS ((G wff ()) (a nat ()) (m nat ()) (n nat ()) (v nat ()) (x nat))
  ((h1 (im G (lt (d0) m)))
   (h2 (im G (lt (d0) v)))
   (h3 (im G (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))))
  (im G (iff (el a (pset (pr m (mul v (suc (mul m (suc n))))))) (or (el a (pset (pr m v))) (eq a n))))
((y nat))
(:let H1 (mulpos (v (suc (mul m (suc n)))))
(:let H2 (anlr (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (not (eq a n))))
(:let H3 (anlr ((an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))))
(:let H4 (syl ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))))
  H3
  H2)
(:let H5 (lt01S ((mul m (suc n))))
(syl5bb (G (el a (pset (pr m (mul v (suc (mul m (suc n))))))) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (or (el a (pset (pr m v))) (eq a n)))
  (elpset (m a (mul v (suc (mul m (suc n)))) x))
  (syl6bbr (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)) (or (el a (pset (pr m v))) (eq a n)))
    (oreq1i ((el a (pset (pr m v))) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n))
      (elpset (m a v x)))
    (ibid (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
      (exp (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
        (syla ((an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n)) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
          (:conv (im (im (not (eq a n)) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v))) (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
            (im
              (:sym (:unfold or ((eq a n) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v))) ()
                (im (not (eq a n)) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)))))
              (or (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n)))
            (orcom ((eq a n) (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)))))
          (iand ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v))
            (iand ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))))
              (iand ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt (d0) m) (lt (d0) v))
                (anwll (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (not (eq a n)) (lt (d0) m))
                  h1)
                (anld ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt (d0) v) (lt (d0) (suc (mul m (suc n)))))
                  (sylib ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt (d0) (mul v (suc (mul m (suc n))))) (an (lt (d0) v) (lt (d0) (suc (mul m (suc n))))))
                    H1
                    (syl ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (lt (d0) (mul v (suc (mul m (suc n))))))
                      (anllr ((lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))))
                      H2))))
              H4)
            (copdvdmul1 ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (suc (mul m (suc a))) v (suc (mul m (suc n))))
              (psetSlem2 ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) a n m (max (suc a) (suc n)) y)
                (sylib ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (al x (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m))) (al y (im (an (lt (d0) y) (lt y (max (suc a) (suc n)))) (dvd y m))))
                  (cbval (x y (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m)) (im (an (lt (d0) y) (lt y (max (suc a) (suc n)))) (dvd y m)))
                    (imeqd ((eq x y) (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (an (lt (d0) y) (lt y (max (suc a) (suc n)))) (dvd x m) (dvd y m))
                      (aneqd ((eq x y) (lt (d0) x) (lt (d0) y) (lt x (max (suc a) (suc n))) (lt y (max (suc a) (suc n))))
                        (lteq2 ((d0) x y))
                        (lteq1 (x y (max (suc a) (suc n)))))
                      (dvdeq1 (x y m))))
                  (sylc ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))) (al x (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m))))
                    (al2imi (x (im (an (lt (d0) x) (le x a)) (dvd x m)) (im (an (lt (d0) x) (le x n)) (dvd x m)) (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m)))
                      (syl6 ((im (an (lt (d0) x) (le x a)) (dvd x m)) (im (an (lt (d0) x) (le x n)) (dvd x m)) (im (or (an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n))) (dvd x m)) (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (dvd x m)))
                        (imim1i ((an (lt (d0) x) (lt x (max (suc a) (suc n)))) (or (an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n))) (dvd x m))
                          (sylib ((an (lt (d0) x) (lt x (max (suc a) (suc n)))) (an (lt (d0) x) (or (le x a) (le x n))) (or (an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n))))
                            (andi ((lt (d0) x) (le x a) (le x n)))
                            (ax_mp ((im (lt x (max (suc a) (suc n))) (or (le x a) (le x n))) (im (an (lt (d0) x) (lt x (max (suc a) (suc n)))) (an (lt (d0) x) (or (le x a) (le x n)))))
                              (anim2 ((lt (d0) x) (lt x (max (suc a) (suc n))) (or (le x a) (le x n))))
                              (sylbi ((lt x (max (suc a) (suc n))) (or (lt x (suc a)) (lt x (suc n))) (or (le x a) (le x n)))
                                (ltmax (x (suc a) (suc n)))
                                (ax_mp ((iff (or (le x a) (le x n)) (or (lt x (suc a)) (lt x (suc n)))) (im (or (lt x (suc a)) (lt x (suc n))) (or (le x a) (le x n))))
                                  (bi2 ((or (le x a) (le x n)) (or (lt x (suc a)) (lt x (suc n)))))
                                  (oreqi ((le x a) (lt x (suc a)) (le x n) (lt x (suc n)))
                                    (leltsuc (x a))
                                    (leltsuc (x n))))))))
                        (eor ((an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n)) (dvd x m)))))
                    H4
                    (anwll (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (not (eq a n)) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
                      h3)))
                (:conv (im (an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (ne a n))
                  (im
                    (an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n)))
                    (:unfold ne (a n) ()
                      (not (eq a n))))
                  (anr ((an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n)))))
                (a1i ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt a (max (suc a) (suc n))))
                  (:conv (lt a (max (suc a) (suc n)))
                    (:unfold lt (a (max (suc a) (suc n))) ()
                      (le (suc a) (max (suc a) (suc n))))
                    (lemax1 ((suc a) (suc n)))))
                (a1i ((an (an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n))) (lt n (max (suc a) (suc n))))
                  (:conv (lt n (max (suc a) (suc n)))
                    (:unfold lt (n (max (suc a) (suc n))) ()
                      (le (suc n) (max (suc a) (suc n))))
                    (lemax2 ((suc a) (suc n))))))
              (anwl ((an G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))) (not (eq a n)) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))
                (anrr (G (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))))))))
      (eord (G (an (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v)) (eq a n) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))))
        (animd (G (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) v) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))))
          (a1i (G (im (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))))))
            (ax_mp ((im (an (lt (d0) m) (lt (d0) v)) (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n))))))) (im (an (an (lt (d0) m) (lt (d0) v)) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))))))
              (anim1 ((an (lt (d0) m) (lt (d0) v)) (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))))
              (ax_mp ((im (lt (d0) v) (lt (d0) (mul v (suc (mul m (suc n)))))) (im (an (lt (d0) m) (lt (d0) v)) (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n))))))))
                (anim2 ((lt (d0) m) (lt (d0) v) (lt (d0) (mul v (suc (mul m (suc n)))))))
                (sylibr ((lt (d0) v) (an (lt (d0) v) (lt (d0) (suc (mul m (suc n))))) (lt (d0) (mul v (suc (mul m (suc n))))))
                  H1
                  (iand ((lt (d0) v) (lt (d0) v) (lt (d0) (suc (mul m (suc n)))))
                    (id ((lt (d0) v)))
                    (a1i ((lt (d0) v) (lt (d0) (suc (mul m (suc n)))))
                      H5))))))
          (a1i (G (im (dvd (suc (mul m (suc a))) v) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))))
            (dvdmul11 ((suc (mul m (suc a))) v (suc (mul m (suc n)))))))
        (syl5ibrcom (G (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n)))))) (eq a n) (an (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (mul v (suc (mul m (suc n)))))))
          (aneqd ((eq a n) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m)))) (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc a))) (mul v (suc (mul m (suc n))))) (dvd (suc (mul m (suc n))) (mul v (suc (mul m (suc n))))))
            (aneq2d ((eq a n) (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x a)) (dvd x m))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
              (aleqd ((eq a n) x (im (an (lt (d0) x) (le x a)) (dvd x m)) (im (an (lt (d0) x) (le x n)) (dvd x m)))
                (imeq1d ((eq a n) (an (lt (d0) x) (le x a)) (an (lt (d0) x) (le x n)) (dvd x m))
                  (aneq2d ((eq a n) (lt (d0) x) (le x a) (le x n))
                    (leeq2 (x a n))))))
            (dvdeq1d ((eq a n) (suc (mul m (suc a))) (suc (mul m (suc n))) (mul v (suc (mul m (suc n)))))
              (suceqd ((eq a n) (mul m (suc a)) (mul m (suc n)))
                (muleq2d ((eq a n) m (suc a) (suc n))
                  (suceq (a n))))))
          (iand (G (an (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (dvd (suc (mul m (suc n))) (mul v (suc (mul m (suc n))))))
            (iand (G (an (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n)))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
              (iand (G (lt (d0) m) (lt (d0) (mul v (suc (mul m (suc n))))))
                h1
                (sylibr (G (an (lt (d0) v) (lt (d0) (suc (mul m (suc n))))) (lt (d0) (mul v (suc (mul m (suc n))))))
                  H1
                  (iand (G (lt (d0) v) (lt (d0) (suc (mul m (suc n)))))
                    h2
                    (a1i (G (lt (d0) (suc (mul m (suc n)))))
                      H5))))
              h3)
            (a1i (G (dvd (suc (mul m (suc n))) (mul v (suc (mul m (suc n))))))
              (dvdmul1 ((suc (mul m (suc n))) v)))))))))))))))

(local theorem lcmex ((m nat) (n nat ()) (x nat)) ()
  (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))))
((a nat) (u nat) (v nat))
(ind (u v n (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x v)) (dvd x m))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x m))))))
  (exeqd ((eq u (d0)) m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m)))) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m)))))
    (aneq2d ((eq u (d0)) (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m))) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))))
      (aleqd ((eq u (d0)) x (im (an (lt (d0) x) (le x u)) (dvd x m)) (im (an (lt (d0) x) (le x (d0))) (dvd x m)))
        (imeq1d ((eq u (d0)) (an (lt (d0) x) (le x u)) (an (lt (d0) x) (le x (d0))) (dvd x m))
          (aneq2d ((eq u (d0)) (lt (d0) x) (le x u) (le x (d0)))
            (leeq2 (x u (d0))))))))
  (exeqd ((eq u v) m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m)))) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x v)) (dvd x m)))))
    (aneq2d ((eq u v) (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m))) (al x (im (an (lt (d0) x) (le x v)) (dvd x m))))
      (aleqd ((eq u v) x (im (an (lt (d0) x) (le x u)) (dvd x m)) (im (an (lt (d0) x) (le x v)) (dvd x m)))
        (imeq1d ((eq u v) (an (lt (d0) x) (le x u)) (an (lt (d0) x) (le x v)) (dvd x m))
          (aneq2d ((eq u v) (lt (d0) x) (le x u) (le x v))
            (leeq2 (x u v)))))))
  (exeqd ((eq u (suc v)) m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m)))) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x m)))))
    (aneq2d ((eq u (suc v)) (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m))) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x m))))
      (aleqd ((eq u (suc v)) x (im (an (lt (d0) x) (le x u)) (dvd x m)) (im (an (lt (d0) x) (le x (suc v))) (dvd x m)))
        (imeq1d ((eq u (suc v)) (an (lt (d0) x) (le x u)) (an (lt (d0) x) (le x (suc v))) (dvd x m))
          (aneq2d ((eq u (suc v)) (lt (d0) x) (le x u) (le x (suc v)))
            (leeq2 (x u (suc v))))))))
  (exeqd ((eq u n) m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m)))) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))))
    (aneq2d ((eq u n) (lt (d0) m) (al x (im (an (lt (d0) x) (le x u)) (dvd x m))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
      (aleqd ((eq u n) x (im (an (lt (d0) x) (le x u)) (dvd x m)) (im (an (lt (d0) x) (le x n)) (dvd x m)))
        (imeq1d ((eq u n) (an (lt (d0) x) (le x u)) (an (lt (d0) x) (le x n)) (dvd x m))
          (aneq2d ((eq u n) (lt (d0) x) (le x u) (le x n))
            (leeq2 (x u n)))))))
  (:conv (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m)))))
    (ex
      m
      (an
        (:unfold lt ((d0) m) ()
          (le (suc (d0)) m))
        (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m)))))
    (ax_mp ((an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))) (ex m (an (le (suc (d0)) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))))))
      (iexe (m (d1) (an (le (suc (d0)) m) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m)))) (an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))))
        (aneqd ((eq m (d1)) (le (suc (d0)) m) (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x m))) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))))
          (leeq2 ((suc (d0)) m (d1)))
          (aleqd ((eq m (d1)) x (im (an (lt (d0) x) (le x (d0))) (dvd x m)) (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))
            (imeq2d ((eq m (d1)) (an (lt (d0) x) (le x (d0))) (dvd x m) (dvd x (d1)))
              (dvdeq2 (x m (d1)))))))
      (:conv (an (le (suc (d0)) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))))
        (an
          (:sym (:unfold lt ((d0) (d1)) ()
            (le (suc (d0)) (d1))))
          (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))))
        (ax_mp ((al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))) (an (lt (d0) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))))
          (ax_mp ((lt (d0) (d1)) (im (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))) (an (lt (d0) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1)))))))
            (ian ((lt (d0) (d1)) (al x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))))
            (d0lt1 ()))
          (ax_gen (x (im (an (lt (d0) x) (le x (d0))) (dvd x (d1))))
            (imp ((lt (d0) x) (le x (d0)) (dvd x (d1)))
              (sylbi ((lt (d0) x) (not (le x (d0))) (im (le x (d0)) (dvd x (d1))))
                (ltnle ((d0) x))
                (absurd ((le x (d0)) (dvd x (d1)))))))))))
  (sylbi ((ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x v)) (dvd x m))))) (ex a (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x m))))))
    (cbvex (m a (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x v)) (dvd x m)))) (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a)))))
      (aneqd ((eq m a) (lt (d0) m) (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x m))) (al x (im (an (lt (d0) x) (le x v)) (dvd x a))))
        (:conv (im (eq m a) (iff (lt (d0) m) (le (suc (d0)) a)))
          (im
            (eq m a)
            (iff
              (:unfold lt ((d0) m) ()
                (le (suc (d0)) m))
              (le (suc (d0)) a)))
          (leeq2 ((suc (d0)) m a)))
        (aleqd ((eq m a) x (im (an (lt (d0) x) (le x v)) (dvd x m)) (im (an (lt (d0) x) (le x v)) (dvd x a)))
          (imeq2d ((eq m a) (an (lt (d0) x) (le x v)) (dvd x m) (dvd x a))
            (dvdeq2 (x m a))))))
    (eex (a (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a)))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x m))))))
      (sylan ((an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a)))) (le (suc (d0)) (mul a (suc v))) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x (mul a (suc v))))) (ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x m))))))
        (iexe (m (mul a (suc v)) (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x m)))) (an (le (suc (d0)) (mul a (suc v))) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x (mul a (suc v)))))))
          (aneqd ((eq m (mul a (suc v))) (lt (d0) m) (le (suc (d0)) (mul a (suc v))) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x m))) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x (mul a (suc v))))))
            (:conv (im (eq m (mul a (suc v))) (iff (lt (d0) m) (le (suc (d0)) (mul a (suc v)))))
              (im
                (eq m (mul a (suc v)))
                (iff
                  (:unfold lt ((d0) m) ()
                    (le (suc (d0)) m))
                  (le (suc (d0)) (mul a (suc v)))))
              (leeq2 ((suc (d0)) m (mul a (suc v)))))
            (aleqd ((eq m (mul a (suc v))) x (im (an (lt (d0) x) (le x (suc v))) (dvd x m)) (im (an (lt (d0) x) (le x (suc v))) (dvd x (mul a (suc v)))))
              (imeq2d ((eq m (mul a (suc v))) (an (lt (d0) x) (le x (suc v))) (dvd x m) (dvd x (mul a (suc v))))
                (dvdeq2 (x m (mul a (suc v))))))))
        (sylibr ((an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a)))) (an (lt (d0) a) (lt (d0) (suc v))) (le (suc (d0)) (mul a (suc v))))
          (:conv (iff (le (suc (d0)) (mul a (suc v))) (an (lt (d0) a) (lt (d0) (suc v))))
            (iff
              (:sym (:unfold lt ((d0) (mul a (suc v))) ()
                (le (suc (d0)) (mul a (suc v)))))
              (an (lt (d0) a) (lt (d0) (suc v))))
            (mulpos (a (suc v))))
          (iand ((an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a)))) (lt (d0) a) (lt (d0) (suc v)))
            (:conv (im (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a)))) (lt (d0) a))
              (im
                (an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a))))
                (:unfold lt ((d0) a) ()
                  (le (suc (d0)) a)))
              (anl ((le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a))))))
            (a1i ((an (le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a)))) (lt (d0) (suc v)))
              (lt01S (v)))))
        (anwr ((le (suc (d0)) a) (al x (im (an (lt (d0) x) (le x v)) (dvd x a))) (al x (im (an (lt (d0) x) (le x (suc v))) (dvd x (mul a (suc v))))))
          (alimi (x (im (an (lt (d0) x) (le x v)) (dvd x a)) (im (an (lt (d0) x) (le x (suc v))) (dvd x (mul a (suc v)))))
            (sylbi ((im (an (lt (d0) x) (le x v)) (dvd x a)) (im (lt (d0) x) (im (le x v) (dvd x a))) (im (an (lt (d0) x) (le x (suc v))) (dvd x (mul a (suc v)))))
              (impexp ((lt (d0) x) (le x v) (dvd x a)))
              (sylibr ((im (lt (d0) x) (im (le x v) (dvd x a))) (im (lt (d0) x) (im (le x (suc v)) (dvd x (mul a (suc v))))) (im (an (lt (d0) x) (le x (suc v))) (dvd x (mul a (suc v)))))
                (impexp ((lt (d0) x) (le x (suc v)) (dvd x (mul a (suc v)))))
                (ax_mp ((im (im (le x v) (dvd x a)) (im (le x (suc v)) (dvd x (mul a (suc v))))) (im (im (lt (d0) x) (im (le x v) (dvd x a))) (im (lt (d0) x) (im (le x (suc v)) (dvd x (mul a (suc v)))))))
                  (imim2 ((lt (d0) x) (im (le x v) (dvd x a)) (im (le x (suc v)) (dvd x (mul a (suc v))))))
                  (syl5bi ((im (le x v) (dvd x a)) (le x (suc v)) (or (lt x (suc v)) (eq x (suc v))) (dvd x (mul a (suc v))))
                    (leloe (x (suc v)))
                    (eord ((im (le x v) (dvd x a)) (lt x (suc v)) (eq x (suc v)) (dvd x (mul a (suc v))))
                      (syl5bir ((im (le x v) (dvd x a)) (lt x (suc v)) (le x v) (dvd x (mul a (suc v))))
                        (leltsuc (x v))
                        (imim2i ((le x v) (dvd x a) (dvd x (mul a (suc v))))
                          (dvdmul11 (x a (suc v)))))
                      (a1i ((im (le x v) (dvd x a)) (im (eq x (suc v)) (dvd x (mul a (suc v)))))
                        (mpbii ((eq x (suc v)) (dvd x (mul a x)) (dvd x (mul a (suc v))))
                          (dvdmul1 (x a))
                          (dvdeq2d ((eq x (suc v)) x (mul a x) (mul a (suc v)))
                            (muleq2 (a x (suc v))))))))))))))))))

(local theorem psetsep ((b nat) (n nat ()) (x nat) (p wff (x))) ()
  (ex b (eqs (pset b) (ab x (an (lt x n) p))))
((a nat) (m nat) (u nat) (v nat) (y nat) (z nat))
(:let H1 (anrl ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))
(:let H2 (bitr ((el y (ab x (an (lt x (suc v)) p))) (sb y x (an (lt x (suc v)) p)) (an (lt y (suc v)) (sb y x p))))
(:let H3 (elab (y x (an (lt x (suc v)) p)))
(:let H4 (ax_mp ((iff (el y (ab x (an (lt x (suc v)) p))) (sb y x (an (lt x (suc v)) p))) (im (iff (sb y x (an (lt x (suc v)) p)) (an (lt y (suc v)) (sb y x p))) (iff (el y (ab x (an (lt x (suc v)) p))) (an (lt y (suc v)) (sb y x p)))))
  H2
  H3)
(:let H5 (nfv ((lt y (suc v)) x))
(:let H6 (nfsb1 (x y p))
(:let H7 (nfan (x (lt y (suc v)) (sb y x p))
  H5
  H6)
(:let H8 (lteq1 (x y (suc v)))
(:let H9 (sbq (x y p))
(:let H10 (aneqd ((eq x y) (lt x (suc v)) (lt y (suc v)) p (sb y x p))
  H8
  H9)
(:let H11 (sbeh (x y (an (lt x (suc v)) p) (an (lt y (suc v)) (sb y x p)))
  H7
  H10)
(:let H12 (ax_mp ((iff (sb y x (an (lt x (suc v)) p)) (an (lt y (suc v)) (sb y x p))) (iff (el y (ab x (an (lt x (suc v)) p))) (an (lt y (suc v)) (sb y x p))))
  H4
  H11)
(:let H13 (an3l ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n) (sb v x p) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))))
(:let H14 (bitr ((el y (ab x (an (lt x v) p))) (sb y x (an (lt x v) p)) (an (lt y v) (sb y x p))))
(:let H15 (elab (y x (an (lt x v) p)))
(:let H16 (ax_mp ((iff (el y (ab x (an (lt x v) p))) (sb y x (an (lt x v) p))) (im (iff (sb y x (an (lt x v) p)) (an (lt y v) (sb y x p))) (iff (el y (ab x (an (lt x v) p))) (an (lt y v) (sb y x p)))))
  H14
  H15)
(:let H17 (nfv ((lt y v) x))
(:let H18 (nfan (x (lt y v) (sb y x p))
  H17
  H6)
(:let H19 (lteq1 (x y v))
(:let H20 (aneqd ((eq x y) (lt x v) (lt y v) p (sb y x p))
  H19
  H9)
(:let H21 (sbeh (x y (an (lt x v) p) (an (lt y v) (sb y x p)))
  H18
  H20)
(:let H22 (ax_mp ((iff (sb y x (an (lt x v) p)) (an (lt y v) (sb y x p))) (iff (el y (ab x (an (lt x v) p))) (an (lt y v) (sb y x p))))
  H16
  H21)
(:let H23 (ax_mp ((iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))) (iff (an (lt y (suc v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))))
  (ax_mp ((iff (an (lt y (suc v)) (sb y x p)) (an (or (lt y v) (eq y v)) (sb y x p))) (im (iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))) (iff (an (lt y (suc v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))))))
    (bitr ((an (lt y (suc v)) (sb y x p)) (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))))
    (aneq1i ((lt y (suc v)) (or (lt y v) (eq y v)) (sb y x p))
      (ax_mp ((iff (le y v) (or (lt y v) (eq y v))) (iff (lt y (suc v)) (or (lt y v) (eq y v))))
        (ax_mp ((iff (le y v) (lt y (suc v))) (im (iff (le y v) (or (lt y v) (eq y v))) (iff (lt y (suc v)) (or (lt y v) (eq y v)))))
          (bitr3 ((lt y (suc v)) (le y v) (or (lt y v) (eq y v))))
          (leltsuc (y v)))
        (leloe (y v)))))
  (ax_mp ((iff (or (an (lt y v) (sb y x p)) (an (eq y v) (sb y x p))) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))) (iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))))
    (ax_mp ((iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb y x p)))) (im (iff (or (an (lt y v) (sb y x p)) (an (eq y v) (sb y x p))) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))) (iff (an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))))))
      (bitr ((an (or (lt y v) (eq y v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb y x p))) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)))))
      (andir ((lt y v) (eq y v) (sb y x p))))
    (oreq2i ((an (lt y v) (sb y x p)) (an (eq y v) (sb y x p)) (an (eq y v) (sb v x p)))
      (ax_mp ((im (eq y v) (iff (sb y x p) (sb v x p))) (iff (an (eq y v) (sb y x p)) (an (eq y v) (sb v x p))))
        (aneq2a ((eq y v) (sb y x p) (sb v x p)))
        (sbeq1 (x y v p))))))
(ax_mp ((ex m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))) (ex b (eqs (pset b) (ab x (an (lt x n) p)))))
  (eex (m (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (ex b (eqs (pset b) (ab x (an (lt x n) p)))))
    (mpd ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (ex b (eqs (pset b) (ab x (an (lt x n) p)))))
      (indlt ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) u v n (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))))
        (exeqd ((eq u (d0)) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p)))))
          (aneq2d ((eq u (d0)) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p))) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))))
            (eqseq2d ((eq u (d0)) (pset (pr m a)) (ab x (an (lt x u) p)) (ab x (an (lt x (d0)) p)))
              (abeqd ((eq u (d0)) x (an (lt x u) p) (an (lt x (d0)) p))
                (aneq1d ((eq u (d0)) (lt x u) (lt x (d0)) p)
                  (lteq2 (x u (d0))))))))
        (exeqd ((eq u v) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))
          (aneq2d ((eq u v) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p))) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))
            (eqseq2d ((eq u v) (pset (pr m a)) (ab x (an (lt x u) p)) (ab x (an (lt x v) p)))
              (abeqd ((eq u v) x (an (lt x u) p) (an (lt x v) p))
                (aneq1d ((eq u v) (lt x u) (lt x v) p)
                  (lteq2 (x u v)))))))
        (exeqd ((eq u (suc v)) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p)))))
          (aneq2d ((eq u (suc v)) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p))) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))
            (eqseq2d ((eq u (suc v)) (pset (pr m a)) (ab x (an (lt x u) p)) (ab x (an (lt x (suc v)) p)))
              (abeqd ((eq u (suc v)) x (an (lt x u) p) (an (lt x (suc v)) p))
                (aneq1d ((eq u (suc v)) (lt x u) (lt x (suc v)) p)
                  (lteq2 (x u (suc v))))))))
        (exeqd ((eq u n) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p)))))
          (aneq2d ((eq u n) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x u) p))) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))
            (eqseq2d ((eq u n) (pset (pr m a)) (ab x (an (lt x u) p)) (ab x (an (lt x n) p)))
              (abeqd ((eq u n) x (an (lt x u) p) (an (lt x n) p))
                (aneq1d ((eq u n) (lt x u) (lt x n) p)
                  (lteq2 (x u n)))))))
        (a1i ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))))))
          (ax_mp ((an (lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))))))
            (iexe (a (d1) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p)))) (an (lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))))
              (aneqd ((eq a (d1)) (lt (d0) a) (lt (d0) (d1)) (eqs (pset (pr m a)) (ab x (an (lt x (d0)) p))) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p))))
                (lteq2 ((d0) a (d1)))
                (eqseq1d ((eq a (d1)) (pset (pr m a)) (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))
                  (pseteqd ((eq a (d1)) (pr m a) (pr m (d1)))
                    (preq2 (m a (d1)))))))
            (ax_mp ((eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p))) (an (lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))))
              (ax_mp ((lt (d0) (d1)) (im (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p))) (an (lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p))))))
                (ian ((lt (d0) (d1)) (eqs (pset (pr m (d1))) (ab x (an (lt x (d0)) p)))))
                (d0lt1 ()))
              (eqab2i ((pset (pr m (d1))) x (an (lt x (d0)) p))
                (ax_mp ((not (an (lt x (d0)) p)) (iff (el x (pset (pr m (d1)))) (an (lt x (d0)) p)))
                  (ax_mp ((not (el x (pset (pr m (d1))))) (im (not (an (lt x (d0)) p)) (iff (el x (pset (pr m (d1)))) (an (lt x (d0)) p))))
                    (binth ((el x (pset (pr m (d1)))) (an (lt x (d0)) p)))
                    (elpset1 (m x)))
                  (mt ((lt x (d0)) (an (lt x (d0)) p))
                    (anl ((lt x (d0)) p))
                    (lt02 (x))))))))
        (imp ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))))
          (casesda ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p) (im (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p)))))))
            (syl6ibr ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (ex b (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))))
              (cbvex (a b (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p)))) (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p)))))
                (aneqd ((eq a b) (lt (d0) a) (lt (d0) b) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))))
                  (lteq2 ((d0) a b))
                  (eqseq1d ((eq a b) (pset (pr m a)) (pset (pr m b)) (ab x (an (lt x (suc v)) p)))
                    (pseteqd ((eq a b) (pr m a) (pr m b))
                      (preq2 (m a b))))))
              (eexda (a (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))) (ex b (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))))))
                (syl ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (an (lt (d0) (mul a (suc (mul m (suc v))))) (eqs (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p)))) (ex b (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))))))
                  (iexe (b (mul a (suc (mul m (suc v)))) (an (lt (d0) b) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p)))) (an (lt (d0) (mul a (suc (mul m (suc v))))) (eqs (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p)))))
                    (aneqd ((eq b (mul a (suc (mul m (suc v))))) (lt (d0) b) (lt (d0) (mul a (suc (mul m (suc v))))) (eqs (pset (pr m b)) (ab x (an (lt x (suc v)) p))) (eqs (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p))))
                      (lteq2 ((d0) b (mul a (suc (mul m (suc v))))))
                      (eqseq1d ((eq b (mul a (suc (mul m (suc v))))) (pset (pr m b)) (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p)))
                        (pseteqd ((eq b (mul a (suc (mul m (suc v))))) (pr m b) (pr m (mul a (suc (mul m (suc v))))))
                          (preq2 (m b (mul a (suc (mul m (suc v))))))))))
                  (iand ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) (mul a (suc (mul m (suc v))))) (eqs (pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p))))
                    (sylibr ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (an (lt (d0) a) (lt (d0) (suc (mul m (suc v))))) (lt (d0) (mul a (suc (mul m (suc v))))))
                      (mulpos (a (suc (mul m (suc v)))))
                      (iand ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) a) (lt (d0) (suc (mul m (suc v)))))
                        H1
                        (a1i ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) (suc (mul m (suc v)))))
                          (lt01S ((mul m (suc v)))))))
                    (eqrd ((pset (pr m (mul a (suc (mul m (suc v)))))) (ab x (an (lt x (suc v)) p)) (an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) y)
                      (syl6bbr ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (el y (pset (pr m (mul a (suc (mul m (suc v))))))) (an (lt y (suc v)) (sb y x p)) (el y (ab x (an (lt x (suc v)) p))))
                        H12
                        (bitrd ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (el y (pset (pr m (mul a (suc (mul m (suc v))))))) (or (el y (pset (pr m a))) (eq y v)) (an (lt y (suc v)) (sb y x p)))
                          (psetS ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) y m v a z)
                            (anld ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
                              H13)
                            H1
                            (sylib ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (al x (im (an (lt (d0) x) (le x v)) (dvd x m))) (al z (im (an (lt (d0) z) (le z v)) (dvd z m))))
                              (cbval (x z (im (an (lt (d0) x) (le x v)) (dvd x m)) (im (an (lt (d0) z) (le z v)) (dvd z m)))
                                (imeqd ((eq x z) (an (lt (d0) x) (le x v)) (an (lt (d0) z) (le z v)) (dvd x m) (dvd z m))
                                  (aneqd ((eq x z) (lt (d0) x) (lt (d0) z) (le x v) (le z v))
                                    (lteq2 ((d0) x z))
                                    (leeq1 (x z v)))
                                  (dvdeq1 (x z m))))
                              (mpd ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))) (al x (im (an (lt (d0) x) (le x v)) (dvd x m))))
                                (anrd ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m))))
                                  H13)
                                (rsyl ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (le v n) (im (al x (im (an (lt (d0) x) (le x n)) (dvd x m))) (al x (im (an (lt (d0) x) (le x v)) (dvd x m)))))
                                  (syl ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (le (suc v) n) (le v n))
                                    (ax_mp ((le v (suc v)) (im (le (suc v) n) (le v n)))
                                      (letr (v (suc v) n))
                                      (lesucid (v)))
                                    (:conv (im (an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (le (suc v) n))
                                      (im
                                        (an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))
                                        (:sym (:unfold lt (v n) ()
                                          (le (suc v) n))))
                                      (anllr ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n) (sb v x p) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))))))
                                  (alimd (x (le v n) (im (an (lt (d0) x) (le x n)) (dvd x m)) (im (an (lt (d0) x) (le x v)) (dvd x m)))
                                    (imim1d ((le v n) (an (lt (d0) x) (le x v)) (an (lt (d0) x) (le x n)) (dvd x m))
                                      (anim2d ((le v n) (lt (d0) x) (le x v) (le x n))
                                        (com12 ((le x v) (le v n) (le x n))
                                          (letr (x v n))))))))))
                          (bitr4d ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (or (el y (pset (pr m a))) (eq y v)) (or (an (lt y v) (sb y x p)) (eq y v)) (an (lt y (suc v)) (sb y x p)))
                            (oreq1d ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (el y (pset (pr m a))) (an (lt y v) (sb y x p)) (eq y v))
                              (syl6bb ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (el y (pset (pr m a))) (el y (ab x (an (lt x v) p))) (an (lt y v) (sb y x p)))
                                H22
                                (eleq2d ((pset (pr m a)) (ab x (an (lt x v) p)) (an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) y)
                                  (anrr ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))))))
                            (syl5bb ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (an (lt y (suc v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))) (or (an (lt y v) (sb y x p)) (eq y v)))
                              H23
                              (oreq2d ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p)) (eq y v))
                                (syl ((an (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p)) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))) (sb v x p) (iff (an (eq y v) (sb v x p)) (eq y v)))
                                  (bian2 ((eq y v) (sb v x p)))
                                  (anlr ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (sb v x p) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))))))))))))))
            (bi2d ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))))) (ex a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))))
              (exeqd ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) a (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x v) p)))))
                (aneq2d ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x (suc v)) p))) (eqs (pset (pr m a)) (ab x (an (lt x v) p))))
                  (eqseq2d ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (pset (pr m a)) (ab x (an (lt x (suc v)) p)) (ab x (an (lt x v) p)))
                    (eqrd ((ab x (an (lt x (suc v)) p)) (ab x (an (lt x v) p)) (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) y)
                      (syl5bb ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (el y (ab x (an (lt x (suc v)) p))) (an (lt y (suc v)) (sb y x p)) (el y (ab x (an (lt x v) p))))
                        H12
                        (syl6bbr ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (an (lt y (suc v)) (sb y x p)) (an (lt y v) (sb y x p)) (el y (ab x (an (lt x v) p))))
                          H22
                          (syl5bb ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (an (lt y (suc v)) (sb y x p)) (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))) (an (lt y v) (sb y x p)))
                            H23
                            (syl ((an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p))) (not (an (eq y v) (sb v x p))) (iff (or (an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))) (an (lt y v) (sb y x p))))
                              (bior2 ((an (lt y v) (sb y x p)) (an (eq y v) (sb v x p))))
                              (anwr ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt v n)) (not (sb v x p)) (not (an (eq y v) (sb v x p))))
                                (ax_mp ((im (an (eq y v) (sb v x p)) (sb v x p)) (im (not (sb v x p)) (not (an (eq y v) (sb v x p)))))
                                  (con3 ((an (eq y v) (sb v x p)) (sb v x p)))
                                  (anr ((eq y v) (sb v x p)))))))))))))))))
      (eexda (a (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p)))) (ex b (eqs (pset b) (ab x (an (lt x n) p)))))
        (iexde (b (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (pr m a) (eqs (pset b) (ab x (an (lt x n) p))))
          (eqstrd ((pset b) (pset (pr m a)) (ab x (an (lt x n) p)) (an (an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (eq b (pr m a))))
            (anwr ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (eq b (pr m a)) (eqs (pset b) (pset (pr m a))))
              (pseteq (b (pr m a))))
            (anwl ((an (an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (an (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))) (eq b (pr m a)) (eqs (pset (pr m a)) (ab x (an (lt x n) p))))
              (anrr ((an (lt (d0) m) (al x (im (an (lt (d0) x) (le x n)) (dvd x m)))) (lt (d0) a) (eqs (pset (pr m a)) (ab x (an (lt x n) p)))))))))))
  (lcmex (m n x)))))))))))))))))))))))))))

(local theorem expset ((A set ()) (a nat)) ()
  (iff (finite A) (ex a (eqs (pset a) A)))
((n nat) (x nat) (y nat))
(:let H1 (sylib ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (el x (pset (pr (fst a) (snd a)))) (an (an (an (lt (d0) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a))))
  (elpset ((fst a) x (snd a) y))
  (mpbird ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (el x A) (el x (pset (pr (fst a) (snd a)))))
    (eleq2d ((pset (pr (fst a) (snd a))) A (an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) x)
      (eqstrd ((pset (pr (fst a) (snd a))) (pset a) A (an (an (eqs (pset a) A) (eq n (snd a))) (el x A)))
        (a1i ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (eqs (pset (pr (fst a) (snd a))) (pset a)))
          (ax_mp ((eq (pr (fst a) (snd a)) a) (eqs (pset (pr (fst a) (snd a))) (pset a)))
            (pseteq ((pr (fst a) (snd a)) a))
            (fstsnd (a))))
        (anll ((eqs (pset a) A) (eq n (snd a)) (el x A)))))
    (anr ((an (eqs (pset a) A) (eq n (snd a))) (el x A)))))
(:conv (iff (finite A) (ex a (eqs (pset a) A)))
  (iff
    (:unfold finite (A) (n x)
      (ex n (al x (im (el x A) (lt x n)))))
    (ex a (eqs (pset a) A)))
  (ibii ((ex n (al x (im (el x A) (lt x n)))) (ex a (eqs (pset a) A)))
    (eex (n (al x (im (el x A) (lt x n))) (ex a (eqs (pset a) A)))
      (mpbii ((al x (im (el x A) (lt x n))) (ex a (eqs (pset a) (ab y (an (lt y n) (el y A))))) (ex a (eqs (pset a) A)))
        (psetsep (a n y (el y A)))
        (exeqd ((al x (im (el x A) (lt x n))) a (eqs (pset a) (ab y (an (lt y n) (el y A)))) (eqs (pset a) A))
          (eqseq2d ((al x (im (el x A) (lt x n))) (pset a) (ab y (an (lt y n) (el y A))) A)
            (eqab1d (A (al x (im (el x A) (lt x n))) y (an (lt y n) (el y A)))
              (syl ((al x (im (el x A) (lt x n))) (im (el y A) (lt y n)) (iff (an (lt y n) (el y A)) (el y A)))
                (bian1a ((lt y n) (el y A)))
                (eale (x y (im (el x A) (lt x n)) (im (el y A) (lt y n)))
                  (imeqd ((eq x y) (el x A) (el y A) (lt x n) (lt y n))
                    (eleq1 (A x y))
                    (lteq1 (x y n))))))))))
    (eex (a (eqs (pset a) A) (ex n (al x (im (el x A) (lt x n)))))
      (iexde (n (eqs (pset a) A) (snd a) (al x (im (el x A) (lt x n))))
        (iald (x (an (eqs (pset a) A) (eq n (snd a))) (im (el x A) (lt x n)))
          (exp ((an (eqs (pset a) A) (eq n (snd a))) (el x A) (lt x n))
            (:conv (im (an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (lt x n))
              (im
                (an (an (eqs (pset a) A) (eq n (snd a))) (el x A))
                (:unfold lt (x n) ()
                  (le (suc x) n)))
              (letrd ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (suc x) (suc (mul (fst a) (suc x))) n)
                (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (le (suc x) (mul (fst a) (suc x))) (le (suc x) (suc (mul (fst a) (suc x)))))
                  (mpi ((le (suc x) (mul (fst a) (suc x))) (le (mul (fst a) (suc x)) (suc (mul (fst a) (suc x)))) (le (suc x) (suc (mul (fst a) (suc x)))))
                    (lesucid ((mul (fst a) (suc x))))
                    (letr ((suc x) (mul (fst a) (suc x)) (suc (mul (fst a) (suc x))))))
                  (sylib ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (le (mul (d1) (suc x)) (mul (fst a) (suc x))) (le (suc x) (mul (fst a) (suc x))))
                    (ax_mp ((eq (mul (d1) (suc x)) (suc x)) (iff (le (mul (d1) (suc x)) (mul (fst a) (suc x))) (le (suc x) (mul (fst a) (suc x)))))
                      (leeq1 ((mul (d1) (suc x)) (suc x) (mul (fst a) (suc x))))
                      (mul11 ((suc x))))
                    (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (le (d1) (fst a)) (le (mul (d1) (suc x)) (mul (fst a) (suc x))))
                      (lemul1a ((d1) (fst a) (suc x)))
                      (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (an (an (an (le (d1) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a))) (le (d1) (fst a)))
                        (an3l ((le (d1) (fst a)) (lt (d0) (snd a)) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a)))) (dvd (suc (mul (fst a) (suc x))) (snd a))))
                        (:conv (im (an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (an (an (an (le (d1) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a))))
                          (im
                            (an (an (eqs (pset a) A) (eq n (snd a))) (el x A))
                            (an
                              (an
                                (an
                                  (:sym (:unfold lt ((d0) (fst a)) ()
                                    (le
                                      (:sym (:unfold d1 () ()
                                        (suc (d0))))
                                      (fst a))))
                                  (lt (d0) (snd a)))
                                (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a)))))
                              (dvd (suc (mul (fst a) (suc x))) (snd a))))
                          H1)))))
                (letrd ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (suc (mul (fst a) (suc x))) (snd a) n)
                  (dvdle ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (suc (mul (fst a) (suc x))) (snd a))
                    (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (lt (d0) (snd a)) (ne (snd a) (d0)))
                      (ltner ((d0) (snd a)))
                      (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (an (an (an (lt (d0) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a))) (lt (d0) (snd a)))
                        (anllr ((lt (d0) (fst a)) (lt (d0) (snd a)) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a)))) (dvd (suc (mul (fst a) (suc x))) (snd a))))
                        H1))
                    (anrd ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (an (an (lt (d0) (fst a)) (lt (d0) (snd a))) (al y (im (an (lt (d0) y) (le y x)) (dvd y (fst a))))) (dvd (suc (mul (fst a) (suc x))) (snd a)))
                      H1))
                  (syl ((an (an (eqs (pset a) A) (eq n (snd a))) (el x A)) (eq n (snd a)) (le (snd a) n))
                    (eqler (n (snd a)))
                    (anlr ((eqs (pset a) A) (eq n (snd a)) (el x A)))))))))))))))

(local theorem psetfn ((a nat) (x nat) (p wff (x)) (v nat (x))) ()
  (im (finite (ab x p)) (ex a (al x (im p (eq (app (pset a) x) v)))))
((y nat))
(rsyl ((finite (ab x p)) (ex a (eqs (pset a) (res (lam y (sbn y x v)) (ab x p)))) (ex a (al x (im p (eq (app (pset a) x) v)))))
  (sylib ((finite (ab x p)) (finite (res (lam y (sbn y x v)) (ab x p))) (ex a (eqs (pset a) (res (lam y (sbn y x v)) (ab x p)))))
    (expset ((res (lam y (sbn y x v)) (ab x p)) a))
    (finlam ((ab x p) y (sbn y x v))))
  (eximi (a (eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) (al x (im p (eq (app (pset a) x) v))))
    (ialdh (x (eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) (im p (eq (app (pset a) x) v)))
      (nfeqs (x (pset a) (res (lam y (sbn y x v)) (ab x p)))
        (nfsv ((pset a) x))
        (nfres (x (lam y (sbn y x v)) (ab x p))
          (nflam (x y (sbn y x v))
            (nfsbn1 (x y v)))
          (nfab1 (x p))))
      (exp ((eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p (eq (app (pset a) x) v))
        (eqtrd ((an (eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p) (app (pset a) x) (app (res (lam y (sbn y x v)) (ab x p)) x) v)
          (anwl ((eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p (eq (app (pset a) x) (app (res (lam y (sbn y x v)) (ab x p)) x)))
            (appeq1 ((pset a) (res (lam y (sbn y x v)) (ab x p)) x)))
          (syl6eq ((an (eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p) (app (res (lam y (sbn y x v)) (ab x p)) x) (app (lam y (sbn y x v)) x) v)
            (ax_mp ((eq (app (lam x v) x) v) (eq (app (lam y (sbn y x v)) x) v))
              (ax_mp ((eq (app (lam x v) x) (app (lam y (sbn y x v)) x)) (im (eq (app (lam x v) x) v) (eq (app (lam y (sbn y x v)) x) v)))
                (eqtr3 ((app (lam y (sbn y x v)) x) (app (lam x v) x) v))
                (ax_mp ((eqs (lam x v) (lam y (sbn y x v))) (eq (app (lam x v) x) (app (lam y (sbn y x v)) x)))
                  (appeq1 ((lam x v) (lam y (sbn y x v)) x))
                  (cbvlams (x y v))))
              (applam (x v)))
            (anwr ((eqs (pset a) (res (lam y (sbn y x v)) (ab x p))) p (eq (app (res (lam y (sbn y x v)) (ab x p)) x) (app (lam y (sbn y x v)) x)))
              (sylbir (p (el x (ab x p)) (eq (app (res (lam y (sbn y x v)) (ab x p)) x) (app (lam y (sbn y x v)) x)))
                (abid (x p))
                (resapp ((ab x p) (lam y (sbn y x v)) x)))))))))))

(def rec ((z nat ()) (S set ()) (n nat ())) (nat ())
((a nat) (i nat) (v nat))
(the (ab v (ex a (an (an (eq (app (pset a) (d0)) z) (eq (app (pset a) n) v)) (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))))))))

(local theorem receqd ((_G wff ()) (z1 nat ()) (z2 nat ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ()))
  ((hz (im _G (eq z1 z2)))
   (hS (im _G (eqs S1 S2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (rec z1 S1 n1) (rec z2 S2 n2)))
((a nat) (i nat) (v nat))
(:conv (im _G (eq (rec z1 S1 n1) (rec z2 S2 n2)))
  (im
    _G
    (eq
      (:unfold rec (z1 S1 n1) (a i v)
        (the (ab v (ex a (an (an (eq (app (pset a) (d0)) z1) (eq (app (pset a) n1) v)) (al i (im (lt i n1) (eq (app (pset a) (suc i)) (app S1 (app (pset a) i))))))))))
      (:unfold rec (z2 S2 n2) (a i v)
        (the (ab v (ex a (an (an (eq (app (pset a) (d0)) z2) (eq (app (pset a) n2) v)) (al i (im (lt i n2) (eq (app (pset a) (suc i)) (app S2 (app (pset a) i))))))))))))
  (theeqd (_G (ab v (ex a (an (an (eq (app (pset a) (d0)) z1) (eq (app (pset a) n1) v)) (al i (im (lt i n1) (eq (app (pset a) (suc i)) (app S1 (app (pset a) i)))))))) (ab v (ex a (an (an (eq (app (pset a) (d0)) z2) (eq (app (pset a) n2) v)) (al i (im (lt i n2) (eq (app (pset a) (suc i)) (app S2 (app (pset a) i)))))))))
    (abeqd (_G v (ex a (an (an (eq (app (pset a) (d0)) z1) (eq (app (pset a) n1) v)) (al i (im (lt i n1) (eq (app (pset a) (suc i)) (app S1 (app (pset a) i))))))) (ex a (an (an (eq (app (pset a) (d0)) z2) (eq (app (pset a) n2) v)) (al i (im (lt i n2) (eq (app (pset a) (suc i)) (app S2 (app (pset a) i))))))))
      (exeqd (_G a (an (an (eq (app (pset a) (d0)) z1) (eq (app (pset a) n1) v)) (al i (im (lt i n1) (eq (app (pset a) (suc i)) (app S1 (app (pset a) i)))))) (an (an (eq (app (pset a) (d0)) z2) (eq (app (pset a) n2) v)) (al i (im (lt i n2) (eq (app (pset a) (suc i)) (app S2 (app (pset a) i)))))))
        (aneqd (_G (an (eq (app (pset a) (d0)) z1) (eq (app (pset a) n1) v)) (an (eq (app (pset a) (d0)) z2) (eq (app (pset a) n2) v)) (al i (im (lt i n1) (eq (app (pset a) (suc i)) (app S1 (app (pset a) i))))) (al i (im (lt i n2) (eq (app (pset a) (suc i)) (app S2 (app (pset a) i))))))
          (aneqd (_G (eq (app (pset a) (d0)) z1) (eq (app (pset a) (d0)) z2) (eq (app (pset a) n1) v) (eq (app (pset a) n2) v))
            (eqeqd (_G (app (pset a) (d0)) (app (pset a) (d0)) z1 z2)
              (eqidd (_G (app (pset a) (d0))))
              hz)
            (eqeqd (_G (app (pset a) n1) (app (pset a) n2) v v)
              (appeqd (_G (pset a) (pset a) n1 n2)
                (eqsidd (_G (pset a)))
                hn)
              (eqidd (_G v))))
          (aleqd (_G i (im (lt i n1) (eq (app (pset a) (suc i)) (app S1 (app (pset a) i)))) (im (lt i n2) (eq (app (pset a) (suc i)) (app S2 (app (pset a) i)))))
            (imeqd (_G (lt i n1) (lt i n2) (eq (app (pset a) (suc i)) (app S1 (app (pset a) i))) (eq (app (pset a) (suc i)) (app S2 (app (pset a) i))))
              (lteqd (_G i i n1 n2)
                (eqidd (_G i))
                hn)
              (eqeqd (_G (app (pset a) (suc i)) (app (pset a) (suc i)) (app S1 (app (pset a) i)) (app S2 (app (pset a) i)))
                (eqidd (_G (app (pset a) (suc i))))
                (appeqd (_G S1 S2 (app (pset a) i) (app (pset a) i))
                  hS
                  (eqidd (_G (app (pset a) i)))))))))))))

(local theorem receq ((z1 nat ()) (z2 nat ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq z1 z2) (im (eqs S1 S2) (im (eq n1 n2) (eq (rec z1 S1 n1) (rec z2 S2 n2)))))
()
(exp ((eq z1 z2) (eqs S1 S2) (im (eq n1 n2) (eq (rec z1 S1 n1) (rec z2 S2 n2))))
  (exp ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eq (rec z1 S1 n1) (rec z2 S2 n2)))
    (receqd ((an (an (eq z1 z2) (eqs S1 S2)) (eq n1 n2)) z1 z2 S1 S2 n1 n2)
      (anwl ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eq z1 z2))
        (anl ((eq z1 z2) (eqs S1 S2))))
      (anwl ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eqs S1 S2))
        (anr ((eq z1 z2) (eqs S1 S2))))
      (anr ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2)))))))

(local theorem receq1d ((G wff ()) (z1 nat ()) (z2 nat ()) (S set ()) (n nat ()))
  ((h (im G (eq z1 z2))))
  (im G (eq (rec z1 S n) (rec z2 S n)))
()
(receqd (G z1 z2 S S n n)
  h
  (eqsidd (G S))
  (eqidd (G n))))

(local theorem receq1 ((z1 nat ()) (z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq z1 z2) (eq (rec z1 S n) (rec z2 S n)))
()
(receq1d ((eq z1 z2) z1 z2 S n)
  (id ((eq z1 z2)))))

(local theorem receq2d ((G wff ()) (z nat ()) (S1 set ()) (S2 set ()) (n nat ()))
  ((h (im G (eqs S1 S2))))
  (im G (eq (rec z S1 n) (rec z S2 n)))
()
(receqd (G z z S1 S2 n n)
  (eqidd (G z))
  h
  (eqidd (G n))))

(local theorem receq2 ((z nat ()) (S1 set ()) (S2 set ()) (n nat ())) ()
  (im (eqs S1 S2) (eq (rec z S1 n) (rec z S2 n)))
()
(receq2d ((eqs S1 S2) z S1 S2 n)
  (id ((eqs S1 S2)))))

(local theorem receq3d ((G wff ()) (z nat ()) (S set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (rec z S n1) (rec z S n2)))
()
(receqd (G z z S S n1 n2)
  (eqidd (G z))
  (eqsidd (G S))
  h))

(local theorem receq3 ((z nat ()) (S set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (rec z S n1) (rec z S n2)))
()
(receq3d ((eq n1 n2) z S n1 n2)
  (id ((eq n1 n2)))))

(local theorem reclem ((G wff ()) (S set ()) (a nat ()) (n nat ()) (v nat ()) (z nat ()) (i nat))
  ((h1 (im G (eq (app (pset a) (d0)) z)))
   (h2 (im G (eq (app (pset a) n) v)))
   (h3 (im G (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))))))
  (im G (eq (rec z S n) v))
((b nat) (u nat) (x nat) (y nat))
(:let H1 (anlr ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt y n) (eq (app (pset b) y) (app (pset a) y))))
(:let H2 (lteq1 (i y n))
(:let H3 (suceq (i y))
(:let H4 (pseteq (b a))
(:let H5 (anwr ((an G (eq u v)) (eq b a) (eqs (pset b) (pset a)))
  H4)
(:conv (im G (eq (rec z S n) v))
  (im
    G
    (eq
      (:unfold rec (z S n) (b i u)
        (the (ab u (ex b (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))))
      v))
  (eqtheabd (G v u (ex b (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))
    (ibid (G (ex b (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (eq u v))
      (eexda (b G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq u v))
        (eqtr3d ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) u (app (pset b) n) v)
          (anwr (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq (app (pset b) n) u))
            (anlr ((eq (app (pset b) (d0)) z) (eq (app (pset b) n) u) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))
          (eqtrd ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (app (pset b) n) (app (pset a) n) v)
            (indlt ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) x y n (eq (app (pset b) x) (app (pset a) x)) (eq (app (pset b) (d0)) (app (pset a) (d0))) (eq (app (pset b) n) (app (pset a) n)) (eq (app (pset b) y) (app (pset a) y)) (eq (app (pset b) (suc y)) (app (pset a) (suc y))))
              (eqeqd ((eq x (d0)) (app (pset b) x) (app (pset b) (d0)) (app (pset a) x) (app (pset a) (d0)))
                (appeq2 ((pset b) x (d0)))
                (appeq2 ((pset a) x (d0))))
              (eqeqd ((eq x y) (app (pset b) x) (app (pset b) y) (app (pset a) x) (app (pset a) y))
                (appeq2 ((pset b) x y))
                (appeq2 ((pset a) x y)))
              (eqeqd ((eq x (suc y)) (app (pset b) x) (app (pset b) (suc y)) (app (pset a) x) (app (pset a) (suc y)))
                (appeq2 ((pset b) x (suc y)))
                (appeq2 ((pset a) x (suc y))))
              (eqeqd ((eq x n) (app (pset b) x) (app (pset b) n) (app (pset a) x) (app (pset a) n))
                (appeq2 ((pset b) x n))
                (appeq2 ((pset a) x n)))
              (eqtr4d ((an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (app (pset b) (d0)) z (app (pset a) (d0)))
                (anwr (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq (app (pset b) (d0)) z))
                  (anll ((eq (app (pset b) (d0)) z) (eq (app (pset b) n) u) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))
                (anwl (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq (app (pset a) (d0)) z))
                  h1))
              (eqtrd ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt y n)) (eq (app (pset b) y) (app (pset a) y))) (app (pset b) (suc y)) (app S (app (pset b) y)) (app (pset a) (suc y)))
                (mpd ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt y n)) (eq (app (pset b) y) (app (pset a) y))) (lt y n) (eq (app (pset b) (suc y)) (app S (app (pset b) y))))
                  H1
                  (rsyl ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt y n)) (eq (app (pset b) y) (app (pset a) y))) (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (im (lt y n) (eq (app (pset b) (suc y)) (app S (app (pset b) y)))))
                    (anllr (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (lt y n) (eq (app (pset b) y) (app (pset a) y))))
                    (anwr ((an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))) (im (lt y n) (eq (app (pset b) (suc y)) (app S (app (pset b) y)))))
                      (eale (i y (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))) (im (lt y n) (eq (app (pset b) (suc y)) (app S (app (pset b) y)))))
                        (imeqd ((eq i y) (lt i n) (lt y n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))) (eq (app (pset b) (suc y)) (app S (app (pset b) y))))
                          H2
                          (eqeqd ((eq i y) (app (pset b) (suc i)) (app (pset b) (suc y)) (app S (app (pset b) i)) (app S (app (pset b) y)))
                            (appeq2d ((eq i y) (pset b) (suc i) (suc y))
                              H3)
                            (appeq2d ((eq i y) S (app (pset b) i) (app (pset b) y))
                              (appeq2 ((pset b) i y)))))))))
                (eqtr4d ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt y n)) (eq (app (pset b) y) (app (pset a) y))) (app S (app (pset b) y)) (app S (app (pset a) y)) (app (pset a) (suc y)))
                  (anwr ((an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt y n)) (eq (app (pset b) y) (app (pset a) y)) (eq (app S (app (pset b) y)) (app S (app (pset a) y))))
                    (appeq2 (S (app (pset b) y) (app (pset a) y))))
                  (mpd ((an (an (an G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))) (lt y n)) (eq (app (pset b) y) (app (pset a) y))) (lt y n) (eq (app (pset a) (suc y)) (app S (app (pset a) y))))
                    H1
                    (anw3l (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (lt y n) (eq (app (pset b) y) (app (pset a) y)) (im (lt y n) (eq (app (pset a) (suc y)) (app S (app (pset a) y)))))
                      (rsyl (G (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))) (im (lt y n) (eq (app (pset a) (suc y)) (app S (app (pset a) y)))))
                        h3
                        (eale (i y (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))) (im (lt y n) (eq (app (pset a) (suc y)) (app S (app (pset a) y)))))
                          (imeqd ((eq i y) (lt i n) (lt y n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))) (eq (app (pset a) (suc y)) (app S (app (pset a) y))))
                            H2
                            (eqeqd ((eq i y) (app (pset a) (suc i)) (app (pset a) (suc y)) (app S (app (pset a) i)) (app S (app (pset a) y)))
                              (appeq2d ((eq i y) (pset a) (suc i) (suc y))
                                H3)
                              (appeq2d ((eq i y) S (app (pset a) i) (app (pset a) y))
                                (appeq2 ((pset a) i y))))))))))))
            (anwl (G (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))) (eq (app (pset a) n) v))
              h2))))
      (exp (G (eq u v) (ex b (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))))
        (iexde (b (an G (eq u v)) a (an (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))))))
          (iand ((an (an G (eq u v)) (eq b a)) (an (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u)) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))
            (iand ((an (an G (eq u v)) (eq b a)) (eq (app (pset b) (d0)) z) (eq (app (pset b) n) u))
              (eqtrd ((an (an G (eq u v)) (eq b a)) (app (pset b) (d0)) (app (pset a) (d0)) z)
                (appeq1d ((an (an G (eq u v)) (eq b a)) (pset b) (pset a) (d0))
                  H5)
                (anwll (G (eq u v) (eq b a) (eq (app (pset a) (d0)) z))
                  h1))
              (eqtrd ((an (an G (eq u v)) (eq b a)) (app (pset b) n) (app (pset a) n) u)
                (appeq1d ((an (an G (eq u v)) (eq b a)) (pset b) (pset a) n)
                  H5)
                (eqtr4d ((an (an G (eq u v)) (eq b a)) (app (pset a) n) v u)
                  (anwll (G (eq u v) (eq b a) (eq (app (pset a) n) v))
                    h2)
                  (anlr (G (eq u v) (eq b a))))))
            (mpbird ((an (an G (eq u v)) (eq b a)) (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))) (al i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))))))
              (aleqd ((an (an G (eq u v)) (eq b a)) i (im (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i)))) (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))))
                (imeq2d ((an (an G (eq u v)) (eq b a)) (lt i n) (eq (app (pset b) (suc i)) (app S (app (pset b) i))) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))
                  (eqeqd ((an (an G (eq u v)) (eq b a)) (app (pset b) (suc i)) (app (pset a) (suc i)) (app S (app (pset b) i)) (app S (app (pset a) i)))
                    (appeq1d ((an (an G (eq u v)) (eq b a)) (pset b) (pset a) (suc i))
                      H5)
                    (appeq2d ((an (an G (eq u v)) (eq b a)) S (app (pset b) i) (app (pset a) i))
                      (appeq1d ((an (an G (eq u v)) (eq b a)) (pset b) (pset a) i)
                        H5)))))
              (anwll (G (eq u v) (eq b a) (al i (im (lt i n) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))))
                h3))))))))))))))

(theorem rec0 ((z nat ()) (S set ())) ()
  (eq (rec z S (d0)) z)
((a nat) (i nat) (x nat))
(:let H1 (mpi ((al x (im (eq x (d0)) (eq (app (pset a) x) z))) (eq (d0) (d0)) (eq (app (pset a) (d0)) z))
  (eqid ((d0)))
  (eale (x (d0) (im (eq x (d0)) (eq (app (pset a) x) z)) (im (eq (d0) (d0)) (eq (app (pset a) (d0)) z)))
    (imeqd ((eq x (d0)) (eq x (d0)) (eq (d0) (d0)) (eq (app (pset a) x) z) (eq (app (pset a) (d0)) z))
      (eqeq1 (x (d0) (d0)))
      (eqeq1d ((eq x (d0)) (app (pset a) x) (app (pset a) (d0)) z)
        (appeq2 ((pset a) x (d0)))))))
(ax_mp ((ex a (al x (im (eq x (d0)) (eq (app (pset a) x) z)))) (eq (rec z S (d0)) z))
  (eex (a (al x (im (eq x (d0)) (eq (app (pset a) x) z))) (eq (rec z S (d0)) z))
    (reclem ((al x (im (eq x (d0)) (eq (app (pset a) x) z))) S a (d0) z z i)
      H1
      H1
      (a1i ((al x (im (eq x (d0)) (eq (app (pset a) x) z))) (al i (im (lt i (d0)) (eq (app (pset a) (suc i)) (app S (app (pset a) i))))))
        (ax_gen (i (im (lt i (d0)) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))))
          (ax_mp ((not (lt i (d0))) (im (lt i (d0)) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))))
            (absurd ((lt i (d0)) (eq (app (pset a) (suc i)) (app S (app (pset a) i)))))
            (lt02 (i)))))))
  (ax_mp ((finite (ab x (eq x (d0)))) (ex a (al x (im (eq x (d0)) (eq (app (pset a) x) z)))))
    (psetfn (a x (eq x (d0)) z))
    (snfin ((d0) x))))))

(theorem recS ((z nat ()) (S set ()) (n nat ())) ()
  (eq (rec z S (suc n)) (app S (rec z S n)))
((a nat) (k nat) (m nat) (x nat) (y nat))
(:let H1 (ifneg ((eq x (suc k)) (app S (rec z S k)) (rec z S x)))
(:let H2 (anr ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)))
(:let H3 (anlr ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (le y k)))
(:let H4 (mpd ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (rec z S y) (app (pset a) y)))
  H3
  (anwr ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k) (im (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (rec z S y) (app (pset a) y))))
    (ealde ((eq (rec z S y) (app (pset a) y)) x (le y k) y (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))
      (syl6 ((an (le y k) (eq x y)) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (eq (app (pset a) y) (rec z S y)) (eq (rec z S y) (app (pset a) y)))
        (eqcom ((app (pset a) y) (rec z S y)))
        (bi1d ((an (le y k) (eq x y)) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (eq (app (pset a) y) (rec z S y)))
          (bitrd ((an (le y k) (eq x y)) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))) (eq (app (pset a) y) (rec z S y)))
            (syl ((an (le y k) (eq x y)) (le x (suc k)) (iff (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))
              (biim1 ((le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))
              (mpbird ((an (le y k) (eq x y)) (le y (suc k)) (le x (suc k)))
                (anwr ((le y k) (eq x y) (iff (le x (suc k)) (le y (suc k))))
                  (leeq1 (x y (suc k))))
                (letrd ((an (le y k) (eq x y)) y k (suc k))
                  (anl ((le y k) (eq x y)))
                  (a1i ((an (le y k) (eq x y)) (le k (suc k)))
                    (lesucid (k))))))
            (eqeqd ((an (le y k) (eq x y)) (app (pset a) x) (app (pset a) y) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S y))
              (anwr ((le y k) (eq x y) (eq (app (pset a) x) (app (pset a) y)))
                (appeq2 ((pset a) x y)))
              (eqtrd ((an (le y k) (eq x y)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S x) (rec z S y))
                (syl ((an (le y k) (eq x y)) (not (eq x (suc k))) (eq (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S x)))
                  H1
                  (syl ((an (le y k) (eq x y)) (lt x (suc k)) (not (eq x (suc k))))
                    (:conv (im (lt x (suc k)) (not (eq x (suc k))))
                      (im
                        (lt x (suc k))
                        (:sym (:unfold ne (x (suc k)) ()
                          (not (eq x (suc k))))))
                      (ltne (x (suc k))))
                    (sylib ((an (le y k) (eq x y)) (le x k) (lt x (suc k)))
                      (leltsuc (x k))
                      (imp ((le y k) (eq x y) (le x k))
                        (syl5ibrcom ((le y k) (le x k) (eq x y) (le y k))
                          (leeq1 (x y k))
                          (id ((le y k))))))))
                (anwr ((le y k) (eq x y) (eq (rec z S x) (rec z S y)))
                  (receq3 (z S x y)))))))))))
(trud ((eq (rec z S (suc n)) (app S (rec z S n))))
  (indstr ((wtru) m k n (eq (rec z S (suc m)) (app S (rec z S m))) (eq (rec z S (suc n)) (app S (rec z S n))) (eq (rec z S (suc k)) (app S (rec z S k))))
    (eqeqd ((eq m k) (rec z S (suc m)) (rec z S (suc k)) (app S (rec z S m)) (app S (rec z S k)))
      (receq3d ((eq m k) z S (suc m) (suc k))
        (suceq (m k)))
      (appeq2d ((eq m k) S (rec z S m) (rec z S k))
        (receq3 (z S m k))))
    (eqeqd ((eq m n) (rec z S (suc m)) (rec z S (suc n)) (app S (rec z S m)) (app S (rec z S n)))
      (receq3d ((eq m n) z S (suc m) (suc n))
        (suceq (m n)))
      (appeq2d ((eq m n) S (rec z S m) (rec z S n))
        (receq3 (z S m n))))
    (anwr ((wtru) (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (eq (rec z S (suc k)) (app S (rec z S k))))
      (mpi ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (ex a (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (eq (rec z S (suc k)) (app S (rec z S k))))
        (ax_mp ((finite (ab x (le x (suc k)))) (ex a (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))))
          (psetfn (a x (le x (suc k)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))
          (lefin ((suc k) x)))
        (eexda (a (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (rec z S (suc k)) (app S (rec z S k))))
          (reclem ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) S a (suc k) (app S (rec z S k)) z y)
            (anwr ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (app (pset a) (d0)) z))
              (syl6eq ((al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (app (pset a) (d0)) (rec z S (d0)) z)
                (rec0 (z S))
                (mpi ((al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (le (d0) (suc k)) (eq (app (pset a) (d0)) (rec z S (d0))))
                  (le01 ((suc k)))
                  (eale (x (d0) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (im (le (d0) (suc k)) (eq (app (pset a) (d0)) (rec z S (d0)))))
                    (imeqd ((eq x (d0)) (le x (suc k)) (le (d0) (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))) (eq (app (pset a) (d0)) (rec z S (d0))))
                      (leeq1 (x (d0) (suc k)))
                      (eqeqd ((eq x (d0)) (app (pset a) x) (app (pset a) (d0)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S (d0)))
                        (appeq2 ((pset a) x (d0)))
                        (eqtrd ((eq x (d0)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S x) (rec z S (d0)))
                          (syl ((eq x (d0)) (not (eq x (suc k))) (eq (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (rec z S x)))
                            H1
                            (ax_mp ((im (eq x (suc k)) (not (eq x (d0)))) (im (eq x (d0)) (not (eq x (suc k)))))
                              (con2 ((eq x (suc k)) (eq x (d0))))
                              (:conv (im (eq x (suc k)) (not (eq x (d0))))
                                (im
                                  (eq x (suc k))
                                  (:sym (:unfold ne (x (d0)) ()
                                    (not (eq x (d0))))))
                                (sucne0 (x k)))))
                          (receq3 (z S x (d0))))))))))
            (anwr ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (eq (app (pset a) (suc k)) (app S (rec z S k))))
              (mpi ((al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (le (suc k) (suc k)) (eq (app (pset a) (suc k)) (app S (rec z S k))))
                (leid ((suc k)))
                (eale (x (suc k) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (im (le (suc k) (suc k)) (eq (app (pset a) (suc k)) (app S (rec z S k)))))
                  (imeqd ((eq x (suc k)) (le x (suc k)) (le (suc k) (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))) (eq (app (pset a) (suc k)) (app S (rec z S k))))
                    (leeq1 (x (suc k) (suc k)))
                    (eqeqd ((eq x (suc k)) (app (pset a) x) (app (pset a) (suc k)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (app S (rec z S k)))
                      (appeq2 ((pset a) x (suc k)))
                      (ifpos ((eq x (suc k)) (app S (rec z S k)) (rec z S x))))))))
            (iald (y (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (im (lt y (suc k)) (eq (app (pset a) (suc y)) (app S (app (pset a) y)))))
              (syl5bir ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (lt y (suc k)) (le y k) (eq (app (pset a) (suc y)) (app S (app (pset a) y))))
                (leltsuc (y k))
                (exp ((an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k) (eq (app (pset a) (suc y)) (app S (app (pset a) y))))
                  (eqtrd ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (app S (app (pset a) y)))
                    (mpd ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (le (suc y) (suc k)) (eq (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y)))))
                      (sylib ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (le y k) (le (suc y) (suc k)))
                        (lesuc (y k))
                        H2)
                      (rsyl ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (im (le (suc y) (suc k)) (eq (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))))))
                        H3
                        (eale (x (suc y) (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))) (im (le (suc y) (suc k)) (eq (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))))))
                          (imeqd ((eq x (suc y)) (le x (suc k)) (le (suc y) (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))) (eq (app (pset a) (suc y)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y)))))
                            (leeq1 (x (suc y) (suc k)))
                            (eqeqd ((eq x (suc y)) (app (pset a) x) (app (pset a) (suc y)) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))))
                              (appeq2 ((pset a) x (suc y)))
                              (ifeqd ((eq x (suc y)) (eq x (suc k)) (eq y k) (app S (rec z S k)) (app S (rec z S k)) (rec z S x) (rec z S (suc y)))
                                (syl6bb ((eq x (suc y)) (eq x (suc k)) (eq (suc y) (suc k)) (eq y k))
                                  (peano2 (y k))
                                  (eqeq1 (x (suc y) (suc k))))
                                (eqidd ((eq x (suc y)) (app S (rec z S k))))
                                (receq3 (z S x (suc y)))))))))
                    (casesda ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k) (eq (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (app S (app (pset a) y))))
                      (eqtr4d ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k)) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (app S (rec z S k)) (app S (app (pset a) y)))
                        (anwr ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k) (eq (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (app S (rec z S k))))
                          (ifpos ((eq y k) (app S (rec z S k)) (rec z S (suc y)))))
                        (appeq2d ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k)) S (app (pset a) y) (rec z S k))
                          (eqtr3d ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k)) (app (pset a) y) (rec z S y) (rec z S k))
                            (anwl ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k) (eq (rec z S y) (app (pset a) y)))
                              H4)
                            (anwr ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (eq y k) (eq (rec z S y) (rec z S k)))
                              (receq3 (z S y k))))))
                      (eqtrd ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (rec z S (suc y)) (app S (app (pset a) y)))
                        (anwr ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k)) (eq (if (eq y k) (app S (rec z S k)) (rec z S (suc y))) (rec z S (suc y))))
                          (ifneg ((eq y k) (app S (rec z S k)) (rec z S (suc y)))))
                        (eqtrd ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) (rec z S (suc y)) (app S (rec z S y)) (app S (app (pset a) y)))
                          (mpd ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) (lt y k) (eq (rec z S (suc y)) (app S (rec z S y))))
                            (imp ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k)) (lt y k))
                              (syl ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (or (lt y k) (eq y k)) (im (not (eq y k)) (lt y k)))
                                (:conv (im (or (lt y k) (eq y k)) (im (not (eq y k)) (lt y k)))
                                  (im
                                    (or (lt y k) (eq y k))
                                    (:sym (:unfold or ((eq y k) (lt y k)) ()
                                      (im (not (eq y k)) (lt y k)))))
                                  (orcom ((lt y k) (eq y k))))
                                (sylib ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (le y k) (or (lt y k) (eq y k)))
                                  (leloe (y k))
                                  H2)))
                            (rsyl ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (im (lt y k) (eq (rec z S (suc y)) (app S (rec z S y)))))
                              (an3l ((al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x))))) (le y k) (not (eq y k))))
                              (eale (m y (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m)))) (im (lt y k) (eq (rec z S (suc y)) (app S (rec z S y)))))
                                (imeqd ((eq m y) (lt m k) (lt y k) (eq (rec z S (suc m)) (app S (rec z S m))) (eq (rec z S (suc y)) (app S (rec z S y))))
                                  (lteq1 (m y k))
                                  (eqeqd ((eq m y) (rec z S (suc m)) (rec z S (suc y)) (app S (rec z S m)) (app S (rec z S y)))
                                    (receq3d ((eq m y) z S (suc m) (suc y))
                                      (suceq (m y)))
                                    (appeq2d ((eq m y) S (rec z S m) (rec z S y))
                                      (receq3 (z S m y))))))))
                          (appeq2d ((an (an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k))) S (rec z S y) (app (pset a) y))
                            (anwl ((an (an (al m (im (lt m k) (eq (rec z S (suc m)) (app S (rec z S m))))) (al x (im (le x (suc k)) (eq (app (pset a) x) (if (eq x (suc k)) (app S (rec z S k)) (rec z S x)))))) (le y k)) (not (eq y k)) (eq (rec z S y) (app (pset a) y)))
                              H4))))))))))))))))))))

(local def recnaux ((z nat ()) (S set ()) (n nat ())) (nat ())
((p nat))
(rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n))

(local theorem recnauxeqd ((_G wff ()) (z1 nat ()) (z2 nat ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ()))
  ((hz (im _G (eq z1 z2)))
   (hS (im _G (eqs S1 S2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (recnaux z1 S1 n1) (recnaux z2 S2 n2)))
((p nat))
(:conv (im _G (eq (recnaux z1 S1 n1) (recnaux z2 S2 n2)))
  (im
    _G
    (eq
      (:unfold recnaux (z1 S1 n1) (p)
        (rec (pr (d0) z1) (lam p (pr (suc (fst p)) (app S1 p))) n1))
      (:unfold recnaux (z2 S2 n2) (p)
        (rec (pr (d0) z2) (lam p (pr (suc (fst p)) (app S2 p))) n2))))
  (receqd (_G (pr (d0) z1) (pr (d0) z2) (lam p (pr (suc (fst p)) (app S1 p))) (lam p (pr (suc (fst p)) (app S2 p))) n1 n2)
    (preqd (_G (d0) (d0) z1 z2)
      (eqidd (_G (d0)))
      hz)
    (lameqd (_G p (pr (suc (fst p)) (app S1 p)) (pr (suc (fst p)) (app S2 p)))
      (preqd (_G (suc (fst p)) (suc (fst p)) (app S1 p) (app S2 p))
        (eqidd (_G (suc (fst p))))
        (appeqd (_G S1 S2 p p)
          hS
          (eqidd (_G p)))))
    hn)))

(local theorem recnauxeq ((z1 nat ()) (z2 nat ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq z1 z2) (im (eqs S1 S2) (im (eq n1 n2) (eq (recnaux z1 S1 n1) (recnaux z2 S2 n2)))))
()
(exp ((eq z1 z2) (eqs S1 S2) (im (eq n1 n2) (eq (recnaux z1 S1 n1) (recnaux z2 S2 n2))))
  (exp ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eq (recnaux z1 S1 n1) (recnaux z2 S2 n2)))
    (recnauxeqd ((an (an (eq z1 z2) (eqs S1 S2)) (eq n1 n2)) z1 z2 S1 S2 n1 n2)
      (anwl ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eq z1 z2))
        (anl ((eq z1 z2) (eqs S1 S2))))
      (anwl ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eqs S1 S2))
        (anr ((eq z1 z2) (eqs S1 S2))))
      (anr ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2)))))))

(local theorem recnauxeq1d ((G wff ()) (z1 nat ()) (z2 nat ()) (S set ()) (n nat ()))
  ((h (im G (eq z1 z2))))
  (im G (eq (recnaux z1 S n) (recnaux z2 S n)))
()
(recnauxeqd (G z1 z2 S S n n)
  h
  (eqsidd (G S))
  (eqidd (G n))))

(local theorem recnauxeq1 ((z1 nat ()) (z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq z1 z2) (eq (recnaux z1 S n) (recnaux z2 S n)))
()
(recnauxeq1d ((eq z1 z2) z1 z2 S n)
  (id ((eq z1 z2)))))

(local theorem recnauxeq2d ((G wff ()) (z nat ()) (S1 set ()) (S2 set ()) (n nat ()))
  ((h (im G (eqs S1 S2))))
  (im G (eq (recnaux z S1 n) (recnaux z S2 n)))
()
(recnauxeqd (G z z S1 S2 n n)
  (eqidd (G z))
  h
  (eqidd (G n))))

(local theorem recnauxeq2 ((z nat ()) (S1 set ()) (S2 set ()) (n nat ())) ()
  (im (eqs S1 S2) (eq (recnaux z S1 n) (recnaux z S2 n)))
()
(recnauxeq2d ((eqs S1 S2) z S1 S2 n)
  (id ((eqs S1 S2)))))

(local theorem recnauxeq3d ((G wff ()) (z nat ()) (S set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (recnaux z S n1) (recnaux z S n2)))
()
(recnauxeqd (G z z S S n1 n2)
  (eqidd (G z))
  (eqsidd (G S))
  h))

(local theorem recnauxeq3 ((z nat ()) (S set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (recnaux z S n1) (recnaux z S n2)))
()
(recnauxeq3d ((eq n1 n2) z S n1 n2)
  (id ((eq n1 n2)))))

(local theorem recnaux0 ((S set ()) (z nat ())) ()
  (eq (recnaux z S (d0)) (pr (d0) z))
((x1 nat))
(:conv (eq (recnaux z S (d0)) (pr (d0) z))
  (eq
    (:unfold recnaux (z S (d0)) (x1)
      (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0)))
    (pr (d0) z))
  (rec0 ((pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1)))))))

(local theorem recnauxS2 ((S set ()) (n nat ()) (z nat ())) ()
  (eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
((p nat))
(:conv (eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
  (eq
    (:unfold recnaux (z S (suc n)) (p)
      (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) (suc n)))
    (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
  (ax_mp ((eq (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (eq (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))))
    (ax_mp ((eq (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) (suc n)) (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n))) (im (eq (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (eq (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))))
      (eqtr ((rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) (suc n)) (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))))
      (recS ((pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)))
    (:conv (eq (app (lam p (pr (suc (fst p)) (app S p))) (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
      (eq
        (app
          (lam p (pr (suc (fst p)) (app S p)))
          (:sym (:unfold recnaux (z S n) (p)
            (rec (pr (d0) z) (lam p (pr (suc (fst p)) (app S p))) n))))
        (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))
      (applame ((recnaux z S n) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))) p (pr (suc (fst p)) (app S p)))
        (preqd ((eq p (recnaux z S n)) (suc (fst p)) (suc (fst (recnaux z S n))) (app S p) (app S (recnaux z S n)))
          (suceqd ((eq p (recnaux z S n)) (fst p) (fst (recnaux z S n)))
            (fsteq (p (recnaux z S n))))
          (appeq2 (S p (recnaux z S n)))))))))

(local theorem recnauxfst ((S set ()) (n nat ()) (z nat ())) ()
  (eq (fst (recnaux z S n)) n)
((x nat) (y nat))
(ind (x y n (eq (fst (recnaux z S x)) x) (eq (fst (recnaux z S (d0))) (d0)) (eq (fst (recnaux z S n)) n) (eq (fst (recnaux z S y)) y) (eq (fst (recnaux z S (suc y))) (suc y)))
  (eqeqd ((eq x (d0)) (fst (recnaux z S x)) (fst (recnaux z S (d0))) x (d0))
    (fsteqd ((eq x (d0)) (recnaux z S x) (recnaux z S (d0)))
      (recnauxeq3 (z S x (d0))))
    (id ((eq x (d0)))))
  (eqeqd ((eq x y) (fst (recnaux z S x)) (fst (recnaux z S y)) x y)
    (fsteqd ((eq x y) (recnaux z S x) (recnaux z S y))
      (recnauxeq3 (z S x y)))
    (id ((eq x y))))
  (eqeqd ((eq x (suc y)) (fst (recnaux z S x)) (fst (recnaux z S (suc y))) x (suc y))
    (fsteqd ((eq x (suc y)) (recnaux z S x) (recnaux z S (suc y)))
      (recnauxeq3 (z S x (suc y))))
    (id ((eq x (suc y)))))
  (eqeqd ((eq x n) (fst (recnaux z S x)) (fst (recnaux z S n)) x n)
    (fsteqd ((eq x n) (recnaux z S x) (recnaux z S n))
      (recnauxeq3 (z S x n)))
    (id ((eq x n))))
  (ax_mp ((eq (fst (pr (d0) z)) (d0)) (eq (fst (recnaux z S (d0))) (d0)))
    (ax_mp ((eq (fst (recnaux z S (d0))) (fst (pr (d0) z))) (im (eq (fst (pr (d0) z)) (d0)) (eq (fst (recnaux z S (d0))) (d0))))
      (eqtr ((fst (recnaux z S (d0))) (fst (pr (d0) z)) (d0)))
      (ax_mp ((eq (recnaux z S (d0)) (pr (d0) z)) (eq (fst (recnaux z S (d0))) (fst (pr (d0) z))))
        (fsteq ((recnaux z S (d0)) (pr (d0) z)))
        (recnaux0 (S z))))
    (fstpr ((d0) z)))
  (syl5eq ((eq (fst (recnaux z S y)) y) (fst (recnaux z S (suc y))) (suc (fst (recnaux z S y))) (suc y))
    (ax_mp ((eq (fst (pr (suc (fst (recnaux z S y))) (app S (recnaux z S y)))) (suc (fst (recnaux z S y)))) (eq (fst (recnaux z S (suc y))) (suc (fst (recnaux z S y)))))
      (ax_mp ((eq (fst (recnaux z S (suc y))) (fst (pr (suc (fst (recnaux z S y))) (app S (recnaux z S y))))) (im (eq (fst (pr (suc (fst (recnaux z S y))) (app S (recnaux z S y)))) (suc (fst (recnaux z S y)))) (eq (fst (recnaux z S (suc y))) (suc (fst (recnaux z S y))))))
        (eqtr ((fst (recnaux z S (suc y))) (fst (pr (suc (fst (recnaux z S y))) (app S (recnaux z S y)))) (suc (fst (recnaux z S y)))))
        (ax_mp ((eq (recnaux z S (suc y)) (pr (suc (fst (recnaux z S y))) (app S (recnaux z S y)))) (eq (fst (recnaux z S (suc y))) (fst (pr (suc (fst (recnaux z S y))) (app S (recnaux z S y))))))
          (fsteq ((recnaux z S (suc y)) (pr (suc (fst (recnaux z S y))) (app S (recnaux z S y)))))
          (recnauxS2 (S y z))))
      (fstpr ((suc (fst (recnaux z S y))) (app S (recnaux z S y)))))
    (suceq ((fst (recnaux z S y)) y)))))

(local def recn ((z nat ()) (S set ()) (n nat ())) (nat ())
()
(snd (recnaux z S n)))

(local theorem recneqd ((_G wff ()) (z1 nat ()) (z2 nat ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ()))
  ((hz (im _G (eq z1 z2)))
   (hS (im _G (eqs S1 S2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (recn z1 S1 n1) (recn z2 S2 n2)))
()
(:conv (im _G (eq (recn z1 S1 n1) (recn z2 S2 n2)))
  (im
    _G
    (eq
      (:unfold recn (z1 S1 n1) ()
        (snd (recnaux z1 S1 n1)))
      (:unfold recn (z2 S2 n2) ()
        (snd (recnaux z2 S2 n2)))))
  (sndeqd (_G (recnaux z1 S1 n1) (recnaux z2 S2 n2))
    (recnauxeqd (_G z1 z2 S1 S2 n1 n2)
      hz
      hS
      hn))))

(local theorem recneq ((z1 nat ()) (z2 nat ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq z1 z2) (im (eqs S1 S2) (im (eq n1 n2) (eq (recn z1 S1 n1) (recn z2 S2 n2)))))
()
(exp ((eq z1 z2) (eqs S1 S2) (im (eq n1 n2) (eq (recn z1 S1 n1) (recn z2 S2 n2))))
  (exp ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eq (recn z1 S1 n1) (recn z2 S2 n2)))
    (recneqd ((an (an (eq z1 z2) (eqs S1 S2)) (eq n1 n2)) z1 z2 S1 S2 n1 n2)
      (anwl ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eq z1 z2))
        (anl ((eq z1 z2) (eqs S1 S2))))
      (anwl ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eqs S1 S2))
        (anr ((eq z1 z2) (eqs S1 S2))))
      (anr ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2)))))))

(local theorem recneq1d ((G wff ()) (z1 nat ()) (z2 nat ()) (S set ()) (n nat ()))
  ((h (im G (eq z1 z2))))
  (im G (eq (recn z1 S n) (recn z2 S n)))
()
(recneqd (G z1 z2 S S n n)
  h
  (eqsidd (G S))
  (eqidd (G n))))

(local theorem recneq1 ((z1 nat ()) (z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq z1 z2) (eq (recn z1 S n) (recn z2 S n)))
()
(recneq1d ((eq z1 z2) z1 z2 S n)
  (id ((eq z1 z2)))))

(local theorem recneq2d ((G wff ()) (z nat ()) (S1 set ()) (S2 set ()) (n nat ()))
  ((h (im G (eqs S1 S2))))
  (im G (eq (recn z S1 n) (recn z S2 n)))
()
(recneqd (G z z S1 S2 n n)
  (eqidd (G z))
  h
  (eqidd (G n))))

(local theorem recneq2 ((z nat ()) (S1 set ()) (S2 set ()) (n nat ())) ()
  (im (eqs S1 S2) (eq (recn z S1 n) (recn z S2 n)))
()
(recneq2d ((eqs S1 S2) z S1 S2 n)
  (id ((eqs S1 S2)))))

(local theorem recneq3d ((G wff ()) (z nat ()) (S set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (recn z S n1) (recn z S n2)))
()
(recneqd (G z z S S n1 n2)
  (eqidd (G z))
  (eqsidd (G S))
  h))

(local theorem recneq3 ((z nat ()) (S set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (recn z S n1) (recn z S n2)))
()
(recneq3d ((eq n1 n2) z S n1 n2)
  (id ((eq n1 n2)))))

(local theorem recn0 ((S set ()) (z nat ())) ()
  (eq (recn z S (d0)) z)
((x1 nat))
(:conv (eq (recn z S (d0)) z)
  (eq
    (:unfold recn (z S (d0)) ()
      (snd
        (:unfold recnaux (z S (d0)) (x1)
          (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0)))))
    z)
  (ax_mp ((eq (snd (pr (d0) z)) z) (eq (snd (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0))) z))
    (ax_mp ((eq (snd (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0))) (snd (pr (d0) z))) (im (eq (snd (pr (d0) z)) z) (eq (snd (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0))) z)))
      (eqtr ((snd (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0))) (snd (pr (d0) z)) z))
      (ax_mp ((eq (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0)) (pr (d0) z)) (eq (snd (rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0))) (snd (pr (d0) z))))
        (sndeq ((rec (pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1))) (d0)) (pr (d0) z)))
        (rec0 ((pr (d0) z) (lam x1 (pr (suc (fst x1)) (app S x1)))))))
    (sndpr ((d0) z)))))

(local theorem recnS ((S set ()) (n nat ()) (z nat ())) ()
  (eq (recn z S (suc n)) (app S (pr n (recn z S n))))
()
(:conv (eq (recn z S (suc n)) (app S (pr n (recn z S n))))
  (eq
    (:unfold recn (z S (suc n)) ()
      (snd (recnaux z S (suc n))))
    (app
      S
      (pr
        n
        (:unfold recn (z S n) ()
          (snd (recnaux z S n))))))
  (ax_mp ((eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (snd (recnaux z S n))))) (eq (snd (recnaux z S (suc n))) (app S (pr n (snd (recnaux z S n))))))
    (ax_mp ((eq (snd (recnaux z S (suc n))) (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))) (im (eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (snd (recnaux z S n))))) (eq (snd (recnaux z S (suc n))) (app S (pr n (snd (recnaux z S n)))))))
      (eqtr ((snd (recnaux z S (suc n))) (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (snd (recnaux z S n))))))
      (ax_mp ((eq (recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (eq (snd (recnaux z S (suc n))) (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n))))))
        (sndeq ((recnaux z S (suc n)) (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))))
        (recnauxS2 (S n z))))
    (ax_mp ((eq (app S (recnaux z S n)) (app S (pr n (snd (recnaux z S n))))) (eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (snd (recnaux z S n))))))
      (ax_mp ((eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (recnaux z S n))) (im (eq (app S (recnaux z S n)) (app S (pr n (snd (recnaux z S n))))) (eq (snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (pr n (snd (recnaux z S n)))))))
        (eqtr ((snd (pr (suc (fst (recnaux z S n))) (app S (recnaux z S n)))) (app S (recnaux z S n)) (app S (pr n (snd (recnaux z S n))))))
        (sndpr ((suc (fst (recnaux z S n))) (app S (recnaux z S n)))))
      (ax_mp ((eq (recnaux z S n) (pr n (snd (recnaux z S n)))) (eq (app S (recnaux z S n)) (app S (pr n (snd (recnaux z S n))))))
        (appeq2 (S (recnaux z S n) (pr n (snd (recnaux z S n)))))
        (ax_mp ((eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (snd (recnaux z S n)))) (eq (recnaux z S n) (pr n (snd (recnaux z S n)))))
          (ax_mp ((eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (recnaux z S n)) (im (eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (snd (recnaux z S n)))) (eq (recnaux z S n) (pr n (snd (recnaux z S n))))))
            (eqtr3 ((recnaux z S n) (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (snd (recnaux z S n)))))
            (fstsnd ((recnaux z S n))))
          (ax_mp ((eq (fst (recnaux z S n)) n) (eq (pr (fst (recnaux z S n)) (snd (recnaux z S n))) (pr n (snd (recnaux z S n)))))
            (preq1 ((fst (recnaux z S n)) n (snd (recnaux z S n))))
            (recnauxfst (S n z)))))))))

(def pow ((a nat ()) (b nat ())) (nat ())
((n nat))
(rec (d1) (lam n (mul a n)) b))

(local theorem poweqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (pow a1 b1) (pow a2 b2)))
((n nat))
(:conv (im _G (eq (pow a1 b1) (pow a2 b2)))
  (im
    _G
    (eq
      (:unfold pow (a1 b1) (n)
        (rec (d1) (lam n (mul a1 n)) b1))
      (:unfold pow (a2 b2) (n)
        (rec (d1) (lam n (mul a2 n)) b2))))
  (receqd (_G (d1) (d1) (lam n (mul a1 n)) (lam n (mul a2 n)) b1 b2)
    (eqidd (_G (d1)))
    (lameqd (_G n (mul a1 n) (mul a2 n))
      (muleqd (_G a1 a2 n n)
        ha
        (eqidd (_G n))))
    hb)))

(local theorem poweq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (pow a1 b1) (pow a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (pow a1 b1) (pow a2 b2)))
  (poweqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem poweq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (pow a1 b) (pow a2 b)))
()
(poweqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem poweq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (pow a1 b) (pow a2 b)))
()
(poweq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem poweq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (pow a b1) (pow a b2)))
()
(poweqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem poweq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (pow a b1) (pow a b2)))
()
(poweq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(theorem pow0 ((a nat ())) ()
  (eq (pow a (d0)) (d1))
((n nat))
(:conv (eq (pow a (d0)) (d1))
  (eq
    (:unfold pow (a (d0)) (n)
      (rec (d1) (lam n (mul a n)) (d0)))
    (d1))
  (rec0 ((d1) (lam n (mul a n))))))

(theorem powS ((a nat ()) (b nat ())) ()
  (eq (pow a (suc b)) (mul a (pow a b)))
((n nat))
(:conv (eq (pow a (suc b)) (mul a (pow a b)))
  (eq
    (:unfold pow (a (suc b)) (n)
      (rec (d1) (lam n (mul a n)) (suc b)))
    (mul a (pow a b)))
  (ax_mp ((eq (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)) (mul a (pow a b))) (eq (rec (d1) (lam n (mul a n)) (suc b)) (mul a (pow a b))))
    (ax_mp ((eq (rec (d1) (lam n (mul a n)) (suc b)) (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b))) (im (eq (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)) (mul a (pow a b))) (eq (rec (d1) (lam n (mul a n)) (suc b)) (mul a (pow a b)))))
      (eqtr ((rec (d1) (lam n (mul a n)) (suc b)) (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)) (mul a (pow a b))))
      (recS ((d1) (lam n (mul a n)) b)))
    (:conv (eq (app (lam n (mul a n)) (rec (d1) (lam n (mul a n)) b)) (mul a (pow a b)))
      (eq
        (app
          (lam n (mul a n))
          (:sym (:unfold pow (a b) (n)
            (rec (d1) (lam n (mul a n)) b))))
        (mul a (pow a b)))
      (applame ((pow a b) (mul a (pow a b)) n (mul a n))
        (muleq2 (a n (pow a b))))))))

(local theorem powS2 ((a nat ()) (b nat ())) ()
  (eq (pow a (suc b)) (mul (pow a b) a))
()
(ax_mp ((eq (mul a (pow a b)) (mul (pow a b) a)) (eq (pow a (suc b)) (mul (pow a b) a)))
  (ax_mp ((eq (pow a (suc b)) (mul a (pow a b))) (im (eq (mul a (pow a b)) (mul (pow a b) a)) (eq (pow a (suc b)) (mul (pow a b) a))))
    (eqtr ((pow a (suc b)) (mul a (pow a b)) (mul (pow a b) a)))
    (powS (a b)))
  (mulcom (a (pow a b)))))

(local theorem pow12 ((a nat ())) ()
  (eq (pow a (d1)) a)
()
(:conv (eq (pow a (d1)) a)
  (eq
    (pow
      a
      (:unfold d1 () ()
        (suc (d0))))
    a)
  (ax_mp ((eq (mul a (pow a (d0))) a) (eq (pow a (suc (d0))) a))
    (ax_mp ((eq (pow a (suc (d0))) (mul a (pow a (d0)))) (im (eq (mul a (pow a (d0))) a) (eq (pow a (suc (d0))) a)))
      (eqtr ((pow a (suc (d0))) (mul a (pow a (d0))) a))
      (powS (a (d0))))
    (ax_mp ((eq (mul a (d1)) a) (eq (mul a (pow a (d0))) a))
      (ax_mp ((eq (mul a (pow a (d0))) (mul a (d1))) (im (eq (mul a (d1)) a) (eq (mul a (pow a (d0))) a)))
        (eqtr ((mul a (pow a (d0))) (mul a (d1)) a))
        (ax_mp ((eq (pow a (d0)) (d1)) (eq (mul a (pow a (d0))) (mul a (d1))))
          (muleq2 (a (pow a (d0)) (d1)))
          (pow0 (a))))
      (mul12 (a))))))

(local theorem pow11 ((b nat ())) ()
  (eq (pow (d1) b) (d1))
((x nat) (y nat))
(ind (x y b (eq (pow (d1) x) (d1)) (eq (pow (d1) (d0)) (d1)) (eq (pow (d1) b) (d1)) (eq (pow (d1) y) (d1)) (eq (pow (d1) (suc y)) (d1)))
  (eqeq1d ((eq x (d0)) (pow (d1) x) (pow (d1) (d0)) (d1))
    (poweq2 ((d1) x (d0))))
  (eqeq1d ((eq x y) (pow (d1) x) (pow (d1) y) (d1))
    (poweq2 ((d1) x y)))
  (eqeq1d ((eq x (suc y)) (pow (d1) x) (pow (d1) (suc y)) (d1))
    (poweq2 ((d1) x (suc y))))
  (eqeq1d ((eq x b) (pow (d1) x) (pow (d1) b) (d1))
    (poweq2 ((d1) x b)))
  (pow0 ((d1)))
  (syl5eq ((eq (pow (d1) y) (d1)) (pow (d1) (suc y)) (mul (d1) (pow (d1) y)) (d1))
    (powS ((d1) y))
    (syl5eq ((eq (pow (d1) y) (d1)) (mul (d1) (pow (d1) y)) (pow (d1) y) (d1))
      (mul11 ((pow (d1) y)))
      (id ((eq (pow (d1) y) (d1))))))))

(local theorem powpos ((a nat ()) (b nat ())) ()
  (im (lt (d0) a) (lt (d0) (pow a b)))
((x nat) (y nat))
(indd ((lt (d0) a) x y b (lt (d0) (pow a x)) (lt (d0) (d1)) (lt (d0) (pow a b)) (lt (d0) (pow a y)) (lt (d0) (mul a (pow a y))))
  (lteq2d ((eq x (d0)) (d0) (pow a x) (d1))
    (syl6eq ((eq x (d0)) (pow a x) (pow a (d0)) (d1))
      (pow0 (a))
      (poweq2 (a x (d0)))))
  (lteq2d ((eq x y) (d0) (pow a x) (pow a y))
    (poweq2 (a x y)))
  (lteq2d ((eq x (suc y)) (d0) (pow a x) (mul a (pow a y)))
    (syl6eq ((eq x (suc y)) (pow a x) (pow a (suc y)) (mul a (pow a y)))
      (powS (a y))
      (poweq2 (a x (suc y)))))
  (lteq2d ((eq x b) (d0) (pow a x) (pow a b))
    (poweq2 (a x b)))
  (a1i ((lt (d0) a) (lt (d0) (d1)))
    (d0lt1 ()))
  (bi2i ((lt (d0) (mul a (pow a y))) (an (lt (d0) a) (lt (d0) (pow a y))))
    (mulpos (a (pow a y))))))

(local theorem powne0 ((a nat ()) (b nat ())) ()
  (im (ne a (d0)) (ne (pow a b) (d0)))
()
(sylbir ((ne a (d0)) (lt (d0) a) (ne (pow a b) (d0)))
  (lt01 (a))
  (sylib ((lt (d0) a) (lt (d0) (pow a b)) (ne (pow a b) (d0)))
    (lt01 ((pow a b)))
    (powpos (a b)))))

(local theorem pow2ne0 ((b nat ())) ()
  (ne (pow (d2) b) (d0))
()
(ax_mp ((ne (d2) (d0)) (ne (pow (d2) b) (d0)))
  (powne0 ((d2) b))
  (d2ne0 ())))

(local theorem powltid2 ((a nat ()) (b nat ())) ()
  (im (lt (d1) a) (lt b (pow a b)))
((x nat) (y nat))
(:let H1 (d0lt1 ())
(indd ((lt (d1) a) x y b (lt x (pow a x)) (lt (d0) (d1)) (lt b (pow a b)) (lt y (pow a y)) (lt (suc y) (mul a (pow a y))))
  (lteqd ((eq x (d0)) x (d0) (pow a x) (d1))
    (id ((eq x (d0))))
    (syl6eq ((eq x (d0)) (pow a x) (pow a (d0)) (d1))
      (pow0 (a))
      (poweq2 (a x (d0)))))
  (lteqd ((eq x y) x y (pow a x) (pow a y))
    (id ((eq x y)))
    (poweq2 (a x y)))
  (lteqd ((eq x (suc y)) x (suc y) (pow a x) (mul a (pow a y)))
    (id ((eq x (suc y))))
    (syl6eq ((eq x (suc y)) (pow a x) (pow a (suc y)) (mul a (pow a y)))
      (powS (a y))
      (poweq2 (a x (suc y)))))
  (lteqd ((eq x b) x b (pow a x) (pow a b))
    (id ((eq x b)))
    (poweq2 (a x b)))
  (a1i ((lt (d1) a) (lt (d0) (d1)))
    H1)
  (lelttrd ((an (lt (d1) a) (lt y (pow a y))) (suc y) (pow a y) (mul a (pow a y)))
    (:conv (im (an (lt (d1) a) (lt y (pow a y))) (le (suc y) (pow a y)))
      (im
        (an (lt (d1) a) (lt y (pow a y)))
        (:sym (:unfold lt (y (pow a y)) ()
          (le (suc y) (pow a y)))))
      (anr ((lt (d1) a) (lt y (pow a y)))))
    (sylib ((an (lt (d1) a) (lt y (pow a y))) (lt (mul (d1) (pow a y)) (mul a (pow a y))) (lt (pow a y) (mul a (pow a y))))
      (ax_mp ((eq (mul (d1) (pow a y)) (pow a y)) (iff (lt (mul (d1) (pow a y)) (mul a (pow a y))) (lt (pow a y) (mul a (pow a y)))))
        (lteq1 ((mul (d1) (pow a y)) (pow a y) (mul a (pow a y))))
        (mul11 ((pow a y))))
      (mpbid ((an (lt (d1) a) (lt y (pow a y))) (lt (d1) a) (lt (mul (d1) (pow a y)) (mul a (pow a y))))
        (syl ((an (lt (d1) a) (lt y (pow a y))) (lt (d0) (pow a y)) (iff (lt (d1) a) (lt (mul (d1) (pow a y)) (mul a (pow a y)))))
          (ltmul1 ((d1) a (pow a y)))
          (syl ((an (lt (d1) a) (lt y (pow a y))) (lt (d0) a) (lt (d0) (pow a y)))
            (powpos (a y))
            (anwl ((lt (d1) a) (lt y (pow a y)) (lt (d0) a))
              (ax_mp ((lt (d0) (d1)) (im (lt (d1) a) (lt (d0) a)))
                (lttr ((d0) (d1) a))
                H1))))
        (anl ((lt (d1) a) (lt y (pow a y))))))))))

(local theorem powadd ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pow a (add b c)) (mul (pow a b) (pow a c)))
((x nat) (y nat))
(ind (x y c (eq (pow a (add b x)) (mul (pow a b) (pow a x))) (eq (pow a b) (mul (pow a b) (d1))) (eq (pow a (add b c)) (mul (pow a b) (pow a c))) (eq (pow a (add b y)) (mul (pow a b) (pow a y))) (eq (mul (pow a (add b y)) a) (mul (pow a b) (mul (pow a y) a))))
  (eqeqd ((eq x (d0)) (pow a (add b x)) (pow a b) (mul (pow a b) (pow a x)) (mul (pow a b) (d1)))
    (poweq2d ((eq x (d0)) a (add b x) b)
      (syl6eq ((eq x (d0)) (add b x) (add b (d0)) b)
        (add0 (b))
        (addeq2 (b x (d0)))))
    (muleq2d ((eq x (d0)) (pow a b) (pow a x) (d1))
      (syl6eq ((eq x (d0)) (pow a x) (pow a (d0)) (d1))
        (pow0 (a))
        (poweq2 (a x (d0))))))
  (eqeqd ((eq x y) (pow a (add b x)) (pow a (add b y)) (mul (pow a b) (pow a x)) (mul (pow a b) (pow a y)))
    (poweq2d ((eq x y) a (add b x) (add b y))
      (addeq2 (b x y)))
    (muleq2d ((eq x y) (pow a b) (pow a x) (pow a y))
      (poweq2 (a x y))))
  (eqeqd ((eq x (suc y)) (pow a (add b x)) (mul (pow a (add b y)) a) (mul (pow a b) (pow a x)) (mul (pow a b) (mul (pow a y) a)))
    (syl6eq ((eq x (suc y)) (pow a (add b x)) (pow a (suc (add b y))) (mul (pow a (add b y)) a))
      (powS2 (a (add b y)))
      (poweq2d ((eq x (suc y)) a (add b x) (suc (add b y)))
        (syl6eq ((eq x (suc y)) (add b x) (add b (suc y)) (suc (add b y)))
          (addS (b y))
          (addeq2 (b x (suc y))))))
    (muleq2d ((eq x (suc y)) (pow a b) (pow a x) (mul (pow a y) a))
      (syl6eq ((eq x (suc y)) (pow a x) (pow a (suc y)) (mul (pow a y) a))
        (powS2 (a y))
        (poweq2 (a x (suc y))))))
  (eqeqd ((eq x c) (pow a (add b x)) (pow a (add b c)) (mul (pow a b) (pow a x)) (mul (pow a b) (pow a c)))
    (poweq2d ((eq x c) a (add b x) (add b c))
      (addeq2 (b x c)))
    (muleq2d ((eq x c) (pow a b) (pow a x) (pow a c))
      (poweq2 (a x c))))
  (ax_mp ((eq (mul (pow a b) (d1)) (pow a b)) (eq (pow a b) (mul (pow a b) (d1))))
    (eqcom ((mul (pow a b) (d1)) (pow a b)))
    (mul12 ((pow a b))))
  (syl6eq ((eq (pow a (add b y)) (mul (pow a b) (pow a y))) (mul (pow a (add b y)) a) (mul (mul (pow a b) (pow a y)) a) (mul (pow a b) (mul (pow a y) a)))
    (mulass ((pow a b) (pow a y) a))
    (muleq1 ((pow a (add b y)) (mul (pow a b) (pow a y)) a)))))

(local theorem powmul ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (pow a (mul b c)) (pow (pow a b) c))
((x nat) (y nat))
(ind (x y c (eq (pow a (mul b x)) (pow (pow a b) x)) (eq (pow a (d0)) (pow (pow a b) (d0))) (eq (pow a (mul b c)) (pow (pow a b) c)) (eq (pow a (mul b y)) (pow (pow a b) y)) (eq (mul (pow a (mul b y)) (pow a b)) (mul (pow (pow a b) y) (pow a b))))
  (eqeqd ((eq x (d0)) (pow a (mul b x)) (pow a (d0)) (pow (pow a b) x) (pow (pow a b) (d0)))
    (poweq2d ((eq x (d0)) a (mul b x) (d0))
      (syl6eq ((eq x (d0)) (mul b x) (mul b (d0)) (d0))
        (mul0 (b))
        (muleq2 (b x (d0)))))
    (poweq2 ((pow a b) x (d0))))
  (eqeqd ((eq x y) (pow a (mul b x)) (pow a (mul b y)) (pow (pow a b) x) (pow (pow a b) y))
    (poweq2d ((eq x y) a (mul b x) (mul b y))
      (muleq2 (b x y)))
    (poweq2 ((pow a b) x y)))
  (eqeqd ((eq x (suc y)) (pow a (mul b x)) (mul (pow a (mul b y)) (pow a b)) (pow (pow a b) x) (mul (pow (pow a b) y) (pow a b)))
    (syl6eq ((eq x (suc y)) (pow a (mul b x)) (pow a (add (mul b y) b)) (mul (pow a (mul b y)) (pow a b)))
      (powadd (a (mul b y) b))
      (poweq2d ((eq x (suc y)) a (mul b x) (add (mul b y) b))
        (syl6eq ((eq x (suc y)) (mul b x) (mul b (suc y)) (add (mul b y) b))
          (mulS (b y))
          (muleq2 (b x (suc y))))))
    (syl6eq ((eq x (suc y)) (pow (pow a b) x) (pow (pow a b) (suc y)) (mul (pow (pow a b) y) (pow a b)))
      (powS2 ((pow a b) y))
      (poweq2 ((pow a b) x (suc y)))))
  (eqeqd ((eq x c) (pow a (mul b x)) (pow a (mul b c)) (pow (pow a b) x) (pow (pow a b) c))
    (poweq2d ((eq x c) a (mul b x) (mul b c))
      (muleq2 (b x c)))
    (poweq2 ((pow a b) x c)))
  (ax_mp ((eq (pow (pow a b) (d0)) (d1)) (eq (pow a (d0)) (pow (pow a b) (d0))))
    (ax_mp ((eq (pow a (d0)) (d1)) (im (eq (pow (pow a b) (d0)) (d1)) (eq (pow a (d0)) (pow (pow a b) (d0)))))
      (eqtr4 ((pow a (d0)) (d1) (pow (pow a b) (d0))))
      (pow0 (a)))
    (pow0 ((pow a b))))
  (muleq1 ((pow a (mul b y)) (pow (pow a b) y) (pow a b)))))

(local theorem powdvd ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b c) (dvd (pow a b) (pow a c)))
()
(mpbii ((le b c) (dvd (pow a b) (mul (pow a (sub c b)) (pow a b))) (dvd (pow a b) (pow a c)))
  (dvdmul1 ((pow a b) (pow a (sub c b))))
  (dvdeq2d ((le b c) (pow a b) (mul (pow a (sub c b)) (pow a b)) (pow a c))
    (syl5eqr ((le b c) (mul (pow a (sub c b)) (pow a b)) (pow a (add (sub c b) b)) (pow a c))
      (powadd (a (sub c b) b))
      (poweq2d ((le b c) a (add (sub c b) b) c)
        (npcan (c b)))))))

(local theorem lepow2a ((a nat ()) (b nat ()) (c nat ())) ()
  (im (ne a (d0)) (im (le b c) (le (pow a b) (pow a c))))
()
(exp ((ne a (d0)) (le b c) (le (pow a b) (pow a c)))
  (dvdle ((an (ne a (d0)) (le b c)) (pow a b) (pow a c))
    (anwl ((ne a (d0)) (le b c) (ne (pow a c) (d0)))
      (powne0 (a c)))
    (anwr ((ne a (d0)) (le b c) (dvd (pow a b) (pow a c)))
      (powdvd (a b c))))))

(def shl ((a nat ()) (n nat ())) (nat ())
()
(mul a (pow (d2) n)))

(local theorem shleqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (shl a1 n1) (shl a2 n2)))
()
(:conv (im _G (eq (shl a1 n1) (shl a2 n2)))
  (im
    _G
    (eq
      (:unfold shl (a1 n1) ()
        (mul a1 (pow (d2) n1)))
      (:unfold shl (a2 n2) ()
        (mul a2 (pow (d2) n2)))))
  (muleqd (_G a1 a2 (pow (d2) n1) (pow (d2) n2))
    ha
    (poweqd (_G (d2) (d2) n1 n2)
      (eqidd (_G (d2)))
      hn))))

(local theorem shleq ((a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq a1 a2) (im (eq n1 n2) (eq (shl a1 n1) (shl a2 n2))))
()
(exp ((eq a1 a2) (eq n1 n2) (eq (shl a1 n1) (shl a2 n2)))
  (shleqd ((an (eq a1 a2) (eq n1 n2)) a1 a2 n1 n2)
    (anl ((eq a1 a2) (eq n1 n2)))
    (anr ((eq a1 a2) (eq n1 n2))))))

(local theorem shleq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (n nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (shl a1 n) (shl a2 n)))
()
(shleqd (G a1 a2 n n)
  h
  (eqidd (G n))))

(local theorem shleq1 ((a1 nat ()) (a2 nat ()) (n nat ())) ()
  (im (eq a1 a2) (eq (shl a1 n) (shl a2 n)))
()
(shleq1d ((eq a1 a2) a1 a2 n)
  (id ((eq a1 a2)))))

(local theorem shleq2d ((G wff ()) (a nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (shl a n1) (shl a n2)))
()
(shleqd (G a a n1 n2)
  (eqidd (G a))
  h))

(local theorem shleq2 ((a nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (shl a n1) (shl a n2)))
()
(shleq2d ((eq n1 n2) a n1 n2)
  (id ((eq n1 n2)))))

(def shr ((a nat ()) (n nat ())) (nat ())
()
(div a (pow (d2) n)))

(local theorem shreqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (shr a1 n1) (shr a2 n2)))
()
(:conv (im _G (eq (shr a1 n1) (shr a2 n2)))
  (im
    _G
    (eq
      (:unfold shr (a1 n1) ()
        (div a1 (pow (d2) n1)))
      (:unfold shr (a2 n2) ()
        (div a2 (pow (d2) n2)))))
  (diveqd (_G a1 a2 (pow (d2) n1) (pow (d2) n2))
    ha
    (poweqd (_G (d2) (d2) n1 n2)
      (eqidd (_G (d2)))
      hn))))

(local theorem shreq ((a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq a1 a2) (im (eq n1 n2) (eq (shr a1 n1) (shr a2 n2))))
()
(exp ((eq a1 a2) (eq n1 n2) (eq (shr a1 n1) (shr a2 n2)))
  (shreqd ((an (eq a1 a2) (eq n1 n2)) a1 a2 n1 n2)
    (anl ((eq a1 a2) (eq n1 n2)))
    (anr ((eq a1 a2) (eq n1 n2))))))

(local theorem shreq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (n nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (shr a1 n) (shr a2 n)))
()
(shreqd (G a1 a2 n n)
  h
  (eqidd (G n))))

(local theorem shreq1 ((a1 nat ()) (a2 nat ()) (n nat ())) ()
  (im (eq a1 a2) (eq (shr a1 n) (shr a2 n)))
()
(shreq1d ((eq a1 a2) a1 a2 n)
  (id ((eq a1 a2)))))

(local theorem shreq2d ((G wff ()) (a nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (shr a n1) (shr a n2)))
()
(shreqd (G a a n1 n2)
  (eqidd (G a))
  h))

(local theorem shreq2 ((a nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (shr a n1) (shr a n2)))
()
(shreq2d ((eq n1 n2) a n1 n2)
  (id ((eq n1 n2)))))

(local theorem shl01 ((b nat ())) ()
  (eq (shl (d0) b) (d0))
()
(:conv (eq (shl (d0) b) (d0))
  (eq
    (:unfold shl ((d0) b) ()
      (mul (d0) (pow (d2) b)))
    (d0))
  (mul01 ((pow (d2) b)))))

(local theorem shl02 ((a nat ())) ()
  (eq (shl a (d0)) a)
()
(:conv (eq (shl a (d0)) a)
  (eq
    (:unfold shl (a (d0)) ()
      (mul a (pow (d2) (d0))))
    a)
  (ax_mp ((eq (mul a (d1)) a) (eq (mul a (pow (d2) (d0))) a))
    (ax_mp ((eq (mul a (pow (d2) (d0))) (mul a (d1))) (im (eq (mul a (d1)) a) (eq (mul a (pow (d2) (d0))) a)))
      (eqtr ((mul a (pow (d2) (d0))) (mul a (d1)) a))
      (ax_mp ((eq (pow (d2) (d0)) (d1)) (eq (mul a (pow (d2) (d0))) (mul a (d1))))
        (muleq2 (a (pow (d2) (d0)) (d1)))
        (pow0 ((d2)))))
    (mul12 (a)))))

(local theorem shl11 ((b nat ())) ()
  (eq (shl (d1) b) (pow (d2) b))
()
(:conv (eq (shl (d1) b) (pow (d2) b))
  (eq
    (:unfold shl ((d1) b) ()
      (mul (d1) (pow (d2) b)))
    (pow (d2) b))
  (mul11 ((pow (d2) b)))))

(local theorem shl12 ((a nat ())) ()
  (eq (shl a (d1)) (b0 a))
()
(:conv (eq (shl a (d1)) (b0 a))
  (eq
    (:unfold shl (a (d1)) ()
      (mul a (pow (d2) (d1))))
    (b0 a))
  (ax_mp ((eq (mul a (d2)) (b0 a)) (eq (mul a (pow (d2) (d1))) (b0 a)))
    (ax_mp ((eq (mul a (pow (d2) (d1))) (mul a (d2))) (im (eq (mul a (d2)) (b0 a)) (eq (mul a (pow (d2) (d1))) (b0 a))))
      (eqtr ((mul a (pow (d2) (d1))) (mul a (d2)) (b0 a)))
      (ax_mp ((eq (pow (d2) (d1)) (d2)) (eq (mul a (pow (d2) (d1))) (mul a (d2))))
        (muleq2 (a (pow (d2) (d1)) (d2)))
        (pow12 ((d2)))))
    (b0mul22 (a)))))

(local theorem shlshl ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shl (shl a b) c) (shl a (add b c)))
()
(:conv (eq (shl (shl a b) c) (shl a (add b c)))
  (eq
    (:unfold shl ((shl a b) c) ()
      (mul
        (:unfold shl (a b) ()
          (mul a (pow (d2) b)))
        (pow (d2) c)))
    (:unfold shl (a (add b c)) ()
      (mul a (pow (d2) (add b c)))))
  (ax_mp ((eq (mul a (pow (d2) (add b c))) (mul a (mul (pow (d2) b) (pow (d2) c)))) (eq (mul (mul a (pow (d2) b)) (pow (d2) c)) (mul a (pow (d2) (add b c)))))
    (ax_mp ((eq (mul (mul a (pow (d2) b)) (pow (d2) c)) (mul a (mul (pow (d2) b) (pow (d2) c)))) (im (eq (mul a (pow (d2) (add b c))) (mul a (mul (pow (d2) b) (pow (d2) c)))) (eq (mul (mul a (pow (d2) b)) (pow (d2) c)) (mul a (pow (d2) (add b c))))))
      (eqtr4 ((mul (mul a (pow (d2) b)) (pow (d2) c)) (mul a (mul (pow (d2) b) (pow (d2) c))) (mul a (pow (d2) (add b c)))))
      (mulass (a (pow (d2) b) (pow (d2) c))))
    (ax_mp ((eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))) (eq (mul a (pow (d2) (add b c))) (mul a (mul (pow (d2) b) (pow (d2) c)))))
      (muleq2 (a (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))))
      (powadd ((d2) b c))))))

(local theorem shlpow2dvd ((a nat ()) (b nat ())) ()
  (dvd (pow (d2) b) (shl a b))
()
(:conv (dvd (pow (d2) b) (shl a b))
  (dvd
    (pow (d2) b)
    (:unfold shl (a b) ()
      (mul a (pow (d2) b))))
  (dvdmul1 ((pow (d2) b) a))))

(local theorem shl2dvd ((a nat ()) (b nat ())) ()
  (im (lt (d0) b) (dvd (d2) (shl a b)))
()
(sylib ((lt (d0) b) (dvd (pow (d2) (d1)) (shl a b)) (dvd (d2) (shl a b)))
  (ax_mp ((eq (pow (d2) (d1)) (d2)) (iff (dvd (pow (d2) (d1)) (shl a b)) (dvd (d2) (shl a b))))
    (dvdeq1 ((pow (d2) (d1)) (d2) (shl a b)))
    (pow12 ((d2))))
  (rsyl ((lt (d0) b) (dvd (pow (d2) (suc (d0))) (pow (d2) b)) (dvd (pow (d2) (d1)) (shl a b)))
    (:conv (im (lt (d0) b) (dvd (pow (d2) (suc (d0))) (pow (d2) b)))
      (im
        (:unfold lt ((d0) b) ()
          (le (suc (d0)) b))
        (dvd (pow (d2) (suc (d0))) (pow (d2) b)))
      (powdvd ((d2) (suc (d0)) b)))
    (mpi ((dvd (pow (d2) (suc (d0))) (pow (d2) b)) (dvd (pow (d2) b) (shl a b)) (dvd (pow (d2) (d1)) (shl a b)))
      (shlpow2dvd (a b))
      (:conv (im (dvd (pow (d2) (suc (d0))) (pow (d2) b)) (im (dvd (pow (d2) b) (shl a b)) (dvd (pow (d2) (d1)) (shl a b))))
        (im
          (dvd (pow (d2) (suc (d0))) (pow (d2) b))
          (im
            (dvd (pow (d2) b) (shl a b))
            (dvd
              (pow
                (d2)
                (:unfold d1 () ()
                  (suc (d0))))
              (shl a b))))
        (dvdtr ((pow (d2) (suc (d0))) (pow (d2) b) (shl a b))))))))

(local theorem shr01 ((b nat ())) ()
  (eq (shr (d0) b) (d0))
()
(:conv (eq (shr (d0) b) (d0))
  (eq
    (:unfold shr ((d0) b) ()
      (div (d0) (pow (d2) b)))
    (d0))
  (div01 ((pow (d2) b)))))

(local theorem shr02 ((a nat ())) ()
  (eq (shr a (d0)) a)
()
(:conv (eq (shr a (d0)) a)
  (eq
    (:unfold shr (a (d0)) ()
      (div a (pow (d2) (d0))))
    a)
  (ax_mp ((eq (div a (d1)) a) (eq (div a (pow (d2) (d0))) a))
    (ax_mp ((eq (div a (pow (d2) (d0))) (div a (d1))) (im (eq (div a (d1)) a) (eq (div a (pow (d2) (d0))) a)))
      (eqtr ((div a (pow (d2) (d0))) (div a (d1)) a))
      (ax_mp ((eq (pow (d2) (d0)) (d1)) (eq (div a (pow (d2) (d0))) (div a (d1))))
        (diveq2 (a (pow (d2) (d0)) (d1)))
        (pow0 ((d2)))))
    (div12 (a)))))

(local theorem shr12 ((a nat ())) ()
  (eq (shr a (d1)) (div a (d2)))
()
(:conv (eq (shr a (d1)) (div a (d2)))
  (eq
    (:unfold shr (a (d1)) ()
      (div a (pow (d2) (d1))))
    (div a (d2)))
  (ax_mp ((eq (pow (d2) (d1)) (d2)) (eq (div a (pow (d2) (d1))) (div a (d2))))
    (diveq2 (a (pow (d2) (d1)) (d2)))
    (pow12 ((d2))))))

(local theorem shrshr ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shr (shr a b) c) (shr a (add b c)))
()
(:conv (eq (shr (shr a b) c) (shr a (add b c)))
  (eq
    (:unfold shr ((shr a b) c) ()
      (div
        (:unfold shr (a b) ()
          (div a (pow (d2) b)))
        (pow (d2) c)))
    (:unfold shr (a (add b c)) ()
      (div a (pow (d2) (add b c)))))
  (ax_mp ((eq (div a (pow (d2) (add b c))) (div a (mul (pow (d2) b) (pow (d2) c)))) (eq (div (div a (pow (d2) b)) (pow (d2) c)) (div a (pow (d2) (add b c)))))
    (ax_mp ((eq (div (div a (pow (d2) b)) (pow (d2) c)) (div a (mul (pow (d2) b) (pow (d2) c)))) (im (eq (div a (pow (d2) (add b c))) (div a (mul (pow (d2) b) (pow (d2) c)))) (eq (div (div a (pow (d2) b)) (pow (d2) c)) (div a (pow (d2) (add b c))))))
      (eqtr4 ((div (div a (pow (d2) b)) (pow (d2) c)) (div a (mul (pow (d2) b) (pow (d2) c))) (div a (pow (d2) (add b c)))))
      (divdiv (a (pow (d2) b) (pow (d2) c))))
    (ax_mp ((eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))) (eq (div a (pow (d2) (add b c))) (div a (mul (pow (d2) b) (pow (d2) c)))))
      (diveq2 (a (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))))
      (powadd ((d2) b c))))))

(local theorem shrmodadd1 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shr (mod a (pow (d2) (add b c))) b) (mod (shr a b) (pow (d2) c)))
()
(:conv (eq (shr (mod a (pow (d2) (add b c))) b) (mod (shr a b) (pow (d2) c)))
  (eq
    (shr (mod a (pow (d2) (add b c))) b)
    (mod
      (:unfold shr (a b) ()
        (div a (pow (d2) b)))
      (pow (d2) c)))
  (ax_mp ((eq (mod (div a (pow (d2) b)) (pow (d2) c)) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b)) (eq (shr (mod a (pow (d2) (add b c))) b) (mod (div a (pow (d2) b)) (pow (d2) c))))
    (ax_mp ((eq (shr (mod a (pow (d2) (add b c))) b) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b)) (im (eq (mod (div a (pow (d2) b)) (pow (d2) c)) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b)) (eq (shr (mod a (pow (d2) (add b c))) b) (mod (div a (pow (d2) b)) (pow (d2) c)))))
      (eqtr4 ((shr (mod a (pow (d2) (add b c))) b) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b) (mod (div a (pow (d2) b)) (pow (d2) c))))
      (ax_mp ((eq (mod a (pow (d2) (add b c))) (mod a (mul (pow (d2) b) (pow (d2) c)))) (eq (shr (mod a (pow (d2) (add b c))) b) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b)))
        (shreq1 ((mod a (pow (d2) (add b c))) (mod a (mul (pow (d2) b) (pow (d2) c))) b))
        (ax_mp ((eq (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))) (eq (mod a (pow (d2) (add b c))) (mod a (mul (pow (d2) b) (pow (d2) c)))))
          (modeq2 (a (pow (d2) (add b c)) (mul (pow (d2) b) (pow (d2) c))))
          (powadd ((d2) b c)))))
    (:conv (eq (mod (div a (pow (d2) b)) (pow (d2) c)) (shr (mod a (mul (pow (d2) b) (pow (d2) c))) b))
      (eq
        (mod (div a (pow (d2) b)) (pow (d2) c))
        (:unfold shr ((mod a (mul (pow (d2) b) (pow (d2) c))) b) ()
          (div (mod a (mul (pow (d2) b) (pow (d2) c))) (pow (d2) b))))
      (divmod1 (a (pow (d2) b) (pow (d2) c)))))))

(local theorem shrmodadd2 ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (shr (mod a (pow (d2) (add b c))) c) (mod (shr a c) (pow (d2) b)))
()
(ax_mp ((eq (shr (mod a (pow (d2) (add c b))) c) (mod (shr a c) (pow (d2) b))) (eq (shr (mod a (pow (d2) (add b c))) c) (mod (shr a c) (pow (d2) b))))
  (ax_mp ((eq (shr (mod a (pow (d2) (add b c))) c) (shr (mod a (pow (d2) (add c b))) c)) (im (eq (shr (mod a (pow (d2) (add c b))) c) (mod (shr a c) (pow (d2) b))) (eq (shr (mod a (pow (d2) (add b c))) c) (mod (shr a c) (pow (d2) b)))))
    (eqtr ((shr (mod a (pow (d2) (add b c))) c) (shr (mod a (pow (d2) (add c b))) c) (mod (shr a c) (pow (d2) b))))
    (ax_mp ((eq (mod a (pow (d2) (add b c))) (mod a (pow (d2) (add c b)))) (eq (shr (mod a (pow (d2) (add b c))) c) (shr (mod a (pow (d2) (add c b))) c)))
      (shreq1 ((mod a (pow (d2) (add b c))) (mod a (pow (d2) (add c b))) c))
      (ax_mp ((eq (pow (d2) (add b c)) (pow (d2) (add c b))) (eq (mod a (pow (d2) (add b c))) (mod a (pow (d2) (add c b)))))
        (modeq2 (a (pow (d2) (add b c)) (pow (d2) (add c b))))
        (ax_mp ((eq (add b c) (add c b)) (eq (pow (d2) (add b c)) (pow (d2) (add c b))))
          (poweq2 ((d2) (add b c) (add c b)))
          (addcom (b c))))))
  (shrmodadd1 (a c b))))

(local theorem shrshlid ((a nat ()) (b nat ())) ()
  (eq (shr (shl a b) b) a)
()
(:conv (eq (shr (shl a b) b) a)
  (eq
    (:unfold shr ((shl a b) b) ()
      (div
        (:unfold shl (a b) ()
          (mul a (pow (d2) b)))
        (pow (d2) b)))
    a)
  (ax_mp ((ne (pow (d2) b) (d0)) (eq (div (mul a (pow (d2) b)) (pow (d2) b)) a))
    (muldiv1 (a (pow (d2) b)))
    (pow2ne0 (b)))))

(local theorem shrshl1 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le c b) (eq (shr (shl a b) c) (shl a (sub b c))))
()
(syl6eq ((le c b) (shr (shl a b) c) (shr (shl (shl a (sub b c)) c) c) (shl a (sub b c)))
  (shrshlid ((shl a (sub b c)) c))
  (shreq1d ((le c b) (shl a b) (shl (shl a (sub b c)) c) c)
    (syl6eqr ((le c b) (shl a b) (shl a (add (sub b c) c)) (shl (shl a (sub b c)) c))
      (shlshl (a (sub b c) c))
      (shleq2d ((le c b) a b (add (sub b c) c))
        (eqcomd ((le c b) (add (sub b c) c) b)
          (npcan (b c))))))))

(local theorem shrshl2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (le b c) (eq (shr (shl a b) c) (shr a (sub c b))))
()
(syl6eq ((le b c) (shr (shl a b) c) (shr (shr (shl a b) b) (sub c b)) (shr a (sub c b)))
  (ax_mp ((eq (shr (shl a b) b) a) (eq (shr (shr (shl a b) b) (sub c b)) (shr a (sub c b))))
    (shreq1 ((shr (shl a b) b) a (sub c b)))
    (shrshlid (a b)))
  (syl6eqr ((le b c) (shr (shl a b) c) (shr (shl a b) (add b (sub c b))) (shr (shr (shl a b) b) (sub c b)))
    (shrshr ((shl a b) b (sub c b)))
    (shreq2d ((le b c) (shl a b) c (add b (sub c b)))
      (eqcomd ((le b c) (add b (sub c b)) c)
        (pncan3 (b c)))))))

(local theorem shreq0 ((a nat ()) (b nat ())) ()
  (iff (eq (shr a b) (d0)) (lt a (pow (d2) b)))
()
(:conv (iff (eq (shr a b) (d0)) (lt a (pow (d2) b)))
  (iff
    (eq
      (:unfold shr (a b) ()
        (div a (pow (d2) b)))
      (d0))
    (lt a (pow (d2) b)))
  (ax_mp ((ne (pow (d2) b) (d0)) (iff (eq (div a (pow (d2) b)) (d0)) (lt a (pow (d2) b))))
    (diveq0 (a (pow (d2) b)))
    (pow2ne0 (b)))))

(def nel ((a nat ()) (b nat ())) (wff ())
()
(odd (shr b a)))

(local theorem neleqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (iff (nel a1 b1) (nel a2 b2)))
()
(:conv (im _G (iff (nel a1 b1) (nel a2 b2)))
  (im
    _G
    (iff
      (:unfold nel (a1 b1) ()
        (odd (shr b1 a1)))
      (:unfold nel (a2 b2) ()
        (odd (shr b2 a2)))))
  (oddeqd (_G (shr b1 a1) (shr b2 a2))
    (shreqd (_G b1 b2 a1 a2)
      hb
      ha))))

(local theorem neleq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (iff (nel a1 b1) (nel a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (iff (nel a1 b1) (nel a2 b2)))
  (neleqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem neleq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (iff (nel a1 b) (nel a2 b)))
()
(neleqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem neleq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (iff (nel a1 b) (nel a2 b)))
()
(neleq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem neleq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (iff (nel a b1) (nel a b2)))
()
(neleqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem neleq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (iff (nel a b1) (nel a b2)))
()
(neleq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(def ns ((a nat ())) (set ())
((x nat))
(ab x (nel x a)))

(local theorem nseqd ((_G wff ()) (a1 nat ()) (a2 nat ()))
  ((ha (im _G (eq a1 a2))))
  (im _G (eqs (ns a1) (ns a2)))
((x nat))
(:conv (im _G (eqs (ns a1) (ns a2)))
  (im
    _G
    (eqs
      (:unfold ns (a1) (x)
        (ab x (nel x a1)))
      (:unfold ns (a2) (x)
        (ab x (nel x a2)))))
  (abeqd (_G x (nel x a1) (nel x a2))
    (neleqd (_G x x a1 a2)
      (eqidd (_G x))
      ha))))

(local theorem nseq ((a1 nat ()) (a2 nat ())) ()
  (im (eq a1 a2) (eqs (ns a1) (ns a2)))
()
(nseqd ((eq a1 a2) a1 a2)
  (id ((eq a1 a2)))))

(local theorem elnel ((a nat ()) (b nat ())) ()
  (iff (el a (ns b)) (nel a b))
((x nat))
(:conv (iff (el a (ns b)) (nel a b))
  (iff
    (el
      a
      (:unfold ns (b) (x)
        (ab x (nel x b))))
    (nel a b))
  (elabe (x a (nel x b) (nel a b))
    (neleq1 (x a b)))))

(local theorem elneqd ((G wff ()) (a nat ()) (b nat ()) (c nat ()) (d nat ()))
  ((h1 (im G (eq a b)))
   (h2 (im G (eq c d))))
  (im G (iff (el a (ns c)) (el b (ns d))))
()
(eleqd (G a b (ns c) (ns d))
  h1
  (nseqd (G c d)
    h2)))

(local theorem elneq2d ((G wff ()) (a nat ()) (b nat ()) (c nat ()))
  ((h (im G (eq b c))))
  (im G (iff (el a (ns b)) (el a (ns c))))
()
(elneqd (G a a b c)
  (eqidd (G a))
  h))

(local theorem elneq2 ((a nat ()) (b nat ()) (c nat ())) ()
  (im (eq b c) (iff (el a (ns b)) (el a (ns c))))
()
(elneq2d ((eq b c) a b c)
  (id ((eq b c)))))

(local theorem el01 ((a nat ())) ()
  (iff (el (d0) (ns a)) (odd a))
()
(ax_mp ((iff (nel (d0) a) (odd a)) (iff (el (d0) (ns a)) (odd a)))
  (ax_mp ((iff (el (d0) (ns a)) (nel (d0) a)) (im (iff (nel (d0) a) (odd a)) (iff (el (d0) (ns a)) (odd a))))
    (bitr ((el (d0) (ns a)) (nel (d0) a) (odd a)))
    (elnel ((d0) a)))
  (:conv (iff (nel (d0) a) (odd a))
    (iff
      (:unfold nel ((d0) a) ()
        (odd (shr a (d0))))
      (odd a))
    (ax_mp ((eq (shr a (d0)) a) (iff (odd (shr a (d0))) (odd a)))
      (oddeq ((shr a (d0)) a))
      (shr02 (a))))))

(local theorem elshr ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (el a (ns (shr b c))) (el (add a c) (ns b)))
()
(ax_mp ((iff (nel a (shr b c)) (el (add a c) (ns b))) (iff (el a (ns (shr b c))) (el (add a c) (ns b))))
  (ax_mp ((iff (el a (ns (shr b c))) (nel a (shr b c))) (im (iff (nel a (shr b c)) (el (add a c) (ns b))) (iff (el a (ns (shr b c))) (el (add a c) (ns b)))))
    (bitr ((el a (ns (shr b c))) (nel a (shr b c)) (el (add a c) (ns b))))
    (elnel (a (shr b c))))
  (:conv (iff (nel a (shr b c)) (el (add a c) (ns b)))
    (iff
      (:unfold nel (a (shr b c)) ()
        (odd (shr (shr b c) a)))
      (el (add a c) (ns b)))
    (ax_mp ((iff (el (add a c) (ns b)) (odd (shr b (add a c)))) (iff (odd (shr (shr b c) a)) (el (add a c) (ns b))))
      (ax_mp ((iff (odd (shr (shr b c) a)) (odd (shr b (add a c)))) (im (iff (el (add a c) (ns b)) (odd (shr b (add a c)))) (iff (odd (shr (shr b c) a)) (el (add a c) (ns b)))))
        (bitr4 ((odd (shr (shr b c) a)) (odd (shr b (add a c))) (el (add a c) (ns b))))
        (ax_mp ((eq (shr (shr b c) a) (shr b (add a c))) (iff (odd (shr (shr b c) a)) (odd (shr b (add a c)))))
          (oddeq ((shr (shr b c) a) (shr b (add a c))))
          (ax_mp ((eq (shr b (add c a)) (shr b (add a c))) (eq (shr (shr b c) a) (shr b (add a c))))
            (ax_mp ((eq (shr (shr b c) a) (shr b (add c a))) (im (eq (shr b (add c a)) (shr b (add a c))) (eq (shr (shr b c) a) (shr b (add a c)))))
              (eqtr ((shr (shr b c) a) (shr b (add c a)) (shr b (add a c))))
              (shrshr (b c a)))
            (ax_mp ((eq (add c a) (add a c)) (eq (shr b (add c a)) (shr b (add a c))))
              (shreq2 (b (add c a) (add a c)))
              (addcom (c a))))))
      (:conv (iff (el (add a c) (ns b)) (odd (shr b (add a c))))
        (iff
          (el (add a c) (ns b))
          (:sym (:unfold nel ((add a c) b) ()
            (odd (shr b (add a c))))))
        (elnel ((add a c) b)))))))

(local theorem elshl ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (el a (ns (shl b c))) (an (le c a) (el (sub a c) (ns b))))
()
(ax_mp ((iff (nel a (shl b c)) (an (le c a) (el (sub a c) (ns b)))) (iff (el a (ns (shl b c))) (an (le c a) (el (sub a c) (ns b)))))
  (ax_mp ((iff (el a (ns (shl b c))) (nel a (shl b c))) (im (iff (nel a (shl b c)) (an (le c a) (el (sub a c) (ns b)))) (iff (el a (ns (shl b c))) (an (le c a) (el (sub a c) (ns b))))))
    (bitr ((el a (ns (shl b c))) (nel a (shl b c)) (an (le c a) (el (sub a c) (ns b)))))
    (elnel (a (shl b c))))
  (:conv (iff (nel a (shl b c)) (an (le c a) (el (sub a c) (ns b))))
    (iff
      (:unfold nel (a (shl b c)) ()
        (odd (shr (shl b c) a)))
      (an (le c a) (el (sub a c) (ns b))))
    (rbid ((le c a) (odd (shr (shl b c) a)) (an (le c a) (el (sub a c) (ns b))))
      (sylbi ((odd (shr (shl b c) a)) (not (dvd (d2) (shr (shl b c) a))) (le c a))
        (odddvd ((shr (shl b c) a)))
        (ax_mp ((im (not (le c a)) (dvd (d2) (shr (shl b c) a))) (im (not (dvd (d2) (shr (shl b c) a))) (le c a)))
          (con1 ((le c a) (dvd (d2) (shr (shl b c) a))))
          (sylbir ((not (le c a)) (lt a c) (dvd (d2) (shr (shl b c) a)))
            (ltnle (a c))
            (mpbird ((lt a c) (dvd (d2) (shl b (sub c a))) (dvd (d2) (shr (shl b c) a)))
              (dvdeq2d ((lt a c) (d2) (shr (shl b c) a) (shl b (sub c a)))
                (rsyl ((lt a c) (le a c) (eq (shr (shl b c) a) (shl b (sub c a))))
                  (ltle (a c))
                  (shrshl1 (b c a))))
              (sylbi ((lt a c) (lt (d0) (sub c a)) (dvd (d2) (shl b (sub c a))))
                (subpos (a c))
                (shl2dvd (b (sub c a))))))))
      (anl ((le c a) (el (sub a c) (ns b))))
      (bitr4d ((le c a) (odd (shr (shl b c) a)) (el (sub a c) (ns b)) (an (le c a) (el (sub a c) (ns b))))
        (syl6bbr ((le c a) (odd (shr (shl b c) a)) (nel (sub a c) b) (el (sub a c) (ns b)))
          (elnel ((sub a c) b))
          (:conv (im (le c a) (iff (odd (shr (shl b c) a)) (nel (sub a c) b)))
            (im
              (le c a)
              (iff
                (odd (shr (shl b c) a))
                (:unfold nel ((sub a c) b) ()
                  (odd (shr b (sub a c))))))
            (oddeqd ((le c a) (shr (shl b c) a) (shr b (sub a c)))
              (shrshl2 (b c a)))))
        (bian1 ((le c a) (el (sub a c) (ns b)))))))))

(local theorem eldiv2 ((a nat ()) (b nat ())) ()
  (iff (el a (ns (div b (d2)))) (el (suc a) (ns b)))
()
(ax_mp ((iff (el a (ns (shr b (d1)))) (el (suc a) (ns b))) (iff (el a (ns (div b (d2)))) (el (suc a) (ns b))))
  (ax_mp ((iff (el a (ns (shr b (d1)))) (el a (ns (div b (d2))))) (im (iff (el a (ns (shr b (d1)))) (el (suc a) (ns b))) (iff (el a (ns (div b (d2)))) (el (suc a) (ns b)))))
    (bitr3 ((el a (ns (div b (d2)))) (el a (ns (shr b (d1)))) (el (suc a) (ns b))))
    (ax_mp ((eq (shr b (d1)) (div b (d2))) (iff (el a (ns (shr b (d1)))) (el a (ns (div b (d2))))))
      (elneq2 (a (shr b (d1)) (div b (d2))))
      (shr12 (b))))
  (ax_mp ((iff (el (add a (d1)) (ns b)) (el (suc a) (ns b))) (iff (el a (ns (shr b (d1)))) (el (suc a) (ns b))))
    (ax_mp ((iff (el a (ns (shr b (d1)))) (el (add a (d1)) (ns b))) (im (iff (el (add a (d1)) (ns b)) (el (suc a) (ns b))) (iff (el a (ns (shr b (d1)))) (el (suc a) (ns b)))))
      (bitr ((el a (ns (shr b (d1)))) (el (add a (d1)) (ns b)) (el (suc a) (ns b))))
      (elshr (a b (d1))))
    (ax_mp ((eq (add a (d1)) (suc a)) (iff (el (add a (d1)) (ns b)) (el (suc a) (ns b))))
      (eleq1 ((ns b) (add a (d1)) (suc a)))
      (add12 (a))))))

(local theorem elb0 ((a nat ()) (b nat ())) ()
  (iff (el a (ns (b0 b))) (an (lt (d0) a) (el (sub a (d1)) (ns b))))
()
(:conv (iff (el a (ns (b0 b))) (an (lt (d0) a) (el (sub a (d1)) (ns b))))
  (iff
    (el a (ns (b0 b)))
    (an
      (:unfold lt ((d0) a) ()
        (le
          (:sym (:unfold d1 () ()
            (suc (d0))))
          a))
      (el (sub a (d1)) (ns b))))
  (ax_mp ((iff (el a (ns (shl b (d1)))) (an (le (d1) a) (el (sub a (d1)) (ns b)))) (iff (el a (ns (b0 b))) (an (le (d1) a) (el (sub a (d1)) (ns b)))))
    (ax_mp ((iff (el a (ns (shl b (d1)))) (el a (ns (b0 b)))) (im (iff (el a (ns (shl b (d1)))) (an (le (d1) a) (el (sub a (d1)) (ns b)))) (iff (el a (ns (b0 b))) (an (le (d1) a) (el (sub a (d1)) (ns b))))))
      (bitr3 ((el a (ns (b0 b))) (el a (ns (shl b (d1)))) (an (le (d1) a) (el (sub a (d1)) (ns b)))))
      (ax_mp ((eq (shl b (d1)) (b0 b)) (iff (el a (ns (shl b (d1)))) (el a (ns (b0 b)))))
        (elneq2 (a (shl b (d1)) (b0 b)))
        (shl12 (b))))
    (elshl (a b (d1))))))

(local theorem elb1 ((a nat ()) (b nat ())) ()
  (iff (el a (ns (b1 b))) (or (eq a (d0)) (el (sub a (d1)) (ns b))))
()
(cases ((eq a (d0)) (iff (el a (ns (b1 b))) (or (eq a (d0)) (el (sub a (d1)) (ns b)))))
  (bithd ((eq a (d0)) (el a (ns (b1 b))) (or (eq a (d0)) (el (sub a (d1)) (ns b))))
    (mpbiri ((eq a (d0)) (el (d0) (ns (b1 b))) (el a (ns (b1 b))))
      (mpbir ((odd (b1 b)) (el (d0) (ns (b1 b))))
        (el01 ((b1 b)))
        (b1odd (b)))
      (eleq1 ((ns (b1 b)) a (d0))))
    (orl ((eq a (d0)) (el (sub a (d1)) (ns b)))))
  (bicomd ((not (eq a (d0))) (or (eq a (d0)) (el (sub a (d1)) (ns b))) (el a (ns (b1 b))))
    (bitrd ((not (eq a (d0))) (or (eq a (d0)) (el (sub a (d1)) (ns b))) (el (sub a (d1)) (ns b)) (el a (ns (b1 b))))
      (bior1 ((eq a (d0)) (el (sub a (d1)) (ns b))))
      (syl5bb ((not (eq a (d0))) (el (sub a (d1)) (ns b)) (el (suc (sub a (d1))) (ns (b1 b))) (el a (ns (b1 b))))
        (ax_mp ((iff (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (suc (sub a (d1))) (ns (b1 b)))) (iff (el (sub a (d1)) (ns b)) (el (suc (sub a (d1))) (ns (b1 b)))))
          (ax_mp ((iff (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (sub a (d1)) (ns b))) (im (iff (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (suc (sub a (d1))) (ns (b1 b)))) (iff (el (sub a (d1)) (ns b)) (el (suc (sub a (d1))) (ns (b1 b))))))
            (bitr3 ((el (sub a (d1)) (ns b)) (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (suc (sub a (d1))) (ns (b1 b)))))
            (ax_mp ((eq (div (b1 b) (d2)) b) (iff (el (sub a (d1)) (ns (div (b1 b) (d2)))) (el (sub a (d1)) (ns b))))
              (elneq2 ((sub a (d1)) (div (b1 b) (d2)) b))
              (b1div2 (b))))
          (eldiv2 ((sub a (d1)) (b1 b))))
        (eleq1d ((ns (b1 b)) (not (eq a (d0))) (suc (sub a (d1))) a)
          (:conv (im (not (eq a (d0))) (eq (suc (sub a (d1))) a))
            (im
              (:sym (:unfold ne (a (d0)) ()
                (not (eq a (d0)))))
              (eq (suc (sub a (d1))) a))
            (sub1can (a)))))))))

(local theorem bndextle ((a nat ()) (b nat ()) (n nat ()) (x nat)) ()
  (im (al x (im (lt x n) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) n)) (mod b (pow (d2) n))))
((i nat) (j nat))
(:let H1 (poweq2 ((d2) i (d0)))
(:let H2 (poweq2 ((d2) i j))
(:let H3 (poweq2 ((d2) i (suc j)))
(:let H4 (poweq2 ((d2) i n))
(:let H5 (ltsucid (j))
(:let H6 (powS2 ((d2) j))
(:let H7 (powdvd ((d2) j (suc j)))
(:let H8 (lesucid (j))
(:let H9 (ax_mp ((le j (suc j)) (dvd (pow (d2) j) (pow (d2) (suc j))))
  H7
  H8)
(ind (i j n (im (al x (im (lt x i) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) i)) (mod b (pow (d2) i)))) (im (al x (im (lt x (d0)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0))))) (im (al x (im (lt x n) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) n)) (mod b (pow (d2) n)))) (im (al x (im (lt x j) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (im (al x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j))))))
  (imeqd ((eq i (d0)) (al x (im (lt x i) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x (d0)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) i)) (mod b (pow (d2) i))) (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0)))))
    (aleqd ((eq i (d0)) x (im (lt x i) (im (el x (ns a)) (el x (ns b)))) (im (lt x (d0)) (im (el x (ns a)) (el x (ns b)))))
      (imeq1d ((eq i (d0)) (lt x i) (lt x (d0)) (im (el x (ns a)) (el x (ns b))))
        (lteq2 (x i (d0)))))
    (leeqd ((eq i (d0)) (mod a (pow (d2) i)) (mod a (pow (d2) (d0))) (mod b (pow (d2) i)) (mod b (pow (d2) (d0))))
      (modeq2d ((eq i (d0)) a (pow (d2) i) (pow (d2) (d0)))
        H1)
      (modeq2d ((eq i (d0)) b (pow (d2) i) (pow (d2) (d0)))
        H1)))
  (imeqd ((eq i j) (al x (im (lt x i) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x j) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) i)) (mod b (pow (d2) i))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j))))
    (aleqd ((eq i j) x (im (lt x i) (im (el x (ns a)) (el x (ns b)))) (im (lt x j) (im (el x (ns a)) (el x (ns b)))))
      (imeq1d ((eq i j) (lt x i) (lt x j) (im (el x (ns a)) (el x (ns b))))
        (lteq2 (x i j))))
    (leeqd ((eq i j) (mod a (pow (d2) i)) (mod a (pow (d2) j)) (mod b (pow (d2) i)) (mod b (pow (d2) j)))
      (modeq2d ((eq i j) a (pow (d2) i) (pow (d2) j))
        H2)
      (modeq2d ((eq i j) b (pow (d2) i) (pow (d2) j))
        H2)))
  (imeqd ((eq i (suc j)) (al x (im (lt x i) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) i)) (mod b (pow (d2) i))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j)))))
    (aleqd ((eq i (suc j)) x (im (lt x i) (im (el x (ns a)) (el x (ns b)))) (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b)))))
      (imeq1d ((eq i (suc j)) (lt x i) (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))
        (lteq2 (x i (suc j)))))
    (leeqd ((eq i (suc j)) (mod a (pow (d2) i)) (mod a (pow (d2) (suc j))) (mod b (pow (d2) i)) (mod b (pow (d2) (suc j))))
      (modeq2d ((eq i (suc j)) a (pow (d2) i) (pow (d2) (suc j)))
        H3)
      (modeq2d ((eq i (suc j)) b (pow (d2) i) (pow (d2) (suc j)))
        H3)))
  (imeqd ((eq i n) (al x (im (lt x i) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x n) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) i)) (mod b (pow (d2) i))) (le (mod a (pow (d2) n)) (mod b (pow (d2) n))))
    (aleqd ((eq i n) x (im (lt x i) (im (el x (ns a)) (el x (ns b)))) (im (lt x n) (im (el x (ns a)) (el x (ns b)))))
      (imeq1d ((eq i n) (lt x i) (lt x n) (im (el x (ns a)) (el x (ns b))))
        (lteq2 (x i n))))
    (leeqd ((eq i n) (mod a (pow (d2) i)) (mod a (pow (d2) n)) (mod b (pow (d2) i)) (mod b (pow (d2) n)))
      (modeq2d ((eq i n) a (pow (d2) i) (pow (d2) n))
        H4)
      (modeq2d ((eq i n) b (pow (d2) i) (pow (d2) n))
        H4)))
  (a1i ((al x (im (lt x (d0)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0)))))
    (mpbir ((le (d0) (mod b (pow (d2) (d0)))) (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0)))))
      (ax_mp ((eq (mod a (pow (d2) (d0))) (d0)) (iff (le (mod a (pow (d2) (d0))) (mod b (pow (d2) (d0)))) (le (d0) (mod b (pow (d2) (d0))))))
        (leeq1 ((mod a (pow (d2) (d0))) (d0) (mod b (pow (d2) (d0)))))
        (ax_mp ((eq (mod a (d1)) (d0)) (eq (mod a (pow (d2) (d0))) (d0)))
          (ax_mp ((eq (mod a (pow (d2) (d0))) (mod a (d1))) (im (eq (mod a (d1)) (d0)) (eq (mod a (pow (d2) (d0))) (d0))))
            (eqtr ((mod a (pow (d2) (d0))) (mod a (d1)) (d0)))
            (ax_mp ((eq (pow (d2) (d0)) (d1)) (eq (mod a (pow (d2) (d0))) (mod a (d1))))
              (modeq2 (a (pow (d2) (d0)) (d1)))
              (pow0 ((d2)))))
          (mod12 (a))))
      (le01 ((mod b (pow (d2) (d0)))))))
  (rsyl ((im (al x (im (lt x j) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (im (al x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (im (al x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j))))))
    (imim1i ((al x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))) (al x (im (lt x j) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j))))
      (alimi (x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b)))) (im (lt x j) (im (el x (ns a)) (el x (ns b)))))
        (imim1i ((lt x j) (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))
          (mpi ((lt x j) (lt j (suc j)) (lt x (suc j)))
            H5
            (lttr (x j (suc j)))))))
    (a2i ((al x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j)))))
      (rsyl ((al x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))) (im (el j (ns a)) (el j (ns b))) (im (le (mod a (pow (d2) j)) (mod b (pow (d2) j))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j))))))
        (mpi ((al x (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b))))) (lt j (suc j)) (im (el j (ns a)) (el j (ns b))))
          H5
          (eale (x j (im (lt x (suc j)) (im (el x (ns a)) (el x (ns b)))) (im (lt j (suc j)) (im (el j (ns a)) (el j (ns b)))))
            (imeqd ((eq x j) (lt x (suc j)) (lt j (suc j)) (im (el x (ns a)) (el x (ns b))) (im (el j (ns a)) (el j (ns b))))
              (lteq1 (x j (suc j)))
              (imeqd ((eq x j) (el x (ns a)) (el j (ns a)) (el x (ns b)) (el j (ns b)))
                (eleq1 ((ns a) x j))
                (eleq1 ((ns b) x j))))))
        (exp ((im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j)))))
          (sylib ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (le (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j)))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j)))))
            (ax_mp ((eq (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod b (pow (d2) (suc j)))) (iff (le (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j)))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j))))))
              (ax_mp ((eq (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod a (pow (d2) (suc j)))) (im (eq (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod b (pow (d2) (suc j)))) (iff (le (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j)))) (le (mod a (pow (d2) (suc j))) (mod b (pow (d2) (suc j)))))))
                (leeq ((add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod a (pow (d2) (suc j))) (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod b (pow (d2) (suc j)))))
                (divmod ((mod a (pow (d2) (suc j))) (pow (d2) j))))
              (divmod ((mod b (pow (d2) (suc j))) (pow (d2) j))))
            (sylibr ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (le (add (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mod a (pow (d2) j))) (add (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod b (pow (d2) j)))) (le (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j)))))
              (ax_mp ((eq (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod b (pow (d2) j)))) (iff (le (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j)))) (le (add (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mod a (pow (d2) j))) (add (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod b (pow (d2) j))))))
                (ax_mp ((eq (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mod a (pow (d2) j)))) (im (eq (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod b (pow (d2) j)))) (iff (le (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j)))) (le (add (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mod a (pow (d2) j))) (add (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod b (pow (d2) j)))))))
                  (leeq ((add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mod a (pow (d2) j))) (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod b (pow (d2) j)))))
                  (ax_mp ((eq (mod (mod a (pow (d2) (suc j))) (pow (d2) j)) (mod a (pow (d2) j))) (eq (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mod a (pow (d2) j)))))
                    (ax_mp ((eq (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2)))) (im (eq (mod (mod a (pow (d2) (suc j))) (pow (d2) j)) (mod a (pow (d2) j))) (eq (add (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mod a (pow (d2) j))))))
                      (addeq ((mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mod (mod a (pow (d2) (suc j))) (pow (d2) j)) (mod a (pow (d2) j))))
                      (ax_mp ((eq (div (mod a (pow (d2) (suc j))) (pow (d2) j)) (mod (div a (pow (d2) j)) (d2))) (eq (mul (pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j))) (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2)))))
                        (muleq2 ((pow (d2) j) (div (mod a (pow (d2) (suc j))) (pow (d2) j)) (mod (div a (pow (d2) j)) (d2))))
                        (ax_mp ((eq (mod (div a (pow (d2) j)) (d2)) (div (mod a (mul (pow (d2) j) (d2))) (pow (d2) j))) (eq (div (mod a (pow (d2) (suc j))) (pow (d2) j)) (mod (div a (pow (d2) j)) (d2))))
                          (ax_mp ((eq (div (mod a (pow (d2) (suc j))) (pow (d2) j)) (div (mod a (mul (pow (d2) j) (d2))) (pow (d2) j))) (im (eq (mod (div a (pow (d2) j)) (d2)) (div (mod a (mul (pow (d2) j) (d2))) (pow (d2) j))) (eq (div (mod a (pow (d2) (suc j))) (pow (d2) j)) (mod (div a (pow (d2) j)) (d2)))))
                            (eqtr4 ((div (mod a (pow (d2) (suc j))) (pow (d2) j)) (div (mod a (mul (pow (d2) j) (d2))) (pow (d2) j)) (mod (div a (pow (d2) j)) (d2))))
                            (ax_mp ((eq (mod a (pow (d2) (suc j))) (mod a (mul (pow (d2) j) (d2)))) (eq (div (mod a (pow (d2) (suc j))) (pow (d2) j)) (div (mod a (mul (pow (d2) j) (d2))) (pow (d2) j))))
                              (diveq1 ((mod a (pow (d2) (suc j))) (mod a (mul (pow (d2) j) (d2))) (pow (d2) j)))
                              (ax_mp ((eq (pow (d2) (suc j)) (mul (pow (d2) j) (d2))) (eq (mod a (pow (d2) (suc j))) (mod a (mul (pow (d2) j) (d2)))))
                                (modeq2 (a (pow (d2) (suc j)) (mul (pow (d2) j) (d2))))
                                H6)))
                          (divmod1 (a (pow (d2) j) (d2))))))
                    (ax_mp ((dvd (pow (d2) j) (pow (d2) (suc j))) (eq (mod (mod a (pow (d2) (suc j))) (pow (d2) j)) (mod a (pow (d2) j))))
                      (modmod (a (pow (d2) j) (pow (d2) (suc j))))
                      H9)))
                (ax_mp ((eq (mod (mod b (pow (d2) (suc j))) (pow (d2) j)) (mod b (pow (d2) j))) (eq (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod b (pow (d2) j)))))
                  (ax_mp ((eq (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2)))) (im (eq (mod (mod b (pow (d2) (suc j))) (pow (d2) j)) (mod b (pow (d2) j))) (eq (add (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j))) (add (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod b (pow (d2) j))))))
                    (addeq ((mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod (mod b (pow (d2) (suc j))) (pow (d2) j)) (mod b (pow (d2) j))))
                    (ax_mp ((eq (div (mod b (pow (d2) (suc j))) (pow (d2) j)) (mod (div b (pow (d2) j)) (d2))) (eq (mul (pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j))) (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2)))))
                      (muleq2 ((pow (d2) j) (div (mod b (pow (d2) (suc j))) (pow (d2) j)) (mod (div b (pow (d2) j)) (d2))))
                      (ax_mp ((eq (mod (div b (pow (d2) j)) (d2)) (div (mod b (mul (pow (d2) j) (d2))) (pow (d2) j))) (eq (div (mod b (pow (d2) (suc j))) (pow (d2) j)) (mod (div b (pow (d2) j)) (d2))))
                        (ax_mp ((eq (div (mod b (pow (d2) (suc j))) (pow (d2) j)) (div (mod b (mul (pow (d2) j) (d2))) (pow (d2) j))) (im (eq (mod (div b (pow (d2) j)) (d2)) (div (mod b (mul (pow (d2) j) (d2))) (pow (d2) j))) (eq (div (mod b (pow (d2) (suc j))) (pow (d2) j)) (mod (div b (pow (d2) j)) (d2)))))
                          (eqtr4 ((div (mod b (pow (d2) (suc j))) (pow (d2) j)) (div (mod b (mul (pow (d2) j) (d2))) (pow (d2) j)) (mod (div b (pow (d2) j)) (d2))))
                          (ax_mp ((eq (mod b (pow (d2) (suc j))) (mod b (mul (pow (d2) j) (d2)))) (eq (div (mod b (pow (d2) (suc j))) (pow (d2) j)) (div (mod b (mul (pow (d2) j) (d2))) (pow (d2) j))))
                            (diveq1 ((mod b (pow (d2) (suc j))) (mod b (mul (pow (d2) j) (d2))) (pow (d2) j)))
                            (ax_mp ((eq (pow (d2) (suc j)) (mul (pow (d2) j) (d2))) (eq (mod b (pow (d2) (suc j))) (mod b (mul (pow (d2) j) (d2)))))
                              (modeq2 (b (pow (d2) (suc j)) (mul (pow (d2) j) (d2))))
                              H6)))
                        (divmod1 (b (pow (d2) j) (d2))))))
                  (ax_mp ((dvd (pow (d2) j) (pow (d2) (suc j))) (eq (mod (mod b (pow (d2) (suc j))) (pow (d2) j)) (mod b (pow (d2) j))))
                    (modmod (b (pow (d2) j) (pow (d2) (suc j))))
                    H9)))
              (leaddd ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2))) (mod a (pow (d2) j)) (mod b (pow (d2) j)))
                (syl ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (le (mod (div a (pow (d2) j)) (d2)) (mod (div b (pow (d2) j)) (d2))) (le (mul (pow (d2) j) (mod (div a (pow (d2) j)) (d2))) (mul (pow (d2) j) (mod (div b (pow (d2) j)) (d2)))))
                  (lemul2a ((pow (d2) j) (mod (div a (pow (d2) j)) (d2)) (mod (div b (pow (d2) j)) (d2))))
                  (sylibr ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (im (true (mod (div a (pow (d2) j)) (d2))) (true (mod (div b (pow (d2) j)) (d2)))) (le (mod (div a (pow (d2) j)) (d2)) (mod (div b (pow (d2) j)) (d2))))
                    (ax_mp ((bool (mod (div a (pow (d2) j)) (d2))) (iff (le (mod (div a (pow (d2) j)) (d2)) (mod (div b (pow (d2) j)) (d2))) (im (true (mod (div a (pow (d2) j)) (d2))) (true (mod (div b (pow (d2) j)) (d2))))))
                      (letrueb ((mod (div a (pow (d2) j)) (d2)) (mod (div b (pow (d2) j)) (d2))))
                      (boolmod2 ((div a (pow (d2) j)))))
                    (syl5bir ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (true (mod (div a (pow (d2) j)) (d2))) (odd (div a (pow (d2) j))) (true (mod (div b (pow (d2) j)) (d2))))
                      (dfodd2 ((div a (pow (d2) j))))
                      (syl6ib ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (odd (div a (pow (d2) j))) (odd (div b (pow (d2) j))) (true (mod (div b (pow (d2) j)) (d2))))
                        (dfodd2 ((div b (pow (d2) j))))
                        (syl5bir ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (odd (div a (pow (d2) j))) (el j (ns a)) (odd (div b (pow (d2) j))))
                          (:conv (iff (el j (ns a)) (odd (div a (pow (d2) j))))
                            (iff
                              (el j (ns a))
                              (:sym (:unfold nel (j a) ()
                                (odd
                                  (:unfold shr (a j) ()
                                    (div a (pow (d2) j)))))))
                            (elnel (j a)))
                          (syl6ib ((an (im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))) (el j (ns a)) (el j (ns b)) (odd (div b (pow (d2) j))))
                            (:conv (iff (el j (ns b)) (odd (div b (pow (d2) j))))
                              (iff
                                (el j (ns b))
                                (:sym (:unfold nel (j b) ()
                                  (odd
                                    (:unfold shr (b j) ()
                                      (div b (pow (d2) j)))))))
                              (elnel (j b)))
                            (anl ((im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))))))))))
                (anr ((im (el j (ns a)) (el j (ns b))) (le (mod a (pow (d2) j)) (mod b (pow (d2) j)))))))))))))))))))))))

(local theorem bndext ((a nat ()) (b nat ()) (n nat ()) (x nat)) ()
  (im (al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (eqm (pow (d2) n) a b))
()
(:conv (im (al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (eqm (pow (d2) n) a b))
  (im
    (al x (im (lt x n) (iff (el x (ns a)) (el x (ns b)))))
    (:unfold eqm ((pow (d2) n) a b) ()
      (eq (mod a (pow (d2) n)) (mod b (pow (d2) n)))))
  (leasymd ((al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (mod a (pow (d2) n)) (mod b (pow (d2) n)))
    (syl ((al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (al x (im (lt x n) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) n)) (mod b (pow (d2) n))))
      (bndextle (a b n x))
      (alimi (x (im (lt x n) (iff (el x (ns a)) (el x (ns b)))) (im (lt x n) (im (el x (ns a)) (el x (ns b)))))
        (imim2i ((lt x n) (iff (el x (ns a)) (el x (ns b))) (im (el x (ns a)) (el x (ns b))))
          (bi1 ((el x (ns a)) (el x (ns b)))))))
    (syl ((al x (im (lt x n) (iff (el x (ns a)) (el x (ns b))))) (al x (im (lt x n) (im (el x (ns b)) (el x (ns a))))) (le (mod b (pow (d2) n)) (mod a (pow (d2) n))))
      (bndextle (b a n x))
      (alimi (x (im (lt x n) (iff (el x (ns a)) (el x (ns b)))) (im (lt x n) (im (el x (ns b)) (el x (ns a)))))
        (imim2i ((lt x n) (iff (el x (ns a)) (el x (ns b))) (im (el x (ns b)) (el x (ns a))))
          (bi2 ((el x (ns a)) (el x (ns b))))))))))

(local theorem ssle ((a nat ()) (b nat ())) ()
  (im (subset (ns a) (ns b)) (le a b))
((x nat))
(:let H1 (powltid2 ((d2) (max a b)))
(:let H2 (d1lt2 ())
(:let H3 (ax_mp ((lt (d1) (d2)) (lt (max a b) (pow (d2) (max a b))))
  H1
  H2)
(sylib ((subset (ns a) (ns b)) (le (mod a (pow (d2) (max a b))) (mod b (pow (d2) (max a b)))) (le a b))
  (ax_mp ((eq (mod b (pow (d2) (max a b))) b) (iff (le (mod a (pow (d2) (max a b))) (mod b (pow (d2) (max a b)))) (le a b)))
    (ax_mp ((eq (mod a (pow (d2) (max a b))) a) (im (eq (mod b (pow (d2) (max a b))) b) (iff (le (mod a (pow (d2) (max a b))) (mod b (pow (d2) (max a b)))) (le a b))))
      (leeq ((mod a (pow (d2) (max a b))) a (mod b (pow (d2) (max a b))) b))
      (ax_mp ((lt a (pow (d2) (max a b))) (eq (mod a (pow (d2) (max a b))) a))
        (modlteq (a (pow (d2) (max a b))))
        (ax_mp ((lt (max a b) (pow (d2) (max a b))) (lt a (pow (d2) (max a b))))
          (ax_mp ((le a (max a b)) (im (lt (max a b) (pow (d2) (max a b))) (lt a (pow (d2) (max a b)))))
            (lelttr (a (max a b) (pow (d2) (max a b))))
            (lemax1 (a b)))
          H3)))
    (ax_mp ((lt b (pow (d2) (max a b))) (eq (mod b (pow (d2) (max a b))) b))
      (modlteq (b (pow (d2) (max a b))))
      (ax_mp ((lt (max a b) (pow (d2) (max a b))) (lt b (pow (d2) (max a b))))
        (ax_mp ((le b (max a b)) (im (lt (max a b) (pow (d2) (max a b))) (lt b (pow (d2) (max a b)))))
          (lelttr (b (max a b) (pow (d2) (max a b))))
          (lemax2 (a b)))
        H3)))
  (syl ((subset (ns a) (ns b)) (al x (im (lt x (max a b)) (im (el x (ns a)) (el x (ns b))))) (le (mod a (pow (d2) (max a b))) (mod b (pow (d2) (max a b)))))
    (bndextle (a b (max a b) x))
    (:conv (im (subset (ns a) (ns b)) (al x (im (lt x (max a b)) (im (el x (ns a)) (el x (ns b))))))
      (im
        (:unfold subset ((ns a) (ns b)) (x)
          (al x (im (el x (ns a)) (el x (ns b)))))
        (al x (im (lt x (max a b)) (im (el x (ns a)) (el x (ns b))))))
      (alimi (x (im (el x (ns a)) (el x (ns b))) (im (lt x (max a b)) (im (el x (ns a)) (el x (ns b)))))
        (ax_1 ((im (el x (ns a)) (el x (ns b))) (lt x (max a b))))))))))))

(theorem axext ((a nat ()) (b nat ())) ()
  (im (eqs (ns a) (ns b)) (eq a b))
()
(leasymd ((eqs (ns a) (ns b)) a b)
  (syl ((eqs (ns a) (ns b)) (subset (ns a) (ns b)) (le a b))
    (ssle (a b))
    (eqss ((ns a) (ns b))))
  (syl ((eqs (ns a) (ns b)) (subset (ns b) (ns a)) (le b a))
    (ssle (b a))
    (eqssr ((ns a) (ns b))))))

(local theorem nseqb ((a nat ()) (b nat ())) ()
  (iff (eqs (ns a) (ns b)) (eq a b))
()
(ibii ((eqs (ns a) (ns b)) (eq a b))
  (axext (a b))
  (nseq (a b))))

(theorem ellt ((a nat ()) (b nat ())) ()
  (im (el a (ns b)) (lt a b))
()
(sylbi ((el a (ns b)) (nel a b) (lt a b))
  (elnel (a b))
  (sylbi ((nel a b) (true (mod (shr b a) (d2))) (lt a b))
    (:conv (iff (nel a b) (true (mod (shr b a) (d2))))
      (iff
        (:unfold nel (a b) ()
          (odd (shr b a)))
        (true (mod (shr b a) (d2))))
      (dfodd2 ((shr b a))))
    (:conv (im (true (mod (shr b a) (d2))) (lt a b))
      (im
        (:unfold true ((mod (shr b a) (d2))) ()
          (:unfold ne ((mod (shr b a) (d2)) (d0)) ()
            (not
              (eq
                (mod
                  (:unfold shr (b a) ()
                    (div b (pow (d2) a)))
                  (d2))
                (d0)))))
        (lt a b))
      (ax_mp ((im (not (lt a b)) (eq (mod (div b (pow (d2) a)) (d2)) (d0))) (im (not (eq (mod (div b (pow (d2) a)) (d2)) (d0))) (lt a b)))
        (con1 ((lt a b) (eq (mod (div b (pow (d2) a)) (d2)) (d0))))
        (sylbir ((not (lt a b)) (le b a) (eq (mod (div b (pow (d2) a)) (d2)) (d0)))
          (lenlt (b a))
          (syl6eq ((le b a) (mod (div b (pow (d2) a)) (d2)) (mod (d0) (d2)) (d0))
            (mod01 ((d2)))
            (modeq1d ((le b a) (div b (pow (d2) a)) (d0) (d2))
              (sylibr ((le b a) (lt b (pow (d2) a)) (eq (div b (pow (d2) a)) (d0)))
                (ax_mp ((ne (pow (d2) a) (d0)) (iff (eq (div b (pow (d2) a)) (d0)) (lt b (pow (d2) a))))
                  (diveq0 (b (pow (d2) a)))
                  (pow2ne0 (a)))
                (mpi ((le b a) (lt a (pow (d2) a)) (lt b (pow (d2) a)))
                  (ax_mp ((lt (d1) (d2)) (lt a (pow (d2) a)))
                    (powltid2 ((d2) a))
                    (d1lt2 ()))
                  (lelttr (b a (pow (d2) a)))))))))))))

(local theorem el02 ((a nat ())) ()
  (not (el a (ns (d0))))
()
(mt ((lt a (d0)) (el a (ns (d0))))
  (ellt (a (d0)))
  (lt02 (a))))

(theorem nel0 ((a nat ())) ()
  (not (el a (ns (d0))))
()
(el02 (a)))

(local theorem ss01 ((A set ())) ()
  (subset (ns (d0)) A)
((x nat))
(:conv (subset (ns (d0)) A)
  (:unfold subset ((ns (d0)) A) (x)
    (al x (im (el x (ns (d0))) (el x A))))
  (ax_gen (x (im (el x (ns (d0))) (el x A)))
    (ax_mp ((not (el x (ns (d0)))) (im (el x (ns (d0))) (el x A)))
      (absurd ((el x (ns (d0))) (el x A)))
      (el02 (x))))))

(local theorem in01 ((A set ())) ()
  (eqs (Inter (ns (d0)) A) (ns (d0)))
()
(mpbi ((subset (ns (d0)) A) (eqs (Inter (ns (d0)) A) (ns (d0))))
  (eqin1 ((ns (d0)) A))
  (ss01 (A))))

(local theorem in02 ((A set ())) ()
  (eqs (Inter A (ns (d0))) (ns (d0)))
()
(mpbi ((subset (ns (d0)) A) (eqs (Inter A (ns (d0))) (ns (d0))))
  (eqin2 ((ns (d0)) A))
  (ss01 (A))))

(local theorem un01 ((A set ())) ()
  (eqs (Union (ns (d0)) A) A)
()
(mpbi ((subset (ns (d0)) A) (eqs (Union (ns (d0)) A) A))
  (equn1 ((ns (d0)) A))
  (ss01 (A))))

(local theorem un02 ((A set ())) ()
  (eqs (Union A (ns (d0))) A)
()
(mpbi ((subset (ns (d0)) A) (eqs (Union A (ns (d0))) A))
  (equn2 ((ns (d0)) A))
  (ss01 (A))))

(local theorem xp01 ((A set ())) ()
  (eqs (Xp (ns (d0)) A) (ns (d0)))
((x nat))
(eqri ((Xp (ns (d0)) A) (ns (d0)) x)
  (ax_mp ((not (el x (ns (d0)))) (iff (el x (Xp (ns (d0)) A)) (el x (ns (d0)))))
    (ax_mp ((not (el x (Xp (ns (d0)) A))) (im (not (el x (ns (d0)))) (iff (el x (Xp (ns (d0)) A)) (el x (ns (d0))))))
      (binth ((el x (Xp (ns (d0)) A)) (el x (ns (d0)))))
      (mt ((el (fst x) (ns (d0))) (el x (Xp (ns (d0)) A)))
        (xpfst ((ns (d0)) A x))
        (el02 ((fst x)))))
    (el02 (x)))))

(local theorem xp02 ((A set ())) ()
  (eqs (Xp A (ns (d0))) (ns (d0)))
((x nat))
(eqri ((Xp A (ns (d0))) (ns (d0)) x)
  (ax_mp ((not (el x (ns (d0)))) (iff (el x (Xp A (ns (d0)))) (el x (ns (d0)))))
    (ax_mp ((not (el x (Xp A (ns (d0))))) (im (not (el x (ns (d0)))) (iff (el x (Xp A (ns (d0)))) (el x (ns (d0))))))
      (binth ((el x (Xp A (ns (d0)))) (el x (ns (d0)))))
      (mt ((el (snd x) (ns (d0))) (el x (Xp A (ns (d0)))))
        (xpsnd (A (ns (d0)) x))
        (el02 ((snd x)))))
    (el02 (x)))))

(local theorem dm0 () ()
  (eqs (Dom (ns (d0))) (ns (d0)))
((x nat) (y nat))
(eqri ((Dom (ns (d0))) (ns (d0)) x)
  (ax_mp ((not (el x (ns (d0)))) (iff (el x (Dom (ns (d0)))) (el x (ns (d0)))))
    (ax_mp ((not (el x (Dom (ns (d0))))) (im (not (el x (ns (d0)))) (iff (el x (Dom (ns (d0)))) (el x (ns (d0))))))
      (binth ((el x (Dom (ns (d0)))) (el x (ns (d0)))))
      (mtbir ((ex y (el (pr x y) (ns (d0)))) (el x (Dom (ns (d0)))))
        (eldm ((ns (d0)) x y))
        (ngen (y (el (pr x y) (ns (d0))))
          (el02 ((pr x y))))))
    (el02 (x)))))

(local theorem rn0 () ()
  (eqs (Ran (ns (d0))) (ns (d0)))
((x nat) (y nat))
(eqri ((Ran (ns (d0))) (ns (d0)) y)
  (ax_mp ((not (el y (ns (d0)))) (iff (el y (Ran (ns (d0)))) (el y (ns (d0)))))
    (ax_mp ((not (el y (Ran (ns (d0))))) (im (not (el y (ns (d0)))) (iff (el y (Ran (ns (d0)))) (el y (ns (d0))))))
      (binth ((el y (Ran (ns (d0)))) (el y (ns (d0)))))
      (mtbir ((ex x (el (pr x y) (ns (d0)))) (el y (Ran (ns (d0)))))
        (elrn ((ns (d0)) y x))
        (ngen (x (el (pr x y) (ns (d0))))
          (el02 ((pr x y))))))
    (el02 (y)))))

(local theorem isf0 () ()
  (isfun (ns (d0)))
((x nat) (y nat) (z nat))
(:conv (isfun (ns (d0)))
  (:unfold isfun ((ns (d0))) (x y z)
    (al x (al y (al z (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z)))))))
  (ax_gen (x (al y (al z (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z))))))
    (ax_gen (y (al z (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z)))))
      (ax_gen (z (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z))))
        (ax_mp ((not (el (pr x y) (ns (d0)))) (im (el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z))))
          (absurd ((el (pr x y) (ns (d0))) (im (el (pr x z) (ns (d0))) (eq y z))))
          (el02 ((pr x y)))))))))

(local theorem app01 ((a nat ())) ()
  (eq (app (ns (d0)) a) (d0))
()
(ax_mp ((not (el a (Dom (ns (d0))))) (eq (app (ns (d0)) a) (d0)))
  (ndmapp ((ns (d0)) a))
  (mtbir ((el a (ns (d0))) (el a (Dom (ns (d0)))))
    (ax_mp ((eqs (Dom (ns (d0))) (ns (d0))) (iff (el a (Dom (ns (d0)))) (el a (ns (d0)))))
      (eleq2 ((Dom (ns (d0))) (ns (d0)) a))
      (dm0 ()))
    (el02 (a)))))

(local theorem el12 ((a nat ())) ()
  (iff (el a (ns (d1))) (eq a (d0)))
()
(ibii ((el a (ns (d1))) (eq a (d0)))
  (sylib ((el a (ns (d1))) (lt a (d1)) (eq a (d0)))
    (lt12 (a))
    (ellt (a (d1))))
  (mpbiri ((eq a (d0)) (el (d0) (ns (d1))) (el a (ns (d1))))
    (mpbir ((odd (d1)) (el (d0) (ns (d1))))
      (el01 ((d1)))
      (odd1 ()))
    (eleq1 ((ns (d1)) a (d0))))))

(local theorem elpow2 ((a nat ()) (n nat ())) ()
  (iff (el a (ns (pow (d2) n))) (eq a n))
()
(ax_mp ((iff (el a (ns (shl (d1) n))) (eq a n)) (iff (el a (ns (pow (d2) n))) (eq a n)))
  (ax_mp ((iff (el a (ns (shl (d1) n))) (el a (ns (pow (d2) n)))) (im (iff (el a (ns (shl (d1) n))) (eq a n)) (iff (el a (ns (pow (d2) n))) (eq a n))))
    (bitr3 ((el a (ns (pow (d2) n))) (el a (ns (shl (d1) n))) (eq a n)))
    (ax_mp ((eq (shl (d1) n) (pow (d2) n)) (iff (el a (ns (shl (d1) n))) (el a (ns (pow (d2) n)))))
      (elneq2 (a (shl (d1) n) (pow (d2) n)))
      (shl11 (n))))
  (ax_mp ((iff (an (le n a) (el (sub a n) (ns (d1)))) (eq a n)) (iff (el a (ns (shl (d1) n))) (eq a n)))
    (ax_mp ((iff (el a (ns (shl (d1) n))) (an (le n a) (el (sub a n) (ns (d1))))) (im (iff (an (le n a) (el (sub a n) (ns (d1)))) (eq a n)) (iff (el a (ns (shl (d1) n))) (eq a n))))
      (bitr ((el a (ns (shl (d1) n))) (an (le n a) (el (sub a n) (ns (d1)))) (eq a n)))
      (elshl (a (d1) n)))
    (ax_mp ((iff (eq a n) (an (le n a) (le a n))) (iff (an (le n a) (el (sub a n) (ns (d1)))) (eq a n)))
      (ax_mp ((iff (an (le n a) (el (sub a n) (ns (d1)))) (an (le n a) (le a n))) (im (iff (eq a n) (an (le n a) (le a n))) (iff (an (le n a) (el (sub a n) (ns (d1)))) (eq a n))))
        (bitr4 ((an (le n a) (el (sub a n) (ns (d1)))) (an (le n a) (le a n)) (eq a n)))
        (aneq2i ((le n a) (el (sub a n) (ns (d1))) (le a n))
          (ax_mp ((iff (le a n) (eq (sub a n) (d0))) (iff (el (sub a n) (ns (d1))) (le a n)))
            (ax_mp ((iff (el (sub a n) (ns (d1))) (eq (sub a n) (d0))) (im (iff (le a n) (eq (sub a n) (d0))) (iff (el (sub a n) (ns (d1))) (le a n))))
              (bitr4 ((el (sub a n) (ns (d1))) (eq (sub a n) (d0)) (le a n)))
              (el12 ((sub a n))))
            (lesubeq0 (a n)))))
      (ax_mp ((iff (eq n a) (an (le n a) (le a n))) (iff (eq a n) (an (le n a) (le a n))))
        (ax_mp ((iff (eq a n) (eq n a)) (im (iff (eq n a) (an (le n a) (le a n))) (iff (eq a n) (an (le n a) (le a n)))))
          (bitr ((eq a n) (eq n a) (an (le n a) (le a n))))
          (eqcomb (a n)))
        (eqlele (n a)))))))

(local theorem finns ((a nat ())) ()
  (finite (ns a))
((x nat))
(ax_mp ((finite (ab x (lt x a))) (finite (ns a)))
  (ax_mp ((subset (ns a) (ab x (lt x a))) (im (finite (ab x (lt x a))) (finite (ns a))))
    (finss ((ns a) (ab x (lt x a))))
    (mpbi ((al x (im (el x (ns a)) (lt x a))) (subset (ns a) (ab x (lt x a))))
      (ssab2 ((ns a) x (lt x a)))
      (ax_gen (x (im (el x (ns a)) (lt x a)))
        (ellt (x a)))))
  (ltfin (a x))))

(def lower ((A set ())) (nat ())
((n nat))
(the (ab n (eqs (ns n) A))))

(local theorem lowereqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eq (lower A1) (lower A2)))
((n nat))
(:conv (im _G (eq (lower A1) (lower A2)))
  (im
    _G
    (eq
      (:unfold lower (A1) (n)
        (the (ab n (eqs (ns n) A1))))
      (:unfold lower (A2) (n)
        (the (ab n (eqs (ns n) A2))))))
  (theeqd (_G (ab n (eqs (ns n) A1)) (ab n (eqs (ns n) A2)))
    (abeqd (_G n (eqs (ns n) A1) (eqs (ns n) A2))
      (eqseqd (_G (ns n) (ns n) A1 A2)
        (eqsidd (_G (ns n)))
        hA)))))

(local theorem lowereq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eq (lower A1) (lower A2)))
()
(lowereqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(theorem eqlower ((A set ())) ()
  (iff (finite A) (eqs A (ns (lower A))))
((m nat) (n nat) (x nat) (y nat) (z nat))
(:let H1 (addeq2 (x y z))
(:let H2 (eleq1d (A (eq y z) (add x y) (add x z))
  H1)
(:let H3 (bieq2d ((eq y z) (el x (ns n)) (el (add x y) A) (el (add x z) A))
  H2)
(:let H4 (aleqd ((eq y z) x (iff (el x (ns n)) (el (add x y) A)) (iff (el x (ns n)) (el (add x z) A)))
  H3)
(:let H5 (exeqd ((eq y z) n (al x (iff (el x (ns n)) (el (add x y) A))) (al x (iff (el x (ns n)) (el (add x z) A))))
  H4)
(:let H6 (imeq1d ((eq y z) (ex n (al x (iff (el x (ns n)) (el (add x y) A)))) (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n))))
  H5)
(:let H7 (ifneg ((el z A) (b1 n) (b0 n)))
(:let H8 (ifpos ((el z A) (b1 n) (b0 n)))
(:let H9 (anr ((an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))))
(:let H10 (sub1can (y))
(:let H11 (anlr ((eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0))) (eq x (sub y (d1)))))
(:let H12 (:conv (im (an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (ne y (d0)))
  (im
    (an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1))))
    (:unfold ne (y (d0)) ()
      (not (eq y (d0)))))
  H11)
(:let H13 (syl ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (ne y (d0)) (eq (suc (sub y (d1))) y))
  H10
  H12)
(ibii ((finite A) (eqs A (ns (lower A))))
  (rsyl ((finite A) (ex n (eqs A (ns n))) (eqs A (ns (lower A))))
    (:conv (im (finite A) (ex n (eqs A (ns n))))
      (im
        (:unfold finite (A) (z y)
          (ex z (al y (im (el y A) (lt y z)))))
        (ex n (eqs A (ns n))))
      (eex (z (al y (im (el y A) (lt y z))) (ex n (eqs A (ns n))))
        (syl ((al y (im (el y A) (lt y z))) (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n))))
          (ind (y z z (im (ex n (al x (iff (el x (ns n)) (el (add x y) A)))) (ex n (eqs A (ns n)))) (im (ex n (al x (iff (el x (ns n)) (el (add x (d0)) A)))) (ex n (eqs A (ns n)))) (im (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n)))) (im (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n)))) (im (ex n (al x (iff (el x (ns n)) (el (add x (suc z)) A)))) (ex n (eqs A (ns n)))))
            (imeq1d ((eq y (d0)) (ex n (al x (iff (el x (ns n)) (el (add x y) A)))) (ex n (al x (iff (el x (ns n)) (el (add x (d0)) A)))) (ex n (eqs A (ns n))))
              (exeqd ((eq y (d0)) n (al x (iff (el x (ns n)) (el (add x y) A))) (al x (iff (el x (ns n)) (el (add x (d0)) A))))
                (aleqd ((eq y (d0)) x (iff (el x (ns n)) (el (add x y) A)) (iff (el x (ns n)) (el (add x (d0)) A)))
                  (bieq2d ((eq y (d0)) (el x (ns n)) (el (add x y) A) (el (add x (d0)) A))
                    (eleq1d (A (eq y (d0)) (add x y) (add x (d0)))
                      (addeq2 (x y (d0))))))))
            H6
            (imeq1d ((eq y (suc z)) (ex n (al x (iff (el x (ns n)) (el (add x y) A)))) (ex n (al x (iff (el x (ns n)) (el (add x (suc z)) A)))) (ex n (eqs A (ns n))))
              (exeqd ((eq y (suc z)) n (al x (iff (el x (ns n)) (el (add x y) A))) (al x (iff (el x (ns n)) (el (add x (suc z)) A))))
                (aleqd ((eq y (suc z)) x (iff (el x (ns n)) (el (add x y) A)) (iff (el x (ns n)) (el (add x (suc z)) A)))
                  (bieq2d ((eq y (suc z)) (el x (ns n)) (el (add x y) A) (el (add x (suc z)) A))
                    (eleq1d (A (eq y (suc z)) (add x y) (add x (suc z)))
                      (addeq2 (x y (suc z))))))))
            H6
            (eximi (n (al x (iff (el x (ns n)) (el (add x (d0)) A))) (eqs A (ns n)))
              (:conv (im (al x (iff (el x (ns n)) (el (add x (d0)) A))) (eqs A (ns n)))
                (im
                  (al x (iff (el x (ns n)) (el (add x (d0)) A)))
                  (:unfold eqs (A (ns n)) (x)
                    (al x (iff (el x A) (el x (ns n))))))
                (alimi (x (iff (el x (ns n)) (el (add x (d0)) A)) (iff (el x A) (el x (ns n))))
                  (bicomd ((iff (el x (ns n)) (el (add x (d0)) A)) (el x (ns n)) (el x A))
                    (syl6bb ((iff (el x (ns n)) (el (add x (d0)) A)) (el x (ns n)) (el (add x (d0)) A) (el x A))
                      (ax_mp ((eq (add x (d0)) x) (iff (el (add x (d0)) A) (el x A)))
                        (eleq1 (A (add x (d0)) x))
                        (add0 (x)))
                      (id ((iff (el x (ns n)) (el (add x (d0)) A)))))))))
            (imim1i ((ex n (al x (iff (el x (ns n)) (el (add x (suc z)) A)))) (ex n (al x (iff (el x (ns n)) (el (add x z) A)))) (ex n (eqs A (ns n))))
              (sylib ((ex n (al x (iff (el x (ns n)) (el (add x (suc z)) A)))) (ex m (al y (iff (el y (ns m)) (el (add y z) A)))) (ex n (al x (iff (el x (ns n)) (el (add x z) A)))))
                (cbvex (m n (al y (iff (el y (ns m)) (el (add y z) A))) (al x (iff (el x (ns n)) (el (add x z) A))))
                  (cbvald (y x (eq m n) (iff (el y (ns m)) (el (add y z) A)) (iff (el x (ns n)) (el (add x z) A)))
                    (bieqd ((an (eq m n) (eq y x)) (el y (ns m)) (el x (ns n)) (el (add y z) A) (el (add x z) A))
                      (elneqd ((an (eq m n) (eq y x)) y x m n)
                        (anr ((eq m n) (eq y x)))
                        (anl ((eq m n) (eq y x))))
                      (eleq1d (A (an (eq m n) (eq y x)) (add y z) (add x z))
                        (anwr ((eq m n) (eq y x) (eq (add y z) (add x z)))
                          (addeq1 (y x z)))))))
                (eex (n (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (ex m (al y (iff (el y (ns m)) (el (add y z) A)))))
                  (iexde (m (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (if (el z A) (b1 n) (b0 n)) (al y (iff (el y (ns m)) (el (add y z) A))))
                    (iald (y (an (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (eq m (if (el z A) (b1 n) (b0 n)))) (iff (el y (ns m)) (el (add y z) A)))
                      (impcom ((eq m (if (el z A) (b1 n) (b0 n))) (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (iff (el y (ns m)) (el (add y z) A)))
                        (casesda ((eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0)) (im (al x (iff (el x (ns n)) (el (add x (suc z)) A))) (iff (el y (ns m)) (el (add y z) A))))
                          (a1d ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (iff (el y (ns m)) (el (add y z) A)) (al x (iff (el x (ns n)) (el (add x (suc z)) A))))
                            (mpbiri ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (iff (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (el z A)) (iff (el y (ns m)) (el (add y z) A)))
                              (ax_mp ((iff (odd (if (el z A) (b1 n) (b0 n))) (el z A)) (iff (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (el z A)))
                                (ax_mp ((iff (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (odd (if (el z A) (b1 n) (b0 n)))) (im (iff (odd (if (el z A) (b1 n) (b0 n))) (el z A)) (iff (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (el z A))))
                                  (bitr ((el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (odd (if (el z A) (b1 n) (b0 n))) (el z A)))
                                  (el01 ((if (el z A) (b1 n) (b0 n)))))
                                (ibii ((odd (if (el z A) (b1 n) (b0 n))) (el z A))
                                  (ax_mp ((im (not (el z A)) (not (odd (if (el z A) (b1 n) (b0 n))))) (im (odd (if (el z A) (b1 n) (b0 n))) (el z A)))
                                    (ax_3 ((el z A) (odd (if (el z A) (b1 n) (b0 n)))))
                                    (mtbird ((not (el z A)) (odd (b0 n)) (odd (if (el z A) (b1 n) (b0 n))))
                                      (oddeqd ((not (el z A)) (if (el z A) (b1 n) (b0 n)) (b0 n))
                                        H7)
                                      (a1i ((not (el z A)) (not (odd (b0 n))))
                                        (b0odd (n)))))
                                  (mpbiri ((el z A) (odd (b1 n)) (odd (if (el z A) (b1 n) (b0 n))))
                                    (b1odd (n))
                                    (oddeqd ((el z A) (if (el z A) (b1 n) (b0 n)) (b1 n))
                                      H8))))
                              (bieqd ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (el y (ns m)) (el (d0) (ns (if (el z A) (b1 n) (b0 n)))) (el (add y z) A) (el z A))
                                (elneqd ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) y (d0) m (if (el z A) (b1 n) (b0 n)))
                                  (anr ((eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))))
                                  (anl ((eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0)))))
                                (eleq1d (A (an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (add y z) z)
                                  (syl6eq ((an (eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0))) (add y z) (add (d0) z) z)
                                    (add01 (z))
                                    (anwr ((eq m (if (el z A) (b1 n) (b0 n))) (eq y (d0)) (eq (add y z) (add (d0) z)))
                                      (addeq1 (y (d0) z))))))))
                          (ealde ((iff (el y (ns m)) (el (add y z) A)) x (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (sub y (d1)) (iff (el x (ns n)) (el (add x (suc z)) A)))
                            (bi1d ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (iff (el x (ns n)) (el (add x (suc z)) A)) (iff (el y (ns m)) (el (add y z) A)))
                              (bieqd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (el x (ns n)) (el y (ns m)) (el (add x (suc z)) A) (el (add y z) A))
                                (mpbiri ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (iff (el (sub y (d1)) (ns n)) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))) (iff (el x (ns n)) (el y (ns m))))
                                  (ax_mp ((iff (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))) (iff (el (sub y (d1)) (ns n)) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))))
                                    (ax_mp ((iff (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (sub y (d1)) (ns n))) (im (iff (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))) (iff (el (sub y (d1)) (ns n)) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n)))))))
                                      (bitr3 ((el (sub y (d1)) (ns n)) (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n))))))
                                      (ax_mp ((eq (div (if (el z A) (b1 n) (b0 n)) (d2)) n) (iff (el (sub y (d1)) (ns (div (if (el z A) (b1 n) (b0 n)) (d2)))) (el (sub y (d1)) (ns n))))
                                        (elneq2 ((sub y (d1)) (div (if (el z A) (b1 n) (b0 n)) (d2)) n))
                                        (cases ((el z A) (eq (div (if (el z A) (b1 n) (b0 n)) (d2)) n))
                                          (syl6eq ((el z A) (div (if (el z A) (b1 n) (b0 n)) (d2)) (div (b1 n) (d2)) n)
                                            (b1div2 (n))
                                            (diveq1d ((el z A) (if (el z A) (b1 n) (b0 n)) (b1 n) (d2))
                                              H8))
                                          (syl6eq ((not (el z A)) (div (if (el z A) (b1 n) (b0 n)) (d2)) (div (b0 n) (d2)) n)
                                            (b0div2 (n))
                                            (diveq1d ((not (el z A)) (if (el z A) (b1 n) (b0 n)) (b0 n) (d2))
                                              H7)))))
                                    (eldiv2 ((sub y (d1)) (if (el z A) (b1 n) (b0 n)))))
                                  (bieqd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (el x (ns n)) (el (sub y (d1)) (ns n)) (el y (ns m)) (el (suc (sub y (d1))) (ns (if (el z A) (b1 n) (b0 n)))))
                                    (eleq1d ((ns n) (an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) x (sub y (d1)))
                                      H9)
                                    (elneqd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) y (suc (sub y (d1))) m (if (el z A) (b1 n) (b0 n)))
                                      (eqcomd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (suc (sub y (d1))) y)
                                        H13)
                                      (anll ((eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0))) (eq x (sub y (d1))))))))
                                (eleq1d (A (an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (add x (suc z)) (add y z))
                                  (syl5eqr ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (add x (suc z)) (add (suc x) z) (add y z))
                                    (addSass (x z))
                                    (addeq1d ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (suc x) y z)
                                      (eqtrd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) (suc x) (suc (sub y (d1))) y)
                                        (suceqd ((an (an (eq m (if (el z A) (b1 n) (b0 n))) (not (eq y (d0)))) (eq x (sub y (d1)))) x (sub y (d1)))
                                          H9)
                                        H13)))))))))))))))
          (iexde (n (al y (im (el y A) (lt y z))) (d0) (al x (iff (el x (ns n)) (el (add x z) A))))
            (iald (x (an (al y (im (el y A) (lt y z))) (eq n (d0))) (iff (el x (ns n)) (el (add x z) A)))
              (bitrd ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (el x (ns n)) (el x (ns (d0))) (el (add x z) A))
                (elneq2d ((an (al y (im (el y A) (lt y z))) (eq n (d0))) x n (d0))
                  (anr ((al y (im (el y A) (lt y z))) (eq n (d0)))))
                (binthd ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (el x (ns (d0))) (el (add x z) A))
                  (a1i ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (not (el x (ns (d0)))))
                    (el02 (x)))
                  (mtd ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (lt (add x z) z) (el (add x z) A))
                    (a1i ((an (al y (im (el y A) (lt y z))) (eq n (d0))) (not (lt (add x z) z)))
                      (mpbi ((le z (add x z)) (not (lt (add x z) z)))
                        (lenlt (z (add x z)))
                        (leaddid2 (z x))))
                    (anwl ((al y (im (el y A) (lt y z))) (eq n (d0)) (im (el (add x z) A) (lt (add x z) z)))
                      (eale (y (add x z) (im (el y A) (lt y z)) (im (el (add x z) A) (lt (add x z) z)))
                        (imeqd ((eq y (add x z)) (el y A) (el (add x z) A) (lt y z) (lt (add x z) z))
                          (eleq1 (A y (add x z)))
                          (lteq1 (y (add x z) z)))))))))))))
    (eex (n (eqs A (ns n)) (eqs A (ns (lower A))))
      (eqstrd (A (ns n) (ns (lower A)) (eqs A (ns n)))
        (id ((eqs A (ns n))))
        (nseqd ((eqs A (ns n)) n (lower A))
          (eqcomd ((eqs A (ns n)) (lower A) n)
            (:conv (im (eqs A (ns n)) (eq (lower A) n))
              (im
                (eqs A (ns n))
                (eq
                  (:unfold lower (A) (x)
                    (the (ab x (eqs (ns x) A))))
                  n))
              (eqtheabd ((eqs A (ns n)) n x (eqs (ns x) A))
                (syl6bb ((eqs A (ns n)) (eqs (ns x) A) (eqs (ns x) (ns n)) (eq x n))
                  (nseqb (x n))
                  (eqseq2 ((ns x) A (ns n)))))))))))
  (mpbiri ((eqs A (ns (lower A))) (finite (ns (lower A))) (finite A))
    (finns ((lower A)))
    (fineq (A (ns (lower A))))))))))))))))))))

(local theorem ellower ((A set ()) (a nat ())) ()
  (im (finite A) (iff (el a (ns (lower A))) (el a A)))
()
(bicomd ((finite A) (el a A) (el a (ns (lower A))))
  (eleq2d (A (ns (lower A)) (finite A) a)
    (ax_mp ((iff (finite A) (eqs A (ns (lower A)))) (im (finite A) (eqs A (ns (lower A)))))
      (bi1 ((finite A) (eqs A (ns (lower A)))))
      (eqlower (A))))))

(local theorem lowerns ((a nat ())) ()
  (eq (lower (ns a)) a)
()
(ax_mp ((eq a (lower (ns a))) (eq (lower (ns a)) a))
  (eqcom (a (lower (ns a))))
  (ax_mp ((eqs (ns a) (ns (lower (ns a)))) (eq a (lower (ns a))))
    (axext (a (lower (ns a))))
    (mpbi ((finite (ns a)) (eqs (ns a) (ns (lower (ns a)))))
      (eqlower ((ns a)))
      (finns (a))))))

(local theorem eqlower1 ((A set ()) (a nat ())) ()
  (im (finite A) (iff (eqs A (ns a)) (eq (lower A) a)))
()
(ibida ((finite A) (eqs A (ns a)) (eq (lower A) a))
  (anwr ((finite A) (eqs A (ns a)) (eq (lower A) a))
    (syl6eq ((eqs A (ns a)) (lower A) (lower (ns a)) a)
      (lowerns (a))
      (lowereq (A (ns a)))))
  (eqstrd (A (ns (lower A)) (ns a) (an (finite A) (eq (lower A) a)))
    (sylib ((an (finite A) (eq (lower A) a)) (finite A) (eqs A (ns (lower A))))
      (eqlower (A))
      (anl ((finite A) (eq (lower A) a))))
    (nseqd ((an (finite A) (eq (lower A) a)) (lower A) a)
      (anr ((finite A) (eq (lower A) a)))))))

(local theorem eqlower2 ((A set ()) (a nat ())) ()
  (im (finite A) (iff (eqs (ns a) A) (eq a (lower A))))
()
(bitr4g ((finite A) (eqs A (ns a)) (eq (lower A) a) (eqs (ns a) A) (eq a (lower A)))
  (eqscomb ((ns a) A))
  (eqcomb (a (lower A)))
  (eqlower1 (A a))))

(def sn ((a nat ())) (nat ())
()
(pow (d2) a))

(local theorem sneqd ((_G wff ()) (a1 nat ()) (a2 nat ()))
  ((ha (im _G (eq a1 a2))))
  (im _G (eq (sn a1) (sn a2)))
()
(:conv (im _G (eq (sn a1) (sn a2)))
  (im
    _G
    (eq
      (:unfold sn (a1) ()
        (pow (d2) a1))
      (:unfold sn (a2) ()
        (pow (d2) a2))))
  (poweqd (_G (d2) (d2) a1 a2)
    (eqidd (_G (d2)))
    ha)))

(local theorem sneq ((a1 nat ()) (a2 nat ())) ()
  (im (eq a1 a2) (eq (sn a1) (sn a2)))
()
(sneqd ((eq a1 a2) a1 a2)
  (id ((eq a1 a2)))))

(theorem elsn ((a nat ()) (b nat ())) ()
  (iff (el a (ns (sn b))) (eq a b))
()
(:conv (iff (el a (ns (sn b))) (eq a b))
  (iff
    (el
      a
      (ns
        (:unfold sn (b) ()
          (pow (d2) b))))
    (eq a b))
  (elpow2 (a b))))

(local theorem snss ((A set ()) (a nat ())) ()
  (iff (subset (ns (sn a)) A) (el a A))
((x nat))
(:conv (iff (subset (ns (sn a)) A) (el a A))
  (iff
    (:unfold subset ((ns (sn a)) A) (x)
      (al x (im (el x (ns (sn a))) (el x A))))
    (el a A))
  (ax_mp ((iff (al x (im (eq x a) (el x A))) (el a A)) (iff (al x (im (el x (ns (sn a))) (el x A))) (el a A)))
    (ax_mp ((iff (al x (im (el x (ns (sn a))) (el x A))) (al x (im (eq x a) (el x A)))) (im (iff (al x (im (eq x a) (el x A))) (el a A)) (iff (al x (im (el x (ns (sn a))) (el x A))) (el a A))))
      (bitr ((al x (im (el x (ns (sn a))) (el x A))) (al x (im (eq x a) (el x A))) (el a A)))
      (aleqi (x (im (el x (ns (sn a))) (el x A)) (im (eq x a) (el x A)))
        (imeq1i ((el x (ns (sn a))) (eq x a) (el x A))
          (elsn (x a)))))
    (aleqe (x a (el x A) (el a A))
      (eleq1 (A x a))))))

(def ins ((a nat ()) (b nat ())) (nat ())
((x nat))
(lower (ab x (or (eq x a) (el x (ns b))))))

(local theorem inseqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (ins a1 b1) (ins a2 b2)))
((x nat))
(:let H1 (eqidd (_G x))
(:conv (im _G (eq (ins a1 b1) (ins a2 b2)))
  (im
    _G
    (eq
      (:unfold ins (a1 b1) (x)
        (lower (ab x (or (eq x a1) (el x (ns b1))))))
      (:unfold ins (a2 b2) (x)
        (lower (ab x (or (eq x a2) (el x (ns b2))))))))
  (lowereqd (_G (ab x (or (eq x a1) (el x (ns b1)))) (ab x (or (eq x a2) (el x (ns b2)))))
    (abeqd (_G x (or (eq x a1) (el x (ns b1))) (or (eq x a2) (el x (ns b2))))
      (oreqd (_G (eq x a1) (eq x a2) (el x (ns b1)) (el x (ns b2)))
        (eqeqd (_G x x a1 a2)
          H1
          ha)
        (eleqd (_G x x (ns b1) (ns b2))
          H1
          (nseqd (_G b1 b2)
            hb))))))))

(local theorem inseq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (ins a1 b1) (ins a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (ins a1 b1) (ins a2 b2)))
  (inseqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem inseq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (ins a1 b) (ins a2 b)))
()
(inseqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem inseq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (ins a1 b) (ins a2 b)))
()
(inseq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem inseq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (ins a b1) (ins a b2)))
()
(inseqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem inseq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (ins a b1) (ins a b2)))
()
(inseq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(theorem elins ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (el a (ns (ins b c))) (or (eq a b) (el a (ns c))))
((x nat))
(:conv (iff (el a (ns (ins b c))) (or (eq a b) (el a (ns c))))
  (iff
    (el
      a
      (ns
        (:unfold ins (b c) (x)
          (lower (ab x (or (eq x b) (el x (ns c))))))))
    (or (eq a b) (el a (ns c))))
  (ax_mp ((iff (el a (ab x (or (eq x b) (el x (ns c))))) (or (eq a b) (el a (ns c)))) (iff (el a (ns (lower (ab x (or (eq x b) (el x (ns c))))))) (or (eq a b) (el a (ns c)))))
    (ax_mp ((iff (el a (ns (lower (ab x (or (eq x b) (el x (ns c))))))) (el a (ab x (or (eq x b) (el x (ns c)))))) (im (iff (el a (ab x (or (eq x b) (el x (ns c))))) (or (eq a b) (el a (ns c)))) (iff (el a (ns (lower (ab x (or (eq x b) (el x (ns c))))))) (or (eq a b) (el a (ns c))))))
      (bitr ((el a (ns (lower (ab x (or (eq x b) (el x (ns c))))))) (el a (ab x (or (eq x b) (el x (ns c))))) (or (eq a b) (el a (ns c)))))
      (ax_mp ((finite (ab x (or (eq x b) (el x (ns c))))) (iff (el a (ns (lower (ab x (or (eq x b) (el x (ns c))))))) (el a (ab x (or (eq x b) (el x (ns c)))))))
        (ellower ((ab x (or (eq x b) (el x (ns c)))) a))
        (ax_mp ((finite (ab x (le x (max b c)))) (finite (ab x (or (eq x b) (el x (ns c))))))
          (ax_mp ((subset (ab x (or (eq x b) (el x (ns c)))) (ab x (le x (max b c)))) (im (finite (ab x (le x (max b c)))) (finite (ab x (or (eq x b) (el x (ns c)))))))
            (finss ((ab x (or (eq x b) (el x (ns c)))) (ab x (le x (max b c)))))
            (mpbi ((al x (im (or (eq x b) (el x (ns c))) (le x (max b c)))) (subset (ab x (or (eq x b) (el x (ns c)))) (ab x (le x (max b c)))))
              (ssab (x (or (eq x b) (el x (ns c))) (le x (max b c))))
              (ax_gen (x (im (or (eq x b) (el x (ns c))) (le x (max b c))))
                (ax_mp ((im (el x (ns c)) (le x (max b c))) (im (or (eq x b) (el x (ns c))) (le x (max b c))))
                  (ax_mp ((im (eq x b) (le x (max b c))) (im (im (el x (ns c)) (le x (max b c))) (im (or (eq x b) (el x (ns c))) (le x (max b c)))))
                    (eor ((eq x b) (el x (ns c)) (le x (max b c))))
                    (mpbiri ((eq x b) (le b (max b c)) (le x (max b c)))
                      (lemax1 (b c))
                      (leeq1 (x b (max b c)))))
                  (rsyl ((el x (ns c)) (lt x c) (le x (max b c)))
                    (ellt (x c))
                    (letrd ((lt x c) x c (max b c))
                      (ltle (x c))
                      (a1i ((lt x c) (le c (max b c)))
                        (lemax2 (b c)))))))))
          (lefin ((max b c) x)))))
    (elabe (x a (or (eq x b) (el x (ns c))) (or (eq a b) (el a (ns c))))
      (oreqd ((eq x a) (eq x b) (eq a b) (el x (ns c)) (el a (ns c)))
        (eqeq1 (x a b))
        (eleq1 ((ns c) x a)))))))

(local theorem inscom ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (ins a (ins b c)) (ins b (ins a c)))
((x nat))
(ax_mp ((eqs (ns (ins a (ins b c))) (ns (ins b (ins a c)))) (eq (ins a (ins b c)) (ins b (ins a c))))
  (axext ((ins a (ins b c)) (ins b (ins a c))))
  (:conv (eqs (ns (ins a (ins b c))) (ns (ins b (ins a c))))
    (:unfold eqs ((ns (ins a (ins b c))) (ns (ins b (ins a c)))) (x)
      (al x (iff (el x (ns (ins a (ins b c)))) (el x (ns (ins b (ins a c)))))))
    (ax_gen (x (iff (el x (ns (ins a (ins b c)))) (el x (ns (ins b (ins a c))))))
      (bitr4gi ((or (eq x a) (el x (ns (ins b c)))) (or (eq x b) (el x (ns (ins a c)))) (el x (ns (ins a (ins b c)))) (el x (ns (ins b (ins a c)))))
        (elins (x a (ins b c)))
        (elins (x b (ins a c)))
        (bitr4gi ((or (eq x a) (or (eq x b) (el x (ns c)))) (or (eq x b) (or (eq x a) (el x (ns c)))) (or (eq x a) (el x (ns (ins b c)))) (or (eq x b) (el x (ns (ins a c)))))
          (ax_mp ((iff (el x (ns (ins b c))) (or (eq x b) (el x (ns c)))) (iff (or (eq x a) (el x (ns (ins b c)))) (or (eq x a) (or (eq x b) (el x (ns c))))))
            (oreq2 ((eq x a) (el x (ns (ins b c))) (or (eq x b) (el x (ns c)))))
            (elins (x b c)))
          (ax_mp ((iff (el x (ns (ins a c))) (or (eq x a) (el x (ns c)))) (iff (or (eq x b) (el x (ns (ins a c)))) (or (eq x b) (or (eq x a) (el x (ns c))))))
            (oreq2 ((eq x b) (el x (ns (ins a c))) (or (eq x a) (el x (ns c)))))
            (elins (x a c)))
          (or12 ((eq x a) (eq x b) (el x (ns c))))))))))

(local theorem b0ins ((a nat ()) (b nat ())) ()
  (eq (b0 (ins a b)) (ins (suc a) (b0 b)))
((x nat))
(ax_mp ((eqs (ns (b0 (ins a b))) (ns (ins (suc a) (b0 b)))) (eq (b0 (ins a b)) (ins (suc a) (b0 b))))
  (axext ((b0 (ins a b)) (ins (suc a) (b0 b))))
  (:conv (eqs (ns (b0 (ins a b))) (ns (ins (suc a) (b0 b))))
    (:unfold eqs ((ns (b0 (ins a b))) (ns (ins (suc a) (b0 b)))) (x)
      (al x (iff (el x (ns (b0 (ins a b)))) (el x (ns (ins (suc a) (b0 b)))))))
    (ax_gen (x (iff (el x (ns (b0 (ins a b)))) (el x (ns (ins (suc a) (b0 b))))))
      (bitr4gi ((an (lt (d0) x) (el (sub x (d1)) (ns (ins a b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))) (el x (ns (b0 (ins a b)))) (el x (ns (ins (suc a) (b0 b)))))
        (elb0 (x (ins a b)))
        (ax_mp ((iff (or (eq x (suc a)) (el x (ns (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))) (iff (el x (ns (ins (suc a) (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))))
          (ax_mp ((iff (el x (ns (ins (suc a) (b0 b)))) (or (eq x (suc a)) (el x (ns (b0 b))))) (im (iff (or (eq x (suc a)) (el x (ns (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))) (iff (el x (ns (ins (suc a) (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))))
            (bitr ((el x (ns (ins (suc a) (b0 b)))) (or (eq x (suc a)) (el x (ns (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))))
            (elins (x (suc a) (b0 b))))
          (ax_mp ((iff (el x (ns (b0 b))) (an (lt (d0) x) (el (sub x (d1)) (ns b)))) (iff (or (eq x (suc a)) (el x (ns (b0 b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))))
            (oreq2 ((eq x (suc a)) (el x (ns (b0 b))) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))
            (elb0 (x b))))
        (rbid ((lt (d0) x) (an (lt (d0) x) (el (sub x (d1)) (ns (ins a b)))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))
          (anl ((lt (d0) x) (el (sub x (d1)) (ns (ins a b)))))
          (ax_mp ((im (an (lt (d0) x) (el (sub x (d1)) (ns b))) (lt (d0) x)) (im (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))) (lt (d0) x)))
            (ax_mp ((im (eq x (suc a)) (lt (d0) x)) (im (im (an (lt (d0) x) (el (sub x (d1)) (ns b))) (lt (d0) x)) (im (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))) (lt (d0) x))))
              (eor ((eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b))) (lt (d0) x)))
              (mpbiri ((eq x (suc a)) (lt (d0) (suc a)) (lt (d0) x))
                (lt01S (a))
                (lteq2 ((d0) x (suc a)))))
            (anl ((lt (d0) x) (el (sub x (d1)) (ns b)))))
          (bitrd ((lt (d0) x) (an (lt (d0) x) (el (sub x (d1)) (ns (ins a b)))) (el (sub x (d1)) (ns (ins a b))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))
            (bian1 ((lt (d0) x) (el (sub x (d1)) (ns (ins a b)))))
            (syl5bb ((lt (d0) x) (el (sub x (d1)) (ns (ins a b))) (or (eq (sub x (d1)) a) (el (sub x (d1)) (ns b))) (or (eq x (suc a)) (an (lt (d0) x) (el (sub x (d1)) (ns b)))))
              (elins ((sub x (d1)) a b))
              (oreqd ((lt (d0) x) (eq (sub x (d1)) a) (eq x (suc a)) (el (sub x (d1)) (ns b)) (an (lt (d0) x) (el (sub x (d1)) (ns b))))
                (syl5bbr ((lt (d0) x) (eq (sub x (d1)) a) (eq (suc (sub x (d1))) (suc a)) (eq x (suc a)))
                  (peano2 ((sub x (d1)) a))
                  (eqeq1d ((lt (d0) x) (suc (sub x (d1))) x (suc a))
                    (sylbi ((lt (d0) x) (ne x (d0)) (eq (suc (sub x (d1))) x))
                      (lt01 (x))
                      (sub1can (x)))))
                (bicomd ((lt (d0) x) (an (lt (d0) x) (el (sub x (d1)) (ns b))) (el (sub x (d1)) (ns b)))
                  (bian1 ((lt (d0) x) (el (sub x (d1)) (ns b))))))))))))))

(local theorem b1ins ((n nat ())) ()
  (eq (b1 n) (ins (d0) (b0 n)))
((x nat))
(ax_mp ((eqs (ns (b1 n)) (ns (ins (d0) (b0 n)))) (eq (b1 n) (ins (d0) (b0 n))))
  (axext ((b1 n) (ins (d0) (b0 n))))
  (:conv (eqs (ns (b1 n)) (ns (ins (d0) (b0 n))))
    (:unfold eqs ((ns (b1 n)) (ns (ins (d0) (b0 n)))) (x)
      (al x (iff (el x (ns (b1 n))) (el x (ns (ins (d0) (b0 n)))))))
    (ax_gen (x (iff (el x (ns (b1 n))) (el x (ns (ins (d0) (b0 n))))))
      (bitr4gi ((or (eq x (d0)) (el (sub x (d1)) (ns n))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n)))) (el x (ns (b1 n))) (el x (ns (ins (d0) (b0 n)))))
        (elb1 (x n))
        (ax_mp ((iff (or (eq x (d0)) (el x (ns (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))) (iff (el x (ns (ins (d0) (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
          (ax_mp ((iff (el x (ns (ins (d0) (b0 n)))) (or (eq x (d0)) (el x (ns (b0 n))))) (im (iff (or (eq x (d0)) (el x (ns (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))) (iff (el x (ns (ins (d0) (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n)))))))
            (bitr ((el x (ns (ins (d0) (b0 n)))) (or (eq x (d0)) (el x (ns (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
            (elins (x (d0) (b0 n))))
          (ax_mp ((iff (el x (ns (b0 n))) (an (lt (d0) x) (el (sub x (d1)) (ns n)))) (iff (or (eq x (d0)) (el x (ns (b0 n)))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
            (oreq2 ((eq x (d0)) (el x (ns (b0 n))) (an (lt (d0) x) (el (sub x (d1)) (ns n)))))
            (elb0 (x n))))
        (cases ((eq x (d0)) (iff (or (eq x (d0)) (el (sub x (d1)) (ns n))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
          (bithd ((eq x (d0)) (or (eq x (d0)) (el (sub x (d1)) (ns n))) (or (eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n)))))
            (orl ((eq x (d0)) (el (sub x (d1)) (ns n))))
            (orl ((eq x (d0)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))))
          (oreq2d ((not (eq x (d0))) (eq x (d0)) (el (sub x (d1)) (ns n)) (an (lt (d0) x) (el (sub x (d1)) (ns n))))
            (bicomd ((not (eq x (d0))) (an (lt (d0) x) (el (sub x (d1)) (ns n))) (el (sub x (d1)) (ns n)))
              (sylbir ((not (eq x (d0))) (lt (d0) x) (iff (an (lt (d0) x) (el (sub x (d1)) (ns n))) (el (sub x (d1)) (ns n))))
                (:conv (iff (lt (d0) x) (not (eq x (d0))))
                  (iff
                    (lt (d0) x)
                    (:sym (:unfold ne (x (d0)) ()
                      (not (eq x (d0))))))
                  (lt01 (x)))
                (bian1 ((lt (d0) x) (el (sub x (d1)) (ns n)))))))))))))

(local theorem insdiv2 ((a nat ()) (b nat ())) ()
  (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))
()
(:let H1 (b0ins (a (div b (d2))))
(ax_mp ((or (eq b (b0 (div b (d2)))) (eq b (b1 (div b (d2))))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2)))))
  (ax_mp ((im (eq b (b1 (div b (d2)))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))) (im (or (eq b (b0 (div b (d2)))) (eq b (b1 (div b (d2))))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))))
    (ax_mp ((im (eq b (b0 (div b (d2)))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))) (im (im (eq b (b1 (div b (d2)))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))) (im (or (eq b (b0 (div b (d2)))) (eq b (b1 (div b (d2))))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2)))))))
      (eor ((eq b (b0 (div b (d2)))) (eq b (b1 (div b (d2)))) (eq (div (ins (suc a) b) (d2)) (ins a (div b (d2))))))
      (syl6eq ((eq b (b0 (div b (d2)))) (div (ins (suc a) b) (d2)) (div (b0 (ins a (div b (d2)))) (d2)) (ins a (div b (d2))))
        (b0div2 ((ins a (div b (d2)))))
        (diveq1d ((eq b (b0 (div b (d2)))) (ins (suc a) b) (b0 (ins a (div b (d2)))) (d2))
          (syl6eqr ((eq b (b0 (div b (d2)))) (ins (suc a) b) (ins (suc a) (b0 (div b (d2)))) (b0 (ins a (div b (d2)))))
            H1
            (inseq2 ((suc a) b (b0 (div b (d2)))))))))
    (syl6eq ((eq b (b1 (div b (d2)))) (div (ins (suc a) b) (d2)) (div (b1 (ins a (div b (d2)))) (d2)) (ins a (div b (d2))))
      (b1div2 ((ins a (div b (d2)))))
      (diveq1d ((eq b (b1 (div b (d2)))) (ins (suc a) b) (b1 (ins a (div b (d2)))) (d2))
        (syl6eqr ((eq b (b1 (div b (d2)))) (ins (suc a) b) (ins (d0) (b0 (ins a (div b (d2))))) (b1 (ins a (div b (d2)))))
          (b1ins ((ins a (div b (d2)))))
          (syl6eqr ((eq b (b1 (div b (d2)))) (ins (suc a) b) (ins (d0) (ins (suc a) (b0 (div b (d2))))) (ins (d0) (b0 (ins a (div b (d2))))))
            (ax_mp ((eq (b0 (ins a (div b (d2)))) (ins (suc a) (b0 (div b (d2))))) (eq (ins (d0) (b0 (ins a (div b (d2))))) (ins (d0) (ins (suc a) (b0 (div b (d2)))))))
              (inseq2 ((d0) (b0 (ins a (div b (d2)))) (ins (suc a) (b0 (div b (d2))))))
              H1)
            (syl6eq ((eq b (b1 (div b (d2)))) (ins (suc a) b) (ins (suc a) (ins (d0) (b0 (div b (d2))))) (ins (d0) (ins (suc a) (b0 (div b (d2))))))
              (inscom ((suc a) (d0) (b0 (div b (d2)))))
              (inseq2d ((eq b (b1 (div b (d2)))) (suc a) b (ins (d0) (b0 (div b (d2)))))
                (syl6eq ((eq b (b1 (div b (d2)))) b (b1 (div b (d2))) (ins (d0) (b0 (div b (d2)))))
                  (b1ins ((div b (d2))))
                  (id ((eq b (b1 (div b (d2))))))))))))))
  (b0orb1 (b)))))

(local theorem insunsn ((a nat ()) (b nat ())) ()
  (eqs (ns (ins a b)) (Union (ns (sn a)) (ns b)))
((x nat))
(eqri ((ns (ins a b)) (Union (ns (sn a)) (ns b)) x)
  (bitr4gi ((or (eq x a) (el x (ns b))) (or (el x (ns (sn a))) (el x (ns b))) (el x (ns (ins a b))) (el x (Union (ns (sn a)) (ns b))))
    (elins (x a b))
    (elun ((ns (sn a)) (ns b) x))
    (ax_mp ((iff (eq x a) (el x (ns (sn a)))) (iff (or (eq x a) (el x (ns b))) (or (el x (ns (sn a))) (el x (ns b)))))
      (oreq1 ((eq x a) (el x (ns (sn a))) (el x (ns b))))
      (ax_mp ((iff (el x (ns (sn a))) (eq x a)) (iff (eq x a) (el x (ns (sn a)))))
        (bicom ((el x (ns (sn a))) (eq x a)))
        (elsn (x a)))))))

(local theorem insss ((A set ()) (a nat ()) (b nat ())) ()
  (iff (subset (ns (ins a b)) A) (an (el a A) (subset (ns b) A)))
()
(ax_mp ((iff (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A))) (iff (subset (ns (ins a b)) A) (an (el a A) (subset (ns b) A))))
  (ax_mp ((iff (subset (ns (ins a b)) A) (subset (Union (ns (sn a)) (ns b)) A)) (im (iff (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A))) (iff (subset (ns (ins a b)) A) (an (el a A) (subset (ns b) A)))))
    (bitr ((subset (ns (ins a b)) A) (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A))))
    (ax_mp ((eqs (ns (ins a b)) (Union (ns (sn a)) (ns b))) (iff (subset (ns (ins a b)) A) (subset (Union (ns (sn a)) (ns b)) A)))
      (sseq1 ((ns (ins a b)) (Union (ns (sn a)) (ns b)) A))
      (insunsn (a b))))
  (ax_mp ((iff (an (subset (ns (sn a)) A) (subset (ns b) A)) (an (el a A) (subset (ns b) A))) (iff (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A))))
    (ax_mp ((iff (subset (Union (ns (sn a)) (ns b)) A) (an (subset (ns (sn a)) A) (subset (ns b) A))) (im (iff (an (subset (ns (sn a)) A) (subset (ns b) A)) (an (el a A) (subset (ns b) A))) (iff (subset (Union (ns (sn a)) (ns b)) A) (an (el a A) (subset (ns b) A)))))
      (bitr ((subset (Union (ns (sn a)) (ns b)) A) (an (subset (ns (sn a)) A) (subset (ns b) A)) (an (el a A) (subset (ns b) A))))
      (unss ((ns (sn a)) (ns b) A)))
    (aneq1i ((subset (ns (sn a)) A) (el a A) (subset (ns b) A))
      (snss (A a))))))

(def upto ((n nat ())) (nat ())
()
(sub (pow (d2) n) (d1)))

(local theorem uptoeqd ((_G wff ()) (n1 nat ()) (n2 nat ()))
  ((hn (im _G (eq n1 n2))))
  (im _G (eq (upto n1) (upto n2)))
()
(:conv (im _G (eq (upto n1) (upto n2)))
  (im
    _G
    (eq
      (:unfold upto (n1) ()
        (sub (pow (d2) n1) (d1)))
      (:unfold upto (n2) ()
        (sub (pow (d2) n2) (d1)))))
  (subeqd (_G (pow (d2) n1) (pow (d2) n2) (d1) (d1))
    (poweqd (_G (d2) (d2) n1 n2)
      (eqidd (_G (d2)))
      hn)
    (eqidd (_G (d1))))))

(local theorem uptoeq ((n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (upto n1) (upto n2)))
()
(uptoeqd ((eq n1 n2) n1 n2)
  (id ((eq n1 n2)))))

(local theorem upto0 () ()
  (eq (upto (d0)) (d0))
()
(:conv (eq (upto (d0)) (d0))
  (eq
    (:unfold upto ((d0)) ()
      (sub (pow (d2) (d0)) (d1)))
    (d0))
  (ax_mp ((eq (sub (d1) (d1)) (d0)) (eq (sub (pow (d2) (d0)) (d1)) (d0)))
    (ax_mp ((eq (sub (pow (d2) (d0)) (d1)) (sub (d1) (d1))) (im (eq (sub (d1) (d1)) (d0)) (eq (sub (pow (d2) (d0)) (d1)) (d0))))
      (eqtr ((sub (pow (d2) (d0)) (d1)) (sub (d1) (d1)) (d0)))
      (ax_mp ((eq (pow (d2) (d0)) (d1)) (eq (sub (pow (d2) (d0)) (d1)) (sub (d1) (d1))))
        (subeq1 ((pow (d2) (d0)) (d1) (d1)))
        (pow0 ((d2)))))
    (subid ((d1))))))

(local theorem uptoadd1 ((n nat ())) ()
  (eq (add (upto n) (d1)) (pow (d2) n))
()
(:conv (eq (add (upto n) (d1)) (pow (d2) n))
  (eq
    (add
      (:unfold upto (n) ()
        (sub
          (pow (d2) n)
          (:unfold d1 () ()
            (suc (d0)))))
      (:unfold d1 () ()
        (suc (d0))))
    (pow (d2) n))
  (ax_mp ((le (suc (d0)) (pow (d2) n)) (eq (add (sub (pow (d2) n) (suc (d0))) (suc (d0))) (pow (d2) n)))
    (npcan ((pow (d2) n) (suc (d0))))
    (:conv (le (suc (d0)) (pow (d2) n))
      (:sym (:unfold lt ((d0) (pow (d2) n)) ()
        (le (suc (d0)) (pow (d2) n))))
      (ax_mp ((lt (d0) (d2)) (lt (d0) (pow (d2) n)))
        (powpos ((d2) n))
        (d0lt2 ()))))))

(local theorem sucupto ((n nat ())) ()
  (eq (suc (upto n)) (pow (d2) n))
()
(ax_mp ((eq (add (upto n) (d1)) (pow (d2) n)) (eq (suc (upto n)) (pow (d2) n)))
  (ax_mp ((eq (add (upto n) (d1)) (suc (upto n))) (im (eq (add (upto n) (d1)) (pow (d2) n)) (eq (suc (upto n)) (pow (d2) n))))
    (eqtr3 ((suc (upto n)) (add (upto n) (d1)) (pow (d2) n)))
    (add12 ((upto n))))
  (uptoadd1 (n))))

(local theorem uptoS ((n nat ())) ()
  (eq (upto (suc n)) (b1 (upto n)))
()
(mpbi ((eq (add (upto (suc n)) (d1)) (add (b1 (upto n)) (d1))) (eq (upto (suc n)) (b1 (upto n))))
  (addcan1 ((upto (suc n)) (b1 (upto n)) (d1)))
  (:conv (eq (add (upto (suc n)) (d1)) (add (b1 (upto n)) (d1)))
    (eq
      (add (upto (suc n)) (d1))
      (add
        (:unfold b1 ((upto n)) ()
          (suc (b0 (upto n))))
        (d1)))
    (ax_mp ((eq (pow (d2) (suc n)) (add (suc (b0 (upto n))) (d1))) (eq (add (upto (suc n)) (d1)) (add (suc (b0 (upto n))) (d1))))
      (ax_mp ((eq (add (upto (suc n)) (d1)) (pow (d2) (suc n))) (im (eq (pow (d2) (suc n)) (add (suc (b0 (upto n))) (d1))) (eq (add (upto (suc n)) (d1)) (add (suc (b0 (upto n))) (d1)))))
        (eqtr ((add (upto (suc n)) (d1)) (pow (d2) (suc n)) (add (suc (b0 (upto n))) (d1))))
        (uptoadd1 ((suc n))))
      (ax_mp ((eq (mul (d2) (pow (d2) n)) (add (suc (b0 (upto n))) (d1))) (eq (pow (d2) (suc n)) (add (suc (b0 (upto n))) (d1))))
        (ax_mp ((eq (pow (d2) (suc n)) (mul (d2) (pow (d2) n))) (im (eq (mul (d2) (pow (d2) n)) (add (suc (b0 (upto n))) (d1))) (eq (pow (d2) (suc n)) (add (suc (b0 (upto n))) (d1)))))
          (eqtr ((pow (d2) (suc n)) (mul (d2) (pow (d2) n)) (add (suc (b0 (upto n))) (d1))))
          (powS ((d2) n)))
        (ax_mp ((eq (mul (d2) (suc (upto n))) (add (suc (b0 (upto n))) (d1))) (eq (mul (d2) (pow (d2) n)) (add (suc (b0 (upto n))) (d1))))
          (ax_mp ((eq (mul (d2) (suc (upto n))) (mul (d2) (pow (d2) n))) (im (eq (mul (d2) (suc (upto n))) (add (suc (b0 (upto n))) (d1))) (eq (mul (d2) (pow (d2) n)) (add (suc (b0 (upto n))) (d1)))))
            (eqtr3 ((mul (d2) (pow (d2) n)) (mul (d2) (suc (upto n))) (add (suc (b0 (upto n))) (d1))))
            (ax_mp ((eq (suc (upto n)) (pow (d2) n)) (eq (mul (d2) (suc (upto n))) (mul (d2) (pow (d2) n))))
              (muleq2 ((d2) (suc (upto n)) (pow (d2) n)))
              (sucupto (n))))
          (ax_mp ((eq (add (mul (d2) (upto n)) (d2)) (add (suc (b0 (upto n))) (d1))) (eq (mul (d2) (suc (upto n))) (add (suc (b0 (upto n))) (d1))))
            (ax_mp ((eq (mul (d2) (suc (upto n))) (add (mul (d2) (upto n)) (d2))) (im (eq (add (mul (d2) (upto n)) (d2)) (add (suc (b0 (upto n))) (d1))) (eq (mul (d2) (suc (upto n))) (add (suc (b0 (upto n))) (d1)))))
              (eqtr ((mul (d2) (suc (upto n))) (add (mul (d2) (upto n)) (d2)) (add (suc (b0 (upto n))) (d1))))
              (mulS ((d2) (upto n))))
            (:conv (eq (add (mul (d2) (upto n)) (d2)) (add (suc (b0 (upto n))) (d1)))
              (eq
                (add
                  (mul (d2) (upto n))
                  (:unfold d2 () ()
                    (suc (d1))))
                (add (suc (b0 (upto n))) (d1)))
              (ax_mp ((eq (add (suc (b0 (upto n))) (d1)) (add (b0 (upto n)) (suc (d1)))) (eq (add (mul (d2) (upto n)) (suc (d1))) (add (suc (b0 (upto n))) (d1))))
                (ax_mp ((eq (add (mul (d2) (upto n)) (suc (d1))) (add (b0 (upto n)) (suc (d1)))) (im (eq (add (suc (b0 (upto n))) (d1)) (add (b0 (upto n)) (suc (d1)))) (eq (add (mul (d2) (upto n)) (suc (d1))) (add (suc (b0 (upto n))) (d1)))))
                  (eqtr4 ((add (mul (d2) (upto n)) (suc (d1))) (add (b0 (upto n)) (suc (d1))) (add (suc (b0 (upto n))) (d1))))
                  (ax_mp ((eq (mul (d2) (upto n)) (b0 (upto n))) (eq (add (mul (d2) (upto n)) (suc (d1))) (add (b0 (upto n)) (suc (d1)))))
                    (addeq1 ((mul (d2) (upto n)) (b0 (upto n)) (suc (d1))))
                    (b0mul21 ((upto n)))))
                (addSass ((b0 (upto n)) (d1))))))))))))

(local theorem uptolem ((a nat ()) (n nat ())) ()
  (an (eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a))))
()
(trud ((an (eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))))
  (:conv (im (wtru) (an (eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))))
    (im
      (wtru)
      (an
        (eq
          (:unfold shr ((upto n) a) ()
            (div (upto n) (pow (d2) a)))
          (upto (sub n a)))
        (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))))
    (eqdivmod ((wtru) (upto (sub n a)) (upto (min n a)) (upto n) (pow (d2) a))
      (ltletrd ((wtru) (upto (min n a)) (pow (d2) (min n a)) (pow (d2) a))
        (a1i ((wtru) (lt (upto (min n a)) (pow (d2) (min n a))))
          (:conv (lt (upto (min n a)) (pow (d2) (min n a)))
            (lt
              (:unfold upto ((min n a)) ()
                (sub (pow (d2) (min n a)) (d1)))
              (pow (d2) (min n a)))
            (ax_mp ((an (lt (d0) (pow (d2) (min n a))) (lt (d0) (d1))) (lt (sub (pow (d2) (min n a)) (d1)) (pow (d2) (min n a))))
              (subltid ((pow (d2) (min n a)) (d1)))
              (ax_mp ((lt (d0) (d1)) (an (lt (d0) (pow (d2) (min n a))) (lt (d0) (d1))))
                (ax_mp ((lt (d0) (pow (d2) (min n a))) (im (lt (d0) (d1)) (an (lt (d0) (pow (d2) (min n a))) (lt (d0) (d1)))))
                  (ian ((lt (d0) (pow (d2) (min n a))) (lt (d0) (d1))))
                  (ax_mp ((lt (d0) (d2)) (lt (d0) (pow (d2) (min n a))))
                    (powpos ((d2) (min n a)))
                    (d0lt2 ())))
                (d0lt1 ())))))
        (a1i ((wtru) (le (pow (d2) (min n a)) (pow (d2) a)))
          (ax_mp ((le (min n a) a) (le (pow (d2) (min n a)) (pow (d2) a)))
            (ax_mp ((ne (d2) (d0)) (im (le (min n a) a) (le (pow (d2) (min n a)) (pow (d2) a))))
              (lepow2a ((d2) (min n a) a))
              (d2ne0 ()))
            (minle2 (n a)))))
      (a1i ((wtru) (eq (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (upto n)))
        (mpbi ((eq (add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (upto n) (d1))) (eq (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (upto n)))
          (addcan1 ((add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (upto n) (d1)))
          (ax_mp ((eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1))) (eq (add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (upto n) (d1))))
            (ax_mp ((eq (add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1)))) (im (eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1))) (eq (add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (upto n) (d1)))))
              (eqtr ((add (add (mul (pow (d2) a) (upto (sub n a))) (upto (min n a))) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1))))
              (addass ((mul (pow (d2) a) (upto (sub n a))) (upto (min n a)) (d1))))
            (ax_mp ((eq (add (upto n) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))) (eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1))))
              (ax_mp ((eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))) (im (eq (add (upto n) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))) (eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (upto n) (d1)))))
                (eqtr4 ((add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (add (upto n) (d1))))
                (ax_mp ((eq (add (upto (min n a)) (d1)) (pow (d2) (min n a))) (eq (add (mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))))
                  (addeq2 ((mul (pow (d2) a) (upto (sub n a))) (add (upto (min n a)) (d1)) (pow (d2) (min n a))))
                  (uptoadd1 ((min n a)))))
              (ax_mp ((eq (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (pow (d2) n)) (eq (add (upto n) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))))
                (ax_mp ((eq (add (upto n) (d1)) (pow (d2) n)) (im (eq (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (pow (d2) n)) (eq (add (upto n) (d1)) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))))))
                  (eqtr4 ((add (upto n) (d1)) (pow (d2) n) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))))
                  (uptoadd1 (n)))
                (ax_mp ((eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n)) (eq (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (pow (d2) n)))
                  (ax_mp ((eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))) (im (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n)) (eq (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (pow (d2) n))))
                    (eqtr3 ((add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))) (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n)))
                    (ax_mp ((eq (mul (pow (d2) (min n a)) (d1)) (pow (d2) (min n a))) (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a)))))
                      (ax_mp ((eq (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) a) (upto (sub n a)))) (im (eq (mul (pow (d2) (min n a)) (d1)) (pow (d2) (min n a))) (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (add (mul (pow (d2) a) (upto (sub n a))) (pow (d2) (min n a))))))
                        (addeq ((mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) a) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1)) (pow (d2) (min n a))))
                        (cases ((le a n) (eq (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) a) (upto (sub n a)))))
                          (muleq1d ((le a n) (pow (d2) (min n a)) (pow (d2) a) (upto (sub n a)))
                            (poweq2d ((le a n) (d2) (min n a) a)
                              (eqmin2 (n a))))
                          (syl ((not (le a n)) (eq (upto (sub n a)) (d0)) (eq (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) a) (upto (sub n a)))))
                            (eqtr4d ((eq (upto (sub n a)) (d0)) (mul (pow (d2) (min n a)) (upto (sub n a))) (d0) (mul (pow (d2) a) (upto (sub n a))))
                              (syl6eq ((eq (upto (sub n a)) (d0)) (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d0)) (d0))
                                (mul0 ((pow (d2) (min n a))))
                                (muleq2 ((pow (d2) (min n a)) (upto (sub n a)) (d0))))
                              (syl6eq ((eq (upto (sub n a)) (d0)) (mul (pow (d2) a) (upto (sub n a))) (mul (pow (d2) a) (d0)) (d0))
                                (mul0 ((pow (d2) a)))
                                (muleq2 ((pow (d2) a) (upto (sub n a)) (d0)))))
                            (syl6eq ((not (le a n)) (upto (sub n a)) (upto (d0)) (d0))
                              (upto0 ())
                              (uptoeqd ((not (le a n)) (sub n a) (d0))
                                (nlesubeq0 (n a)))))))
                      (mul12 ((pow (d2) (min n a))))))
                  (ax_mp ((eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n)) (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n)))
                    (ax_mp ((eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1)))) (im (eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n)) (eq (add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (pow (d2) n))))
                      (eqtr3 ((add (mul (pow (d2) (min n a)) (upto (sub n a))) (mul (pow (d2) (min n a)) (d1))) (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n)))
                      (muladd ((pow (d2) (min n a)) (upto (sub n a)) (d1))))
                    (ax_mp ((eq (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n)) (eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n)))
                      (ax_mp ((eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (mul (pow (d2) (min n a)) (pow (d2) (sub n a)))) (im (eq (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n)) (eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (pow (d2) n))))
                        (eqtr ((mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n)))
                        (ax_mp ((eq (add (upto (sub n a)) (d1)) (pow (d2) (sub n a))) (eq (mul (pow (d2) (min n a)) (add (upto (sub n a)) (d1))) (mul (pow (d2) (min n a)) (pow (d2) (sub n a)))))
                          (muleq2 ((pow (d2) (min n a)) (add (upto (sub n a)) (d1)) (pow (d2) (sub n a))))
                          (uptoadd1 ((sub n a)))))
                      (ax_mp ((eq (pow (d2) (add (min n a) (sub n a))) (pow (d2) n)) (eq (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n)))
                        (ax_mp ((eq (pow (d2) (add (min n a) (sub n a))) (mul (pow (d2) (min n a)) (pow (d2) (sub n a)))) (im (eq (pow (d2) (add (min n a) (sub n a))) (pow (d2) n)) (eq (mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) n))))
                          (eqtr3 ((mul (pow (d2) (min n a)) (pow (d2) (sub n a))) (pow (d2) (add (min n a) (sub n a))) (pow (d2) n)))
                          (powadd ((d2) (min n a) (sub n a))))
                        (ax_mp ((eq (add (min n a) (sub n a)) n) (eq (pow (d2) (add (min n a) (sub n a))) (pow (d2) n)))
                          (poweq2 ((d2) (add (min n a) (sub n a)) n))
                          (minaddsub (n a))))))))))))))))

(local theorem shrupto ((a nat ()) (n nat ())) ()
  (eq (shr (upto n) a) (upto (sub n a)))
()
(ax_mp ((an (eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))) (eq (shr (upto n) a) (upto (sub n a))))
  (anl ((eq (shr (upto n) a) (upto (sub n a))) (eq (mod (upto n) (pow (d2) a)) (upto (min n a)))))
  (uptolem (a n))))

(theorem elupto ((k nat ()) (n nat ())) ()
  (iff (el k (ns (upto n))) (lt k n))
()
(ax_mp ((iff (nel k (upto n)) (lt k n)) (iff (el k (ns (upto n))) (lt k n)))
  (ax_mp ((iff (el k (ns (upto n))) (nel k (upto n))) (im (iff (nel k (upto n)) (lt k n)) (iff (el k (ns (upto n))) (lt k n))))
    (bitr ((el k (ns (upto n))) (nel k (upto n)) (lt k n)))
    (elnel (k (upto n))))
  (:conv (iff (nel k (upto n)) (lt k n))
    (iff
      (:unfold nel (k (upto n)) ()
        (odd (shr (upto n) k)))
      (lt k n))
    (ax_mp ((iff (odd (upto (sub n k))) (lt k n)) (iff (odd (shr (upto n) k)) (lt k n)))
      (ax_mp ((iff (odd (shr (upto n) k)) (odd (upto (sub n k)))) (im (iff (odd (upto (sub n k))) (lt k n)) (iff (odd (shr (upto n) k)) (lt k n))))
        (bitr ((odd (shr (upto n) k)) (odd (upto (sub n k))) (lt k n)))
        (ax_mp ((eq (shr (upto n) k) (upto (sub n k))) (iff (odd (shr (upto n) k)) (odd (upto (sub n k)))))
          (oddeq ((shr (upto n) k) (upto (sub n k))))
          (shrupto (k n))))
      (ax_mp ((iff (lt k n) (not (eq (sub n k) (d0)))) (iff (odd (upto (sub n k))) (lt k n)))
        (ax_mp ((iff (odd (upto (sub n k))) (not (eq (sub n k) (d0)))) (im (iff (lt k n) (not (eq (sub n k) (d0)))) (iff (odd (upto (sub n k))) (lt k n))))
          (bitr4 ((odd (upto (sub n k))) (not (eq (sub n k) (d0))) (lt k n)))
          (ibii ((odd (upto (sub n k))) (not (eq (sub n k) (d0))))
            (mtd ((odd (upto (sub n k))) (odd (d0)) (eq (sub n k) (d0)))
              (a1i ((odd (upto (sub n k))) (not (odd (d0))))
                (odd0 ()))
              (com12 ((eq (sub n k) (d0)) (odd (upto (sub n k))) (odd (d0)))
                (bi1d ((eq (sub n k) (d0)) (odd (upto (sub n k))) (odd (d0)))
                  (oddeqd ((eq (sub n k) (d0)) (upto (sub n k)) (d0))
                    (syl6eq ((eq (sub n k) (d0)) (upto (sub n k)) (upto (d0)) (d0))
                      (upto0 ())
                      (uptoeq ((sub n k) (d0))))))))
            (mpbii ((not (eq (sub n k) (d0))) (odd (b1 (upto (sub (sub n k) (d1))))) (odd (upto (sub n k))))
              (b1odd ((upto (sub (sub n k) (d1)))))
              (oddeqd ((not (eq (sub n k) (d0))) (b1 (upto (sub (sub n k) (d1)))) (upto (sub n k)))
                (syl5eqr ((not (eq (sub n k) (d0))) (b1 (upto (sub (sub n k) (d1)))) (upto (suc (sub (sub n k) (d1)))) (upto (sub n k)))
                  (uptoS ((sub (sub n k) (d1))))
                  (uptoeqd ((not (eq (sub n k) (d0))) (suc (sub (sub n k) (d1))) (sub n k))
                    (:conv (im (not (eq (sub n k) (d0))) (eq (suc (sub (sub n k) (d1))) (sub n k)))
                      (im
                        (:sym (:unfold ne ((sub n k) (d0)) ()
                          (not (eq (sub n k) (d0)))))
                        (eq (suc (sub (sub n k) (d1))) (sub n k)))
                      (sub1can ((sub n k))))))))))
        (:conv (iff (lt k n) (not (eq (sub n k) (d0))))
          (iff
            (lt k n)
            (:sym (:unfold ne ((sub n k) (d0)) ()
              (not (eq (sub n k) (d0))))))
          (ax_mp ((iff (lt (d0) (sub n k)) (ne (sub n k) (d0))) (iff (lt k n) (ne (sub n k) (d0))))
            (ax_mp ((iff (lt k n) (lt (d0) (sub n k))) (im (iff (lt (d0) (sub n k)) (ne (sub n k) (d0))) (iff (lt k n) (ne (sub n k) (d0)))))
              (bitr ((lt k n) (lt (d0) (sub n k)) (ne (sub n k) (d0))))
              (subpos (k n)))
            (lt01 ((sub n k))))))))))

(local theorem uptoss ((a nat ()) (b nat ())) ()
  (iff (subset (ns (upto a)) (ns (upto b))) (le a b))
((x nat))
(ibii ((subset (ns (upto a)) (ns (upto b))) (le a b))
  (mpi ((subset (ns (upto a)) (ns (upto b))) (not (lt b b)) (le a b))
    (ltirr (b))
    (con1d ((subset (ns (upto a)) (ns (upto b))) (le a b) (lt b b))
      (syl5bir ((subset (ns (upto a)) (ns (upto b))) (not (le a b)) (lt b a) (lt b b))
        (ltnle (b a))
        (sylib ((subset (ns (upto a)) (ns (upto b))) (im (el b (ns (upto a))) (el b (ns (upto b)))) (im (lt b a) (lt b b)))
          (ax_mp ((iff (el b (ns (upto b))) (lt b b)) (iff (im (el b (ns (upto a))) (el b (ns (upto b)))) (im (lt b a) (lt b b))))
            (ax_mp ((iff (el b (ns (upto a))) (lt b a)) (im (iff (el b (ns (upto b))) (lt b b)) (iff (im (el b (ns (upto a))) (el b (ns (upto b)))) (im (lt b a) (lt b b)))))
              (imeq ((el b (ns (upto a))) (lt b a) (el b (ns (upto b))) (lt b b)))
              (elupto (b a)))
            (elupto (b b)))
          (ssel ((ns (upto a)) (ns (upto b)) b))))))
  (:conv (im (le a b) (subset (ns (upto a)) (ns (upto b))))
    (im
      (le a b)
      (:unfold subset ((ns (upto a)) (ns (upto b))) (x)
        (al x (im (el x (ns (upto a))) (el x (ns (upto b)))))))
    (iald (x (le a b) (im (el x (ns (upto a))) (el x (ns (upto b)))))
      (sylibr ((le a b) (im (lt x a) (lt x b)) (im (el x (ns (upto a))) (el x (ns (upto b)))))
        (ax_mp ((iff (el x (ns (upto b))) (lt x b)) (iff (im (el x (ns (upto a))) (el x (ns (upto b)))) (im (lt x a) (lt x b))))
          (ax_mp ((iff (el x (ns (upto a))) (lt x a)) (im (iff (el x (ns (upto b))) (lt x b)) (iff (im (el x (ns (upto a))) (el x (ns (upto b)))) (im (lt x a) (lt x b)))))
            (imeq ((el x (ns (upto a))) (lt x a) (el x (ns (upto b))) (lt x b)))
            (elupto (x a)))
          (elupto (x b)))
        (com12 ((lt x a) (le a b) (lt x b))
          (ltletr (x a b))))))))

(local theorem dffin2 ((A set ()) (n nat)) ()
  (iff (finite A) (ex n (subset A (ns (upto n)))))
((x nat))
(:conv (iff (finite A) (ex n (subset A (ns (upto n)))))
  (iff
    (:unfold finite (A) (n x)
      (ex n (al x (im (el x A) (lt x n)))))
    (ex n (subset A (ns (upto n)))))
  (exeqi (n (al x (im (el x A) (lt x n))) (subset A (ns (upto n))))
    (:conv (iff (al x (im (el x A) (lt x n))) (subset A (ns (upto n))))
      (iff
        (al x (im (el x A) (lt x n)))
        (:unfold subset (A (ns (upto n))) (x)
          (al x (im (el x A) (el x (ns (upto n)))))))
      (aleqi (x (im (el x A) (lt x n)) (im (el x A) (el x (ns (upto n)))))
        (imeq2i ((el x A) (lt x n) (el x (ns (upto n))))
          (ax_mp ((iff (el x (ns (upto n))) (lt x n)) (iff (lt x n) (el x (ns (upto n)))))
            (bicom ((el x (ns (upto n))) (lt x n)))
            (elupto (x n)))))))))

(local def size ((A set ())) (nat ())
((k nat))
(least (ab k (subset A (ns (upto k))))))

(local theorem sizeeqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eq (size A1) (size A2)))
((k nat))
(:conv (im _G (eq (size A1) (size A2)))
  (im
    _G
    (eq
      (:unfold size (A1) (k)
        (least (ab k (subset A1 (ns (upto k))))))
      (:unfold size (A2) (k)
        (least (ab k (subset A2 (ns (upto k))))))))
  (leasteqd (_G (ab k (subset A1 (ns (upto k)))) (ab k (subset A2 (ns (upto k)))))
    (abeqd (_G k (subset A1 (ns (upto k))) (subset A2 (ns (upto k))))
      (sseqd (_G A1 A2 (ns (upto k)) (ns (upto k)))
        hA
        (eqsidd (_G (ns (upto k)))))))))

(local theorem sizeeq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eq (size A1) (size A2)))
()
(sizeeqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem sssize ((A set ())) ()
  (iff (finite A) (subset A (ns (upto (size A)))))
((k nat) (n nat))
(ax_mp ((iff (ex n (subset A (ns (upto n)))) (subset A (ns (upto (size A))))) (iff (finite A) (subset A (ns (upto (size A))))))
  (ax_mp ((iff (finite A) (ex n (subset A (ns (upto n))))) (im (iff (ex n (subset A (ns (upto n)))) (subset A (ns (upto (size A))))) (iff (finite A) (subset A (ns (upto (size A)))))))
    (bitr ((finite A) (ex n (subset A (ns (upto n)))) (subset A (ns (upto (size A))))))
    (dffin2 (A n)))
  (ibii ((ex n (subset A (ns (upto n)))) (subset A (ns (upto (size A)))))
    (eex (n (subset A (ns (upto n))) (subset A (ns (upto (size A)))))
      (sylbir ((subset A (ns (upto n))) (el n (ab k (subset A (ns (upto k))))) (subset A (ns (upto (size A)))))
        (elabe (k n (subset A (ns (upto k))) (subset A (ns (upto n))))
          (sseq2d ((eq k n) A (ns (upto k)) (ns (upto n)))
            (nseqd ((eq k n) (upto k) (upto n))
              (uptoeq (k n)))))
        (sylib ((el n (ab k (subset A (ns (upto k))))) (el (size A) (ab k (subset A (ns (upto k))))) (subset A (ns (upto (size A)))))
          (elabe (k (size A) (subset A (ns (upto k))) (subset A (ns (upto (size A)))))
            (sseq2d ((eq k (size A)) A (ns (upto k)) (ns (upto (size A))))
              (nseqd ((eq k (size A)) (upto k) (upto (size A)))
                (uptoeq (k (size A))))))
          (:conv (im (el n (ab k (subset A (ns (upto k))))) (el (size A) (ab k (subset A (ns (upto k))))))
            (im
              (el n (ab k (subset A (ns (upto k)))))
              (el
                (:unfold size (A) (k)
                  (least (ab k (subset A (ns (upto k))))))
                (ab k (subset A (ns (upto k))))))
            (leastel ((ab k (subset A (ns (upto k)))) n))))))
    (iexe (n (size A) (subset A (ns (upto n))) (subset A (ns (upto (size A)))))
      (sseq2d ((eq n (size A)) A (ns (upto n)) (ns (upto (size A))))
        (nseqd ((eq n (size A)) (upto n) (upto (size A)))
          (uptoeq (n (size A)))))))))

(local theorem sizess1 ((A set ()) (k nat ())) ()
  (im (subset A (ns (upto k))) (le (size A) k))
((x nat))
(sylbir ((subset A (ns (upto k))) (el k (ab x (subset A (ns (upto x))))) (le (size A) k))
  (elabe (x k (subset A (ns (upto x))) (subset A (ns (upto k))))
    (sseq2d ((eq x k) A (ns (upto x)) (ns (upto k)))
      (nseqd ((eq x k) (upto x) (upto k))
        (uptoeq (x k)))))
  (:conv (im (el k (ab x (subset A (ns (upto x))))) (le (size A) k))
    (im
      (el k (ab x (subset A (ns (upto x)))))
      (le
        (:unfold size (A) (x)
          (least (ab x (subset A (ns (upto x))))))
        k))
    (leastle ((ab x (subset A (ns (upto x)))) k)))))

(local theorem sizess ((A set ()) (k nat ())) ()
  (im (finite A) (iff (subset A (ns (upto k))) (le (size A) k)))
()
(ibid ((finite A) (subset A (ns (upto k))) (le (size A) k))
  (a1i ((finite A) (im (subset A (ns (upto k))) (le (size A) k)))
    (sizess1 (A k)))
  (syl5bir ((finite A) (le (size A) k) (subset (ns (upto (size A))) (ns (upto k))) (subset A (ns (upto k))))
    (uptoss ((size A) k))
    (sylbi ((finite A) (subset A (ns (upto (size A)))) (im (subset (ns (upto (size A))) (ns (upto k))) (subset A (ns (upto k)))))
      (sssize (A))
      (sstr (A (ns (upto (size A))) (ns (upto k))))))))

(local theorem sizeupto ((n nat ())) ()
  (eq (size (ns (upto n))) n)
()
(:let H1 (finns ((upto n)))
(ax_mp ((le n (size (ns (upto n)))) (eq (size (ns (upto n))) n))
  (ax_mp ((le (size (ns (upto n))) n) (im (le n (size (ns (upto n)))) (eq (size (ns (upto n))) n)))
    (leasym ((size (ns (upto n))) n))
    (mpbi ((subset (ns (upto n)) (ns (upto n))) (le (size (ns (upto n))) n))
      (ax_mp ((finite (ns (upto n))) (iff (subset (ns (upto n)) (ns (upto n))) (le (size (ns (upto n))) n)))
        (sizess ((ns (upto n)) n))
        H1)
      (ssid ((ns (upto n))))))
  (mpbi ((subset (ns (upto n)) (ns (upto (size (ns (upto n)))))) (le n (size (ns (upto n)))))
    (uptoss (n (size (ns (upto n)))))
    (mpbi ((finite (ns (upto n))) (subset (ns (upto n)) (ns (upto (size (ns (upto n)))))))
      (sssize ((ns (upto n))))
      H1)))))

(def Bool () (nat ())
()
(ins (d0) (sn (d1))))

(local theorem elbool ((n nat ())) ()
  (iff (el n (ns (Bool))) (bool n))
()
(:conv (iff (el n (ns (Bool))) (bool n))
  (iff
    (el
      n
      (ns
        (:unfold Bool () ()
          (ins (d0) (sn (d1))))))
    (bool n))
  (ax_mp ((iff (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n)) (iff (el n (ns (ins (d0) (sn (d1))))) (bool n)))
    (ax_mp ((iff (el n (ns (ins (d0) (sn (d1))))) (or (eq n (d0)) (el n (ns (sn (d1)))))) (im (iff (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n)) (iff (el n (ns (ins (d0) (sn (d1))))) (bool n))))
      (bitr ((el n (ns (ins (d0) (sn (d1))))) (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n)))
      (elins (n (d0) (sn (d1)))))
    (ax_mp ((iff (bool n) (or (eq n (d0)) (eq n (d1)))) (iff (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n)))
      (ax_mp ((iff (or (eq n (d0)) (el n (ns (sn (d1))))) (or (eq n (d0)) (eq n (d1)))) (im (iff (bool n) (or (eq n (d0)) (eq n (d1)))) (iff (or (eq n (d0)) (el n (ns (sn (d1))))) (bool n))))
        (bitr4 ((or (eq n (d0)) (el n (ns (sn (d1))))) (or (eq n (d0)) (eq n (d1))) (bool n)))
        (oreq2i ((eq n (d0)) (el n (ns (sn (d1)))) (eq n (d1)))
          (elsn (n (d1)))))
      (bool01 (n))))))

(local theorem boolfin () ()
  (finite (ns (Bool)))
((n nat))
(mpbir ((finite (ab n (bool n))) (finite (ns (Bool))))
  (ax_mp ((eqs (ns (Bool)) (ab n (bool n))) (iff (finite (ns (Bool))) (finite (ab n (bool n)))))
    (fineq ((ns (Bool)) (ab n (bool n))))
    (eqab2i ((ns (Bool)) n (bool n))
      (elbool (n))))
  (:conv (finite (ab n (bool n)))
    (finite
      (ab
        n
        (:unfold bool (n) ()
          (lt n (d2)))))
    (ltfin ((d2) n)))))

(def Option ((A set ())) (set ())
((n nat))
(ab n (or (eq n (d0)) (el (sub n (d1)) A))))

(local theorem Optioneqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eqs (Option A1) (Option A2)))
((n nat))
(:conv (im _G (eqs (Option A1) (Option A2)))
  (im
    _G
    (eqs
      (:unfold Option (A1) (n)
        (ab n (or (eq n (d0)) (el (sub n (d1)) A1))))
      (:unfold Option (A2) (n)
        (ab n (or (eq n (d0)) (el (sub n (d1)) A2))))))
  (abeqd (_G n (or (eq n (d0)) (el (sub n (d1)) A1)) (or (eq n (d0)) (el (sub n (d1)) A2)))
    (oreqd (_G (eq n (d0)) (eq n (d0)) (el (sub n (d1)) A1) (el (sub n (d1)) A2))
      (biidd (_G (eq n (d0))))
      (eleqd (_G (sub n (d1)) (sub n (d1)) A1 A2)
        (eqidd (_G (sub n (d1))))
        hA)))))

(local theorem Optioneq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eqs (Option A1) (Option A2)))
()
(Optioneqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem elopt ((A set ()) (a nat ())) ()
  (iff (el a (Option A)) (or (eq a (d0)) (el (sub a (d1)) A)))
((n nat))
(:conv (iff (el a (Option A)) (or (eq a (d0)) (el (sub a (d1)) A)))
  (iff
    (el
      a
      (:unfold Option (A) (n)
        (ab n (or (eq n (d0)) (el (sub n (d1)) A)))))
    (or (eq a (d0)) (el (sub a (d1)) A)))
  (elabe (n a (or (eq n (d0)) (el (sub n (d1)) A)) (or (eq a (d0)) (el (sub a (d1)) A)))
    (oreqd ((eq n a) (eq n (d0)) (eq a (d0)) (el (sub n (d1)) A) (el (sub a (d1)) A))
      (eqeq1 (n a (d0)))
      (eleq1d (A (eq n a) (sub n (d1)) (sub a (d1)))
        (subeq1 (n a (d1))))))))

(local theorem opt0 ((A set ())) ()
  (el (d0) (Option A))
()
(mpbir ((or (eq (d0) (d0)) (el (sub (d0) (d1)) A)) (el (d0) (Option A)))
  (elopt (A (d0)))
  (ax_mp ((eq (d0) (d0)) (or (eq (d0) (d0)) (el (sub (d0) (d1)) A)))
    (orl ((eq (d0) (d0)) (el (sub (d0) (d1)) A)))
    (eqid ((d0))))))

(local theorem optS ((A set ()) (a nat ())) ()
  (iff (el a A) (el (suc a) (Option A)))
()
(ax_mp ((iff (el (suc a) (Option A)) (el a A)) (iff (el a A) (el (suc a) (Option A))))
  (bicom ((el (suc a) (Option A)) (el a A)))
  (ax_mp ((iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A)) (iff (el (suc a) (Option A)) (el a A)))
    (ax_mp ((iff (el (suc a) (Option A)) (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A))) (im (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A)) (iff (el (suc a) (Option A)) (el a A))))
      (bitr ((el (suc a) (Option A)) (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A)))
      (elopt (A (suc a))))
    (ax_mp ((iff (el (sub (suc a) (d1)) A) (el a A)) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A)))
      (ax_mp ((iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el (sub (suc a) (d1)) A)) (im (iff (el (sub (suc a) (d1)) A) (el a A)) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el a A))))
        (bitr ((or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el (sub (suc a) (d1)) A) (el a A)))
        (ax_mp ((not (eq (suc a) (d0))) (iff (or (eq (suc a) (d0)) (el (sub (suc a) (d1)) A)) (el (sub (suc a) (d1)) A)))
          (bior1 ((eq (suc a) (d0)) (el (sub (suc a) (d1)) A)))
          (:conv (not (eq (suc a) (d0)))
            (:sym (:unfold ne ((suc a) (d0)) ()
              (not (eq (suc a) (d0)))))
            (peano1 (a)))))
      (ax_mp ((eq (sub (suc a) (d1)) a) (iff (el (sub (suc a) (d1)) A) (el a A)))
        (eleq1 (A (sub (suc a) (d1)) a))
        (sucsub1 (a)))))))

(local theorem optfin ((A set ())) ()
  (im (finite A) (finite (Option A)))
((m nat) (n nat) (x nat) (y nat))
(:let H1 (sub1can (x))
(:let H2 (:conv (im (not (eq x (d0))) (eq (suc (sub x (d1))) x))
  (im
    (:sym (:unfold ne (x (d0)) ()
      (not (eq x (d0)))))
    (eq (suc (sub x (d1))) x))
  H1)
(:let H3 (anwr ((an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0))) (eq (suc (sub x (d1))) x))
  H2)
(:let H4 (eqcomd ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) (suc (sub x (d1))) x)
  H3)
(:conv (im (finite A) (finite (Option A)))
  (im
    (:unfold finite (A) (n y)
      (ex n (al y (im (el y A) (lt y n)))))
    (finite (Option A)))
  (eex (n (al y (im (el y A) (lt y n))) (finite (Option A)))
    (:conv (im (al y (im (el y A) (lt y n))) (finite (Option A)))
      (im
        (al y (im (el y A) (lt y n)))
        (:unfold finite ((Option A)) (m x)
          (ex m (al x (im (el x (Option A)) (lt x m))))))
      (iexde (m (al y (im (el y A) (lt y n))) (suc n) (al x (im (el x (Option A)) (lt x m))))
        (iald (x (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (im (el x (Option A)) (lt x m)))
          (casesda ((an (al y (im (el y A) (lt y n))) (eq m (suc n))) (eq x (d0)) (im (el x (Option A)) (lt x m)))
            (a1d ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (eq x (d0))) (lt x m) (el x (Option A)))
              (imp ((an (al y (im (el y A) (lt y n))) (eq m (suc n))) (eq x (d0)) (lt x m))
                (syl5ibrcom ((an (al y (im (el y A) (lt y n))) (eq m (suc n))) (lt x m) (eq x (d0)) (lt (d0) m))
                  (lteq1 (x (d0) m))
                  (anwr ((al y (im (el y A) (lt y n))) (eq m (suc n)) (lt (d0) m))
                    (mpbiri ((eq m (suc n)) (lt (d0) (suc n)) (lt (d0) m))
                      (lt01S (n))
                      (lteq2 ((d0) m (suc n))))))))
            (mpbird ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) (im (el (suc (sub x (d1))) (Option A)) (lt (suc (sub x (d1))) (suc n))) (im (el x (Option A)) (lt x m)))
              (imeqd ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) (el x (Option A)) (el (suc (sub x (d1))) (Option A)) (lt x m) (lt (suc (sub x (d1))) (suc n)))
                (eleq1d ((Option A) (an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) x (suc (sub x (d1))))
                  H4)
                (lteqd ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) x (suc (sub x (d1))) m (suc n))
                  H4
                  (anlr ((al y (im (el y A) (lt y n))) (eq m (suc n)) (not (eq x (d0)))))))
              (sylib ((an (an (al y (im (el y A) (lt y n))) (eq m (suc n))) (not (eq x (d0)))) (im (el (sub x (d1)) A) (lt (sub x (d1)) n)) (im (el (suc (sub x (d1))) (Option A)) (lt (suc (sub x (d1))) (suc n))))
                (imeqi ((el (sub x (d1)) A) (el (suc (sub x (d1))) (Option A)) (lt (sub x (d1)) n) (lt (suc (sub x (d1))) (suc n)))
                  (optS (A (sub x (d1))))
                  (ltsuc ((sub x (d1)) n)))
                (anwll ((al y (im (el y A) (lt y n))) (eq m (suc n)) (not (eq x (d0))) (im (el (sub x (d1)) A) (lt (sub x (d1)) n)))
                  (eale (y (sub x (d1)) (im (el y A) (lt y n)) (im (el (sub x (d1)) A) (lt (sub x (d1)) n)))
                    (imeqd ((eq y (sub x (d1))) (el y A) (el (sub x (d1)) A) (lt y n) (lt (sub x (d1)) n))
                      (eleq1 (A y (sub x (d1))))
                      (lteq1 (y (sub x (d1)) n))))))))))))))))))

(def Power ((A set ())) (set ())
((x nat))
(ab x (subset (ns x) A)))

(local theorem Powereqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eqs (Power A1) (Power A2)))
((x nat))
(:conv (im _G (eqs (Power A1) (Power A2)))
  (im
    _G
    (eqs
      (:unfold Power (A1) (x)
        (ab x (subset (ns x) A1)))
      (:unfold Power (A2) (x)
        (ab x (subset (ns x) A2)))))
  (abeqd (_G x (subset (ns x) A1) (subset (ns x) A2))
    (sseqd (_G (ns x) (ns x) A1 A2)
      (eqsidd (_G (ns x)))
      hA))))

(local theorem Powereq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eqs (Power A1) (Power A2)))
()
(Powereqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem elPower ((A set ()) (a nat ())) ()
  (iff (el a (Power A)) (subset (ns a) A))
((x nat))
(:conv (iff (el a (Power A)) (subset (ns a) A))
  (iff
    (el
      a
      (:unfold Power (A) (x)
        (ab x (subset (ns x) A))))
    (subset (ns a) A))
  (elabe (x a (subset (ns x) A) (subset (ns a) A))
    (sseq1d ((eq x a) (ns x) (ns a) A)
      (nseq (x a))))))

(local theorem powerfin ((A set ())) ()
  (im (finite A) (finite (Power A)))
((a nat) (n nat) (x nat))
(sylbi ((finite A) (ex n (subset A (ns (upto n)))) (finite (Power A)))
  (dffin2 (A n))
  (eex (n (subset A (ns (upto n))) (finite (Power A)))
    (syl ((subset A (ns (upto n))) (al a (im (el a (Power A)) (lt a (suc (upto n))))) (finite (Power A)))
      (:conv (im (al a (im (el a (Power A)) (lt a (suc (upto n))))) (finite (Power A)))
        (im
          (al a (im (el a (Power A)) (lt a (suc (upto n)))))
          (:unfold finite ((Power A)) (x a)
            (ex x (al a (im (el a (Power A)) (lt a x))))))
        (iexe (x (suc (upto n)) (al a (im (el a (Power A)) (lt a x))) (al a (im (el a (Power A)) (lt a (suc (upto n))))))
          (aleqd ((eq x (suc (upto n))) a (im (el a (Power A)) (lt a x)) (im (el a (Power A)) (lt a (suc (upto n)))))
            (imeq2d ((eq x (suc (upto n))) (el a (Power A)) (lt a x) (lt a (suc (upto n))))
              (lteq2 (a x (suc (upto n))))))))
      (iald (a (subset A (ns (upto n))) (im (el a (Power A)) (lt a (suc (upto n)))))
        (syl5bi ((subset A (ns (upto n))) (el a (Power A)) (subset (ns a) A) (lt a (suc (upto n))))
          (elPower (A a))
          (com12 ((subset (ns a) A) (subset A (ns (upto n))) (lt a (suc (upto n))))
            (syl6 ((subset (ns a) A) (subset A (ns (upto n))) (subset (ns a) (ns (upto n))) (lt a (suc (upto n))))
              (sylib ((subset (ns a) (ns (upto n))) (le a (upto n)) (lt a (suc (upto n))))
                (leltsuc (a (upto n)))
                (ssle (a (upto n))))
              (sstr ((ns a) A (ns (upto n))))))))))))

(def power ((a nat ())) (nat ())
()
(lower (Power (ns a))))

(local theorem powereqd ((_G wff ()) (a1 nat ()) (a2 nat ()))
  ((ha (im _G (eq a1 a2))))
  (im _G (eq (power a1) (power a2)))
()
(:conv (im _G (eq (power a1) (power a2)))
  (im
    _G
    (eq
      (:unfold power (a1) ()
        (lower (Power (ns a1))))
      (:unfold power (a2) ()
        (lower (Power (ns a2))))))
  (lowereqd (_G (Power (ns a1)) (Power (ns a2)))
    (Powereqd (_G (ns a1) (ns a2))
      (nseqd (_G a1 a2)
        ha)))))

(local theorem powereq ((a1 nat ()) (a2 nat ())) ()
  (im (eq a1 a2) (eq (power a1) (power a2)))
()
(powereqd ((eq a1 a2) a1 a2)
  (id ((eq a1 a2)))))

(local theorem elpower ((a nat ()) (b nat ())) ()
  (iff (el a (ns (power b))) (subset (ns a) (ns b)))
()
(:conv (iff (el a (ns (power b))) (subset (ns a) (ns b)))
  (iff
    (el
      a
      (ns
        (:unfold power (b) ()
          (lower (Power (ns b))))))
    (subset (ns a) (ns b)))
  (ax_mp ((iff (el a (Power (ns b))) (subset (ns a) (ns b))) (iff (el a (ns (lower (Power (ns b))))) (subset (ns a) (ns b))))
    (ax_mp ((iff (el a (ns (lower (Power (ns b))))) (el a (Power (ns b)))) (im (iff (el a (Power (ns b))) (subset (ns a) (ns b))) (iff (el a (ns (lower (Power (ns b))))) (subset (ns a) (ns b)))))
      (bitr ((el a (ns (lower (Power (ns b))))) (el a (Power (ns b))) (subset (ns a) (ns b))))
      (ax_mp ((finite (Power (ns b))) (iff (el a (ns (lower (Power (ns b))))) (el a (Power (ns b)))))
        (ellower ((Power (ns b)) a))
        (ax_mp ((finite (ns b)) (finite (Power (ns b))))
          (powerfin ((ns b)))
          (finns (b)))))
    (elPower ((ns b) a)))))

(def cons ((a nat ()) (b nat ())) (nat ())
()
(suc (pr a b)))

(local theorem conseqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eq (cons a1 b1) (cons a2 b2)))
()
(:conv (im _G (eq (cons a1 b1) (cons a2 b2)))
  (im
    _G
    (eq
      (:unfold cons (a1 b1) ()
        (suc (pr a1 b1)))
      (:unfold cons (a2 b2) ()
        (suc (pr a2 b2)))))
  (suceqd (_G (pr a1 b1) (pr a2 b2))
    (preqd (_G a1 a2 b1 b2)
      ha
      hb))))

(local theorem conseq ((a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq a1 a2) (im (eq b1 b2) (eq (cons a1 b1) (cons a2 b2))))
()
(exp ((eq a1 a2) (eq b1 b2) (eq (cons a1 b1) (cons a2 b2)))
  (conseqd ((an (eq a1 a2) (eq b1 b2)) a1 a2 b1 b2)
    (anl ((eq a1 a2) (eq b1 b2)))
    (anr ((eq a1 a2) (eq b1 b2))))))

(local theorem conseq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (cons a1 b) (cons a2 b)))
()
(conseqd (G a1 a2 b b)
  h
  (eqidd (G b))))

(local theorem conseq1 ((a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eq (cons a1 b) (cons a2 b)))
()
(conseq1d ((eq a1 a2) a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem conseq2d ((G wff ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eq (cons a b1) (cons a b2)))
()
(conseqd (G a a b1 b2)
  (eqidd (G a))
  h))

(local theorem conseq2 ((a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eq (cons a b1) (cons a b2)))
()
(conseq2d ((eq b1 b2) a b1 b2)
  (id ((eq b1 b2)))))

(local theorem consne0 ((a nat ()) (b nat ())) ()
  (ne (cons a b) (d0))
()
(:conv (ne (cons a b) (d0))
  (ne
    (:unfold cons (a b) ()
      (suc (pr a b)))
    (d0))
  (peano1 ((pr a b)))))

(local theorem ltconsid1 ((a nat ()) (b nat ())) ()
  (lt a (cons a b))
()
(mpbi ((le a (pr a b)) (lt a (cons a b)))
  (:conv (iff (le a (pr a b)) (lt a (cons a b)))
    (iff
      (le a (pr a b))
      (lt
        a
        (:unfold cons (a b) ()
          (suc (pr a b)))))
    (leltsuc (a (pr a b))))
  (leprid1 (a b))))

(local theorem ltconsid2 ((a nat ()) (b nat ())) ()
  (lt b (cons a b))
()
(mpbi ((le b (pr a b)) (lt b (cons a b)))
  (:conv (iff (le b (pr a b)) (lt b (cons a b)))
    (iff
      (le b (pr a b))
      (lt
        b
        (:unfold cons (a b) ()
          (suc (pr a b)))))
    (leltsuc (b (pr a b))))
  (leprid2 (a b))))

(local theorem consfstsnd ((a nat ())) ()
  (im (ne a (d0)) (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a))
()
(syl5eq ((ne a (d0)) (cons (fst (sub a (d1))) (snd (sub a (d1)))) (suc (sub a (d1))) a)
  (:conv (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) (suc (sub a (d1))))
    (eq
      (:unfold cons ((fst (sub a (d1))) (snd (sub a (d1)))) ()
        (suc (pr (fst (sub a (d1))) (snd (sub a (d1))))))
      (suc (sub a (d1))))
    (ax_mp ((eq (pr (fst (sub a (d1))) (snd (sub a (d1)))) (sub a (d1))) (eq (suc (pr (fst (sub a (d1))) (snd (sub a (d1))))) (suc (sub a (d1)))))
      (suceq ((pr (fst (sub a (d1))) (snd (sub a (d1)))) (sub a (d1))))
      (fstsnd ((sub a (d1))))))
  (sub1can (a))))

(local theorem excons ((a nat ()) (x nat) (y nat)) ()
  (iff (ne a (d0)) (ex x (ex y (eq a (cons x y)))))
()
(ibii ((ne a (d0)) (ex x (ex y (eq a (cons x y)))))
  (rsyl ((ne a (d0)) (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (ex x (ex y (eq a (cons x y)))))
    (consfstsnd (a))
    (iexde (x (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (fst (sub a (d1))) (ex y (eq a (cons x y))))
      (iexde (y (an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (snd (sub a (d1))) (eq a (cons x y)))
        (eqtr3d ((an (an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (eq y (snd (sub a (d1))))) a (cons (fst (sub a (d1))) (snd (sub a (d1)))) (cons x y))
          (anll ((eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1)))) (eq y (snd (sub a (d1))))))
          (eqcomd ((an (an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (eq y (snd (sub a (d1))))) (cons x y) (cons (fst (sub a (d1))) (snd (sub a (d1)))))
            (conseqd ((an (an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (eq y (snd (sub a (d1))))) x (fst (sub a (d1))) y (snd (sub a (d1))))
              (anlr ((eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1)))) (eq y (snd (sub a (d1))))))
              (anr ((an (eq (cons (fst (sub a (d1))) (snd (sub a (d1)))) a) (eq x (fst (sub a (d1))))) (eq y (snd (sub a (d1))))))))))))
  (eex (x (ex y (eq a (cons x y))) (ne a (d0)))
    (eex (y (eq a (cons x y)) (ne a (d0)))
      (mpbiri ((eq a (cons x y)) (ne (cons x y) (d0)) (ne a (d0)))
        (consne0 (x y))
        (neeq1 (a (cons x y) (d0))))))))

(local theorem consinj ((a nat ()) (b nat ()) (c nat ()) (d nat ())) ()
  (iff (eq (cons a c) (cons b d)) (an (eq a b) (eq c d)))
()
(:conv (iff (eq (cons a c) (cons b d)) (an (eq a b) (eq c d)))
  (iff
    (eq
      (:unfold cons (a c) ()
        (suc (pr a c)))
      (:unfold cons (b d) ()
        (suc (pr b d))))
    (an (eq a b) (eq c d)))
  (ax_mp ((iff (eq (pr a c) (pr b d)) (an (eq a b) (eq c d))) (iff (eq (suc (pr a c)) (suc (pr b d))) (an (eq a b) (eq c d))))
    (ax_mp ((iff (eq (suc (pr a c)) (suc (pr b d))) (eq (pr a c) (pr b d))) (im (iff (eq (pr a c) (pr b d)) (an (eq a b) (eq c d))) (iff (eq (suc (pr a c)) (suc (pr b d))) (an (eq a b) (eq c d)))))
      (bitr ((eq (suc (pr a c)) (suc (pr b d))) (eq (pr a c) (pr b d)) (an (eq a b) (eq c d))))
      (peano2 ((pr a c) (pr b d))))
    (prth (a b c d)))))

(local theorem consfst ((a nat ()) (b nat ())) ()
  (eq (fst (sub (cons a b) (d1))) a)
()
(:conv (eq (fst (sub (cons a b) (d1))) a)
  (eq
    (fst
      (sub
        (:unfold cons (a b) ()
          (suc (pr a b)))
        (d1)))
    a)
  (ax_mp ((eq (fst (pr a b)) a) (eq (fst (sub (suc (pr a b)) (d1))) a))
    (ax_mp ((eq (fst (sub (suc (pr a b)) (d1))) (fst (pr a b))) (im (eq (fst (pr a b)) a) (eq (fst (sub (suc (pr a b)) (d1))) a)))
      (eqtr ((fst (sub (suc (pr a b)) (d1))) (fst (pr a b)) a))
      (ax_mp ((eq (sub (suc (pr a b)) (d1)) (pr a b)) (eq (fst (sub (suc (pr a b)) (d1))) (fst (pr a b))))
        (fsteq ((sub (suc (pr a b)) (d1)) (pr a b)))
        (sucsub1 ((pr a b)))))
    (fstpr (a b)))))

(local theorem conssnd ((a nat ()) (b nat ())) ()
  (eq (snd (sub (cons a b) (d1))) b)
()
(:conv (eq (snd (sub (cons a b) (d1))) b)
  (eq
    (snd
      (sub
        (:unfold cons (a b) ()
          (suc (pr a b)))
        (d1)))
    b)
  (ax_mp ((eq (snd (pr a b)) b) (eq (snd (sub (suc (pr a b)) (d1))) b))
    (ax_mp ((eq (snd (sub (suc (pr a b)) (d1))) (snd (pr a b))) (im (eq (snd (pr a b)) b) (eq (snd (sub (suc (pr a b)) (d1))) b)))
      (eqtr ((snd (sub (suc (pr a b)) (d1))) (snd (pr a b)) b))
      (ax_mp ((eq (sub (suc (pr a b)) (d1)) (pr a b)) (eq (snd (sub (suc (pr a b)) (d1))) (snd (pr a b))))
        (sndeq ((sub (suc (pr a b)) (d1)) (pr a b)))
        (sucsub1 ((pr a b)))))
    (sndpr (a b)))))

(local theorem lecons1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le a b) (le (cons a c) (cons b c)))
()
(:conv (iff (le a b) (le (cons a c) (cons b c)))
  (iff
    (le a b)
    (le
      (:unfold cons (a c) ()
        (suc (pr a c)))
      (:unfold cons (b c) ()
        (suc (pr b c)))))
  (ax_mp ((iff (le (pr a c) (pr b c)) (le (suc (pr a c)) (suc (pr b c)))) (iff (le a b) (le (suc (pr a c)) (suc (pr b c)))))
    (ax_mp ((iff (le a b) (le (pr a c) (pr b c))) (im (iff (le (pr a c) (pr b c)) (le (suc (pr a c)) (suc (pr b c)))) (iff (le a b) (le (suc (pr a c)) (suc (pr b c))))))
      (bitr ((le a b) (le (pr a c) (pr b c)) (le (suc (pr a c)) (suc (pr b c)))))
      (lepr1 (a b c)))
    (lesuc ((pr a c) (pr b c))))))

(local theorem lecons2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (le b c) (le (cons a b) (cons a c)))
()
(:conv (iff (le b c) (le (cons a b) (cons a c)))
  (iff
    (le b c)
    (le
      (:unfold cons (a b) ()
        (suc (pr a b)))
      (:unfold cons (a c) ()
        (suc (pr a c)))))
  (ax_mp ((iff (le (pr a b) (pr a c)) (le (suc (pr a b)) (suc (pr a c)))) (iff (le b c) (le (suc (pr a b)) (suc (pr a c)))))
    (ax_mp ((iff (le b c) (le (pr a b) (pr a c))) (im (iff (le (pr a b) (pr a c)) (le (suc (pr a b)) (suc (pr a c)))) (iff (le b c) (le (suc (pr a b)) (suc (pr a c))))))
      (bitr ((le b c) (le (pr a b) (pr a c)) (le (suc (pr a b)) (suc (pr a c)))))
      (lepr2 (a b c)))
    (lesuc ((pr a b) (pr a c))))))

(local theorem ltcons1 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt a b) (lt (cons a c) (cons b c)))
()
(:conv (iff (lt a b) (lt (cons a c) (cons b c)))
  (iff
    (lt a b)
    (lt
      (:unfold cons (a c) ()
        (suc (pr a c)))
      (:unfold cons (b c) ()
        (suc (pr b c)))))
  (ax_mp ((iff (lt (pr a c) (pr b c)) (lt (suc (pr a c)) (suc (pr b c)))) (iff (lt a b) (lt (suc (pr a c)) (suc (pr b c)))))
    (ax_mp ((iff (lt a b) (lt (pr a c) (pr b c))) (im (iff (lt (pr a c) (pr b c)) (lt (suc (pr a c)) (suc (pr b c)))) (iff (lt a b) (lt (suc (pr a c)) (suc (pr b c))))))
      (bitr ((lt a b) (lt (pr a c) (pr b c)) (lt (suc (pr a c)) (suc (pr b c)))))
      (ltpr1 (a b c)))
    (ltsuc ((pr a c) (pr b c))))))

(local theorem ltcons2 ((a nat ()) (b nat ()) (c nat ())) ()
  (iff (lt b c) (lt (cons a b) (cons a c)))
()
(:conv (iff (lt b c) (lt (cons a b) (cons a c)))
  (iff
    (lt b c)
    (lt
      (:unfold cons (a b) ()
        (suc (pr a b)))
      (:unfold cons (a c) ()
        (suc (pr a c)))))
  (ax_mp ((iff (lt (pr a b) (pr a c)) (lt (suc (pr a b)) (suc (pr a c)))) (iff (lt b c) (lt (suc (pr a b)) (suc (pr a c)))))
    (ax_mp ((iff (lt b c) (lt (pr a b) (pr a c))) (im (iff (lt (pr a b) (pr a c)) (lt (suc (pr a b)) (suc (pr a c)))) (iff (lt b c) (lt (suc (pr a b)) (suc (pr a c))))))
      (bitr ((lt b c) (lt (pr a b) (pr a c)) (lt (suc (pr a b)) (suc (pr a c)))))
      (ltpr2 (a b c)))
    (ltsuc ((pr a b) (pr a c))))))

(def sep ((n nat ()) (A set ())) (nat ())
()
(lower (Inter (ns n) A)))

(local theorem sepeqd ((_G wff ()) (n1 nat ()) (n2 nat ()) (A1 set ()) (A2 set ()))
  ((hn (im _G (eq n1 n2)))
   (hA (im _G (eqs A1 A2))))
  (im _G (eq (sep n1 A1) (sep n2 A2)))
()
(:conv (im _G (eq (sep n1 A1) (sep n2 A2)))
  (im
    _G
    (eq
      (:unfold sep (n1 A1) ()
        (lower (Inter (ns n1) A1)))
      (:unfold sep (n2 A2) ()
        (lower (Inter (ns n2) A2)))))
  (lowereqd (_G (Inter (ns n1) A1) (Inter (ns n2) A2))
    (ineqd (_G (ns n1) (ns n2) A1 A2)
      (nseqd (_G n1 n2)
        hn)
      hA))))

(local theorem sepeq ((n1 nat ()) (n2 nat ()) (A1 set ()) (A2 set ())) ()
  (im (eq n1 n2) (im (eqs A1 A2) (eq (sep n1 A1) (sep n2 A2))))
()
(exp ((eq n1 n2) (eqs A1 A2) (eq (sep n1 A1) (sep n2 A2)))
  (sepeqd ((an (eq n1 n2) (eqs A1 A2)) n1 n2 A1 A2)
    (anl ((eq n1 n2) (eqs A1 A2)))
    (anr ((eq n1 n2) (eqs A1 A2))))))

(local theorem sepeq1d ((G wff ()) (n1 nat ()) (n2 nat ()) (A set ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (sep n1 A) (sep n2 A)))
()
(sepeqd (G n1 n2 A A)
  h
  (eqsidd (G A))))

(local theorem sepeq1 ((n1 nat ()) (n2 nat ()) (A set ())) ()
  (im (eq n1 n2) (eq (sep n1 A) (sep n2 A)))
()
(sepeq1d ((eq n1 n2) n1 n2 A)
  (id ((eq n1 n2)))))

(local theorem sepeq2d ((G wff ()) (n nat ()) (A1 set ()) (A2 set ()))
  ((h (im G (eqs A1 A2))))
  (im G (eq (sep n A1) (sep n A2)))
()
(sepeqd (G n n A1 A2)
  (eqidd (G n))
  h))

(local theorem sepeq2 ((n nat ()) (A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eq (sep n A1) (sep n A2)))
()
(sepeq2d ((eqs A1 A2) n A1 A2)
  (id ((eqs A1 A2)))))

(theorem elsep ((n nat ()) (A set ()) (a nat ())) ()
  (iff (el a (ns (sep n A))) (an (el a (ns n)) (el a A)))
()
(:conv (iff (el a (ns (sep n A))) (an (el a (ns n)) (el a A)))
  (iff
    (el
      a
      (ns
        (:unfold sep (n A) ()
          (lower (Inter (ns n) A)))))
    (an (el a (ns n)) (el a A)))
  (ax_mp ((iff (el a (Inter (ns n) A)) (an (el a (ns n)) (el a A))) (iff (el a (ns (lower (Inter (ns n) A)))) (an (el a (ns n)) (el a A))))
    (ax_mp ((iff (el a (ns (lower (Inter (ns n) A)))) (el a (Inter (ns n) A))) (im (iff (el a (Inter (ns n) A)) (an (el a (ns n)) (el a A))) (iff (el a (ns (lower (Inter (ns n) A)))) (an (el a (ns n)) (el a A)))))
      (bitr ((el a (ns (lower (Inter (ns n) A)))) (el a (Inter (ns n) A)) (an (el a (ns n)) (el a A))))
      (ax_mp ((finite (Inter (ns n) A)) (iff (el a (ns (lower (Inter (ns n) A)))) (el a (Inter (ns n) A))))
        (ellower ((Inter (ns n) A) a))
        (ax_mp ((finite (ns n)) (finite (Inter (ns n) A)))
          (ax_mp ((subset (Inter (ns n) A) (ns n)) (im (finite (ns n)) (finite (Inter (ns n) A))))
            (finss ((Inter (ns n) A) (ns n)))
            (inss1 ((ns n) A)))
          (finns (n)))))
    (elin ((ns n) A a)))))

(def Arrow ((A set ()) (B set ())) (set ())
((f nat))
(ab f (an (an (isfun (ns f)) (eqs (Dom (ns f)) A)) (subset (Ran (ns f)) B))))

(local theorem Arroweqd ((_G wff ()) (A1 set ()) (A2 set ()) (B1 set ()) (B2 set ()))
  ((hA (im _G (eqs A1 A2)))
   (hB (im _G (eqs B1 B2))))
  (im _G (eqs (Arrow A1 B1) (Arrow A2 B2)))
((f nat))
(:conv (im _G (eqs (Arrow A1 B1) (Arrow A2 B2)))
  (im
    _G
    (eqs
      (:unfold Arrow (A1 B1) (f)
        (ab f (an (an (isfun (ns f)) (eqs (Dom (ns f)) A1)) (subset (Ran (ns f)) B1))))
      (:unfold Arrow (A2 B2) (f)
        (ab f (an (an (isfun (ns f)) (eqs (Dom (ns f)) A2)) (subset (Ran (ns f)) B2))))))
  (abeqd (_G f (an (an (isfun (ns f)) (eqs (Dom (ns f)) A1)) (subset (Ran (ns f)) B1)) (an (an (isfun (ns f)) (eqs (Dom (ns f)) A2)) (subset (Ran (ns f)) B2)))
    (aneqd (_G (an (isfun (ns f)) (eqs (Dom (ns f)) A1)) (an (isfun (ns f)) (eqs (Dom (ns f)) A2)) (subset (Ran (ns f)) B1) (subset (Ran (ns f)) B2))
      (aneqd (_G (isfun (ns f)) (isfun (ns f)) (eqs (Dom (ns f)) A1) (eqs (Dom (ns f)) A2))
        (biidd (_G (isfun (ns f))))
        (eqseqd (_G (Dom (ns f)) (Dom (ns f)) A1 A2)
          (eqsidd (_G (Dom (ns f))))
          hA))
      (sseqd (_G (Ran (ns f)) (Ran (ns f)) B1 B2)
        (eqsidd (_G (Ran (ns f))))
        hB)))))

(local theorem Arroweq ((A1 set ()) (A2 set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs A1 A2) (im (eqs B1 B2) (eqs (Arrow A1 B1) (Arrow A2 B2))))
()
(exp ((eqs A1 A2) (eqs B1 B2) (eqs (Arrow A1 B1) (Arrow A2 B2)))
  (Arroweqd ((an (eqs A1 A2) (eqs B1 B2)) A1 A2 B1 B2)
    (anl ((eqs A1 A2) (eqs B1 B2)))
    (anr ((eqs A1 A2) (eqs B1 B2))))))

(local theorem Arroweq1d ((G wff ()) (A1 set ()) (A2 set ()) (B set ()))
  ((h (im G (eqs A1 A2))))
  (im G (eqs (Arrow A1 B) (Arrow A2 B)))
()
(Arroweqd (G A1 A2 B B)
  h
  (eqsidd (G B))))

(local theorem Arroweq1 ((A1 set ()) (A2 set ()) (B set ())) ()
  (im (eqs A1 A2) (eqs (Arrow A1 B) (Arrow A2 B)))
()
(Arroweq1d ((eqs A1 A2) A1 A2 B)
  (id ((eqs A1 A2)))))

(local theorem Arroweq2d ((G wff ()) (A set ()) (B1 set ()) (B2 set ()))
  ((h (im G (eqs B1 B2))))
  (im G (eqs (Arrow A B1) (Arrow A B2)))
()
(Arroweqd (G A A B1 B2)
  (eqsidd (G A))
  h))

(local theorem Arroweq2 ((A set ()) (B1 set ()) (B2 set ())) ()
  (im (eqs B1 B2) (eqs (Arrow A B1) (Arrow A B2)))
()
(Arroweq2d ((eqs B1 B2) A B1 B2)
  (id ((eqs B1 B2)))))

(def write ((F set ()) (a nat ()) (b nat ())) (set ())
((x nat) (y nat))
(opab x y (ifp (eq x a) (eq y b) (el (pr x y) F))))

(local theorem writeeqd ((_G wff ()) (F1 set ()) (F2 set ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ()))
  ((hF (im _G (eqs F1 F2)))
   (ha (im _G (eq a1 a2)))
   (hb (im _G (eq b1 b2))))
  (im _G (eqs (write F1 a1 b1) (write F2 a2 b2)))
((x nat) (y nat))
(:conv (im _G (eqs (write F1 a1 b1) (write F2 a2 b2)))
  (im
    _G
    (eqs
      (:unfold write (F1 a1 b1) (x y)
        (opab x y (ifp (eq x a1) (eq y b1) (el (pr x y) F1))))
      (:unfold write (F2 a2 b2) (x y)
        (opab x y (ifp (eq x a2) (eq y b2) (el (pr x y) F2))))))
  (opabeqd (_G x y (ifp (eq x a1) (eq y b1) (el (pr x y) F1)) (ifp (eq x a2) (eq y b2) (el (pr x y) F2)))
    (ifpeqd (_G (eq x a1) (eq x a2) (eq y b1) (eq y b2) (el (pr x y) F1) (el (pr x y) F2))
      (eqeqd (_G x x a1 a2)
        (eqidd (_G x))
        ha)
      (eqeqd (_G y y b1 b2)
        (eqidd (_G y))
        hb)
      (eleqd (_G (pr x y) (pr x y) F1 F2)
        (eqidd (_G (pr x y)))
        hF)))))

(local theorem writeeq ((F1 set ()) (F2 set ()) (a1 nat ()) (a2 nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eqs F1 F2) (im (eq a1 a2) (im (eq b1 b2) (eqs (write F1 a1 b1) (write F2 a2 b2)))))
()
(exp ((eqs F1 F2) (eq a1 a2) (im (eq b1 b2) (eqs (write F1 a1 b1) (write F2 a2 b2))))
  (exp ((an (eqs F1 F2) (eq a1 a2)) (eq b1 b2) (eqs (write F1 a1 b1) (write F2 a2 b2)))
    (writeeqd ((an (an (eqs F1 F2) (eq a1 a2)) (eq b1 b2)) F1 F2 a1 a2 b1 b2)
      (anwl ((an (eqs F1 F2) (eq a1 a2)) (eq b1 b2) (eqs F1 F2))
        (anl ((eqs F1 F2) (eq a1 a2))))
      (anwl ((an (eqs F1 F2) (eq a1 a2)) (eq b1 b2) (eq a1 a2))
        (anr ((eqs F1 F2) (eq a1 a2))))
      (anr ((an (eqs F1 F2) (eq a1 a2)) (eq b1 b2)))))))

(local theorem writeeq1d ((G wff ()) (F1 set ()) (F2 set ()) (a nat ()) (b nat ()))
  ((h (im G (eqs F1 F2))))
  (im G (eqs (write F1 a b) (write F2 a b)))
()
(writeeqd (G F1 F2 a a b b)
  h
  (eqidd (G a))
  (eqidd (G b))))

(local theorem writeeq1 ((F1 set ()) (F2 set ()) (a nat ()) (b nat ())) ()
  (im (eqs F1 F2) (eqs (write F1 a b) (write F2 a b)))
()
(writeeq1d ((eqs F1 F2) F1 F2 a b)
  (id ((eqs F1 F2)))))

(local theorem writeeq2d ((G wff ()) (F set ()) (a1 nat ()) (a2 nat ()) (b nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eqs (write F a1 b) (write F a2 b)))
()
(writeeqd (G F F a1 a2 b b)
  (eqsidd (G F))
  h
  (eqidd (G b))))

(local theorem writeeq2 ((F set ()) (a1 nat ()) (a2 nat ()) (b nat ())) ()
  (im (eq a1 a2) (eqs (write F a1 b) (write F a2 b)))
()
(writeeq2d ((eq a1 a2) F a1 a2 b)
  (id ((eq a1 a2)))))

(local theorem writeeq3d ((G wff ()) (F set ()) (a nat ()) (b1 nat ()) (b2 nat ()))
  ((h (im G (eq b1 b2))))
  (im G (eqs (write F a b1) (write F a b2)))
()
(writeeqd (G F F a a b1 b2)
  (eqsidd (G F))
  (eqidd (G a))
  h))

(local theorem writeeq3 ((F set ()) (a nat ()) (b1 nat ()) (b2 nat ())) ()
  (im (eq b1 b2) (eqs (write F a b1) (write F a b2)))
()
(writeeq3d ((eq b1 b2) F a b1 b2)
  (id ((eq b1 b2)))))

(local theorem elwrite ((F set ()) (a nat ()) (b nat ()) (x nat ()) (y nat ())) ()
  (iff (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)))
((w nat) (z nat))
(:conv (iff (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)))
  (iff
    (el
      (pr x y)
      (:unfold write (F a b) (z w)
        (opab z w (ifp (eq z a) (eq w b) (el (pr z w) F)))))
    (ifp (eq x a) (eq y b) (el (pr x y) F)))
  (elopab (x y (ifp (eq x a) (eq y b) (el (pr x y) F)) z w (ifp (eq z a) (eq w b) (el (pr z w) F)))
    (ifpeqd ((an (eq z x) (eq w y)) (eq z a) (eq x a) (eq w b) (eq y b) (el (pr z w) F) (el (pr x y) F))
      (eqeq1d ((an (eq z x) (eq w y)) z x a)
        (anl ((eq z x) (eq w y))))
      (eqeq1d ((an (eq z x) (eq w y)) w y b)
        (anr ((eq z x) (eq w y))))
      (eleq1d (F (an (eq z x) (eq w y)) (pr z w) (pr x y))
        (imp ((eq z x) (eq w y) (eq (pr z w) (pr x y)))
          (preq (z x w y))))))))

(theorem writeEq ((F set ()) (a nat ()) (b nat ())) ()
  (eq (app (write F a b) a) b)
((y nat))
(trud ((eq (app (write F a b) a) b))
  (:conv (im (wtru) (eq (app (write F a b) a) b))
    (im
      (wtru)
      (eq
        (:unfold app ((write F a b) a) (y)
          (the (ab y (el (pr a y) (write F a b)))))
        b))
    (eqtheabd ((wtru) b y (el (pr a y) (write F a b)))
      (a1i ((wtru) (iff (el (pr a y) (write F a b)) (eq y b)))
        (ax_mp ((iff (ifp (eq a a) (eq y b) (el (pr a y) F)) (eq y b)) (iff (el (pr a y) (write F a b)) (eq y b)))
          (ax_mp ((iff (el (pr a y) (write F a b)) (ifp (eq a a) (eq y b) (el (pr a y) F))) (im (iff (ifp (eq a a) (eq y b) (el (pr a y) F)) (eq y b)) (iff (el (pr a y) (write F a b)) (eq y b))))
            (bitr ((el (pr a y) (write F a b)) (ifp (eq a a) (eq y b) (el (pr a y) F)) (eq y b)))
            (elwrite (F a b a y)))
          (ax_mp ((eq a a) (iff (ifp (eq a a) (eq y b) (el (pr a y) F)) (eq y b)))
            (ifppos ((eq a a) (eq y b) (el (pr a y) F)))
            (eqid (a)))))))))

(theorem writeNe ((F set ()) (a nat ()) (b nat ()) (x nat ())) ()
  (im (ne x a) (eq (app (write F a b) x) (app F x)))
((y nat))
(syl ((ne x a) (al y (iff (el (pr x y) (write F a b)) (el (pr x y) F))) (eq (app (write F a b) x) (app F x)))
  (eqapp ((write F a b) F x y))
  (iald (y (ne x a) (iff (el (pr x y) (write F a b)) (el (pr x y) F)))
    (syl5bb ((ne x a) (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F))
      (elwrite (F a b x y))
      (:conv (im (ne x a) (iff (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F)))
        (im
          (:unfold ne (x a) ()
            (not (eq x a)))
          (iff (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F)))
        (ifpneg ((eq x a) (eq y b) (el (pr x y) F))))))))

(local theorem writeisf ((F set ()) (a nat ()) (b nat ())) ()
  (im (isfun F) (isfun (write F a b)))
((x nat) (y nat) (z nat))
(:let H1 (elwrite (F a b x z))
(:conv (im (isfun F) (isfun (write F a b)))
  (im
    (isfun F)
    (:unfold isfun ((write F a b)) (x y z)
      (al x (al y (al z (im (el (pr x y) (write F a b)) (im (el (pr x z) (write F a b)) (eq y z))))))))
  (iald (x (isfun F) (al y (al z (im (el (pr x y) (write F a b)) (im (el (pr x z) (write F a b)) (eq y z))))))
    (iald (y (isfun F) (al z (im (el (pr x y) (write F a b)) (im (el (pr x z) (write F a b)) (eq y z)))))
      (iald (z (isfun F) (im (el (pr x y) (write F a b)) (im (el (pr x z) (write F a b)) (eq y z))))
        (syl5bi ((isfun F) (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (im (el (pr x z) (write F a b)) (eq y z)))
          (elwrite (F a b x y))
          (:conv (im (isfun F) (im (ifp (eq x a) (eq y b) (el (pr x y) F)) (im (el (pr x z) (write F a b)) (eq y z))))
            (im
              (isfun F)
              (im
                (:unfold ifp ((eq x a) (eq y b) (el (pr x y) F)) ()
                  (or (an (eq x a) (eq y b)) (an (not (eq x a)) (el (pr x y) F))))
                (im (el (pr x z) (write F a b)) (eq y z))))
            (eorda ((isfun F) (an (eq x a) (eq y b)) (an (not (eq x a)) (el (pr x y) F)) (im (el (pr x z) (write F a b)) (eq y z)))
              (syl5bi ((an (isfun F) (an (eq x a) (eq y b))) (el (pr x z) (write F a b)) (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq y z))
                H1
                (mpbird ((an (isfun F) (an (eq x a) (eq y b))) (im (eq z b) (eq y z)) (im (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq y z)))
                  (imeq1d ((an (isfun F) (an (eq x a) (eq y b))) (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq z b) (eq y z))
                    (syl ((an (isfun F) (an (eq x a) (eq y b))) (eq x a) (iff (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq z b)))
                      (ifppos ((eq x a) (eq z b) (el (pr x z) F)))
                      (anrl ((isfun F) (eq x a) (eq y b)))))
                  (syl ((an (isfun F) (an (eq x a) (eq y b))) (eq y b) (im (eq z b) (eq y z)))
                    (eqtr4 (y b z))
                    (anrr ((isfun F) (eq x a) (eq y b))))))
              (syl5bi ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) (write F a b)) (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq y z))
                H1
                (mpbird ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (im (el (pr x z) F) (eq y z)) (im (ifp (eq x a) (eq z b) (el (pr x z) F)) (eq y z)))
                  (imeq1d ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (ifp (eq x a) (eq z b) (el (pr x z) F)) (el (pr x z) F) (eq y z))
                    (syl ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (not (eq x a)) (iff (ifp (eq x a) (eq z b) (el (pr x z) F)) (el (pr x z) F)))
                      (ifpneg ((eq x a) (eq z b) (el (pr x z) F)))
                      (anrl ((isfun F) (not (eq x a)) (el (pr x y) F)))))
                  (exp ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) F) (eq y z))
                    (isfd (F (an (an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) F)) x y z)
                      (anll ((isfun F) (an (not (eq x a)) (el (pr x y) F)) (el (pr x z) F)))
                      (anwl ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) F) (el (pr x y) F))
                        (anrr ((isfun F) (not (eq x a)) (el (pr x y) F))))
                      (anr ((an (isfun F) (an (not (eq x a)) (el (pr x y) F))) (el (pr x z) F))))))))))))))))

(local theorem writeres ((F set ()) (a nat ()) (b nat ()) (x nat)) ()
  (eqs (write F a b) (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))
((p nat))
(:let H1 (fstsnd (p))
(eqri ((write F a b) (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))) p)
  (ax_mp ((iff (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (el p (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
    (ax_mp ((iff (el (pr (fst p) (snd p)) (write F a b)) (el p (write F a b))) (im (iff (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (el p (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))))
      (bitr3 ((el p (write F a b)) (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
      (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (el (pr (fst p) (snd p)) (write F a b)) (el p (write F a b))))
        (eleq1 ((write F a b) (pr (fst p) (snd p)) p))
        H1))
    (ax_mp ((iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
      (ax_mp ((iff (el (pr (fst p) (snd p)) (write F a b)) (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F))) (im (iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (el (pr (fst p) (snd p)) (write F a b)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))))
        (bitr ((el (pr (fst p) (snd p)) (write F a b)) (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
        (elwrite (F a b (fst p) (snd p))))
      (:conv (iff (ifp (eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))
        (iff
          (:unfold ifp ((eq (fst p) a) (eq (snd p) b) (el (pr (fst p) (snd p)) F)) ()
            (or
              (an (eq (fst p) a) (eq (snd p) b))
              (an
                (:sym (:unfold ne ((fst p) a) ()
                  (not (eq (fst p) a))))
                (el (pr (fst p) (snd p)) F))))
          (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))
        (ax_mp ((iff (or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (or (an (eq (fst p) a) (eq (snd p) b)) (an (ne (fst p) a) (el (pr (fst p) (snd p)) F))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
          (ax_mp ((iff (or (an (eq (fst p) a) (eq (snd p) b)) (an (ne (fst p) a) (el (pr (fst p) (snd p)) F))) (or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b)))) (im (iff (or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (iff (or (an (eq (fst p) a) (eq (snd p) b)) (an (ne (fst p) a) (el (pr (fst p) (snd p)) F))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))))
            (bitr ((or (an (eq (fst p) a) (eq (snd p) b)) (an (ne (fst p) a) (el (pr (fst p) (snd p)) F))) (or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
            (orcomb ((an (eq (fst p) a) (eq (snd p) b)) (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)))))
          (ax_mp ((iff (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
            (ax_mp ((iff (or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (im (iff (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))))
              (bitr4 ((or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
              (ax_mp ((iff (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))))) (iff (or (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (eq (fst p) a) (eq (snd p) b))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
                (oreq1 ((an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))))
                (ax_mp ((iff (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (el (pr (fst p) (snd p)) F) (ne (fst p) a))) (iff (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))))))
                  (ax_mp ((iff (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (ne (fst p) a))) (im (iff (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (el (pr (fst p) (snd p)) F) (ne (fst p) a))) (iff (an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))))))
                    (bitr4 ((an (ne (fst p) a) (el (pr (fst p) (snd p)) F)) (an (el (pr (fst p) (snd p)) F) (ne (fst p) a)) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))))))
                    (ancomb ((ne (fst p) a) (el (pr (fst p) (snd p)) F))))
                  (aneq2i ((el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))) (ne (fst p) a))
                    (elabe (x (fst p) (ne x a) (ne (fst p) a))
                      (neeq1 (x (fst p) a)))))))
            (ax_mp ((iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
              (ax_mp ((iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))) (im (iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))))))
                (bitr3 ((el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
                (ax_mp ((eq (pr (fst p) (snd p)) p) (iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (el p (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
                  (eleq1 ((Union (res F (ab x (ne x a))) (ns (sn (pr a b)))) (pr (fst p) (snd p)) p))
                  H1))
              (ax_mp ((iff (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
                (ax_mp ((iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b)))))) (im (iff (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))) (iff (el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))))))
                  (bitr ((el (pr (fst p) (snd p)) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
                  (elun ((res F (ab x (ne x a))) (ns (sn (pr a b))) (pr (fst p) (snd p)))))
                (ax_mp ((iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b))) (iff (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b)))))
                  (ax_mp ((iff (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a))))) (im (iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b))) (iff (or (el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b))))) (or (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (an (eq (fst p) a) (eq (snd p) b))))))
                    (oreq ((el (pr (fst p) (snd p)) (res F (ab x (ne x a)))) (an (el (pr (fst p) (snd p)) F) (el (fst p) (ab x (ne x a)))) (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b))))
                    (prelres (F (ab x (ne x a)) (fst p) (snd p))))
                  (ax_mp ((iff (eq (pr (fst p) (snd p)) (pr a b)) (an (eq (fst p) a) (eq (snd p) b))) (iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b))))
                    (ax_mp ((iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (eq (pr (fst p) (snd p)) (pr a b))) (im (iff (eq (pr (fst p) (snd p)) (pr a b)) (an (eq (fst p) a) (eq (snd p) b))) (iff (el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (an (eq (fst p) a) (eq (snd p) b)))))
                      (bitr ((el (pr (fst p) (snd p)) (ns (sn (pr a b)))) (eq (pr (fst p) (snd p)) (pr a b)) (an (eq (fst p) a) (eq (snd p) b))))
                      (elsn ((pr (fst p) (snd p)) (pr a b))))
                    (prth ((fst p) a (snd p) b))))))))))))))

(local theorem writefin ((F set ()) (a nat ()) (b nat ())) ()
  (im (finite F) (finite (write F a b)))
((x nat))
(sylibr ((finite F) (finite (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (finite (write F a b)))
  (ax_mp ((eqs (write F a b) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))) (iff (finite (write F a b)) (finite (Union (res F (ab x (ne x a))) (ns (sn (pr a b)))))))
    (fineq ((write F a b) (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))
    (writeres (F a b x)))
  (sylc ((finite F) (finite (res F (ab x (ne x a)))) (finite (ns (sn (pr a b)))) (finite (Union (res F (ab x (ne x a))) (ns (sn (pr a b))))))
    (unfin ((res F (ab x (ne x a))) (ns (sn (pr a b)))))
    (resfin ((ab x (ne x a)) F))
    (a1i ((finite F) (finite (ns (sn (pr a b)))))
      (finns ((sn (pr a b))))))))

(local theorem dmwrite ((F set ()) (a nat ()) (b nat ())) ()
  (eqs (Dom (write F a b)) (Union (Dom F) (ns (sn a))))
((x nat) (y nat))
(:let H1 (elwrite (F a b x y))
(:let H2 (ifpneg ((eq x a) (eq y b) (el (pr x y) F)))
(eqri ((Dom (write F a b)) (Union (Dom F) (ns (sn a))) x)
  (ax_mp ((iff (el x (Union (Dom F) (ns (sn a)))) (im (not (eq x a)) (el x (Dom F)))) (iff (el x (Dom (write F a b))) (el x (Union (Dom F) (ns (sn a))))))
    (ax_mp ((iff (el x (Dom (write F a b))) (im (not (eq x a)) (el x (Dom F)))) (im (iff (el x (Union (Dom F) (ns (sn a)))) (im (not (eq x a)) (el x (Dom F)))) (iff (el x (Dom (write F a b))) (el x (Union (Dom F) (ns (sn a)))))))
      (bitr4 ((el x (Dom (write F a b))) (im (not (eq x a)) (el x (Dom F))) (el x (Union (Dom F) (ns (sn a))))))
      (ibii ((el x (Dom (write F a b))) (im (not (eq x a)) (el x (Dom F))))
        (sylbi ((el x (Dom (write F a b))) (ex y (el (pr x y) (write F a b))) (im (not (eq x a)) (el x (Dom F))))
          (eldm ((write F a b) x y))
          (eex (y (el (pr x y) (write F a b)) (im (not (eq x a)) (el x (Dom F))))
            (sylbi ((el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (im (not (eq x a)) (el x (Dom F))))
              H1
              (com12 ((not (eq x a)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el x (Dom F)))
                (syl6 ((not (eq x a)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F) (el x (Dom F)))
                  (preldm (F x y))
                  (bi1d ((not (eq x a)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F))
                    H2))))))
        (casesd ((im (not (eq x a)) (el x (Dom F))) (eq x a) (el x (Dom (write F a b))))
          (a1i ((im (not (eq x a)) (el x (Dom F))) (im (eq x a) (el x (Dom (write F a b)))))
            (syl ((eq x a) (el (pr x b) (write F a b)) (el x (Dom (write F a b))))
              (preldm ((write F a b) x b))
              (sylibr ((eq x a) (ifp (eq x a) (eq b b) (el (pr x b) F)) (el (pr x b) (write F a b)))
                (elwrite (F a b x b))
                (mpbiri ((eq x a) (eq b b) (ifp (eq x a) (eq b b) (el (pr x b) F)))
                  (eqid (b))
                  (ifppos ((eq x a) (eq b b) (el (pr x b) F)))))))
          (a2i ((not (eq x a)) (el x (Dom F)) (el x (Dom (write F a b))))
            (syl5bi ((not (eq x a)) (el x (Dom F)) (ex y (el (pr x y) F)) (el x (Dom (write F a b))))
              (eldm (F x y))
              (eexd (y (not (eq x a)) (el (pr x y) F) (el x (Dom (write F a b))))
                (mpbii ((not (eq x a)) (im (el (pr x y) (write F a b)) (el x (Dom (write F a b)))) (im (el (pr x y) F) (el x (Dom (write F a b)))))
                  (preldm ((write F a b) x y))
                  (imeq1d ((not (eq x a)) (el (pr x y) (write F a b)) (el (pr x y) F) (el x (Dom (write F a b))))
                    (syl5bb ((not (eq x a)) (el (pr x y) (write F a b)) (ifp (eq x a) (eq y b) (el (pr x y) F)) (el (pr x y) F))
                      H1
                      H2)))))))))
    (:conv (iff (el x (Union (Dom F) (ns (sn a)))) (im (not (eq x a)) (el x (Dom F))))
      (iff
        (el x (Union (Dom F) (ns (sn a))))
        (:sym (:unfold or ((eq x a) (el x (Dom F))) ()
          (im (not (eq x a)) (el x (Dom F))))))
      (ax_mp ((iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F)))) (iff (el x (Union (Dom F) (ns (sn a)))) (or (eq x a) (el x (Dom F)))))
        (ax_mp ((iff (el x (Union (Dom F) (ns (sn a)))) (or (el x (Dom F)) (el x (ns (sn a))))) (im (iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F)))) (iff (el x (Union (Dom F) (ns (sn a)))) (or (eq x a) (el x (Dom F))))))
          (bitr ((el x (Union (Dom F) (ns (sn a)))) (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F)))))
          (elun ((Dom F) (ns (sn a)) x)))
        (ax_mp ((iff (or (el x (ns (sn a))) (el x (Dom F))) (or (eq x a) (el x (Dom F)))) (iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F)))))
          (ax_mp ((iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (el x (ns (sn a))) (el x (Dom F)))) (im (iff (or (el x (ns (sn a))) (el x (Dom F))) (or (eq x a) (el x (Dom F)))) (iff (or (el x (Dom F)) (el x (ns (sn a)))) (or (eq x a) (el x (Dom F))))))
            (bitr ((or (el x (Dom F)) (el x (ns (sn a)))) (or (el x (ns (sn a))) (el x (Dom F))) (or (eq x a) (el x (Dom F)))))
            (orcomb ((el x (Dom F)) (el x (ns (sn a))))))
          (ax_mp ((iff (el x (ns (sn a))) (eq x a)) (iff (or (el x (ns (sn a))) (el x (Dom F))) (or (eq x a) (el x (Dom F)))))
            (oreq1 ((el x (ns (sn a))) (eq x a) (el x (Dom F))))
            (elsn (x a)))))))))))

(local def srecaux ((S set ()) (n nat ())) (nat ())
((a nat) (b nat))
(recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))

(local theorem srecauxeqd ((_G wff ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ()))
  ((hS (im _G (eqs S1 S2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (srecaux S1 n1) (srecaux S2 n2)))
((a nat) (b nat))
(:conv (im _G (eq (srecaux S1 n1) (srecaux S2 n2)))
  (im
    _G
    (eq
      (:unfold srecaux (S1 n1) (a b)
        (recn (d0) (slam a (lam b (lower (write (ns b) a (app S1 b))))) n1))
      (:unfold srecaux (S2 n2) (a b)
        (recn (d0) (slam a (lam b (lower (write (ns b) a (app S2 b))))) n2))))
  (recneqd (_G (d0) (d0) (slam a (lam b (lower (write (ns b) a (app S1 b))))) (slam a (lam b (lower (write (ns b) a (app S2 b))))) n1 n2)
    (eqidd (_G (d0)))
    (slameqd (_G a (lam b (lower (write (ns b) a (app S1 b)))) (lam b (lower (write (ns b) a (app S2 b)))))
      (lameqd (_G b (lower (write (ns b) a (app S1 b))) (lower (write (ns b) a (app S2 b))))
        (lowereqd (_G (write (ns b) a (app S1 b)) (write (ns b) a (app S2 b)))
          (writeeqd (_G (ns b) (ns b) a a (app S1 b) (app S2 b))
            (eqsidd (_G (ns b)))
            (eqidd (_G a))
            (appeqd (_G S1 S2 b b)
              hS
              (eqidd (_G b)))))))
    hn)))

(local theorem srecauxeq ((S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eqs S1 S2) (im (eq n1 n2) (eq (srecaux S1 n1) (srecaux S2 n2))))
()
(exp ((eqs S1 S2) (eq n1 n2) (eq (srecaux S1 n1) (srecaux S2 n2)))
  (srecauxeqd ((an (eqs S1 S2) (eq n1 n2)) S1 S2 n1 n2)
    (anl ((eqs S1 S2) (eq n1 n2)))
    (anr ((eqs S1 S2) (eq n1 n2))))))

(local theorem srecauxeq1d ((G wff ()) (S1 set ()) (S2 set ()) (n nat ()))
  ((h (im G (eqs S1 S2))))
  (im G (eq (srecaux S1 n) (srecaux S2 n)))
()
(srecauxeqd (G S1 S2 n n)
  h
  (eqidd (G n))))

(local theorem srecauxeq1 ((S1 set ()) (S2 set ()) (n nat ())) ()
  (im (eqs S1 S2) (eq (srecaux S1 n) (srecaux S2 n)))
()
(srecauxeq1d ((eqs S1 S2) S1 S2 n)
  (id ((eqs S1 S2)))))

(local theorem srecauxeq2d ((G wff ()) (S set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (srecaux S n1) (srecaux S n2)))
()
(srecauxeqd (G S S n1 n2)
  (eqsidd (G S))
  h))

(local theorem srecauxeq2 ((S set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (srecaux S n1) (srecaux S n2)))
()
(srecauxeq2d ((eq n1 n2) S n1 n2)
  (id ((eq n1 n2)))))

(local theorem srecaux0 ((S set ())) ()
  (eq (srecaux S (d0)) (d0))
((x1 nat) (x2 nat))
(:conv (eq (srecaux S (d0)) (d0))
  (eq
    (:unfold srecaux (S (d0)) (x1 x2)
      (recn (d0) (slam x1 (lam x2 (lower (write (ns x2) x1 (app S x2))))) (d0)))
    (d0))
  (recn0 ((slam x1 (lam x2 (lower (write (ns x2) x1 (app S x2))))) (d0)))))

(local theorem srecauxS ((S set ()) (n nat ())) ()
  (eqs (ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n))))
((a nat) (b nat))
(:let H1 (anr ((eq a n) (eq b (srecaux S n))))
(mpbir ((eq (srecaux S (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))) (eqs (ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n)))))
  (ax_mp ((finite (write (ns (srecaux S n)) n (app S (srecaux S n)))) (iff (eqs (ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n)))) (eq (srecaux S (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))))
    (eqlower2 ((write (ns (srecaux S n)) n (app S (srecaux S n))) (srecaux S (suc n))))
    (ax_mp ((finite (ns (srecaux S n))) (finite (write (ns (srecaux S n)) n (app S (srecaux S n)))))
      (writefin ((ns (srecaux S n)) n (app S (srecaux S n))))
      (finns ((srecaux S n)))))
  (:conv (eq (srecaux S (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))
    (eq
      (:unfold srecaux (S (suc n)) (a b)
        (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) (suc n)))
      (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))
    (ax_mp ((eq (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))) (eq (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))))
      (ax_mp ((eq (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) (suc n)) (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n)))) (im (eq (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))) (eq (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) (suc n)) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))))
        (eqtr ((recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) (suc n)) (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))) (lower (write (ns (srecaux S n)) n (app S (srecaux S n))))))
        (recnS ((slam a (lam b (lower (write (ns b) a (app S b))))) n (d0))))
      (:conv (eq (app (slam a (lam b (lower (write (ns b) a (app S b))))) (pr n (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n))) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))
        (eq
          (app
            (slam a (lam b (lower (write (ns b) a (app S b)))))
            (pr
              n
              (:sym (:unfold srecaux (S n) (a b)
                (recn (d0) (slam a (lam b (lower (write (ns b) a (app S b))))) n)))))
          (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))))
        (appslame (n (srecaux S n) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))) a (lam b (lower (write (ns b) a (app S b)))))
          (applamed ((eq a n) (srecaux S n) (lower (write (ns (srecaux S n)) n (app S (srecaux S n)))) b (lower (write (ns b) a (app S b))))
            (lowereqd ((an (eq a n) (eq b (srecaux S n))) (write (ns b) a (app S b)) (write (ns (srecaux S n)) n (app S (srecaux S n))))
              (writeeqd ((an (eq a n) (eq b (srecaux S n))) (ns b) (ns (srecaux S n)) a n (app S b) (app S (srecaux S n)))
                (nseqd ((an (eq a n) (eq b (srecaux S n))) b (srecaux S n))
                  H1)
                (anl ((eq a n) (eq b (srecaux S n))))
                (appeq2d ((an (eq a n) (eq b (srecaux S n))) S b (srecaux S n))
                  H1)))))))))))

(local theorem dmsrecaux ((S set ()) (n nat ())) ()
  (eqs (Dom (ns (srecaux S n))) (ns (upto n)))
((x nat) (y nat) (z nat))
(ind (x y n (eqs (Dom (ns (srecaux S x))) (ns (upto x))) (eqs (Dom (ns (srecaux S (d0)))) (ns (upto (d0)))) (eqs (Dom (ns (srecaux S n))) (ns (upto n))) (eqs (Dom (ns (srecaux S y))) (ns (upto y))) (eqs (Dom (ns (srecaux S (suc y)))) (ns (upto (suc y)))))
  (eqseqd ((eq x (d0)) (Dom (ns (srecaux S x))) (Dom (ns (srecaux S (d0)))) (ns (upto x)) (ns (upto (d0))))
    (dmeqd ((eq x (d0)) (ns (srecaux S x)) (ns (srecaux S (d0))))
      (nseqd ((eq x (d0)) (srecaux S x) (srecaux S (d0)))
        (srecauxeq2 (S x (d0)))))
    (nseqd ((eq x (d0)) (upto x) (upto (d0)))
      (uptoeq (x (d0)))))
  (eqseqd ((eq x y) (Dom (ns (srecaux S x))) (Dom (ns (srecaux S y))) (ns (upto x)) (ns (upto y)))
    (dmeqd ((eq x y) (ns (srecaux S x)) (ns (srecaux S y)))
      (nseqd ((eq x y) (srecaux S x) (srecaux S y))
        (srecauxeq2 (S x y))))
    (nseqd ((eq x y) (upto x) (upto y))
      (uptoeq (x y))))
  (eqseqd ((eq x (suc y)) (Dom (ns (srecaux S x))) (Dom (ns (srecaux S (suc y)))) (ns (upto x)) (ns (upto (suc y))))
    (dmeqd ((eq x (suc y)) (ns (srecaux S x)) (ns (srecaux S (suc y))))
      (nseqd ((eq x (suc y)) (srecaux S x) (srecaux S (suc y)))
        (srecauxeq2 (S x (suc y)))))
    (nseqd ((eq x (suc y)) (upto x) (upto (suc y)))
      (uptoeq (x (suc y)))))
  (eqseqd ((eq x n) (Dom (ns (srecaux S x))) (Dom (ns (srecaux S n))) (ns (upto x)) (ns (upto n)))
    (dmeqd ((eq x n) (ns (srecaux S x)) (ns (srecaux S n)))
      (nseqd ((eq x n) (srecaux S x) (srecaux S n))
        (srecauxeq2 (S x n))))
    (nseqd ((eq x n) (upto x) (upto n))
      (uptoeq (x n))))
  (ax_mp ((eqs (Dom (ns (d0))) (ns (upto (d0)))) (eqs (Dom (ns (srecaux S (d0)))) (ns (upto (d0)))))
    (ax_mp ((eqs (Dom (ns (srecaux S (d0)))) (Dom (ns (d0)))) (im (eqs (Dom (ns (d0))) (ns (upto (d0)))) (eqs (Dom (ns (srecaux S (d0)))) (ns (upto (d0))))))
      (eqstr ((Dom (ns (srecaux S (d0)))) (Dom (ns (d0))) (ns (upto (d0)))))
      (ax_mp ((eqs (ns (srecaux S (d0))) (ns (d0))) (eqs (Dom (ns (srecaux S (d0)))) (Dom (ns (d0)))))
        (dmeq ((ns (srecaux S (d0))) (ns (d0))))
        (ax_mp ((eq (srecaux S (d0)) (d0)) (eqs (ns (srecaux S (d0))) (ns (d0))))
          (nseq ((srecaux S (d0)) (d0)))
          (srecaux0 (S)))))
    (ax_mp ((eqs (ns (upto (d0))) (ns (d0))) (eqs (Dom (ns (d0))) (ns (upto (d0)))))
      (ax_mp ((eqs (Dom (ns (d0))) (ns (d0))) (im (eqs (ns (upto (d0))) (ns (d0))) (eqs (Dom (ns (d0))) (ns (upto (d0))))))
        (eqstr4 ((Dom (ns (d0))) (ns (d0)) (ns (upto (d0)))))
        (dm0 ()))
      (ax_mp ((eq (upto (d0)) (d0)) (eqs (ns (upto (d0))) (ns (d0))))
        (nseq ((upto (d0)) (d0)))
        (upto0 ()))))
  (syl5eqs ((Dom (ns (srecaux S (suc y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y))) (ns (upto (suc y))) (eqs (Dom (ns (srecaux S y))) (ns (upto y))))
    (ax_mp ((eqs (Dom (write (ns (srecaux S y)) y (app S (srecaux S y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y)))) (eqs (Dom (ns (srecaux S (suc y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y)))))
      (ax_mp ((eqs (Dom (ns (srecaux S (suc y)))) (Dom (write (ns (srecaux S y)) y (app S (srecaux S y))))) (im (eqs (Dom (write (ns (srecaux S y)) y (app S (srecaux S y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y)))) (eqs (Dom (ns (srecaux S (suc y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y))))))
        (eqstr ((Dom (ns (srecaux S (suc y)))) (Dom (write (ns (srecaux S y)) y (app S (srecaux S y)))) (Union (Dom (ns (srecaux S y))) (ns (sn y)))))
        (ax_mp ((eqs (ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))) (eqs (Dom (ns (srecaux S (suc y)))) (Dom (write (ns (srecaux S y)) y (app S (srecaux S y))))))
          (dmeq ((ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))))
          (srecauxS (S y))))
      (dmwrite ((ns (srecaux S y)) y (app S (srecaux S y)))))
    (syl6eqsr ((Union (Dom (ns (srecaux S y))) (ns (sn y))) (Union (ns (upto y)) (ns (sn y))) (ns (upto (suc y))) (eqs (Dom (ns (srecaux S y))) (ns (upto y))))
      (eqri ((ns (upto (suc y))) (Union (ns (upto y)) (ns (sn y))) z)
        (ax_mp ((iff (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y))))) (iff (el z (ns (upto (suc y)))) (el z (Union (ns (upto y)) (ns (sn y))))))
          (ax_mp ((iff (el z (ns (upto (suc y)))) (lt z (suc y))) (im (iff (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y))))) (iff (el z (ns (upto (suc y)))) (el z (Union (ns (upto y)) (ns (sn y)))))))
            (bitr ((el z (ns (upto (suc y)))) (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y))))))
            (elupto (z (suc y))))
          (ax_mp ((iff (le z y) (el z (Union (ns (upto y)) (ns (sn y))))) (iff (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y))))))
            (ax_mp ((iff (le z y) (lt z (suc y))) (im (iff (le z y) (el z (Union (ns (upto y)) (ns (sn y))))) (iff (lt z (suc y)) (el z (Union (ns (upto y)) (ns (sn y)))))))
              (bitr3 ((lt z (suc y)) (le z y) (el z (Union (ns (upto y)) (ns (sn y))))))
              (leltsuc (z y)))
            (ax_mp ((iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (lt z y) (eq z y))) (iff (le z y) (el z (Union (ns (upto y)) (ns (sn y))))))
              (ax_mp ((iff (le z y) (or (lt z y) (eq z y))) (im (iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (lt z y) (eq z y))) (iff (le z y) (el z (Union (ns (upto y)) (ns (sn y)))))))
                (bitr4 ((le z y) (or (lt z y) (eq z y)) (el z (Union (ns (upto y)) (ns (sn y))))))
                (leloe (z y)))
              (ax_mp ((iff (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y))) (iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (lt z y) (eq z y))))
                (ax_mp ((iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (el z (ns (upto y))) (el z (ns (sn y))))) (im (iff (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y))) (iff (el z (Union (ns (upto y)) (ns (sn y)))) (or (lt z y) (eq z y)))))
                  (bitr ((el z (Union (ns (upto y)) (ns (sn y)))) (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y))))
                  (elun ((ns (upto y)) (ns (sn y)) z)))
                (ax_mp ((iff (el z (ns (sn y))) (eq z y)) (iff (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y))))
                  (ax_mp ((iff (el z (ns (upto y))) (lt z y)) (im (iff (el z (ns (sn y))) (eq z y)) (iff (or (el z (ns (upto y))) (el z (ns (sn y)))) (or (lt z y) (eq z y)))))
                    (oreq ((el z (ns (upto y))) (lt z y) (el z (ns (sn y))) (eq z y)))
                    (elupto (z y)))
                  (elsn (z y))))))))
      (uneq1 ((Dom (ns (srecaux S y))) (ns (upto y)) (ns (sn y))))))))

(local theorem srecauxisf ((S set ()) (n nat ())) ()
  (isfun (ns (srecaux S n)))
((x nat) (y nat))
(ind (x y n (isfun (ns (srecaux S x))) (isfun (ns (srecaux S (d0)))) (isfun (ns (srecaux S n))) (isfun (ns (srecaux S y))) (isfun (ns (srecaux S (suc y)))))
  (isfeqd ((eq x (d0)) (ns (srecaux S x)) (ns (srecaux S (d0))))
    (nseqd ((eq x (d0)) (srecaux S x) (srecaux S (d0)))
      (srecauxeq2 (S x (d0)))))
  (isfeqd ((eq x y) (ns (srecaux S x)) (ns (srecaux S y)))
    (nseqd ((eq x y) (srecaux S x) (srecaux S y))
      (srecauxeq2 (S x y))))
  (isfeqd ((eq x (suc y)) (ns (srecaux S x)) (ns (srecaux S (suc y))))
    (nseqd ((eq x (suc y)) (srecaux S x) (srecaux S (suc y)))
      (srecauxeq2 (S x (suc y)))))
  (isfeqd ((eq x n) (ns (srecaux S x)) (ns (srecaux S n)))
    (nseqd ((eq x n) (srecaux S x) (srecaux S n))
      (srecauxeq2 (S x n))))
  (mpbir ((isfun (ns (d0))) (isfun (ns (srecaux S (d0)))))
    (ax_mp ((eqs (ns (srecaux S (d0))) (ns (d0))) (iff (isfun (ns (srecaux S (d0)))) (isfun (ns (d0)))))
      (isfeq ((ns (srecaux S (d0))) (ns (d0))))
      (ax_mp ((eq (srecaux S (d0)) (d0)) (eqs (ns (srecaux S (d0))) (ns (d0))))
        (nseq ((srecaux S (d0)) (d0)))
        (srecaux0 (S))))
    (isf0 ()))
  (sylibr ((isfun (ns (srecaux S y))) (isfun (write (ns (srecaux S y)) y (app S (srecaux S y)))) (isfun (ns (srecaux S (suc y)))))
    (ax_mp ((eqs (ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))) (iff (isfun (ns (srecaux S (suc y)))) (isfun (write (ns (srecaux S y)) y (app S (srecaux S y))))))
      (isfeq ((ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))))
      (srecauxS (S y)))
    (writeisf ((ns (srecaux S y)) y (app S (srecaux S y)))))))

(def srec ((S set ()) (n nat ())) (nat ())
()
(app (ns (srecaux S (suc n))) n))

(local theorem sreceqd ((_G wff ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ()))
  ((hS (im _G (eqs S1 S2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (srec S1 n1) (srec S2 n2)))
()
(:conv (im _G (eq (srec S1 n1) (srec S2 n2)))
  (im
    _G
    (eq
      (:unfold srec (S1 n1) ()
        (app (ns (srecaux S1 (suc n1))) n1))
      (:unfold srec (S2 n2) ()
        (app (ns (srecaux S2 (suc n2))) n2))))
  (appeqd (_G (ns (srecaux S1 (suc n1))) (ns (srecaux S2 (suc n2))) n1 n2)
    (nseqd (_G (srecaux S1 (suc n1)) (srecaux S2 (suc n2)))
      (srecauxeqd (_G S1 S2 (suc n1) (suc n2))
        hS
        (suceqd (_G n1 n2)
          hn)))
    hn)))

(local theorem sreceq ((S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eqs S1 S2) (im (eq n1 n2) (eq (srec S1 n1) (srec S2 n2))))
()
(exp ((eqs S1 S2) (eq n1 n2) (eq (srec S1 n1) (srec S2 n2)))
  (sreceqd ((an (eqs S1 S2) (eq n1 n2)) S1 S2 n1 n2)
    (anl ((eqs S1 S2) (eq n1 n2)))
    (anr ((eqs S1 S2) (eq n1 n2))))))

(local theorem sreceq1d ((G wff ()) (S1 set ()) (S2 set ()) (n nat ()))
  ((h (im G (eqs S1 S2))))
  (im G (eq (srec S1 n) (srec S2 n)))
()
(sreceqd (G S1 S2 n n)
  h
  (eqidd (G n))))

(local theorem sreceq1 ((S1 set ()) (S2 set ()) (n nat ())) ()
  (im (eqs S1 S2) (eq (srec S1 n) (srec S2 n)))
()
(sreceq1d ((eqs S1 S2) S1 S2 n)
  (id ((eqs S1 S2)))))

(local theorem sreceq2d ((G wff ()) (S set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (srec S n1) (srec S n2)))
()
(sreceqd (G S S n1 n2)
  (eqsidd (G S))
  h))

(local theorem sreceq2 ((S set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (srec S n1) (srec S n2)))
()
(sreceq2d ((eq n1 n2) S n1 n2)
  (id ((eq n1 n2)))))

(local theorem srecauxapp ((S set ()) (a nat ()) (n nat ())) ()
  (im (lt a n) (eq (app (ns (srecaux S n)) a) (srec S a)))
((x nat) (y nat))
(ind (x y n (im (lt a x) (eq (app (ns (srecaux S x)) a) (srec S a))) (im (lt a (d0)) (eq (app (ns (srecaux S (d0))) a) (srec S a))) (im (lt a n) (eq (app (ns (srecaux S n)) a) (srec S a))) (im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (im (lt a (suc y)) (eq (app (ns (srecaux S (suc y))) a) (srec S a))))
  (imeqd ((eq x (d0)) (lt a x) (lt a (d0)) (eq (app (ns (srecaux S x)) a) (srec S a)) (eq (app (ns (srecaux S (d0))) a) (srec S a)))
    (lteq2 (a x (d0)))
    (eqeq1d ((eq x (d0)) (app (ns (srecaux S x)) a) (app (ns (srecaux S (d0))) a) (srec S a))
      (appeq1d ((eq x (d0)) (ns (srecaux S x)) (ns (srecaux S (d0))) a)
        (nseqd ((eq x (d0)) (srecaux S x) (srecaux S (d0)))
          (srecauxeq2 (S x (d0)))))))
  (imeqd ((eq x y) (lt a x) (lt a y) (eq (app (ns (srecaux S x)) a) (srec S a)) (eq (app (ns (srecaux S y)) a) (srec S a)))
    (lteq2 (a x y))
    (eqeq1d ((eq x y) (app (ns (srecaux S x)) a) (app (ns (srecaux S y)) a) (srec S a))
      (appeq1d ((eq x y) (ns (srecaux S x)) (ns (srecaux S y)) a)
        (nseqd ((eq x y) (srecaux S x) (srecaux S y))
          (srecauxeq2 (S x y))))))
  (imeqd ((eq x (suc y)) (lt a x) (lt a (suc y)) (eq (app (ns (srecaux S x)) a) (srec S a)) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
    (lteq2 (a x (suc y)))
    (eqeq1d ((eq x (suc y)) (app (ns (srecaux S x)) a) (app (ns (srecaux S (suc y))) a) (srec S a))
      (appeq1d ((eq x (suc y)) (ns (srecaux S x)) (ns (srecaux S (suc y))) a)
        (nseqd ((eq x (suc y)) (srecaux S x) (srecaux S (suc y)))
          (srecauxeq2 (S x (suc y)))))))
  (imeqd ((eq x n) (lt a x) (lt a n) (eq (app (ns (srecaux S x)) a) (srec S a)) (eq (app (ns (srecaux S n)) a) (srec S a)))
    (lteq2 (a x n))
    (eqeq1d ((eq x n) (app (ns (srecaux S x)) a) (app (ns (srecaux S n)) a) (srec S a))
      (appeq1d ((eq x n) (ns (srecaux S x)) (ns (srecaux S n)) a)
        (nseqd ((eq x n) (srecaux S x) (srecaux S n))
          (srecauxeq2 (S x n))))))
  (ax_mp ((not (lt a (d0))) (im (lt a (d0)) (eq (app (ns (srecaux S (d0))) a) (srec S a))))
    (absurd ((lt a (d0)) (eq (app (ns (srecaux S (d0))) a) (srec S a))))
    (lt02 (a)))
  (syl5bir ((im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (lt a (suc y)) (le a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
    (leltsuc (a y))
    (syl5bi ((im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (le a y) (or (lt a y) (eq a y)) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
      (leloe (a y))
      (eord ((im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (lt a y) (eq a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
        (a2i ((lt a y) (eq (app (ns (srecaux S y)) a) (srec S a)) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
          (bi2d ((lt a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a)) (eq (app (ns (srecaux S y)) a) (srec S a)))
            (eqeq1d ((lt a y) (app (ns (srecaux S (suc y))) a) (app (ns (srecaux S y)) a) (srec S a))
              (syl5eq ((lt a y) (app (ns (srecaux S (suc y))) a) (app (write (ns (srecaux S y)) y (app S (srecaux S y))) a) (app (ns (srecaux S y)) a))
                (ax_mp ((eqs (ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y)))) (eq (app (ns (srecaux S (suc y))) a) (app (write (ns (srecaux S y)) y (app S (srecaux S y))) a)))
                  (appeq1 ((ns (srecaux S (suc y))) (write (ns (srecaux S y)) y (app S (srecaux S y))) a))
                  (srecauxS (S y)))
                (syl ((lt a y) (ne a y) (eq (app (write (ns (srecaux S y)) y (app S (srecaux S y))) a) (app (ns (srecaux S y)) a)))
                  (writeNe ((ns (srecaux S y)) y (app S (srecaux S y)) a))
                  (ltne (a y)))))))
        (a1i ((im (lt a y) (eq (app (ns (srecaux S y)) a) (srec S a))) (im (eq a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a))))
          (:conv (im (eq a y) (eq (app (ns (srecaux S (suc y))) a) (srec S a)))
            (im
              (eq a y)
              (eq
                (app (ns (srecaux S (suc y))) a)
                (:unfold srec (S a) ()
                  (app (ns (srecaux S (suc a))) a))))
            (appeq1d ((eq a y) (ns (srecaux S (suc y))) (ns (srecaux S (suc a))) a)
              (nseqd ((eq a y) (srecaux S (suc y)) (srecaux S (suc a)))
                (srecauxeq2d ((eq a y) S (suc y) (suc a))
                  (suceqd ((eq a y) y a)
                    (eqcom (a y)))))))))))))

(local theorem srecval2 ((S set ()) (n nat ())) ()
  (eq (srec S n) (app S (srecaux S n)))
()
(ax_mp ((eq (app (ns (srecaux S (suc n))) n) (app S (srecaux S n))) (eq (srec S n) (app S (srecaux S n))))
  (ax_mp ((eq (app (ns (srecaux S (suc n))) n) (srec S n)) (im (eq (app (ns (srecaux S (suc n))) n) (app S (srecaux S n))) (eq (srec S n) (app S (srecaux S n)))))
    (eqtr3 ((srec S n) (app (ns (srecaux S (suc n))) n) (app S (srecaux S n))))
    (ax_mp ((lt n (suc n)) (eq (app (ns (srecaux S (suc n))) n) (srec S n)))
      (srecauxapp (S n (suc n)))
      (ltsucid (n))))
  (ax_mp ((eq (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n) (app S (srecaux S n))) (eq (app (ns (srecaux S (suc n))) n) (app S (srecaux S n))))
    (ax_mp ((eq (app (ns (srecaux S (suc n))) n) (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n)) (im (eq (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n) (app S (srecaux S n))) (eq (app (ns (srecaux S (suc n))) n) (app S (srecaux S n)))))
      (eqtr ((app (ns (srecaux S (suc n))) n) (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n) (app S (srecaux S n))))
      (ax_mp ((eqs (ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n)))) (eq (app (ns (srecaux S (suc n))) n) (app (write (ns (srecaux S n)) n (app S (srecaux S n))) n)))
        (appeq1 ((ns (srecaux S (suc n))) (write (ns (srecaux S n)) n (app S (srecaux S n))) n))
        (srecauxS (S n))))
    (writeEq ((ns (srecaux S n)) n (app S (srecaux S n)))))))

(local theorem srecres ((S set ()) (i nat) (n nat ())) ()
  (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n)))
()
(ax_mp ((eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n))) (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))))
  (ax_mp ((eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (res (lam i (srec S i)) (ns (upto n)))) (im (eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n))) (eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n)))))
    (eqstr3 ((res (lam i (srec S i)) (ns (upto n))) (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n))))
    (ax_mp ((al i (im (el i (ns (upto n))) (eq (app (ns (srecaux S n)) i) (srec S i)))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (res (lam i (srec S i)) (ns (upto n)))))
      (reslameq ((ns (upto n)) i (app (ns (srecaux S n)) i) (srec S i)))
      (ax_gen (i (im (el i (ns (upto n))) (eq (app (ns (srecaux S n)) i) (srec S i))))
        (sylbi ((el i (ns (upto n))) (lt i n) (eq (app (ns (srecaux S n)) i) (srec S i)))
          (elupto (i n))
          (srecauxapp (S i n))))))
  (ax_mp ((eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (ns (srecaux S n))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n))))
    (ax_mp ((eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n)))) (im (eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (ns (srecaux S n))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (ns (srecaux S n)))))
      (eqstr3 ((res (lam i (app (ns (srecaux S n)) i)) (ns (upto n))) (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (ns (srecaux S n))))
      (ax_mp ((eqs (Dom (ns (srecaux S n))) (ns (upto n))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (res (lam i (app (ns (srecaux S n)) i)) (ns (upto n)))))
        (reseq2 ((lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n))) (ns (upto n))))
        (dmsrecaux (S n))))
    (ax_mp ((isfun (ns (srecaux S n))) (eqs (res (lam i (app (ns (srecaux S n)) i)) (Dom (ns (srecaux S n)))) (ns (srecaux S n))))
      (lamapp ((ns (srecaux S n)) i))
      (srecauxisf (S n))))))

(local theorem sreclem ((f nat ()) (n nat ()) (x nat) (a nat (x))) ()
  (im (eq f (lower (res (lam x a) (ns (upto n))))) (eq (size (Dom (ns f))) n))
()
(syl6eq ((eq f (lower (res (lam x a) (ns (upto n))))) (size (Dom (ns f))) (size (ns (upto n))) n)
  (sizeupto (n))
  (sizeeqd ((eq f (lower (res (lam x a) (ns (upto n))))) (Dom (ns f)) (ns (upto n)))
    (syl6eqs ((Dom (ns f)) (Dom (res (lam x a) (ns (upto n)))) (ns (upto n)) (eq f (lower (res (lam x a) (ns (upto n))))))
      (dmreslam ((ns (upto n)) x a))
      (dmeqd ((eq f (lower (res (lam x a) (ns (upto n))))) (ns f) (res (lam x a) (ns (upto n))))
        (ax_mp ((iff (eqs (ns f) (res (lam x a) (ns (upto n)))) (eq f (lower (res (lam x a) (ns (upto n)))))) (im (eq f (lower (res (lam x a) (ns (upto n))))) (eqs (ns f) (res (lam x a) (ns (upto n))))))
          (bi2 ((eqs (ns f) (res (lam x a) (ns (upto n)))) (eq f (lower (res (lam x a) (ns (upto n)))))))
          (ax_mp ((finite (res (lam x a) (ns (upto n)))) (iff (eqs (ns f) (res (lam x a) (ns (upto n)))) (eq f (lower (res (lam x a) (ns (upto n)))))))
            (eqlower2 ((res (lam x a) (ns (upto n))) f))
            (ax_mp ((finite (ns (upto n))) (finite (res (lam x a) (ns (upto n)))))
              (finlam ((ns (upto n)) x a))
              (finns ((upto n)))))))))))

(local theorem sreclem2 ((f nat ()) (n nat ()) (x nat) (a nat (x)) (b nat (x))) ()
  (im (eq f (lower (res (lam x a) (ns (upto n))))) (im (lt b n) (eq (app (ns f) b) (sbn b x a))))
()
(exp ((eq f (lower (res (lam x a) (ns (upto n))))) (lt b n) (eq (app (ns f) b) (sbn b x a)))
  (syl6eq ((an (eq f (lower (res (lam x a) (ns (upto n))))) (lt b n)) (app (ns f) b) (app (lam x a) b) (sbn b x a))
    (applams (x a b))
    (eqtrd ((an (eq f (lower (res (lam x a) (ns (upto n))))) (lt b n)) (app (ns f) b) (app (res (lam x a) (ns (upto n))) b) (app (lam x a) b))
      (appeq1d ((an (eq f (lower (res (lam x a) (ns (upto n))))) (lt b n)) (ns f) (res (lam x a) (ns (upto n))) b)
        (sylibr ((an (eq f (lower (res (lam x a) (ns (upto n))))) (lt b n)) (eq f (lower (res (lam x a) (ns (upto n))))) (eqs (ns f) (res (lam x a) (ns (upto n)))))
          (ax_mp ((finite (res (lam x a) (ns (upto n)))) (iff (eqs (ns f) (res (lam x a) (ns (upto n)))) (eq f (lower (res (lam x a) (ns (upto n)))))))
            (eqlower2 ((res (lam x a) (ns (upto n))) f))
            (ax_mp ((finite (ns (upto n))) (finite (res (lam x a) (ns (upto n)))))
              (finlam ((ns (upto n)) x a))
              (finns ((upto n)))))
          (anl ((eq f (lower (res (lam x a) (ns (upto n))))) (lt b n)))))
      (syl ((an (eq f (lower (res (lam x a) (ns (upto n))))) (lt b n)) (el b (ns (upto n))) (eq (app (res (lam x a) (ns (upto n))) b) (app (lam x a) b)))
        (resapp ((ns (upto n)) (lam x a) b))
        (sylibr ((an (eq f (lower (res (lam x a) (ns (upto n))))) (lt b n)) (lt b n) (el b (ns (upto n))))
          (elupto (b n))
          (anr ((eq f (lower (res (lam x a) (ns (upto n))))) (lt b n)))))))))

(theorem srecval ((i nat) (S set ()) (n nat ())) ()
  (eq (srec S n) (app S (lower (res (lam i (srec S i)) (ns (upto n))))))
()
(ax_mp ((eq (app S (lower (res (lam i (srec S i)) (ns (upto n))))) (app S (srecaux S n))) (eq (srec S n) (app S (lower (res (lam i (srec S i)) (ns (upto n)))))))
  (ax_mp ((eq (srec S n) (app S (srecaux S n))) (im (eq (app S (lower (res (lam i (srec S i)) (ns (upto n))))) (app S (srecaux S n))) (eq (srec S n) (app S (lower (res (lam i (srec S i)) (ns (upto n))))))))
    (eqtr4 ((srec S n) (app S (srecaux S n)) (app S (lower (res (lam i (srec S i)) (ns (upto n)))))))
    (srecval2 (S n)))
  (ax_mp ((eq (lower (res (lam i (srec S i)) (ns (upto n)))) (srecaux S n)) (eq (app S (lower (res (lam i (srec S i)) (ns (upto n))))) (app S (srecaux S n))))
    (appeq2 (S (lower (res (lam i (srec S i)) (ns (upto n)))) (srecaux S n)))
    (ax_mp ((eq (lower (ns (srecaux S n))) (srecaux S n)) (eq (lower (res (lam i (srec S i)) (ns (upto n)))) (srecaux S n)))
      (ax_mp ((eq (lower (res (lam i (srec S i)) (ns (upto n)))) (lower (ns (srecaux S n)))) (im (eq (lower (ns (srecaux S n))) (srecaux S n)) (eq (lower (res (lam i (srec S i)) (ns (upto n)))) (srecaux S n))))
        (eqtr ((lower (res (lam i (srec S i)) (ns (upto n)))) (lower (ns (srecaux S n))) (srecaux S n)))
        (ax_mp ((eqs (res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))) (eq (lower (res (lam i (srec S i)) (ns (upto n)))) (lower (ns (srecaux S n)))))
          (lowereq ((res (lam i (srec S i)) (ns (upto n))) (ns (srecaux S n))))
          (srecres (S i n))))
      (lowerns ((srecaux S n)))))))

(local def srecpaux ((A set ()) (n nat ())) (nat ())
((f nat) (x nat))
(srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n))

(local theorem srecpauxeqd ((_G wff ()) (A1 set ()) (A2 set ()) (n1 nat ()) (n2 nat ()))
  ((hA (im _G (eqs A1 A2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (srecpaux A1 n1) (srecpaux A2 n2)))
((f nat) (x nat))
(:conv (im _G (eq (srecpaux A1 n1) (srecpaux A2 n2)))
  (im
    _G
    (eq
      (:unfold srecpaux (A1 n1) (f x)
        (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A1))) n1))
      (:unfold srecpaux (A2 n2) (f x)
        (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A2))) n2))))
  (sreceqd (_G (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A1))) (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A2))) n1 n2)
    (lameqd (_G f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A1)) (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A2)))
      (nateqd (_G (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A1) (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A2))
        (eleqd (_G (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A1 A2)
          (eqidd (_G (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x)))))))
          hA)))
    hn)))

(local theorem srecpauxeq ((A1 set ()) (A2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eqs A1 A2) (im (eq n1 n2) (eq (srecpaux A1 n1) (srecpaux A2 n2))))
()
(exp ((eqs A1 A2) (eq n1 n2) (eq (srecpaux A1 n1) (srecpaux A2 n2)))
  (srecpauxeqd ((an (eqs A1 A2) (eq n1 n2)) A1 A2 n1 n2)
    (anl ((eqs A1 A2) (eq n1 n2)))
    (anr ((eqs A1 A2) (eq n1 n2))))))

(local theorem srecpauxeq1d ((G wff ()) (A1 set ()) (A2 set ()) (n nat ()))
  ((h (im G (eqs A1 A2))))
  (im G (eq (srecpaux A1 n) (srecpaux A2 n)))
()
(srecpauxeqd (G A1 A2 n n)
  h
  (eqidd (G n))))

(local theorem srecpauxeq1 ((A1 set ()) (A2 set ()) (n nat ())) ()
  (im (eqs A1 A2) (eq (srecpaux A1 n) (srecpaux A2 n)))
()
(srecpauxeq1d ((eqs A1 A2) A1 A2 n)
  (id ((eqs A1 A2)))))

(local theorem srecpauxeq2d ((G wff ()) (A set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (srecpaux A n1) (srecpaux A n2)))
()
(srecpauxeqd (G A A n1 n2)
  (eqsidd (G A))
  h))

(local theorem srecpauxeq2 ((A set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (srecpaux A n1) (srecpaux A n2)))
()
(srecpauxeq2d ((eq n1 n2) A n1 n2)
  (id ((eq n1 n2)))))

(def srecp ((A set ()) (n nat ())) (wff ())
()
(true (srecpaux A n)))

(local theorem srecpeqd ((_G wff ()) (A1 set ()) (A2 set ()) (n1 nat ()) (n2 nat ()))
  ((hA (im _G (eqs A1 A2)))
   (hn (im _G (eq n1 n2))))
  (im _G (iff (srecp A1 n1) (srecp A2 n2)))
()
(:conv (im _G (iff (srecp A1 n1) (srecp A2 n2)))
  (im
    _G
    (iff
      (:unfold srecp (A1 n1) ()
        (true (srecpaux A1 n1)))
      (:unfold srecp (A2 n2) ()
        (true (srecpaux A2 n2)))))
  (trueeqd (_G (srecpaux A1 n1) (srecpaux A2 n2))
    (srecpauxeqd (_G A1 A2 n1 n2)
      hA
      hn))))

(local theorem srecpeq ((A1 set ()) (A2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eqs A1 A2) (im (eq n1 n2) (iff (srecp A1 n1) (srecp A2 n2))))
()
(exp ((eqs A1 A2) (eq n1 n2) (iff (srecp A1 n1) (srecp A2 n2)))
  (srecpeqd ((an (eqs A1 A2) (eq n1 n2)) A1 A2 n1 n2)
    (anl ((eqs A1 A2) (eq n1 n2)))
    (anr ((eqs A1 A2) (eq n1 n2))))))

(local theorem srecpeq1d ((G wff ()) (A1 set ()) (A2 set ()) (n nat ()))
  ((h (im G (eqs A1 A2))))
  (im G (iff (srecp A1 n) (srecp A2 n)))
()
(srecpeqd (G A1 A2 n n)
  h
  (eqidd (G n))))

(local theorem srecpeq1 ((A1 set ()) (A2 set ()) (n nat ())) ()
  (im (eqs A1 A2) (iff (srecp A1 n) (srecp A2 n)))
()
(srecpeq1d ((eqs A1 A2) A1 A2 n)
  (id ((eqs A1 A2)))))

(local theorem srecpeq2d ((G wff ()) (A set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (iff (srecp A n1) (srecp A n2)))
()
(srecpeqd (G A A n1 n2)
  (eqsidd (G A))
  h))

(local theorem srecpeq2 ((A set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (iff (srecp A n1) (srecp A n2)))
()
(srecpeq2d ((eq n1 n2) A n1 n2)
  (id ((eq n1 n2)))))

(local theorem srecpauxval ((A set ()) (i nat) (n nat ())) ()
  (eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
((f nat) (x nat) (x1 nat))
(:conv (eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
  (eq
    (:unfold srecpaux (A n) (f x)
      (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n))
    (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
  (ax_mp ((eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) x1)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (eq (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
    (ax_mp ((eq (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n) (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) x1)) (ns (upto n)))))) (im (eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) x1)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (eq (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
      (eqtr ((srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n) (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) x1)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
      (srecval (x1 (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) n)))
    (:conv (eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) x1)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
      (eq
        (app
          (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A)))
          (lower
            (res
              (lam
                x1
                (:sym (:unfold srecpaux (A x1) (f x)
                  (srec (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) x1))))
              (ns (upto n)))))
        (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
      (ax_mp ((eq (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (nat (el (pr n (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))) A))) (eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
        (ax_mp ((eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (nat (el (pr n (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))) A))) (im (eq (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (nat (el (pr n (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))) A))) (eq (app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
          (eqtr4 ((app (lam f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A))) (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (nat (el (pr n (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))) A)) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
          (applame ((lower (res (lam x1 (srecpaux A x1)) (ns (upto n)))) (nat (el (pr n (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))) A)) f (nat (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A)))
            (nateqd ((eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (el (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) A) (el (pr n (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))) A))
              (eleq1d (A (eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (pr (size (Dom (ns f))) (lower (ab x (true (app (ns f) x))))) (pr n (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))))
                (preqd ((eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (size (Dom (ns f))) n (lower (ab x (true (app (ns f) x)))) (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x)))))
                  (sreclem (f n x1 (srecpaux A x1)))
                  (lowereqd ((eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (ab x (true (app (ns f) x))) (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))
                    (abeqd ((eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) x (true (app (ns f) x)) (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x)))
                      (trueeqd ((eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (app (ns f) x) (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))
                        (appeq1d ((eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (ns f) (res (lam x1 (srecpaux A x1)) (ns (upto n))) x)
                          (ax_mp ((iff (eqs (ns f) (res (lam x1 (srecpaux A x1)) (ns (upto n)))) (eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n)))))) (im (eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (eqs (ns f) (res (lam x1 (srecpaux A x1)) (ns (upto n))))))
                            (bi2 ((eqs (ns f) (res (lam x1 (srecpaux A x1)) (ns (upto n)))) (eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n)))))))
                            (ax_mp ((finite (res (lam x1 (srecpaux A x1)) (ns (upto n)))) (iff (eqs (ns f) (res (lam x1 (srecpaux A x1)) (ns (upto n)))) (eq f (lower (res (lam x1 (srecpaux A x1)) (ns (upto n)))))))
                              (eqlower2 ((res (lam x1 (srecpaux A x1)) (ns (upto n))) f))
                              (ax_mp ((finite (ns (upto n))) (finite (res (lam x1 (srecpaux A x1)) (ns (upto n)))))
                                (finlam ((ns (upto n)) x1 (srecpaux A x1)))
                                (finns ((upto n)))))))))))))))
        (:conv (eq (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (nat (el (pr n (lower (ab x (true (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))) A)))
          (eq
            (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))
            (nat
              (el
                (pr
                  n
                  (lower
                    (ab
                      x
                      (:unfold true ((app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x)) ()
                        (:unfold ne ((app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)) ()
                          (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))))))
                A)))
          (ax_mp ((iff (el (pr n (sep (upto n) (ab i (srecp A i)))) A) (el (pr n (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))) A)) (eq (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (nat (el (pr n (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))) A))))
            (nateq ((el (pr n (sep (upto n) (ab i (srecp A i)))) A) (el (pr n (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))) A)))
            (ax_mp ((eq (pr n (sep (upto n) (ab i (srecp A i)))) (pr n (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))))) (iff (el (pr n (sep (upto n) (ab i (srecp A i)))) A) (el (pr n (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))) A)))
              (eleq1 (A (pr n (sep (upto n) (ab i (srecp A i)))) (pr n (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))))))
              (ax_mp ((eq (sep (upto n) (ab i (srecp A i))) (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))) (eq (pr n (sep (upto n) (ab i (srecp A i)))) (pr n (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))))))
                (preq2 (n (sep (upto n) (ab i (srecp A i))) (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))))
                (ax_mp ((eq (lower (ns (sep (upto n) (ab i (srecp A i))))) (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))) (eq (sep (upto n) (ab i (srecp A i))) (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))))
                  (ax_mp ((eq (lower (ns (sep (upto n) (ab i (srecp A i))))) (sep (upto n) (ab i (srecp A i)))) (im (eq (lower (ns (sep (upto n) (ab i (srecp A i))))) (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))) (eq (sep (upto n) (ab i (srecp A i))) (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))))))
                    (eqtr3 ((sep (upto n) (ab i (srecp A i))) (lower (ns (sep (upto n) (ab i (srecp A i))))) (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))))
                    (lowerns ((sep (upto n) (ab i (srecp A i))))))
                  (ax_mp ((eqs (ns (sep (upto n) (ab i (srecp A i)))) (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))) (eq (lower (ns (sep (upto n) (ab i (srecp A i))))) (lower (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))))
                    (lowereq ((ns (sep (upto n) (ab i (srecp A i)))) (ab x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))))
                    (eqab2i ((ns (sep (upto n) (ab i (srecp A i)))) x (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))
                      (ax_mp ((iff (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))) (iff (el x (ns (sep (upto n) (ab i (srecp A i))))) (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))
                        (ax_mp ((iff (el x (ns (sep (upto n) (ab i (srecp A i))))) (an (el x (ns (upto n))) (el x (ab i (srecp A i))))) (im (iff (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))) (iff (el x (ns (sep (upto n) (ab i (srecp A i))))) (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))))
                          (bitr ((el x (ns (sep (upto n) (ab i (srecp A i))))) (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)))))
                          (elsep ((upto n) (ab i (srecp A i)) x)))
                        (rbid ((el x (ns (upto n))) (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))
                          (anl ((el x (ns (upto n))) (el x (ab i (srecp A i)))))
                          (sylib ((not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))) (el x (Dom (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (el x (ns (upto n))))
                            (ax_mp ((eqs (Dom (res (lam x1 (srecpaux A x1)) (ns (upto n)))) (ns (upto n))) (iff (el x (Dom (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (el x (ns (upto n)))))
                              (eleq2 ((Dom (res (lam x1 (srecpaux A x1)) (ns (upto n)))) (ns (upto n)) x))
                              (dmreslam ((ns (upto n)) x1 (srecpaux A x1))))
                            (ax_mp ((im (not (el x (Dom (res (lam x1 (srecpaux A x1)) (ns (upto n)))))) (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))) (im (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))) (el x (Dom (res (lam x1 (srecpaux A x1)) (ns (upto n)))))))
                              (con1 ((el x (Dom (res (lam x1 (srecpaux A x1)) (ns (upto n))))) (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))
                              (ndmapp ((res (lam x1 (srecpaux A x1)) (ns (upto n))) x))))
                          (bitr4d ((el x (ns (upto n))) (an (el x (ns (upto n))) (el x (ab i (srecp A i)))) (el x (ab i (srecp A i))) (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))
                            (bian1 ((el x (ns (upto n))) (el x (ab i (srecp A i)))))
                            (syl6bbr ((el x (ns (upto n))) (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))) (srecp A x) (el x (ab i (srecp A i))))
                              (elabe (i x (srecp A i) (srecp A x))
                                (srecpeq2 (A i x)))
                              (:conv (im (el x (ns (upto n))) (iff (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))) (srecp A x)))
                                (im
                                  (el x (ns (upto n)))
                                  (iff
                                    (:sym (:unfold true ((app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x)) ()
                                      (:unfold ne ((app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0)) ()
                                        (not (eq (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (d0))))))
                                    (:unfold srecp (A x) ()
                                      (true (srecpaux A x)))))
                                (trueeqd ((el x (ns (upto n))) (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (srecpaux A x))
                                  (syl6eq ((el x (ns (upto n))) (app (res (lam x1 (srecpaux A x1)) (ns (upto n))) x) (app (lam x1 (srecpaux A x1)) x) (srecpaux A x))
                                    (applame (x (srecpaux A x) x1 (srecpaux A x1))
                                      (srecpauxeq2 (A x1 x)))
                                    (resapp ((ns (upto n)) (lam x1 (srecpaux A x1)) x)))))))))))))))))))))

(theorem srecpval ((i nat) (A set ()) (n nat ())) ()
  (iff (srecp A n) (el (pr n (sep (upto n) (ab i (srecp A i)))) A))
()
(:conv (iff (srecp A n) (el (pr n (sep (upto n) (ab i (srecp A i)))) A))
  (iff
    (:unfold srecp (A n) ()
      (true (srecpaux A n)))
    (el (pr n (sep (upto n) (ab i (srecp A i)))) A))
  (ax_mp ((iff (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (iff (true (srecpaux A n)) (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
    (ax_mp ((iff (true (srecpaux A n)) (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))) (im (iff (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (el (pr n (sep (upto n) (ab i (srecp A i)))) A)) (iff (true (srecpaux A n)) (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
      (bitr ((true (srecpaux A n)) (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))
      (ax_mp ((eq (srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))) (iff (true (srecpaux A n)) (true (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A)))))
        (trueeq ((srecpaux A n) (nat (el (pr n (sep (upto n) (ab i (srecp A i)))) A))))
        (srecpauxval (A i n))))
    (truenat ((el (pr n (sep (upto n) (ab i (srecp A i)))) A))))))

(def card ((s nat ())) (nat ())
((f nat))
(srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) s))

(local theorem cardeqd ((_G wff ()) (s1 nat ()) (s2 nat ()))
  ((hs (im _G (eq s1 s2))))
  (im _G (eq (card s1) (card s2)))
((f nat))
(:conv (im _G (eq (card s1) (card s2)))
  (im
    _G
    (eq
      (:unfold card (s1) (f)
        (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) s1))
      (:unfold card (s2) (f)
        (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) s2))))
  (sreceqd (_G (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) s1 s2)
    (eqsidd (_G (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2))))))
    hs)))

(local theorem cardeq ((s1 nat ()) (s2 nat ())) ()
  (im (eq s1 s2) (eq (card s1) (card s2)))
()
(cardeqd ((eq s1 s2) s1 s2)
  (id ((eq s1 s2)))))

(local theorem cardvallem ((i nat) (n nat ())) ()
  (eq (card n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))
((f nat))
(:let H1 (sreclem (f n i (card i)))
(:conv (eq (card n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))
  (eq
    (:unfold card (n) (f)
      (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) n))
    (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))
  (ax_mp ((eq (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (lower (res (lam i (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i)) (ns (upto n))))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2)))) (eq (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2)))))
    (ax_mp ((eq (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) n) (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (lower (res (lam i (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i)) (ns (upto n)))))) (im (eq (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (lower (res (lam i (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i)) (ns (upto n))))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2)))) (eq (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))))
      (eqtr ((srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) n) (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (lower (res (lam i (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i)) (ns (upto n))))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2)))))
      (srecval (i (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) n)))
    (:conv (eq (app (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) (lower (res (lam i (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i)) (ns (upto n))))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))
      (eq
        (app
          (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2))))
          (lower
            (res
              (lam
                i
                (:sym (:unfold card (i) (f)
                  (srec (lam f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2)))) i))))
              (ns (upto n)))))
        (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))))
      (applame ((lower (res (lam i (card i)) (ns (upto n)))) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))) f (add (app (ns f) (div (size (Dom (ns f))) (d2))) (mod (size (Dom (ns f))) (d2))))
        (addeqd ((eq f (lower (res (lam i (card i)) (ns (upto n))))) (app (ns f) (div (size (Dom (ns f))) (d2))) (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod (size (Dom (ns f))) (d2)) (mod n (d2)))
          (appeqd ((eq f (lower (res (lam i (card i)) (ns (upto n))))) (ns f) (res (lam i (card i)) (ns (upto n))) (div (size (Dom (ns f))) (d2)) (div n (d2)))
            (ax_mp ((iff (eqs (ns f) (res (lam i (card i)) (ns (upto n)))) (eq f (lower (res (lam i (card i)) (ns (upto n)))))) (im (eq f (lower (res (lam i (card i)) (ns (upto n))))) (eqs (ns f) (res (lam i (card i)) (ns (upto n))))))
              (bi2 ((eqs (ns f) (res (lam i (card i)) (ns (upto n)))) (eq f (lower (res (lam i (card i)) (ns (upto n)))))))
              (ax_mp ((finite (res (lam i (card i)) (ns (upto n)))) (iff (eqs (ns f) (res (lam i (card i)) (ns (upto n)))) (eq f (lower (res (lam i (card i)) (ns (upto n)))))))
                (eqlower2 ((res (lam i (card i)) (ns (upto n))) f))
                (ax_mp ((finite (ns (upto n))) (finite (res (lam i (card i)) (ns (upto n)))))
                  (finlam ((ns (upto n)) i (card i)))
                  (finns ((upto n))))))
            (diveq1d ((eq f (lower (res (lam i (card i)) (ns (upto n))))) (size (Dom (ns f))) n (d2))
              H1))
          (modeq1d ((eq f (lower (res (lam i (card i)) (ns (upto n))))) (size (Dom (ns f))) n (d2))
            H1))))))))

(theorem card0 () ()
  (eq (card (d0)) (d0))
((i nat))
(ax_mp ((eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0)) (eq (card (d0)) (d0)))
  (ax_mp ((eq (card (d0)) (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2)))) (im (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0)) (eq (card (d0)) (d0))))
    (eqtr ((card (d0)) (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0)))
    (cardvallem (i (d0))))
  (ax_mp ((eq (add (d0) (d0)) (d0)) (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0)))
    (ax_mp ((eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (add (d0) (d0))) (im (eq (add (d0) (d0)) (d0)) (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (d0))))
      (eqtr ((add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (add (d0) (d0)) (d0)))
      (ax_mp ((eq (mod (d0) (d2)) (d0)) (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (add (d0) (d0))))
        (ax_mp ((eq (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (d0)) (im (eq (mod (d0) (d2)) (d0)) (eq (add (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (mod (d0) (d2))) (add (d0) (d0)))))
          (addeq ((app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (d0) (mod (d0) (d2)) (d0)))
          (ax_mp ((not (el (div (d0) (d2)) (Dom (res (lam i (card i)) (ns (upto (d0))))))) (eq (app (res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))) (d0)))
            (ndmapp ((res (lam i (card i)) (ns (upto (d0)))) (div (d0) (d2))))
            (mtbir ((el (div (d0) (d2)) (ns (d0))) (el (div (d0) (d2)) (Dom (res (lam i (card i)) (ns (upto (d0)))))))
              (ax_mp ((eqs (Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (d0))) (iff (el (div (d0) (d2)) (Dom (res (lam i (card i)) (ns (upto (d0)))))) (el (div (d0) (d2)) (ns (d0)))))
                (eleq2 ((Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (d0)) (div (d0) (d2))))
                (ax_mp ((eqs (ns (upto (d0))) (ns (d0))) (eqs (Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (d0))))
                  (ax_mp ((eqs (Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (upto (d0)))) (im (eqs (ns (upto (d0))) (ns (d0))) (eqs (Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (d0)))))
                    (eqstr ((Dom (res (lam i (card i)) (ns (upto (d0))))) (ns (upto (d0))) (ns (d0))))
                    (dmreslam ((ns (upto (d0))) i (card i))))
                  (ax_mp ((eq (upto (d0)) (d0)) (eqs (ns (upto (d0))) (ns (d0))))
                    (nseq ((upto (d0)) (d0)))
                    (upto0 ()))))
              (el02 ((div (d0) (d2)))))))
        (mod01 ((d2)))))
    (add0 ((d0))))))

(local theorem cardval ((n nat ())) ()
  (im (ne n (d0)) (eq (card n) (add (card (div n (d2))) (mod n (d2)))))
((i nat))
(syl5eq ((ne n (d0)) (card n) (add (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (mod n (d2))) (add (card (div n (d2))) (mod n (d2))))
  (cardvallem (i n))
  (addeq1d ((ne n (d0)) (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (card (div n (d2))) (mod n (d2)))
    (syl6eq ((ne n (d0)) (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (app (lam i (card i)) (div n (d2))) (card (div n (d2))))
      (applame ((div n (d2)) (card (div n (d2))) i (card i))
        (cardeq (i (div n (d2)))))
      (syl ((ne n (d0)) (el (div n (d2)) (ns (upto n))) (eq (app (res (lam i (card i)) (ns (upto n))) (div n (d2))) (app (lam i (card i)) (div n (d2)))))
        (resapp ((ns (upto n)) (lam i (card i)) (div n (d2))))
        (sylibr ((ne n (d0)) (lt (div n (d2)) n) (el (div n (d2)) (ns (upto n))))
          (elupto ((div n (d2)) n))
          (sylbir ((ne n (d0)) (lt (d0) n) (lt (div n (d2)) n))
            (lt01 (n))
            (div2lt (n)))))))))

(local theorem cardb0 ((n nat ())) ()
  (eq (card (b0 n)) (card n))
()
(cases ((eq n (d0)) (eq (card (b0 n)) (card n)))
  (cardeqd ((eq n (d0)) (b0 n) n)
    (mpbiri ((eq n (d0)) (eq (b0 (d0)) (d0)) (eq (b0 n) n))
      (b00 ())
      (eqeqd ((eq n (d0)) (b0 n) (b0 (d0)) n (d0))
        (b0eq (n (d0)))
        (id ((eq n (d0)))))))
  (syl6eq ((not (eq n (d0))) (card (b0 n)) (add (card n) (d0)) (card n))
    (add0 ((card n)))
    (syl6eq ((not (eq n (d0))) (card (b0 n)) (add (card (div (b0 n) (d2))) (mod (b0 n) (d2))) (add (card n) (d0)))
      (ax_mp ((eq (mod (b0 n) (d2)) (d0)) (eq (add (card (div (b0 n) (d2))) (mod (b0 n) (d2))) (add (card n) (d0))))
        (ax_mp ((eq (card (div (b0 n) (d2))) (card n)) (im (eq (mod (b0 n) (d2)) (d0)) (eq (add (card (div (b0 n) (d2))) (mod (b0 n) (d2))) (add (card n) (d0)))))
          (addeq ((card (div (b0 n) (d2))) (card n) (mod (b0 n) (d2)) (d0)))
          (ax_mp ((eq (div (b0 n) (d2)) n) (eq (card (div (b0 n) (d2))) (card n)))
            (cardeq ((div (b0 n) (d2)) n))
            (b0div2 (n))))
        (b0mod2 (n)))
      (sylbir ((not (eq n (d0))) (ne (b0 n) (d0)) (eq (card (b0 n)) (add (card (div (b0 n) (d2))) (mod (b0 n) (d2)))))
        (:conv (iff (ne (b0 n) (d0)) (not (eq n (d0))))
          (iff
            (ne (b0 n) (d0))
            (:sym (:unfold ne (n (d0)) ()
              (not (eq n (d0))))))
          (b0ne0 (n)))
        (cardval ((b0 n))))))))

(local theorem cardb1 ((n nat ())) ()
  (eq (card (b1 n)) (suc (card n)))
()
(ax_mp ((eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n))) (eq (card (b1 n)) (suc (card n))))
  (ax_mp ((eq (card (b1 n)) (add (card (div (b1 n) (d2))) (mod (b1 n) (d2)))) (im (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n))) (eq (card (b1 n)) (suc (card n)))))
    (eqtr ((card (b1 n)) (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n))))
    (ax_mp ((ne (b1 n) (d0)) (eq (card (b1 n)) (add (card (div (b1 n) (d2))) (mod (b1 n) (d2)))))
      (cardval ((b1 n)))
      (b1ne0 (n))))
  (ax_mp ((eq (add (card n) (d1)) (suc (card n))) (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n))))
    (ax_mp ((eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (add (card n) (d1))) (im (eq (add (card n) (d1)) (suc (card n))) (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (suc (card n)))))
      (eqtr ((add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (add (card n) (d1)) (suc (card n))))
      (ax_mp ((eq (mod (b1 n) (d2)) (d1)) (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (add (card n) (d1))))
        (ax_mp ((eq (card (div (b1 n) (d2))) (card n)) (im (eq (mod (b1 n) (d2)) (d1)) (eq (add (card (div (b1 n) (d2))) (mod (b1 n) (d2))) (add (card n) (d1)))))
          (addeq ((card (div (b1 n) (d2))) (card n) (mod (b1 n) (d2)) (d1)))
          (ax_mp ((eq (div (b1 n) (d2)) n) (eq (card (div (b1 n) (d2))) (card n)))
            (cardeq ((div (b1 n) (d2)) n))
            (b1div2 (n))))
        (b1mod2 (n))))
    (add12 ((card n))))))

(theorem cardS ((a nat ()) (s nat ())) ()
  (im (not (el a (ns s))) (eq (card (ins a s)) (suc (card s))))
((w nat) (x nat) (y nat) (z nat))
(:let H1 (el01 (w))
(:let H2 (eqb0 (w))
(:let H3 (cardb1 ((div w (d2))))
(:let H4 (cardb0 ((div w (d2))))
(:let H5 (sub1can (y))
(:let H6 (:conv (im (not (eq y (d0))) (eq (suc (sub y (d1))) y))
  (im
    (:sym (:unfold ne (y (d0)) ()
      (not (eq y (d0)))))
    (eq (suc (sub y (d1))) y))
  H5)
(:let H7 (el01 ((ins y w)))
(:let H8 (elins ((d0) y w))
(:let H9 (anr ((not (eq y (d0))) (odd w)))
(ax_mp ((al z (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z))))) (im (not (el a (ns s))) (eq (card (ins a s)) (suc (card s)))))
  (eale (z s (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z)))) (im (not (el a (ns s))) (eq (card (ins a s)) (suc (card s)))))
    (imeqd ((eq z s) (not (el a (ns z))) (not (el a (ns s))) (eq (card (ins a z)) (suc (card z))) (eq (card (ins a s)) (suc (card s))))
      (noteqd ((eq z s) (el a (ns z)) (el a (ns s)))
        (elneq2 (a z s)))
      (eqeqd ((eq z s) (card (ins a z)) (card (ins a s)) (suc (card z)) (suc (card s)))
        (cardeqd ((eq z s) (ins a z) (ins a s))
          (inseq2 (a z s)))
        (suceqd ((eq z s) (card z) (card s))
          (cardeq (z s))))))
  (trud ((al z (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z))))))
    (indstr ((wtru) x y a (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))) (al z (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z))))) (al z (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z))))))
      (aleqd ((eq x y) z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))) (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z)))))
        (imeqd ((eq x y) (not (el x (ns z))) (not (el y (ns z))) (eq (card (ins x z)) (suc (card z))) (eq (card (ins y z)) (suc (card z))))
          (noteqd ((eq x y) (el x (ns z)) (el y (ns z)))
            (eleq1 ((ns z) x y)))
          (eqeq1d ((eq x y) (card (ins x z)) (card (ins y z)) (suc (card z)))
            (cardeqd ((eq x y) (ins x z) (ins y z))
              (inseq1 (x y z))))))
      (aleqd ((eq x a) z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))) (im (not (el a (ns z))) (eq (card (ins a z)) (suc (card z)))))
        (imeqd ((eq x a) (not (el x (ns z))) (not (el a (ns z))) (eq (card (ins x z)) (suc (card z))) (eq (card (ins a z)) (suc (card z))))
          (noteqd ((eq x a) (el x (ns z)) (el a (ns z)))
            (eleq1 ((ns z) x a)))
          (eqeq1d ((eq x a) (card (ins x z)) (card (ins a z)) (suc (card z)))
            (cardeqd ((eq x a) (ins x z) (ins a z))
              (inseq1 (x a z))))))
      (anwr ((wtru) (al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))) (al z (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z))))))
        (sylibr ((al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))) (al w (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w))))) (al z (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z))))))
          (cbval (z w (im (not (el y (ns z))) (eq (card (ins y z)) (suc (card z)))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))))
            (imeqd ((eq z w) (not (el y (ns z))) (not (el y (ns w))) (eq (card (ins y z)) (suc (card z))) (eq (card (ins y w)) (suc (card w))))
              (noteqd ((eq z w) (el y (ns z)) (el y (ns w)))
                (elneq2 (y z w)))
              (eqeqd ((eq z w) (card (ins y z)) (card (ins y w)) (suc (card z)) (suc (card w)))
                (cardeqd ((eq z w) (ins y z) (ins y w))
                  (inseq2 (y z w)))
                (suceqd ((eq z w) (card z) (card w))
                  (cardeq (z w))))))
          (iald (w (al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))))
            (cases ((eq y (d0)) (im (al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w))))))
              (a1d ((eq y (d0)) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))) (al x (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))))))
                (mpbiri ((eq y (d0)) (im (not (el (d0) (ns w))) (eq (card (ins (d0) w)) (suc (card w)))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))))
                  (sylbi ((not (el (d0) (ns w))) (not (odd w)) (eq (card (ins (d0) w)) (suc (card w))))
                    (ax_mp ((iff (el (d0) (ns w)) (odd w)) (iff (not (el (d0) (ns w))) (not (odd w))))
                      (noteq ((el (d0) (ns w)) (odd w)))
                      H1)
                    (sylbi ((not (odd w)) (eq w (b0 (div w (d2)))) (eq (card (ins (d0) w)) (suc (card w))))
                      H2
                      (eqtr4d ((eq w (b0 (div w (d2)))) (card (ins (d0) w)) (card (b1 (div w (d2)))) (suc (card w)))
                        (cardeqd ((eq w (b0 (div w (d2)))) (ins (d0) w) (b1 (div w (d2))))
                          (syl6eqr ((eq w (b0 (div w (d2)))) (ins (d0) w) (ins (d0) (b0 (div w (d2)))) (b1 (div w (d2))))
                            (b1ins ((div w (d2))))
                            (inseq2 ((d0) w (b0 (div w (d2)))))))
                        (syl6eqr ((eq w (b0 (div w (d2)))) (suc (card w)) (suc (card (div w (d2)))) (card (b1 (div w (d2)))))
                          H3
                          (suceqd ((eq w (b0 (div w (d2)))) (card w) (card (div w (d2))))
                            (syl6eq ((eq w (b0 (div w (d2)))) (card w) (card (b0 (div w (d2)))) (card (div w (d2))))
                              H4
                              (cardeq (w (b0 (div w (d2)))))))))))
                  (imeqd ((eq y (d0)) (not (el y (ns w))) (not (el (d0) (ns w))) (eq (card (ins y w)) (suc (card w))) (eq (card (ins (d0) w)) (suc (card w))))
                    (noteqd ((eq y (d0)) (el y (ns w)) (el (d0) (ns w)))
                      (eleq1 ((ns w) y (d0))))
                    (eqeq1d ((eq y (d0)) (card (ins y w)) (card (ins (d0) w)) (suc (card w)))
                      (cardeqd ((eq y (d0)) (ins y w) (ins (d0) w))
                        (inseq1 (y (d0) w)))))))
              (ealde ((im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))) x (not (eq y (d0))) (sub y (d1)) (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))))
                (mpbird ((an (not (eq y (d0))) (eq x (sub y (d1)))) (im (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w))))) (im (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w))))))
                  (imeq1d ((an (not (eq y (d0))) (eq x (sub y (d1)))) (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))))) (im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))))
                    (syl ((an (not (eq y (d0))) (eq x (sub y (d1)))) (lt x y) (iff (im (lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))))
                      (biim1 ((lt x y) (al z (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))))
                      (mpbird ((an (not (eq y (d0))) (eq x (sub y (d1)))) (lt (sub y (d1)) y) (lt x y))
                        (lteq1d ((an (not (eq y (d0))) (eq x (sub y (d1)))) x (sub y (d1)) y)
                          (anr ((not (eq y (d0))) (eq x (sub y (d1))))))
                        (sylan ((an (not (eq y (d0))) (eq x (sub y (d1)))) (lt (d0) y) (lt (d0) (d1)) (lt (sub y (d1)) y))
                          (subltid (y (d1)))
                          (sylibr ((an (not (eq y (d0))) (eq x (sub y (d1)))) (ne y (d0)) (lt (d0) y))
                            (lt01 (y))
                            (:conv (im (an (not (eq y (d0))) (eq x (sub y (d1)))) (ne y (d0)))
                              (im
                                (an (not (eq y (d0))) (eq x (sub y (d1))))
                                (:unfold ne (y (d0)) ()
                                  (not (eq y (d0)))))
                              (anl ((not (eq y (d0))) (eq x (sub y (d1)))))))
                          (a1i ((an (not (eq y (d0))) (eq x (sub y (d1)))) (lt (d0) (d1)))
                            (d0lt1 ()))))))
                  (ealde ((im (not (el y (ns w))) (eq (card (ins y w)) (suc (card w)))) z (an (not (eq y (d0))) (eq x (sub y (d1)))) (div w (d2)) (im (not (el x (ns z))) (eq (card (ins x z)) (suc (card z)))))
                    (imimd ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (not (el y (ns w))) (not (el x (ns z))) (eq (card (ins x z)) (suc (card z))) (eq (card (ins y w)) (suc (card w))))
                      (bi2d ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (not (el x (ns z))) (not (el y (ns w))))
                        (noteqd ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (el x (ns z)) (el y (ns w)))
                          (bitrd ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (el x (ns z)) (el (sub y (d1)) (ns (div w (d2)))) (el y (ns w)))
                            (elneqd ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) x (sub y (d1)) z (div w (d2)))
                              (anlr ((not (eq y (d0))) (eq x (sub y (d1))) (eq z (div w (d2)))))
                              (anr ((an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2))))))
                            (syl5bb ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (el (sub y (d1)) (ns (div w (d2)))) (el (suc (sub y (d1))) (ns w)) (el y (ns w)))
                              (eldiv2 ((sub y (d1)) w))
                              (eleq1d ((ns w) (an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (suc (sub y (d1))) y)
                                (syl ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (ne y (d0)) (eq (suc (sub y (d1))) y))
                                  H5
                                  (:conv (im (an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (ne y (d0)))
                                    (im
                                      (an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2))))
                                      (:unfold ne (y (d0)) ()
                                        (not (eq y (d0)))))
                                    (anll ((not (eq y (d0))) (eq x (sub y (d1))) (eq z (div w (d2))))))))))))
                      (sylbi ((an (an (not (eq y (d0))) (eq x (sub y (d1)))) (eq z (div w (d2)))) (an (not (eq y (d0))) (an (eq x (sub y (d1))) (eq z (div w (d2))))) (im (eq (card (ins x z)) (suc (card z))) (eq (card (ins y w)) (suc (card w)))))
                        (anass ((not (eq y (d0))) (eq x (sub y (d1))) (eq z (div w (d2)))))
                        (imp ((not (eq y (d0))) (an (eq x (sub y (d1))) (eq z (div w (d2)))) (im (eq (card (ins x z)) (suc (card z))) (eq (card (ins y w)) (suc (card w)))))
                          (syl5ibrcom ((not (eq y (d0))) (im (eq (card (ins x z)) (suc (card z))) (eq (card (ins y w)) (suc (card w)))) (an (eq x (sub y (d1))) (eq z (div w (d2)))) (im (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (card (ins y w)) (suc (card w)))))
                            (imeq1d ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (eq (card (ins x z)) (suc (card z))) (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (card (ins y w)) (suc (card w))))
                              (eqeqd ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (card (ins x z)) (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card z)) (suc (card (div w (d2)))))
                                (cardeqd ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (ins x z) (div (ins (suc (sub y (d1))) w) (d2)))
                                  (syl6eqr ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (ins x z) (ins (sub y (d1)) (div w (d2))) (div (ins (suc (sub y (d1))) w) (d2)))
                                    (insdiv2 ((sub y (d1)) w))
                                    (imp ((eq x (sub y (d1))) (eq z (div w (d2))) (eq (ins x z) (ins (sub y (d1)) (div w (d2)))))
                                      (inseq (x (sub y (d1)) z (div w (d2)))))))
                                (suceqd ((an (eq x (sub y (d1))) (eq z (div w (d2)))) (card z) (card (div w (d2))))
                                  (cardeqd ((an (eq x (sub y (d1))) (eq z (div w (d2)))) z (div w (d2)))
                                    (anr ((eq x (sub y (d1))) (eq z (div w (d2)))))))))
                            (bi1d ((not (eq y (d0))) (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (card (ins y w)) (suc (card w))))
                              (casesda ((not (eq y (d0))) (odd w) (iff (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (card (ins y w)) (suc (card w)))))
                                (syl5bbr ((an (not (eq y (d0))) (odd w)) (eq (card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))) (eq (suc (card (div (ins (suc (sub y (d1))) w) (d2)))) (suc (suc (card (div w (d2)))))) (eq (card (ins y w)) (suc (card w))))
                                  (peano2 ((card (div (ins (suc (sub y (d1))) w) (d2))) (suc (card (div w (d2))))))
                                  (eqeqd ((an (not (eq y (d0))) (odd w)) (suc (card (div (ins (suc (sub y (d1))) w) (d2)))) (card (ins y w)) (suc (suc (card (div w (d2))))) (suc (card w)))
                                    (syl5eqr ((an (not (eq y (d0))) (odd w)) (suc (card (div (ins (suc (sub y (d1))) w) (d2)))) (card (b1 (div (ins (suc (sub y (d1))) w) (d2)))) (card (ins y w)))
                                      (cardb1 ((div (ins (suc (sub y (d1))) w) (d2))))
                                      (cardeqd ((an (not (eq y (d0))) (odd w)) (b1 (div (ins (suc (sub y (d1))) w) (d2))) (ins y w))
                                        (eqtr4d ((an (not (eq y (d0))) (odd w)) (b1 (div (ins (suc (sub y (d1))) w) (d2))) (b1 (div (ins y w) (d2))) (ins y w))
                                          (b1eqd ((an (not (eq y (d0))) (odd w)) (div (ins (suc (sub y (d1))) w) (d2)) (div (ins y w) (d2)))
                                            (diveq1d ((an (not (eq y (d0))) (odd w)) (ins (suc (sub y (d1))) w) (ins y w) (d2))
                                              (inseq1d ((an (not (eq y (d0))) (odd w)) (suc (sub y (d1))) y w)
                                                (anwl ((not (eq y (d0))) (odd w) (eq (suc (sub y (d1))) y))
                                                  H6))))
                                          (sylib ((an (not (eq y (d0))) (odd w)) (odd (ins y w)) (eq (ins y w) (b1 (div (ins y w) (d2)))))
                                            (eqb1 ((ins y w)))
                                            (sylib ((an (not (eq y (d0))) (odd w)) (el (d0) (ns (ins y w))) (odd (ins y w)))
                                              H7
                                              (sylibr ((an (not (eq y (d0))) (odd w)) (or (eq (d0) y) (el (d0) (ns w))) (el (d0) (ns (ins y w))))
                                                H8
                                                (orrd ((an (not (eq y (d0))) (odd w)) (eq (d0) y) (el (d0) (ns w)))
                                                  (sylibr ((an (not (eq y (d0))) (odd w)) (odd w) (el (d0) (ns w)))
                                                    H1
                                                    H9))))))))
                                    (suceqd ((an (not (eq y (d0))) (odd w)) (suc (card (div w (d2)))) (card w))
                                      (syl5eqr ((an (not (eq y (d0))) (odd w)) (suc (card (div w (d2)))) (card (b1 (div w (d2)))) (card w))
                                        H3
                                        (cardeqd ((an (not (eq y (d0))) (odd w)) (b1 (div w (d2))) w)
                                          (eqcomd ((an (not (eq y (d0))) (odd w)) w (b1 (div w (d2))))
                                            (sylib ((an (not (eq y (d0))) (odd w)) (odd w) (eq w (b1 (div w (d2)))))
                                              (eqb1 (w))
                                              H9)))))))
                                (eqeqd ((an (not (eq y (d0))) (not (odd w))) (card (div (ins (suc (sub y (d1))) w) (d2))) (card (ins y w)) (suc (card (div w (d2)))) (suc (card w)))
                                  (syl5eqr ((an (not (eq y (d0))) (not (odd w))) (card (div (ins (suc (sub y (d1))) w) (d2))) (card (b0 (div (ins (suc (sub y (d1))) w) (d2)))) (card (ins y w)))
                                    (cardb0 ((div (ins (suc (sub y (d1))) w) (d2))))
                                    (cardeqd ((an (not (eq y (d0))) (not (odd w))) (b0 (div (ins (suc (sub y (d1))) w) (d2))) (ins y w))
                                      (eqtr4d ((an (not (eq y (d0))) (not (odd w))) (b0 (div (ins (suc (sub y (d1))) w) (d2))) (b0 (div (ins y w) (d2))) (ins y w))
                                        (b0eqd ((an (not (eq y (d0))) (not (odd w))) (div (ins (suc (sub y (d1))) w) (d2)) (div (ins y w) (d2)))
                                          (diveq1d ((an (not (eq y (d0))) (not (odd w))) (ins (suc (sub y (d1))) w) (ins y w) (d2))
                                            (inseq1d ((an (not (eq y (d0))) (not (odd w))) (suc (sub y (d1))) y w)
                                              (anwl ((not (eq y (d0))) (not (odd w)) (eq (suc (sub y (d1))) y))
                                                H6))))
                                        (sylib ((an (not (eq y (d0))) (not (odd w))) (not (odd (ins y w))) (eq (ins y w) (b0 (div (ins y w) (d2)))))
                                          (eqb0 ((ins y w)))
                                          (sylbir ((an (not (eq y (d0))) (not (odd w))) (not (or (eq y (d0)) (odd w))) (not (odd (ins y w))))
                                            (notor ((eq y (d0)) (odd w)))
                                            (ax_mp ((im (odd (ins y w)) (or (eq y (d0)) (odd w))) (im (not (or (eq y (d0)) (odd w))) (not (odd (ins y w)))))
                                              (con3 ((odd (ins y w)) (or (eq y (d0)) (odd w))))
                                              (sylbir ((odd (ins y w)) (el (d0) (ns (ins y w))) (or (eq y (d0)) (odd w)))
                                                H7
                                                (sylbi ((el (d0) (ns (ins y w))) (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w)))
                                                  H8
                                                  (ax_mp ((iff (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w))) (im (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w))))
                                                    (bi1 ((or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w))))
                                                    (ax_mp ((iff (el (d0) (ns w)) (odd w)) (iff (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w))))
                                                      (ax_mp ((iff (eq (d0) y) (eq y (d0))) (im (iff (el (d0) (ns w)) (odd w)) (iff (or (eq (d0) y) (el (d0) (ns w))) (or (eq y (d0)) (odd w)))))
                                                        (oreq ((eq (d0) y) (eq y (d0)) (el (d0) (ns w)) (odd w)))
                                                        (eqcomb ((d0) y)))
                                                      H1))))))))))
                                  (suceqd ((an (not (eq y (d0))) (not (odd w))) (card (div w (d2))) (card w))
                                    (syl5eqr ((an (not (eq y (d0))) (not (odd w))) (card (div w (d2))) (card (b0 (div w (d2)))) (card w))
                                      H4
                                      (cardeqd ((an (not (eq y (d0))) (not (odd w))) (b0 (div w (d2))) w)
                                        (eqcomd ((an (not (eq y (d0))) (not (odd w))) w (b0 (div w (d2))))
                                          (sylib ((an (not (eq y (d0))) (not (odd w))) (not (odd w)) (eq w (b0 (div w (d2)))))
                                            H2
                                            (anr ((not (eq y (d0))) (not (odd w))))))))))))))))))))))))))))))))))))

(def lrec ((z nat ()) (S set ()) (n nat ())) (nat ())
((f nat) (i nat))
(srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n))

(local theorem lreceqd ((_G wff ()) (z1 nat ()) (z2 nat ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ()))
  ((hz (im _G (eq z1 z2)))
   (hS (im _G (eqs S1 S2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (lrec z1 S1 n1) (lrec z2 S2 n2)))
((f nat) (i nat))
(:conv (im _G (eq (lrec z1 S1 n1) (lrec z2 S2 n2)))
  (im
    _G
    (eq
      (:unfold lrec (z1 S1 n1) (f i)
        (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z1 (app S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n1))
      (:unfold lrec (z2 S2 n2) (f i)
        (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z2 (app S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n2))))
  (sreceqd (_G (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z1 (app S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z2 (app S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n1 n2)
    (lameqd (_G f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z1 (app S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))) (sbn (size (Dom (ns f))) i (if (eq i (d0)) z2 (app S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))))
      (sbneqd (_G i (size (Dom (ns f))) (size (Dom (ns f))) (if (eq i (d0)) z1 (app S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq i (d0)) z2 (app S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))
        (eqidd (_G (size (Dom (ns f)))))
        (ifeqd (_G (eq i (d0)) (eq i (d0)) z1 z2 (app S1 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))) (app S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))
          (biidd (_G (eq i (d0))))
          hz
          (appeqd (_G S1 S2 (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))) (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))
            hS
            (eqidd (_G (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))))))
    hn)))

(local theorem lreceq ((z1 nat ()) (z2 nat ()) (S1 set ()) (S2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq z1 z2) (im (eqs S1 S2) (im (eq n1 n2) (eq (lrec z1 S1 n1) (lrec z2 S2 n2)))))
()
(exp ((eq z1 z2) (eqs S1 S2) (im (eq n1 n2) (eq (lrec z1 S1 n1) (lrec z2 S2 n2))))
  (exp ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eq (lrec z1 S1 n1) (lrec z2 S2 n2)))
    (lreceqd ((an (an (eq z1 z2) (eqs S1 S2)) (eq n1 n2)) z1 z2 S1 S2 n1 n2)
      (anwl ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eq z1 z2))
        (anl ((eq z1 z2) (eqs S1 S2))))
      (anwl ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2) (eqs S1 S2))
        (anr ((eq z1 z2) (eqs S1 S2))))
      (anr ((an (eq z1 z2) (eqs S1 S2)) (eq n1 n2)))))))

(local theorem lreceq1d ((G wff ()) (z1 nat ()) (z2 nat ()) (S set ()) (n nat ()))
  ((h (im G (eq z1 z2))))
  (im G (eq (lrec z1 S n) (lrec z2 S n)))
()
(lreceqd (G z1 z2 S S n n)
  h
  (eqsidd (G S))
  (eqidd (G n))))

(local theorem lreceq1 ((z1 nat ()) (z2 nat ()) (S set ()) (n nat ())) ()
  (im (eq z1 z2) (eq (lrec z1 S n) (lrec z2 S n)))
()
(lreceq1d ((eq z1 z2) z1 z2 S n)
  (id ((eq z1 z2)))))

(local theorem lreceq2d ((G wff ()) (z nat ()) (S1 set ()) (S2 set ()) (n nat ()))
  ((h (im G (eqs S1 S2))))
  (im G (eq (lrec z S1 n) (lrec z S2 n)))
()
(lreceqd (G z z S1 S2 n n)
  (eqidd (G z))
  h
  (eqidd (G n))))

(local theorem lreceq2 ((z nat ()) (S1 set ()) (S2 set ()) (n nat ())) ()
  (im (eqs S1 S2) (eq (lrec z S1 n) (lrec z S2 n)))
()
(lreceq2d ((eqs S1 S2) z S1 S2 n)
  (id ((eqs S1 S2)))))

(local theorem lreceq3d ((G wff ()) (z nat ()) (S set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (lrec z S n1) (lrec z S n2)))
()
(lreceqd (G z z S S n1 n2)
  (eqidd (G z))
  (eqsidd (G S))
  h))

(local theorem lreceq3 ((z nat ()) (S set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (lrec z S n1) (lrec z S n2)))
()
(lreceq3d ((eq n1 n2) z S n1 n2)
  (id ((eq n1 n2)))))

(local theorem lrecval ((S set ()) (n nat ()) (z nat ())) ()
  (eq (lrec z S n) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
((f nat) (i nat) (x nat))
(:let H1 (eqtrd ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) i (size (Dom (ns f))) n)
  (anr ((eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))))
  (anwl ((eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f)))) (eq (size (Dom (ns f))) n))
    (sreclem (f n x (lrec z S x)))))
(:let H2 (subeq1d ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) i n (d1))
  H1)
(:let H3 (sndeqd ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (sub i (d1)) (sub n (d1)))
  H2)
(:let H4 (anwl ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0))) (eq (snd (sub i (d1))) (snd (sub n (d1)))))
  H3)
(:conv (eq (lrec z S n) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
  (eq
    (:unfold lrec (z S n) (f i)
      (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n))
    (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
  (ax_mp ((eq (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (lower (res (lam x (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) x)) (ns (upto n))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))) (eq (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))))
    (ax_mp ((eq (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n) (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (lower (res (lam x (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) x)) (ns (upto n)))))) (im (eq (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (lower (res (lam x (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) x)) (ns (upto n))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))) (eq (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))))
      (eqtr ((srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n) (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (lower (res (lam x (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) x)) (ns (upto n))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))))
      (srecval (x (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) n)))
    (:conv (eq (app (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) (lower (res (lam x (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) x)) (ns (upto n))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
      (eq
        (app
          (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))))
          (lower
            (res
              (lam
                x
                (:sym (:unfold lrec (z S x) (f i)
                  (srec (lam f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))))) x))))
              (ns (upto n)))))
        (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
      (applame ((lower (res (lam x (lrec z S x)) (ns (upto n)))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))) f (sbn (size (Dom (ns f))) i (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))))
        (sbned ((eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) i (size (Dom (ns f))) (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
          (eqtrd ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (if (eq i (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq n (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))))
            (ifeq1d ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (eq i (d0)) (eq n (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))))
              (eqeq1d ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) i n (d0))
                H1))
            (syla ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0))) (eq (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))) (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))) (eq (if (eq n (d0)) z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))))) (if (eq n (d0)) z (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))))))
              (ifeq3a (z (app S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))))) (app S (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))) (eq n (d0))))
              (appeq2d ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) S (pr (fst (sub i (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1)))))) (pr (fst (sub n (d1))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1)))))))
                (preqd ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (fst (sub i (d1))) (fst (sub n (d1))) (pr (snd (sub i (d1))) (app (ns f) (snd (sub i (d1))))) (pr (snd (sub n (d1))) (lrec z S (snd (sub n (d1))))))
                  (anwl ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0))) (eq (fst (sub i (d1))) (fst (sub n (d1)))))
                    (fsteqd ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (sub i (d1)) (sub n (d1)))
                      H2))
                  (preqd ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (snd (sub i (d1))) (snd (sub n (d1))) (app (ns f) (snd (sub i (d1)))) (lrec z S (snd (sub n (d1)))))
                    H4
                    (eqtrd ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (app (ns f) (snd (sub i (d1)))) (app (ns f) (snd (sub n (d1)))) (lrec z S (snd (sub n (d1)))))
                      (appeq2d ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (ns f) (snd (sub i (d1))) (snd (sub n (d1))))
                        H4)
                      (syl6eq ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (app (ns f) (snd (sub n (d1)))) (sbn (snd (sub n (d1))) x (lrec z S x)) (lrec z S (snd (sub n (d1)))))
                        (sbne (x (snd (sub n (d1))) (lrec z S x) (lrec z S (snd (sub n (d1)))))
                          (lreceq3 (z S x (snd (sub n (d1))))))
                        (sylc ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (lt (snd (sub n (d1))) n) (eq (app (ns f) (snd (sub n (d1)))) (sbn (snd (sub n (d1))) x (lrec z S x))))
                          (sreclem2 (f n x (lrec z S x) (snd (sub n (d1)))))
                          (anll ((eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f)))) (not (eq n (d0)))))
                          (mpbii ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (lt (snd (sub n (d1))) (cons (fst (sub n (d1))) (snd (sub n (d1))))) (lt (snd (sub n (d1))) n))
                            (ltconsid2 ((fst (sub n (d1))) (snd (sub n (d1)))))
                            (lteq2d ((an (an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0)))) (snd (sub n (d1))) (cons (fst (sub n (d1))) (snd (sub n (d1)))) n)
                              (anwr ((an (eq f (lower (res (lam x (lrec z S x)) (ns (upto n))))) (eq i (size (Dom (ns f))))) (not (eq n (d0))) (eq (cons (fst (sub n (d1))) (snd (sub n (d1)))) n))
                                (:conv (im (not (eq n (d0))) (eq (cons (fst (sub n (d1))) (snd (sub n (d1)))) n))
                                  (im
                                    (:sym (:unfold ne (n (d0)) ()
                                      (not (eq n (d0)))))
                                    (eq (cons (fst (sub n (d1))) (snd (sub n (d1)))) n))
                                  (consfstsnd (n))))))))))))))))))))))))

(theorem lrec0 ((z nat ()) (S set ())) ()
  (eq (lrec z S (d0)) z)
()
(ax_mp ((eq (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))) z) (eq (lrec z S (d0)) z))
  (ax_mp ((eq (lrec z S (d0)) (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1))))))))) (im (eq (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))) z) (eq (lrec z S (d0)) z)))
    (eqtr ((lrec z S (d0)) (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))) z))
    (lrecval (S (d0) z)))
  (ax_mp ((eq (d0) (d0)) (eq (if (eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))) z))
    (ifpos ((eq (d0) (d0)) z (app S (pr (fst (sub (d0) (d1))) (pr (snd (sub (d0) (d1))) (lrec z S (snd (sub (d0) (d1)))))))))
    (eqid ((d0))))))

(theorem lrecS ((z nat ()) (S set ()) (a nat ()) (b nat ())) ()
  (eq (lrec z S (cons a b)) (app S (pr a (pr b (lrec z S b)))))
()
(:let H1 (conssnd (a b))
(ax_mp ((eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b))))) (eq (lrec z S (cons a b)) (app S (pr a (pr b (lrec z S b))))))
  (ax_mp ((eq (lrec z S (cons a b)) (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))))) (im (eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b))))) (eq (lrec z S (cons a b)) (app S (pr a (pr b (lrec z S b)))))))
    (eqtr ((lrec z S (cons a b)) (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b))))))
    (lrecval (S (cons a b) z)))
  (ax_mp ((eq (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))) (app S (pr a (pr b (lrec z S b))))) (eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b))))))
    (ax_mp ((eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (im (eq (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))) (app S (pr a (pr b (lrec z S b))))) (eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr a (pr b (lrec z S b)))))))
      (eqtr ((if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))) (app S (pr a (pr b (lrec z S b))))))
      (ax_mp ((not (eq (cons a b) (d0))) (eq (if (eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))) (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))))
        (ifneg ((eq (cons a b) (d0)) z (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))))))
        (:conv (not (eq (cons a b) (d0)))
          (:sym (:unfold ne ((cons a b) (d0)) ()
            (not (eq (cons a b) (d0)))))
          (consne0 (a b)))))
    (ax_mp ((eq (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))) (pr a (pr b (lrec z S b)))) (eq (app S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))))) (app S (pr a (pr b (lrec z S b))))))
      (appeq2 (S (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))) (pr a (pr b (lrec z S b)))))
      (ax_mp ((eq (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b))) (eq (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))) (pr a (pr b (lrec z S b)))))
        (ax_mp ((eq (fst (sub (cons a b) (d1))) a) (im (eq (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b))) (eq (pr (fst (sub (cons a b) (d1))) (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1)))))) (pr a (pr b (lrec z S b))))))
          (preq ((fst (sub (cons a b) (d1))) a (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b))))
          (consfst (a b)))
        (ax_mp ((eq (lrec z S (snd (sub (cons a b) (d1)))) (lrec z S b)) (eq (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b))))
          (ax_mp ((eq (snd (sub (cons a b) (d1))) b) (im (eq (lrec z S (snd (sub (cons a b) (d1)))) (lrec z S b)) (eq (pr (snd (sub (cons a b) (d1))) (lrec z S (snd (sub (cons a b) (d1))))) (pr b (lrec z S b)))))
            (preq ((snd (sub (cons a b) (d1))) b (lrec z S (snd (sub (cons a b) (d1)))) (lrec z S b)))
            H1)
          (ax_mp ((eq (snd (sub (cons a b) (d1))) b) (eq (lrec z S (snd (sub (cons a b) (d1)))) (lrec z S b)))
            (lreceq3 (z S (snd (sub (cons a b) (d1))) b))
            H1))))))))

(local theorem listindd ((G wff ()) (x nat) (a nat) (l nat) (n nat ()) (px wff (x)) (p0 wff ()) (pn wff ()) (pl wff (l)) (ps wff (a l)))
  ((h0 (im (eq x (d0)) (iff px p0)))
   (hl (im (eq x l) (iff px pl)))
   (hs (im (eq x (cons a l)) (iff px ps)))
   (hn (im (eq x n) (iff px pn)))
   (h1 (im G p0))
   (h2 (im (an G pl) ps)))
  (im G pn)
((w nat) (z nat))
(:let H1 (anr ((an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))))
(indstr (G z w n (sb z x px) pn (sb w x px))
  (sbeq1 (x z w px))
  (syl6bb ((eq z n) (sb z x px) (sb n x px) pn)
    (sbe (x n px pn)
      hn)
    (sbeq1 (x z n px)))
  (casesda ((an G (al z (im (lt z w) (sb z x px)))) (eq w (d0)) (sb w x px))
    (mpbird ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (d0))) (sb (d0) x px) (sb w x px))
      (sbeq1d (x (an (an G (al z (im (lt z w) (sb z x px)))) (eq w (d0))) w (d0) px)
        (anr ((an G (al z (im (lt z w) (sb z x px)))) (eq w (d0)))))
      (anwll (G (al z (im (lt z w) (sb z x px))) (eq w (d0)) (sb (d0) x px))
        (sylibr (G p0 (sb (d0) x px))
          (sbe (x (d0) px p0)
            h0)
          h1)))
    (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ex a (ex l (eq w (cons a l)))) (sb w x px))
      (sylib ((an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ne w (d0)) (ex a (ex l (eq w (cons a l)))))
        (excons (w a l))
        (:conv (im (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ne w (d0)))
          (im
            (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0))))
            (:unfold ne (w (d0)) ()
              (not (eq w (d0)))))
          (anr ((an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))))))
      (eexd (a (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (ex l (eq w (cons a l))) (sb w x px))
        (eexd (l (an (an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0)))) (eq w (cons a l)) (sb w x px))
          (anwl ((an G (al z (im (lt z w) (sb z x px)))) (not (eq w (d0))) (im (eq w (cons a l)) (sb w x px)))
            (exp ((an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l)) (sb w x px))
              (mpbird ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) ps (sb w x px))
                (syl6bb ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) (sb w x px) (sb (cons a l) x px) ps)
                  (sbe (x (cons a l) px ps)
                    hs)
                  (sbeq1d (x (an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) w (cons a l) px)
                    H1))
                (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) pl ps)
                  (mpd ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) (lt l w) pl)
                    (mpbiri ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) (lt l (cons a l)) (lt l w))
                      (ltconsid2 (a l))
                      (lteq2d ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) l w (cons a l))
                        H1))
                    (rsyl ((an (an G (al z (im (lt z w) (sb z x px)))) (eq w (cons a l))) (al z (im (lt z w) (sb z x px))) (im (lt l w) pl))
                      (anlr (G (al z (im (lt z w) (sb z x px))) (eq w (cons a l))))
                      (eale (z l (im (lt z w) (sb z x px)) (im (lt l w) pl))
                        (imeqd ((eq z l) (lt z w) (lt l w) (sb z x px) pl)
                          (lteq1 (z l w))
                          (syl6bb ((eq z l) (sb z x px) (sb l x px) pl)
                            (sbe (x l px pl)
                              hl)
                            (sbeq1 (x z l px)))))))
                  (anwll (G (al z (im (lt z w) (sb z x px))) (eq w (cons a l)) (im pl ps))
                    (exp (G pl ps)
                      h2)))))))))))))

(local theorem listind ((x nat) (a nat) (l nat) (n nat ()) (px wff (x)) (p0 wff ()) (pn wff ()) (pl wff (l)) (ps wff (a l)))
  ((h0 (im (eq x (d0)) (iff px p0)))
   (hl (im (eq x l) (iff px pl)))
   (hs (im (eq x (cons a l)) (iff px ps)))
   (hn (im (eq x n) (iff px pn)))
   (h1 p0)
   (h2 (im pl ps)))
  pn
()
(trud (pn)
  (listindd ((wtru) x a l n px p0 pn pl ps)
    h0
    hl
    hs
    hn
    (a1i ((wtru) p0)
      h1)
    (anwr ((wtru) pl ps)
      h2))))

(def lmems ((l nat ())) (nat ())
((x nat) (y nat) (z nat))
(lrec (d0) (slam x (slam z (lam y (ins x y)))) l))

(local theorem lmemseqd ((_G wff ()) (l1 nat ()) (l2 nat ()))
  ((hl (im _G (eq l1 l2))))
  (im _G (eq (lmems l1) (lmems l2)))
((x nat) (y nat) (z nat))
(:conv (im _G (eq (lmems l1) (lmems l2)))
  (im
    _G
    (eq
      (:unfold lmems (l1) (x y z)
        (lrec (d0) (slam x (slam z (lam y (ins x y)))) l1))
      (:unfold lmems (l2) (x y z)
        (lrec (d0) (slam x (slam z (lam y (ins x y)))) l2))))
  (lreceqd (_G (d0) (d0) (slam x (slam z (lam y (ins x y)))) (slam x (slam z (lam y (ins x y)))) l1 l2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam x (slam z (lam y (ins x y))))))
    hl)))

(local theorem lmemseq ((l1 nat ()) (l2 nat ())) ()
  (im (eq l1 l2) (eq (lmems l1) (lmems l2)))
()
(lmemseqd ((eq l1 l2) l1 l2)
  (id ((eq l1 l2)))))

(theorem lmems0 () ()
  (eq (lmems (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (lmems (d0)) (d0))
  (eq
    (:unfold lmems ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (ins x1 x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (ins x1 x3))))))))

(theorem lmemsS ((a nat ()) (l nat ())) ()
  (eq (lmems (cons a l)) (ins a (lmems l)))
((x nat) (y nat) (z nat))
(:conv (eq (lmems (cons a l)) (ins a (lmems l)))
  (eq
    (:unfold lmems ((cons a l)) (x y z)
      (lrec (d0) (slam x (slam z (lam y (ins x y)))) (cons a l)))
    (ins a (lmems l)))
  (ax_mp ((eq (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))) (ins a (lmems l))) (eq (lrec (d0) (slam x (slam z (lam y (ins x y)))) (cons a l)) (ins a (lmems l))))
    (ax_mp ((eq (lrec (d0) (slam x (slam z (lam y (ins x y)))) (cons a l)) (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l))))) (im (eq (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))) (ins a (lmems l))) (eq (lrec (d0) (slam x (slam z (lam y (ins x y)))) (cons a l)) (ins a (lmems l)))))
      (eqtr ((lrec (d0) (slam x (slam z (lam y (ins x y)))) (cons a l)) (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))) (ins a (lmems l))))
      (lrecS ((d0) (slam x (slam z (lam y (ins x y)))) a l)))
    (:conv (eq (app (slam x (slam z (lam y (ins x y)))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (ins x y)))) l)))) (ins a (lmems l)))
      (eq
        (app
          (slam x (slam z (lam y (ins x y))))
          (pr
            a
            (pr
              l
              (:sym (:unfold lmems (l) (x y z)
                (lrec (d0) (slam x (slam z (lam y (ins x y)))) l))))))
        (ins a (lmems l)))
      (appslame (a (pr l (lmems l)) (ins a (lmems l)) x (slam z (lam y (ins x y))))
        (appslamed ((eq x a) l (lmems l) (ins a (lmems l)) z (lam y (ins x y)))
          (applamed ((an (eq x a) (eq z l)) (lmems l) (ins a (lmems l)) y (ins x y))
            (inseqd ((an (an (eq x a) (eq z l)) (eq y (lmems l))) x a y (lmems l))
              (anll ((eq x a) (eq z l) (eq y (lmems l))))
              (anr ((an (eq x a) (eq z l)) (eq y (lmems l))))))))))))

(def lmem ((a nat ()) (l nat ())) (wff ())
()
(el a (ns (lmems l))))

(local theorem lmemeqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (l1 nat ()) (l2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hl (im _G (eq l1 l2))))
  (im _G (iff (lmem a1 l1) (lmem a2 l2)))
()
(:conv (im _G (iff (lmem a1 l1) (lmem a2 l2)))
  (im
    _G
    (iff
      (:unfold lmem (a1 l1) ()
        (el a1 (ns (lmems l1))))
      (:unfold lmem (a2 l2) ()
        (el a2 (ns (lmems l2))))))
  (eleqd (_G a1 a2 (ns (lmems l1)) (ns (lmems l2)))
    ha
    (nseqd (_G (lmems l1) (lmems l2))
      (lmemseqd (_G l1 l2)
        hl)))))

(local theorem lmemeq ((a1 nat ()) (a2 nat ()) (l1 nat ()) (l2 nat ())) ()
  (im (eq a1 a2) (im (eq l1 l2) (iff (lmem a1 l1) (lmem a2 l2))))
()
(exp ((eq a1 a2) (eq l1 l2) (iff (lmem a1 l1) (lmem a2 l2)))
  (lmemeqd ((an (eq a1 a2) (eq l1 l2)) a1 a2 l1 l2)
    (anl ((eq a1 a2) (eq l1 l2)))
    (anr ((eq a1 a2) (eq l1 l2))))))

(local theorem lmemeq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (l nat ()))
  ((h (im G (eq a1 a2))))
  (im G (iff (lmem a1 l) (lmem a2 l)))
()
(lmemeqd (G a1 a2 l l)
  h
  (eqidd (G l))))

(local theorem lmemeq1 ((a1 nat ()) (a2 nat ()) (l nat ())) ()
  (im (eq a1 a2) (iff (lmem a1 l) (lmem a2 l)))
()
(lmemeq1d ((eq a1 a2) a1 a2 l)
  (id ((eq a1 a2)))))

(local theorem lmemeq2d ((G wff ()) (a nat ()) (l1 nat ()) (l2 nat ()))
  ((h (im G (eq l1 l2))))
  (im G (iff (lmem a l1) (lmem a l2)))
()
(lmemeqd (G a a l1 l2)
  (eqidd (G a))
  h))

(local theorem lmemeq2 ((a nat ()) (l1 nat ()) (l2 nat ())) ()
  (im (eq l1 l2) (iff (lmem a l1) (lmem a l2)))
()
(lmemeq2d ((eq l1 l2) a l1 l2)
  (id ((eq l1 l2)))))

(local theorem lmem0 ((a nat ())) ()
  (not (lmem a (d0)))
()
(mtbir ((el a (ns (d0))) (lmem a (d0)))
  (:conv (iff (lmem a (d0)) (el a (ns (d0))))
    (iff
      (:unfold lmem (a (d0)) ()
        (el a (ns (lmems (d0)))))
      (el a (ns (d0))))
    (ax_mp ((eq (lmems (d0)) (d0)) (iff (el a (ns (lmems (d0)))) (el a (ns (d0)))))
      (elneq2 (a (lmems (d0)) (d0)))
      (lmems0 ())))
  (el02 (a))))

(local theorem lmemS ((a nat ()) (b nat ()) (l nat ())) ()
  (iff (lmem a (cons b l)) (or (eq a b) (lmem a l)))
()
(:conv (iff (lmem a (cons b l)) (or (eq a b) (lmem a l)))
  (iff
    (:unfold lmem (a (cons b l)) ()
      (el a (ns (lmems (cons b l)))))
    (or
      (eq a b)
      (:unfold lmem (a l) ()
        (el a (ns (lmems l))))))
  (ax_mp ((iff (el a (ns (ins b (lmems l)))) (or (eq a b) (el a (ns (lmems l))))) (iff (el a (ns (lmems (cons b l)))) (or (eq a b) (el a (ns (lmems l))))))
    (ax_mp ((iff (el a (ns (lmems (cons b l)))) (el a (ns (ins b (lmems l))))) (im (iff (el a (ns (ins b (lmems l)))) (or (eq a b) (el a (ns (lmems l))))) (iff (el a (ns (lmems (cons b l)))) (or (eq a b) (el a (ns (lmems l)))))))
      (bitr ((el a (ns (lmems (cons b l)))) (el a (ns (ins b (lmems l)))) (or (eq a b) (el a (ns (lmems l))))))
      (ax_mp ((eq (lmems (cons b l)) (ins b (lmems l))) (iff (el a (ns (lmems (cons b l)))) (el a (ns (ins b (lmems l))))))
        (elneq2 (a (lmems (cons b l)) (ins b (lmems l))))
        (lmemsS (b l))))
    (elins (a b (lmems l))))))

(local theorem lmemlt ((a nat ()) (l nat ())) ()
  (im (lmem a l) (lt a l))
((x1 nat) (x2 nat) (x3 nat))
(listind (x1 x2 x3 l (im (lmem a x1) (lt a x1)) (im (lmem a (d0)) (lt a (d0))) (im (lmem a l) (lt a l)) (im (lmem a x3) (lt a x3)) (im (lmem a (cons x2 x3)) (lt a (cons x2 x3))))
  (imeqd ((eq x1 (d0)) (lmem a x1) (lmem a (d0)) (lt a x1) (lt a (d0)))
    (lmemeq2 (a x1 (d0)))
    (lteq2 (a x1 (d0))))
  (imeqd ((eq x1 x3) (lmem a x1) (lmem a x3) (lt a x1) (lt a x3))
    (lmemeq2 (a x1 x3))
    (lteq2 (a x1 x3)))
  (imeqd ((eq x1 (cons x2 x3)) (lmem a x1) (lmem a (cons x2 x3)) (lt a x1) (lt a (cons x2 x3)))
    (lmemeq2 (a x1 (cons x2 x3)))
    (lteq2 (a x1 (cons x2 x3))))
  (imeqd ((eq x1 l) (lmem a x1) (lmem a l) (lt a x1) (lt a l))
    (lmemeq2 (a x1 l))
    (lteq2 (a x1 l)))
  (ax_mp ((not (lmem a (d0))) (im (lmem a (d0)) (lt a (d0))))
    (absurd ((lmem a (d0)) (lt a (d0))))
    (lmem0 (a)))
  (syl5bi ((im (lmem a x3) (lt a x3)) (lmem a (cons x2 x3)) (or (eq a x2) (lmem a x3)) (lt a (cons x2 x3)))
    (lmemS (a x2 x3))
    (eord ((im (lmem a x3) (lt a x3)) (eq a x2) (lmem a x3) (lt a (cons x2 x3)))
      (a1i ((im (lmem a x3) (lt a x3)) (im (eq a x2) (lt a (cons x2 x3))))
        (mpbiri ((eq a x2) (lt x2 (cons x2 x3)) (lt a (cons x2 x3)))
          (ltconsid1 (x2 x3))
          (lteq1 (a x2 (cons x2 x3)))))
      (imim2i ((lmem a x3) (lt a x3) (lt a (cons x2 x3)))
        (mpi ((lt a x3) (lt x3 (cons x2 x3)) (lt a (cons x2 x3)))
          (ltconsid2 (x2 x3))
          (lttr (a x3 (cons x2 x3)))))))))

(def all ((A set ()) (l nat ())) (wff ())
()
(subset (ns (lmems l)) A))

(local theorem alleqd ((_G wff ()) (A1 set ()) (A2 set ()) (l1 nat ()) (l2 nat ()))
  ((hA (im _G (eqs A1 A2)))
   (hl (im _G (eq l1 l2))))
  (im _G (iff (all A1 l1) (all A2 l2)))
()
(:conv (im _G (iff (all A1 l1) (all A2 l2)))
  (im
    _G
    (iff
      (:unfold all (A1 l1) ()
        (subset (ns (lmems l1)) A1))
      (:unfold all (A2 l2) ()
        (subset (ns (lmems l2)) A2))))
  (sseqd (_G (ns (lmems l1)) (ns (lmems l2)) A1 A2)
    (nseqd (_G (lmems l1) (lmems l2))
      (lmemseqd (_G l1 l2)
        hl))
    hA)))

(local theorem alleq ((A1 set ()) (A2 set ()) (l1 nat ()) (l2 nat ())) ()
  (im (eqs A1 A2) (im (eq l1 l2) (iff (all A1 l1) (all A2 l2))))
()
(exp ((eqs A1 A2) (eq l1 l2) (iff (all A1 l1) (all A2 l2)))
  (alleqd ((an (eqs A1 A2) (eq l1 l2)) A1 A2 l1 l2)
    (anl ((eqs A1 A2) (eq l1 l2)))
    (anr ((eqs A1 A2) (eq l1 l2))))))

(local theorem alleq1d ((G wff ()) (A1 set ()) (A2 set ()) (l nat ()))
  ((h (im G (eqs A1 A2))))
  (im G (iff (all A1 l) (all A2 l)))
()
(alleqd (G A1 A2 l l)
  h
  (eqidd (G l))))

(local theorem alleq1 ((A1 set ()) (A2 set ()) (l nat ())) ()
  (im (eqs A1 A2) (iff (all A1 l) (all A2 l)))
()
(alleq1d ((eqs A1 A2) A1 A2 l)
  (id ((eqs A1 A2)))))

(local theorem alleq2d ((G wff ()) (A set ()) (l1 nat ()) (l2 nat ()))
  ((h (im G (eq l1 l2))))
  (im G (iff (all A l1) (all A l2)))
()
(alleqd (G A A l1 l2)
  (eqsidd (G A))
  h))

(local theorem alleq2 ((A set ()) (l1 nat ()) (l2 nat ())) ()
  (im (eq l1 l2) (iff (all A l1) (all A l2)))
()
(alleq2d ((eq l1 l2) A l1 l2)
  (id ((eq l1 l2)))))

(local theorem all0 ((A set ())) ()
  (all A (d0))
((x nat))
(:conv (all A (d0))
  (:unfold all (A (d0)) ()
    (:unfold subset ((ns (lmems (d0))) A) (x)
      (al x (im (el x (ns (lmems (d0)))) (el x A)))))
  (ax_gen (x (im (el x (ns (lmems (d0)))) (el x A)))
    (:conv (im (el x (ns (lmems (d0)))) (el x A))
      (im
        (:sym (:unfold lmem (x (d0)) ()
          (el x (ns (lmems (d0))))))
        (el x A))
      (ax_mp ((not (lmem x (d0))) (im (lmem x (d0)) (el x A)))
        (absurd ((lmem x (d0)) (el x A)))
        (lmem0 (x)))))))

(local theorem allS ((A set ()) (a nat ()) (b nat ())) ()
  (iff (all A (cons a b)) (an (el a A) (all A b)))
()
(:conv (iff (all A (cons a b)) (an (el a A) (all A b)))
  (iff
    (:unfold all (A (cons a b)) ()
      (subset (ns (lmems (cons a b))) A))
    (an
      (el a A)
      (:unfold all (A b) ()
        (subset (ns (lmems b)) A))))
  (ax_mp ((iff (subset (ns (ins a (lmems b))) A) (an (el a A) (subset (ns (lmems b)) A))) (iff (subset (ns (lmems (cons a b))) A) (an (el a A) (subset (ns (lmems b)) A))))
    (ax_mp ((iff (subset (ns (lmems (cons a b))) A) (subset (ns (ins a (lmems b))) A)) (im (iff (subset (ns (ins a (lmems b))) A) (an (el a A) (subset (ns (lmems b)) A))) (iff (subset (ns (lmems (cons a b))) A) (an (el a A) (subset (ns (lmems b)) A)))))
      (bitr ((subset (ns (lmems (cons a b))) A) (subset (ns (ins a (lmems b))) A) (an (el a A) (subset (ns (lmems b)) A))))
      (ax_mp ((eqs (ns (lmems (cons a b))) (ns (ins a (lmems b)))) (iff (subset (ns (lmems (cons a b))) A) (subset (ns (ins a (lmems b))) A)))
        (sseq1 ((ns (lmems (cons a b))) (ns (ins a (lmems b))) A))
        (ax_mp ((eq (lmems (cons a b)) (ins a (lmems b))) (eqs (ns (lmems (cons a b))) (ns (ins a (lmems b)))))
          (nseq ((lmems (cons a b)) (ins a (lmems b))))
          (lmemsS (a b)))))
    (insss (A a (lmems b))))))

(local theorem allal ((l nat ()) (x nat) (p wff (x))) ()
  (iff (all (ab x p) l) (al x (im (lmem x l) p)))
()
(:conv (iff (all (ab x p) l) (al x (im (lmem x l) p)))
  (iff
    (:unfold all ((ab x p) l) ()
      (subset (ns (lmems l)) (ab x p)))
    (al
      x
      (im
        (:unfold lmem (x l) ()
          (el x (ns (lmems l))))
        p)))
  (ax_mp ((iff (al x (im (el x (ns (lmems l))) p)) (subset (ns (lmems l)) (ab x p))) (iff (subset (ns (lmems l)) (ab x p)) (al x (im (el x (ns (lmems l))) p))))
    (bicom ((al x (im (el x (ns (lmems l))) p)) (subset (ns (lmems l)) (ab x p))))
    (ssab2 ((ns (lmems l)) x p)))))

(def List ((A set ())) (set ())
((n nat))
(ab n (all A n)))

(local theorem Listeqd ((_G wff ()) (A1 set ()) (A2 set ()))
  ((hA (im _G (eqs A1 A2))))
  (im _G (eqs (List A1) (List A2)))
((n nat))
(:conv (im _G (eqs (List A1) (List A2)))
  (im
    _G
    (eqs
      (:unfold List (A1) (n)
        (ab n (all A1 n)))
      (:unfold List (A2) (n)
        (ab n (all A2 n)))))
  (abeqd (_G n (all A1 n) (all A2 n))
    (alleqd (_G A1 A2 n n)
      hA
      (eqidd (_G n))))))

(local theorem Listeq ((A1 set ()) (A2 set ())) ()
  (im (eqs A1 A2) (eqs (List A1) (List A2)))
()
(Listeqd ((eqs A1 A2) A1 A2)
  (id ((eqs A1 A2)))))

(local theorem elList ((A set ()) (l nat ())) ()
  (iff (el l (List A)) (all A l))
((n nat))
(:conv (iff (el l (List A)) (all A l))
  (iff
    (el
      l
      (:unfold List (A) (n)
        (ab n (all A n))))
    (all A l))
  (elabe (n l (all A n) (all A l))
    (alleq2 (A n l)))))

(local theorem elList0 ((A set ())) ()
  (el (d0) (List A))
()
(mpbir ((all A (d0)) (el (d0) (List A)))
  (elList (A (d0)))
  (all0 (A))))

(local theorem elListS ((A set ()) (a nat ()) (b nat ())) ()
  (iff (el (cons a b) (List A)) (an (el a A) (el b (List A))))
()
(ax_mp ((iff (all A (cons a b)) (an (el a A) (el b (List A)))) (iff (el (cons a b) (List A)) (an (el a A) (el b (List A)))))
  (ax_mp ((iff (el (cons a b) (List A)) (all A (cons a b))) (im (iff (all A (cons a b)) (an (el a A) (el b (List A)))) (iff (el (cons a b) (List A)) (an (el a A) (el b (List A))))))
    (bitr ((el (cons a b) (List A)) (all A (cons a b)) (an (el a A) (el b (List A)))))
    (elList (A (cons a b))))
  (ax_mp ((iff (an (el a A) (el b (List A))) (an (el a A) (all A b))) (iff (all A (cons a b)) (an (el a A) (el b (List A)))))
    (ax_mp ((iff (all A (cons a b)) (an (el a A) (all A b))) (im (iff (an (el a A) (el b (List A))) (an (el a A) (all A b))) (iff (all A (cons a b)) (an (el a A) (el b (List A))))))
      (bitr4 ((all A (cons a b)) (an (el a A) (all A b)) (an (el a A) (el b (List A)))))
      (allS (A a b)))
    (aneq2i ((el a A) (el b (List A)) (all A b))
      (elList (A b))))))

(def len ((l nat ())) (nat ())
((x nat) (y nat) (z nat))
(lrec (d0) (slam x (slam z (lam y (suc y)))) l))

(local theorem leneqd ((_G wff ()) (l1 nat ()) (l2 nat ()))
  ((hl (im _G (eq l1 l2))))
  (im _G (eq (len l1) (len l2)))
((x nat) (y nat) (z nat))
(:conv (im _G (eq (len l1) (len l2)))
  (im
    _G
    (eq
      (:unfold len (l1) (x y z)
        (lrec (d0) (slam x (slam z (lam y (suc y)))) l1))
      (:unfold len (l2) (x y z)
        (lrec (d0) (slam x (slam z (lam y (suc y)))) l2))))
  (lreceqd (_G (d0) (d0) (slam x (slam z (lam y (suc y)))) (slam x (slam z (lam y (suc y)))) l1 l2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam x (slam z (lam y (suc y))))))
    hl)))

(local theorem leneq ((l1 nat ()) (l2 nat ())) ()
  (im (eq l1 l2) (eq (len l1) (len l2)))
()
(leneqd ((eq l1 l2) l1 l2)
  (id ((eq l1 l2)))))

(theorem len0 () ()
  (eq (len (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (len (d0)) (d0))
  (eq
    (:unfold len ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (suc x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (suc x3))))))))

(theorem lenS ((a nat ()) (b nat ())) ()
  (eq (len (cons a b)) (suc (len b)))
((x nat) (y nat) (z nat))
(:conv (eq (len (cons a b)) (suc (len b)))
  (eq
    (:unfold len ((cons a b)) (x y z)
      (lrec (d0) (slam x (slam z (lam y (suc y)))) (cons a b)))
    (suc (len b)))
  (ax_mp ((eq (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))) (suc (len b))) (eq (lrec (d0) (slam x (slam z (lam y (suc y)))) (cons a b)) (suc (len b))))
    (ax_mp ((eq (lrec (d0) (slam x (slam z (lam y (suc y)))) (cons a b)) (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b))))) (im (eq (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))) (suc (len b))) (eq (lrec (d0) (slam x (slam z (lam y (suc y)))) (cons a b)) (suc (len b)))))
      (eqtr ((lrec (d0) (slam x (slam z (lam y (suc y)))) (cons a b)) (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))) (suc (len b))))
      (lrecS ((d0) (slam x (slam z (lam y (suc y)))) a b)))
    (:conv (eq (app (slam x (slam z (lam y (suc y)))) (pr a (pr b (lrec (d0) (slam x (slam z (lam y (suc y)))) b)))) (suc (len b)))
      (eq
        (app
          (slam x (slam z (lam y (suc y))))
          (pr
            a
            (pr
              b
              (:sym (:unfold len (b) (x y z)
                (lrec (d0) (slam x (slam z (lam y (suc y)))) b))))))
        (suc (len b)))
      (appslame (a (pr b (len b)) (suc (len b)) x (slam z (lam y (suc y))))
        (appslamed ((eq x a) b (len b) (suc (len b)) z (lam y (suc y)))
          (applamed ((an (eq x a) (eq z b)) (len b) (suc (len b)) y (suc y))
            (suceqd ((an (an (eq x a) (eq z b)) (eq y (len b))) y (len b))
              (anr ((an (eq x a) (eq z b)) (eq y (len b))))))))))))

(local theorem leneq0 ((n nat ())) ()
  (iff (eq (len n) (d0)) (eq n (d0)))
()
(ibii ((eq (len n) (d0)) (eq n (d0)))
  (ax_mp ((im (not (eq n (d0))) (not (eq (len n) (d0)))) (im (eq (len n) (d0)) (eq n (d0))))
    (ax_3 ((eq n (d0)) (eq (len n) (d0))))
    (:conv (im (not (eq n (d0))) (not (eq (len n) (d0))))
      (im
        (:sym (:unfold ne (n (d0)) ()
          (not (eq n (d0)))))
        (:sym (:unfold ne ((len n) (d0)) ()
          (not (eq (len n) (d0))))))
      (syl ((ne n (d0)) (eq (len n) (suc (len (snd (sub n (d1)))))) (ne (len n) (d0)))
        (sucne0 ((len n) (len (snd (sub n (d1))))))
        (syl6eq ((ne n (d0)) (len n) (len (cons (fst (sub n (d1))) (snd (sub n (d1))))) (suc (len (snd (sub n (d1))))))
          (lenS ((fst (sub n (d1))) (snd (sub n (d1)))))
          (leneqd ((ne n (d0)) n (cons (fst (sub n (d1))) (snd (sub n (d1)))))
            (eqcomd ((ne n (d0)) (cons (fst (sub n (d1))) (snd (sub n (d1)))) n)
              (consfstsnd (n))))))))
  (syl6eq ((eq n (d0)) (len n) (len (d0)) (d0))
    (len0 ())
    (leneq (n (d0))))))

(local theorem lenleid ((l nat ())) ()
  (le (len l) l)
((x1 nat) (x2 nat) (x3 nat))
(listind (x1 x2 x3 l (le (len x1) x1) (le (len (d0)) (d0)) (le (len l) l) (le (len x3) x3) (le (len (cons x2 x3)) (cons x2 x3)))
  (leeqd ((eq x1 (d0)) (len x1) (len (d0)) x1 (d0))
    (leneq (x1 (d0)))
    (id ((eq x1 (d0)))))
  (leeqd ((eq x1 x3) (len x1) (len x3) x1 x3)
    (leneq (x1 x3))
    (id ((eq x1 x3))))
  (leeqd ((eq x1 (cons x2 x3)) (len x1) (len (cons x2 x3)) x1 (cons x2 x3))
    (leneq (x1 (cons x2 x3)))
    (id ((eq x1 (cons x2 x3)))))
  (leeqd ((eq x1 l) (len x1) (len l) x1 l)
    (leneq (x1 l))
    (id ((eq x1 l))))
  (ax_mp ((eq (len (d0)) (d0)) (le (len (d0)) (d0)))
    (eqle ((len (d0)) (d0)))
    (len0 ()))
  (sylibr ((le (len x3) x3) (le (suc (len x3)) (cons x2 x3)) (le (len (cons x2 x3)) (cons x2 x3)))
    (ax_mp ((eq (len (cons x2 x3)) (suc (len x3))) (iff (le (len (cons x2 x3)) (cons x2 x3)) (le (suc (len x3)) (cons x2 x3))))
      (leeq1 ((len (cons x2 x3)) (suc (len x3)) (cons x2 x3)))
      (lenS (x2 x3)))
    (sylib ((le (len x3) x3) (le (len x3) (pr x2 x3)) (le (suc (len x3)) (cons x2 x3)))
      (:conv (iff (le (len x3) (pr x2 x3)) (le (suc (len x3)) (cons x2 x3)))
        (iff
          (le (len x3) (pr x2 x3))
          (le
            (suc (len x3))
            (:unfold cons (x2 x3) ()
              (suc (pr x2 x3)))))
        (lesuc ((len x3) (pr x2 x3))))
      (mpi ((le (len x3) x3) (le x3 (pr x2 x3)) (le (len x3) (pr x2 x3)))
        (leprid2 (x2 x3))
        (letr ((len x3) x3 (pr x2 x3))))))))

(def Array ((A set ()) (n nat ())) (set ())
((l nat))
(ab l (an (el l (List A)) (eq (len l) n))))

(local theorem Arrayeqd ((_G wff ()) (A1 set ()) (A2 set ()) (n1 nat ()) (n2 nat ()))
  ((hA (im _G (eqs A1 A2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eqs (Array A1 n1) (Array A2 n2)))
((l nat))
(:conv (im _G (eqs (Array A1 n1) (Array A2 n2)))
  (im
    _G
    (eqs
      (:unfold Array (A1 n1) (l)
        (ab l (an (el l (List A1)) (eq (len l) n1))))
      (:unfold Array (A2 n2) (l)
        (ab l (an (el l (List A2)) (eq (len l) n2))))))
  (abeqd (_G l (an (el l (List A1)) (eq (len l) n1)) (an (el l (List A2)) (eq (len l) n2)))
    (aneqd (_G (el l (List A1)) (el l (List A2)) (eq (len l) n1) (eq (len l) n2))
      (eleqd (_G l l (List A1) (List A2))
        (eqidd (_G l))
        (Listeqd (_G A1 A2)
          hA))
      (eqeqd (_G (len l) (len l) n1 n2)
        (eqidd (_G (len l)))
        hn)))))

(local theorem Arrayeq ((A1 set ()) (A2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eqs A1 A2) (im (eq n1 n2) (eqs (Array A1 n1) (Array A2 n2))))
()
(exp ((eqs A1 A2) (eq n1 n2) (eqs (Array A1 n1) (Array A2 n2)))
  (Arrayeqd ((an (eqs A1 A2) (eq n1 n2)) A1 A2 n1 n2)
    (anl ((eqs A1 A2) (eq n1 n2)))
    (anr ((eqs A1 A2) (eq n1 n2))))))

(local theorem Arrayeq1d ((G wff ()) (A1 set ()) (A2 set ()) (n nat ()))
  ((h (im G (eqs A1 A2))))
  (im G (eqs (Array A1 n) (Array A2 n)))
()
(Arrayeqd (G A1 A2 n n)
  h
  (eqidd (G n))))

(local theorem Arrayeq1 ((A1 set ()) (A2 set ()) (n nat ())) ()
  (im (eqs A1 A2) (eqs (Array A1 n) (Array A2 n)))
()
(Arrayeq1d ((eqs A1 A2) A1 A2 n)
  (id ((eqs A1 A2)))))

(local theorem Arrayeq2d ((G wff ()) (A set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eqs (Array A n1) (Array A n2)))
()
(Arrayeqd (G A A n1 n2)
  (eqsidd (G A))
  h))

(local theorem Arrayeq2 ((A set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eqs (Array A n1) (Array A n2)))
()
(Arrayeq2d ((eq n1 n2) A n1 n2)
  (id ((eq n1 n2)))))

(local theorem elArray ((A set ()) (l nat ()) (n nat ())) ()
  (iff (el l (Array A n)) (an (el l (List A)) (eq (len l) n)))
((x nat))
(:conv (iff (el l (Array A n)) (an (el l (List A)) (eq (len l) n)))
  (iff
    (el
      l
      (:unfold Array (A n) (x)
        (ab x (an (el x (List A)) (eq (len x) n)))))
    (an (el l (List A)) (eq (len l) n)))
  (elabe (x l (an (el x (List A)) (eq (len x) n)) (an (el l (List A)) (eq (len l) n)))
    (aneqd ((eq x l) (el x (List A)) (el l (List A)) (eq (len x) n) (eq (len l) n))
      (eleq1 ((List A) x l))
      (eqeq1d ((eq x l) (len x) (len l) n)
        (leneq (x l)))))))

(local theorem elArrayList ((A set ()) (l nat ()) (n nat ())) ()
  (im (el l (Array A n)) (el l (List A)))
()
(sylbi ((el l (Array A n)) (an (el l (List A)) (eq (len l) n)) (el l (List A)))
  (elArray (A l n))
  (anl ((el l (List A)) (eq (len l) n)))))

(local theorem elArraylen ((A set ()) (l nat ()) (n nat ())) ()
  (im (el l (Array A n)) (eq (len l) n))
()
(sylbi ((el l (Array A n)) (an (el l (List A)) (eq (len l) n)) (eq (len l) n))
  (elArray (A l n))
  (anr ((el l (List A)) (eq (len l) n)))))

(local theorem elArray02 ((A set ()) (l nat ())) ()
  (iff (el l (Array A (d0))) (eq l (d0)))
()
(ax_mp ((iff (an (el l (List A)) (eq (len l) (d0))) (eq l (d0))) (iff (el l (Array A (d0))) (eq l (d0))))
  (ax_mp ((iff (el l (Array A (d0))) (an (el l (List A)) (eq (len l) (d0)))) (im (iff (an (el l (List A)) (eq (len l) (d0))) (eq l (d0))) (iff (el l (Array A (d0))) (eq l (d0)))))
    (bitr ((el l (Array A (d0))) (an (el l (List A)) (eq (len l) (d0))) (eq l (d0))))
    (elArray (A l (d0))))
  (ax_mp ((iff (an (el l (List A)) (eq l (d0))) (eq l (d0))) (iff (an (el l (List A)) (eq (len l) (d0))) (eq l (d0))))
    (ax_mp ((iff (an (el l (List A)) (eq (len l) (d0))) (an (el l (List A)) (eq l (d0)))) (im (iff (an (el l (List A)) (eq l (d0))) (eq l (d0))) (iff (an (el l (List A)) (eq (len l) (d0))) (eq l (d0)))))
      (bitr ((an (el l (List A)) (eq (len l) (d0))) (an (el l (List A)) (eq l (d0))) (eq l (d0))))
      (aneq2i ((el l (List A)) (eq (len l) (d0)) (eq l (d0)))
        (leneq0 (l))))
    (ax_mp ((im (eq l (d0)) (el l (List A))) (iff (an (el l (List A)) (eq l (d0))) (eq l (d0))))
      (bian1a ((el l (List A)) (eq l (d0))))
      (mpbiri ((eq l (d0)) (el (d0) (List A)) (el l (List A)))
        (elList0 (A))
        (eleq1 ((List A) l (d0))))))))

(local theorem elArray0 ((A set ())) ()
  (el (d0) (Array A (d0)))
()
(mpbir ((eq (d0) (d0)) (el (d0) (Array A (d0))))
  (elArray02 (A (d0)))
  (eqid ((d0)))))

(local theorem elArrayS ((A set ()) (a nat ()) (b nat ()) (n nat ())) ()
  (im (el a A) (im (el b (Array A n)) (el (cons a b) (Array A (suc n)))))
()
(exp ((el a A) (el b (Array A n)) (el (cons a b) (Array A (suc n))))
  (sylibr ((an (el a A) (el b (Array A n))) (an (el (cons a b) (List A)) (eq (len (cons a b)) (suc n))) (el (cons a b) (Array A (suc n))))
    (elArray (A (cons a b) (suc n)))
    (iand ((an (el a A) (el b (Array A n))) (el (cons a b) (List A)) (eq (len (cons a b)) (suc n)))
      (sylibr ((an (el a A) (el b (Array A n))) (an (el a A) (el b (List A))) (el (cons a b) (List A)))
        (elListS (A a b))
        (ax_mp ((im (el b (Array A n)) (el b (List A))) (im (an (el a A) (el b (Array A n))) (an (el a A) (el b (List A)))))
          (anim2 ((el a A) (el b (Array A n)) (el b (List A))))
          (elArrayList (A b n))))
      (syl5eq ((an (el a A) (el b (Array A n))) (len (cons a b)) (suc (len b)) (suc n))
        (lenS (a b))
        (suceqd ((an (el a A) (el b (Array A n))) (len b) n)
          (anwr ((el a A) (el b (Array A n)) (eq (len b) n))
            (elArraylen (A b n)))))))))

(def append ((l1 nat ()) (l2 nat ())) (nat ())
((x nat) (y nat) (z nat))
(lrec l2 (slam x (slam z (lam y (cons x y)))) l1))

(local theorem appendeqd ((_G wff ()) (l11 nat ()) (l12 nat ()) (l21 nat ()) (l22 nat ()))
  ((hl1 (im _G (eq l11 l12)))
   (hl2 (im _G (eq l21 l22))))
  (im _G (eq (append l11 l21) (append l12 l22)))
((x nat) (y nat) (z nat))
(:conv (im _G (eq (append l11 l21) (append l12 l22)))
  (im
    _G
    (eq
      (:unfold append (l11 l21) (x y z)
        (lrec l21 (slam x (slam z (lam y (cons x y)))) l11))
      (:unfold append (l12 l22) (x y z)
        (lrec l22 (slam x (slam z (lam y (cons x y)))) l12))))
  (lreceqd (_G l21 l22 (slam x (slam z (lam y (cons x y)))) (slam x (slam z (lam y (cons x y)))) l11 l12)
    hl2
    (eqsidd (_G (slam x (slam z (lam y (cons x y))))))
    hl1)))

(local theorem appendeq ((l11 nat ()) (l12 nat ()) (l21 nat ()) (l22 nat ())) ()
  (im (eq l11 l12) (im (eq l21 l22) (eq (append l11 l21) (append l12 l22))))
()
(exp ((eq l11 l12) (eq l21 l22) (eq (append l11 l21) (append l12 l22)))
  (appendeqd ((an (eq l11 l12) (eq l21 l22)) l11 l12 l21 l22)
    (anl ((eq l11 l12) (eq l21 l22)))
    (anr ((eq l11 l12) (eq l21 l22))))))

(local theorem appendeq1d ((G wff ()) (l11 nat ()) (l12 nat ()) (l2 nat ()))
  ((h (im G (eq l11 l12))))
  (im G (eq (append l11 l2) (append l12 l2)))
()
(appendeqd (G l11 l12 l2 l2)
  h
  (eqidd (G l2))))

(local theorem appendeq1 ((l11 nat ()) (l12 nat ()) (l2 nat ())) ()
  (im (eq l11 l12) (eq (append l11 l2) (append l12 l2)))
()
(appendeq1d ((eq l11 l12) l11 l12 l2)
  (id ((eq l11 l12)))))

(local theorem appendeq2d ((G wff ()) (l1 nat ()) (l21 nat ()) (l22 nat ()))
  ((h (im G (eq l21 l22))))
  (im G (eq (append l1 l21) (append l1 l22)))
()
(appendeqd (G l1 l1 l21 l22)
  (eqidd (G l1))
  h))

(local theorem appendeq2 ((l1 nat ()) (l21 nat ()) (l22 nat ())) ()
  (im (eq l21 l22) (eq (append l1 l21) (append l1 l22)))
()
(appendeq2d ((eq l21 l22) l1 l21 l22)
  (id ((eq l21 l22)))))

(theorem append0 ((a nat ())) ()
  (eq (append (d0) a) a)
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (append (d0) a) a)
  (eq
    (:unfold append ((d0) a) (x1 x3 x2)
      (lrec a (slam x1 (slam x2 (lam x3 (cons x1 x3)))) (d0)))
    a)
  (lrec0 (a (slam x1 (slam x2 (lam x3 (cons x1 x3))))))))

(theorem appendS ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (append (cons a b) c) (cons a (append b c)))
((x nat) (y nat) (z nat))
(:conv (eq (append (cons a b) c) (cons a (append b c)))
  (eq
    (:unfold append ((cons a b) c) (x y z)
      (lrec c (slam x (slam z (lam y (cons x y)))) (cons a b)))
    (cons a (append b c)))
  (ax_mp ((eq (app (slam x (slam z (lam y (cons x y)))) (pr a (pr b (lrec c (slam x (slam z (lam y (cons x y)))) b)))) (cons a (append b c))) (eq (lrec c (slam x (slam z (lam y (cons x y)))) (cons a b)) (cons a (append b c))))
    (ax_mp ((eq (lrec c (slam x (slam z (lam y (cons x y)))) (cons a b)) (app (slam x (slam z (lam y (cons x y)))) (pr a (pr b (lrec c (slam x (slam z (lam y (cons x y)))) b))))) (im (eq (app (slam x (slam z (lam y (cons x y)))) (pr a (pr b (lrec c (slam x (slam z (lam y (cons x y)))) b)))) (cons a (append b c))) (eq (lrec c (slam x (slam z (lam y (cons x y)))) (cons a b)) (cons a (append b c)))))
      (eqtr ((lrec c (slam x (slam z (lam y (cons x y)))) (cons a b)) (app (slam x (slam z (lam y (cons x y)))) (pr a (pr b (lrec c (slam x (slam z (lam y (cons x y)))) b)))) (cons a (append b c))))
      (lrecS (c (slam x (slam z (lam y (cons x y)))) a b)))
    (:conv (eq (app (slam x (slam z (lam y (cons x y)))) (pr a (pr b (lrec c (slam x (slam z (lam y (cons x y)))) b)))) (cons a (append b c)))
      (eq
        (app
          (slam x (slam z (lam y (cons x y))))
          (pr
            a
            (pr
              b
              (:sym (:unfold append (b c) (x y z)
                (lrec c (slam x (slam z (lam y (cons x y)))) b))))))
        (cons a (append b c)))
      (appslame (a (pr b (append b c)) (cons a (append b c)) x (slam z (lam y (cons x y))))
        (appslamed ((eq x a) b (append b c) (cons a (append b c)) z (lam y (cons x y)))
          (applamed ((an (eq x a) (eq z b)) (append b c) (cons a (append b c)) y (cons x y))
            (conseqd ((an (an (eq x a) (eq z b)) (eq y (append b c))) x a y (append b c))
              (anll ((eq x a) (eq z b) (eq y (append b c))))
              (anr ((an (eq x a) (eq z b)) (eq y (append b c))))))))))))

(local theorem append02 ((a nat ())) ()
  (eq (append a (d0)) a)
((x1 nat) (x2 nat) (x3 nat))
(listind (x1 x2 x3 a (eq (append x1 (d0)) x1) (eq (append (d0) (d0)) (d0)) (eq (append a (d0)) a) (eq (append x3 (d0)) x3) (eq (append (cons x2 x3) (d0)) (cons x2 x3)))
  (eqeqd ((eq x1 (d0)) (append x1 (d0)) (append (d0) (d0)) x1 (d0))
    (appendeq1 (x1 (d0) (d0)))
    (id ((eq x1 (d0)))))
  (eqeqd ((eq x1 x3) (append x1 (d0)) (append x3 (d0)) x1 x3)
    (appendeq1 (x1 x3 (d0)))
    (id ((eq x1 x3))))
  (eqeqd ((eq x1 (cons x2 x3)) (append x1 (d0)) (append (cons x2 x3) (d0)) x1 (cons x2 x3))
    (appendeq1 (x1 (cons x2 x3) (d0)))
    (id ((eq x1 (cons x2 x3)))))
  (eqeqd ((eq x1 a) (append x1 (d0)) (append a (d0)) x1 a)
    (appendeq1 (x1 a (d0)))
    (id ((eq x1 a))))
  (append0 ((d0)))
  (syl5eq ((eq (append x3 (d0)) x3) (append (cons x2 x3) (d0)) (cons x2 (append x3 (d0))) (cons x2 x3))
    (appendS (x2 x3 (d0)))
    (conseq2 (x2 (append x3 (d0)) x3)))))

(local theorem appendass ((l1 nat ()) (l2 nat ()) (l3 nat ()) (a nat ())) ()
  (eq (append (append l1 l2) l3) (append l1 (append l2 l3)))
((x1 nat) (x2 nat) (x3 nat))
(listind (x1 x3 x2 l1 (eq (append (append x1 l2) l3) (append x1 (append l2 l3))) (eq (append (append (d0) l2) l3) (append (d0) (append l2 l3))) (eq (append (append l1 l2) l3) (append l1 (append l2 l3))) (eq (append (append x2 l2) l3) (append x2 (append l2 l3))) (eq (append (append (cons x3 x2) l2) l3) (append (cons x3 x2) (append l2 l3))))
  (eqeqd ((eq x1 (d0)) (append (append x1 l2) l3) (append (append (d0) l2) l3) (append x1 (append l2 l3)) (append (d0) (append l2 l3)))
    (appendeq1d ((eq x1 (d0)) (append x1 l2) (append (d0) l2) l3)
      (appendeq1 (x1 (d0) l2)))
    (appendeq1 (x1 (d0) (append l2 l3))))
  (eqeqd ((eq x1 x2) (append (append x1 l2) l3) (append (append x2 l2) l3) (append x1 (append l2 l3)) (append x2 (append l2 l3)))
    (appendeq1d ((eq x1 x2) (append x1 l2) (append x2 l2) l3)
      (appendeq1 (x1 x2 l2)))
    (appendeq1 (x1 x2 (append l2 l3))))
  (eqeqd ((eq x1 (cons x3 x2)) (append (append x1 l2) l3) (append (append (cons x3 x2) l2) l3) (append x1 (append l2 l3)) (append (cons x3 x2) (append l2 l3)))
    (appendeq1d ((eq x1 (cons x3 x2)) (append x1 l2) (append (cons x3 x2) l2) l3)
      (appendeq1 (x1 (cons x3 x2) l2)))
    (appendeq1 (x1 (cons x3 x2) (append l2 l3))))
  (eqeqd ((eq x1 l1) (append (append x1 l2) l3) (append (append l1 l2) l3) (append x1 (append l2 l3)) (append l1 (append l2 l3)))
    (appendeq1d ((eq x1 l1) (append x1 l2) (append l1 l2) l3)
      (appendeq1 (x1 l1 l2)))
    (appendeq1 (x1 l1 (append l2 l3))))
  (ax_mp ((eq (append (d0) (append l2 l3)) (append l2 l3)) (eq (append (append (d0) l2) l3) (append (d0) (append l2 l3))))
    (ax_mp ((eq (append (append (d0) l2) l3) (append l2 l3)) (im (eq (append (d0) (append l2 l3)) (append l2 l3)) (eq (append (append (d0) l2) l3) (append (d0) (append l2 l3)))))
      (eqtr4 ((append (append (d0) l2) l3) (append l2 l3) (append (d0) (append l2 l3))))
      (ax_mp ((eq (append (d0) l2) l2) (eq (append (append (d0) l2) l3) (append l2 l3)))
        (appendeq1 ((append (d0) l2) l2 l3))
        (append0 (l2))))
    (append0 ((append l2 l3))))
  (syl5eq ((eq (append (append x2 l2) l3) (append x2 (append l2 l3))) (append (append (cons x3 x2) l2) l3) (append (cons x3 (append x2 l2)) l3) (append (cons x3 x2) (append l2 l3)))
    (ax_mp ((eq (append (cons x3 x2) l2) (cons x3 (append x2 l2))) (eq (append (append (cons x3 x2) l2) l3) (append (cons x3 (append x2 l2)) l3)))
      (appendeq1 ((append (cons x3 x2) l2) (cons x3 (append x2 l2)) l3))
      (appendS (x3 x2 l2)))
    (syl5eq ((eq (append (append x2 l2) l3) (append x2 (append l2 l3))) (append (cons x3 (append x2 l2)) l3) (cons x3 (append (append x2 l2) l3)) (append (cons x3 x2) (append l2 l3)))
      (appendS (x3 (append x2 l2) l3))
      (syl6eqr ((eq (append (append x2 l2) l3) (append x2 (append l2 l3))) (cons x3 (append (append x2 l2) l3)) (cons x3 (append x2 (append l2 l3))) (append (cons x3 x2) (append l2 l3)))
        (appendS (x3 x2 (append l2 l3)))
        (conseq2 (x3 (append (append x2 l2) l3) (append x2 (append l2 l3)))))))))

(def snoc ((l nat ()) (a nat ())) (nat ())
()
(append l (cons a (d0))))

(local theorem snoceqd ((_G wff ()) (l1 nat ()) (l2 nat ()) (a1 nat ()) (a2 nat ()))
  ((hl (im _G (eq l1 l2)))
   (ha (im _G (eq a1 a2))))
  (im _G (eq (snoc l1 a1) (snoc l2 a2)))
()
(:conv (im _G (eq (snoc l1 a1) (snoc l2 a2)))
  (im
    _G
    (eq
      (:unfold snoc (l1 a1) ()
        (append l1 (cons a1 (d0))))
      (:unfold snoc (l2 a2) ()
        (append l2 (cons a2 (d0))))))
  (appendeqd (_G l1 l2 (cons a1 (d0)) (cons a2 (d0)))
    hl
    (conseqd (_G a1 a2 (d0) (d0))
      ha
      (eqidd (_G (d0)))))))

(local theorem snoceq ((l1 nat ()) (l2 nat ()) (a1 nat ()) (a2 nat ())) ()
  (im (eq l1 l2) (im (eq a1 a2) (eq (snoc l1 a1) (snoc l2 a2))))
()
(exp ((eq l1 l2) (eq a1 a2) (eq (snoc l1 a1) (snoc l2 a2)))
  (snoceqd ((an (eq l1 l2) (eq a1 a2)) l1 l2 a1 a2)
    (anl ((eq l1 l2) (eq a1 a2)))
    (anr ((eq l1 l2) (eq a1 a2))))))

(local theorem snoceq1d ((G wff ()) (l1 nat ()) (l2 nat ()) (a nat ()))
  ((h (im G (eq l1 l2))))
  (im G (eq (snoc l1 a) (snoc l2 a)))
()
(snoceqd (G l1 l2 a a)
  h
  (eqidd (G a))))

(local theorem snoceq1 ((l1 nat ()) (l2 nat ()) (a nat ())) ()
  (im (eq l1 l2) (eq (snoc l1 a) (snoc l2 a)))
()
(snoceq1d ((eq l1 l2) l1 l2 a)
  (id ((eq l1 l2)))))

(local theorem snoceq2d ((G wff ()) (l nat ()) (a1 nat ()) (a2 nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (snoc l a1) (snoc l a2)))
()
(snoceqd (G l l a1 a2)
  (eqidd (G l))
  h))

(local theorem snoceq2 ((l nat ()) (a1 nat ()) (a2 nat ())) ()
  (im (eq a1 a2) (eq (snoc l a1) (snoc l a2)))
()
(snoceq2d ((eq a1 a2) l a1 a2)
  (id ((eq a1 a2)))))

(theorem snoc0 ((a nat ())) ()
  (eq (snoc (d0) a) (cons a (d0)))
()
(:conv (eq (snoc (d0) a) (cons a (d0)))
  (eq
    (:unfold snoc ((d0) a) ()
      (append (d0) (cons a (d0))))
    (cons a (d0)))
  (append0 ((cons a (d0))))))

(theorem snocS ((a nat ()) (b nat ()) (c nat ())) ()
  (eq (snoc (cons a b) c) (cons a (snoc b c)))
()
(:conv (eq (snoc (cons a b) c) (cons a (snoc b c)))
  (eq
    (:unfold snoc ((cons a b) c) ()
      (append (cons a b) (cons c (d0))))
    (cons
      a
      (:unfold snoc (b c) ()
        (append b (cons c (d0))))))
  (appendS (a b (cons c (d0))))))

(theorem snoclt ((a nat ()) (b nat ())) ()
  (lt a (snoc a b))
((x nat) (y nat) (z nat))
(listind (x y z a (lt x (snoc x b)) (lt (d0) (snoc (d0) b)) (lt a (snoc a b)) (lt z (snoc z b)) (lt (cons y z) (snoc (cons y z) b)))
  (lteqd ((eq x (d0)) x (d0) (snoc x b) (snoc (d0) b))
    (id ((eq x (d0))))
    (snoceq1 (x (d0) b)))
  (lteqd ((eq x z) x z (snoc x b) (snoc z b))
    (id ((eq x z)))
    (snoceq1 (x z b)))
  (lteqd ((eq x (cons y z)) x (cons y z) (snoc x b) (snoc (cons y z) b))
    (id ((eq x (cons y z))))
    (snoceq1 (x (cons y z) b)))
  (lteqd ((eq x a) x a (snoc x b) (snoc a b))
    (id ((eq x a)))
    (snoceq1 (x a b)))
  (mpbir ((lt (d0) (cons b (d0))) (lt (d0) (snoc (d0) b)))
    (ax_mp ((eq (snoc (d0) b) (cons b (d0))) (iff (lt (d0) (snoc (d0) b)) (lt (d0) (cons b (d0)))))
      (lteq2 ((d0) (snoc (d0) b) (cons b (d0))))
      (snoc0 (b)))
    (mpbir ((ne (cons b (d0)) (d0)) (lt (d0) (cons b (d0))))
      (lt01 ((cons b (d0))))
      (consne0 (b (d0)))))
  (bi1i ((lt z (snoc z b)) (lt (cons y z) (snoc (cons y z) b)))
    (ax_mp ((iff (lt (cons y z) (snoc (cons y z) b)) (lt (cons y z) (cons y (snoc z b)))) (iff (lt z (snoc z b)) (lt (cons y z) (snoc (cons y z) b))))
      (ax_mp ((iff (lt z (snoc z b)) (lt (cons y z) (cons y (snoc z b)))) (im (iff (lt (cons y z) (snoc (cons y z) b)) (lt (cons y z) (cons y (snoc z b)))) (iff (lt z (snoc z b)) (lt (cons y z) (snoc (cons y z) b)))))
        (bitr4 ((lt z (snoc z b)) (lt (cons y z) (cons y (snoc z b))) (lt (cons y z) (snoc (cons y z) b))))
        (ltcons2 (y z (snoc z b))))
      (ax_mp ((eq (snoc (cons y z) b) (cons y (snoc z b))) (iff (lt (cons y z) (snoc (cons y z) b)) (lt (cons y z) (cons y (snoc z b)))))
        (lteq2 ((cons y z) (snoc (cons y z) b) (cons y (snoc z b))))
        (snocS (y z b)))))))

(local theorem appendsnoc ((b nat ()) (l1 nat ()) (l2 nat ())) ()
  (eq (append l1 (snoc l2 b)) (snoc (append l1 l2) b))
((x1 nat))
(:conv (eq (append l1 (snoc l2 b)) (snoc (append l1 l2) b))
  (eq
    (append
      l1
      (:unfold snoc (l2 b) ()
        (append l2 (cons b (d0)))))
    (:unfold snoc ((append l1 l2) b) ()
      (append (append l1 l2) (cons b (d0)))))
  (ax_mp ((eq (append (append l1 l2) (cons b (d0))) (append l1 (append l2 (cons b (d0))))) (eq (append l1 (append l2 (cons b (d0)))) (append (append l1 l2) (cons b (d0)))))
    (eqcom ((append (append l1 l2) (cons b (d0))) (append l1 (append l2 (cons b (d0))))))
    (appendass (l1 l2 (cons b (d0)) x1)))))

(local theorem conssnoc ((a nat ()) (b nat ()) (l nat ())) ()
  (eq (cons a (snoc l b)) (snoc (cons a l) b))
()
(:conv (eq (cons a (snoc l b)) (snoc (cons a l) b))
  (eq
    (cons
      a
      (:unfold snoc (l b) ()
        (append l (cons b (d0)))))
    (:unfold snoc ((cons a l) b) ()
      (append (cons a l) (cons b (d0)))))
  (ax_mp ((eq (append (cons a l) (cons b (d0))) (cons a (append l (cons b (d0))))) (eq (cons a (append l (cons b (d0)))) (append (cons a l) (cons b (d0)))))
    (eqcom ((append (cons a l) (cons b (d0))) (cons a (append l (cons b (d0))))))
    (appendS (a l (cons b (d0)))))))

(local def listfn ((l nat ())) (nat ())
((a nat) (f nat) (i nat) (z nat))
(lrec (d0) (slam a (slam z (lam f (lower (res (lam i (if (eq i (d0)) a (app (ns f) (sub i (d1))))) (ns (upto (suc (size (Dom (ns f))))))))))) l))

(local theorem listfneqd ((_G wff ()) (l1 nat ()) (l2 nat ()))
  ((hl (im _G (eq l1 l2))))
  (im _G (eq (listfn l1) (listfn l2)))
((a nat) (f nat) (i nat) (z nat))
(:conv (im _G (eq (listfn l1) (listfn l2)))
  (im
    _G
    (eq
      (:unfold listfn (l1) (a f i z)
        (lrec (d0) (slam a (slam z (lam f (lower (res (lam i (if (eq i (d0)) a (app (ns f) (sub i (d1))))) (ns (upto (suc (size (Dom (ns f))))))))))) l1))
      (:unfold listfn (l2) (a f i z)
        (lrec (d0) (slam a (slam z (lam f (lower (res (lam i (if (eq i (d0)) a (app (ns f) (sub i (d1))))) (ns (upto (suc (size (Dom (ns f))))))))))) l2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam f (lower (res (lam i (if (eq i (d0)) a (app (ns f) (sub i (d1))))) (ns (upto (suc (size (Dom (ns f))))))))))) (slam a (slam z (lam f (lower (res (lam i (if (eq i (d0)) a (app (ns f) (sub i (d1))))) (ns (upto (suc (size (Dom (ns f))))))))))) l1 l2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam a (slam z (lam f (lower (res (lam i (if (eq i (d0)) a (app (ns f) (sub i (d1))))) (ns (upto (suc (size (Dom (ns f)))))))))))))
    hl)))

(local theorem listfneq ((l1 nat ()) (l2 nat ())) ()
  (im (eq l1 l2) (eq (listfn l1) (listfn l2)))
()
(listfneqd ((eq l1 l2) l1 l2)
  (id ((eq l1 l2)))))

(local theorem listfn0 () ()
  (eq (listfn (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(:conv (eq (listfn (d0)) (d0))
  (eq
    (:unfold listfn ((d0)) (x1 x3 x4 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (lower (res (lam x4 (if (eq x4 (d0)) x1 (app (ns x3) (sub x4 (d1))))) (ns (upto (suc (size (Dom (ns x3))))))))))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (lower (res (lam x4 (if (eq x4 (d0)) x1 (app (ns x3) (sub x4 (d1))))) (ns (upto (suc (size (Dom (ns x3)))))))))))))))

(local theorem listfnS2 ((a nat ()) (i nat) (l nat ())) ()
  (eqs (ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))))
((x nat) (y nat) (z nat))
(:let H1 (anr ((an (eq x a) (eq z l)) (eq y (listfn l))))
(:let H2 (nseqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) y (listfn l))
  H1)
(mpbir ((eq (listfn (cons a l)) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))))) (eqs (ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))
  (ax_mp ((finite (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))) (iff (eqs (ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))) (eq (listfn (cons a l)) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))))
    (eqlower2 ((res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))) (listfn (cons a l))))
    (ax_mp ((finite (ns (upto (suc (size (Dom (ns (listfn l)))))))) (finite (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))
      (finlam ((ns (upto (suc (size (Dom (ns (listfn l))))))) i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))))
      (finns ((upto (suc (size (Dom (ns (listfn l))))))))))
  (:conv (eq (listfn (cons a l)) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))
    (eq
      (:unfold listfn ((cons a l)) (x y i z)
        (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (cons a l)))
      (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))
    (ax_mp ((eq (app (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) l)))) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))))) (eq (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (cons a l)) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))))))
      (ax_mp ((eq (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (cons a l)) (app (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) l))))) (im (eq (app (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) l)))) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))))) (eq (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (cons a l)) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))))
        (eqtr ((lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (cons a l)) (app (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) l)))) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))))))
        (lrecS ((d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) a l)))
      (:conv (eq (app (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) (pr a (pr l (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) l)))) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))
        (eq
          (app
            (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y)))))))))))
            (pr
              a
              (pr
                l
                (:sym (:unfold listfn (l) (x y i z)
                  (lrec (d0) (slam x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))) l))))))
          (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))))
        (appslame (a (pr l (listfn l)) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))) x (slam z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y)))))))))))
          (appslamed ((eq x a) l (listfn l) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))) z (lam y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))))))
            (applamed ((an (eq x a) (eq z l)) (listfn l) (lower (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))) y (lower (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y)))))))))
              (lowereqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (res (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y))))))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))))
                (reseqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (lam i (if (eq i (d0)) x (app (ns y) (sub i (d1))))) (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns y)))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))
                  (lameqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) i (if (eq i (d0)) x (app (ns y) (sub i (d1)))) (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))
                    (ifeqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (eq i (d0)) (eq i (d0)) x a (app (ns y) (sub i (d1))) (app (ns (listfn l)) (sub i (d1))))
                      (biidd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (eq i (d0))))
                      (anll ((eq x a) (eq z l) (eq y (listfn l))))
                      (appeq1d ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (ns y) (ns (listfn l)) (sub i (d1)))
                        H2)))
                  (nseqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (upto (suc (size (Dom (ns y))))) (upto (suc (size (Dom (ns (listfn l)))))))
                    (uptoeqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (suc (size (Dom (ns y)))) (suc (size (Dom (ns (listfn l))))))
                      (suceqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (size (Dom (ns y))) (size (Dom (ns (listfn l)))))
                        (sizeeqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (Dom (ns y)) (Dom (ns (listfn l))))
                          (dmeqd ((an (an (eq x a) (eq z l)) (eq y (listfn l))) (ns y) (ns (listfn l)))
                            H2)))))))))))))))))

(local theorem dmlistfn ((l nat ())) ()
  (eqs (Dom (ns (listfn l))) (ns (upto (len l))))
((i nat) (x nat) (y nat) (z nat))
(listind (x y z l (eqs (Dom (ns (listfn x))) (ns (upto (len x)))) (eqs (Dom (ns (listfn (d0)))) (ns (upto (len (d0))))) (eqs (Dom (ns (listfn l))) (ns (upto (len l)))) (eqs (Dom (ns (listfn z))) (ns (upto (len z)))) (eqs (Dom (ns (listfn (cons y z)))) (ns (upto (len (cons y z))))))
  (eqseqd ((eq x (d0)) (Dom (ns (listfn x))) (Dom (ns (listfn (d0)))) (ns (upto (len x))) (ns (upto (len (d0)))))
    (dmeqd ((eq x (d0)) (ns (listfn x)) (ns (listfn (d0))))
      (nseqd ((eq x (d0)) (listfn x) (listfn (d0)))
        (listfneq (x (d0)))))
    (nseqd ((eq x (d0)) (upto (len x)) (upto (len (d0))))
      (uptoeqd ((eq x (d0)) (len x) (len (d0)))
        (leneq (x (d0))))))
  (eqseqd ((eq x z) (Dom (ns (listfn x))) (Dom (ns (listfn z))) (ns (upto (len x))) (ns (upto (len z))))
    (dmeqd ((eq x z) (ns (listfn x)) (ns (listfn z)))
      (nseqd ((eq x z) (listfn x) (listfn z))
        (listfneq (x z))))
    (nseqd ((eq x z) (upto (len x)) (upto (len z)))
      (uptoeqd ((eq x z) (len x) (len z))
        (leneq (x z)))))
  (eqseqd ((eq x (cons y z)) (Dom (ns (listfn x))) (Dom (ns (listfn (cons y z)))) (ns (upto (len x))) (ns (upto (len (cons y z)))))
    (dmeqd ((eq x (cons y z)) (ns (listfn x)) (ns (listfn (cons y z))))
      (nseqd ((eq x (cons y z)) (listfn x) (listfn (cons y z)))
        (listfneq (x (cons y z)))))
    (nseqd ((eq x (cons y z)) (upto (len x)) (upto (len (cons y z))))
      (uptoeqd ((eq x (cons y z)) (len x) (len (cons y z)))
        (leneq (x (cons y z))))))
  (eqseqd ((eq x l) (Dom (ns (listfn x))) (Dom (ns (listfn l))) (ns (upto (len x))) (ns (upto (len l))))
    (dmeqd ((eq x l) (ns (listfn x)) (ns (listfn l)))
      (nseqd ((eq x l) (listfn x) (listfn l))
        (listfneq (x l))))
    (nseqd ((eq x l) (upto (len x)) (upto (len l)))
      (uptoeqd ((eq x l) (len x) (len l))
        (leneq (x l)))))
  (ax_mp ((eqs (Dom (ns (d0))) (ns (upto (len (d0))))) (eqs (Dom (ns (listfn (d0)))) (ns (upto (len (d0))))))
    (ax_mp ((eqs (Dom (ns (listfn (d0)))) (Dom (ns (d0)))) (im (eqs (Dom (ns (d0))) (ns (upto (len (d0))))) (eqs (Dom (ns (listfn (d0)))) (ns (upto (len (d0)))))))
      (eqstr ((Dom (ns (listfn (d0)))) (Dom (ns (d0))) (ns (upto (len (d0))))))
      (ax_mp ((eqs (ns (listfn (d0))) (ns (d0))) (eqs (Dom (ns (listfn (d0)))) (Dom (ns (d0)))))
        (dmeq ((ns (listfn (d0))) (ns (d0))))
        (ax_mp ((eq (listfn (d0)) (d0)) (eqs (ns (listfn (d0))) (ns (d0))))
          (nseq ((listfn (d0)) (d0)))
          (listfn0 ()))))
    (ax_mp ((eqs (ns (upto (len (d0)))) (ns (d0))) (eqs (Dom (ns (d0))) (ns (upto (len (d0))))))
      (ax_mp ((eqs (Dom (ns (d0))) (ns (d0))) (im (eqs (ns (upto (len (d0)))) (ns (d0))) (eqs (Dom (ns (d0))) (ns (upto (len (d0)))))))
        (eqstr4 ((Dom (ns (d0))) (ns (d0)) (ns (upto (len (d0))))))
        (dm0 ()))
      (ax_mp ((eq (upto (len (d0))) (d0)) (eqs (ns (upto (len (d0)))) (ns (d0))))
        (nseq ((upto (len (d0))) (d0)))
        (ax_mp ((eq (upto (d0)) (d0)) (eq (upto (len (d0))) (d0)))
          (ax_mp ((eq (upto (len (d0))) (upto (d0))) (im (eq (upto (d0)) (d0)) (eq (upto (len (d0))) (d0))))
            (eqtr ((upto (len (d0))) (upto (d0)) (d0)))
            (ax_mp ((eq (len (d0)) (d0)) (eq (upto (len (d0))) (upto (d0))))
              (uptoeq ((len (d0)) (d0)))
              (len0 ())))
          (upto0 ())))))
  (syl5eqs ((Dom (ns (listfn (cons y z)))) (Dom (res (lam i (if (eq i (d0)) y (app (ns (listfn z)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn z))))))))) (ns (upto (len (cons y z)))) (eqs (Dom (ns (listfn z))) (ns (upto (len z)))))
    (ax_mp ((eqs (ns (listfn (cons y z))) (res (lam i (if (eq i (d0)) y (app (ns (listfn z)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn z))))))))) (eqs (Dom (ns (listfn (cons y z)))) (Dom (res (lam i (if (eq i (d0)) y (app (ns (listfn z)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn z)))))))))))
      (dmeq ((ns (listfn (cons y z))) (res (lam i (if (eq i (d0)) y (app (ns (listfn z)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn z))))))))))
      (listfnS2 (y i z)))
    (syl5eqs ((Dom (res (lam i (if (eq i (d0)) y (app (ns (listfn z)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn z))))))))) (ns (upto (suc (size (Dom (ns (listfn z))))))) (ns (upto (len (cons y z)))) (eqs (Dom (ns (listfn z))) (ns (upto (len z)))))
      (dmreslam ((ns (upto (suc (size (Dom (ns (listfn z))))))) i (if (eq i (d0)) y (app (ns (listfn z)) (sub i (d1))))))
      (nseqd ((eqs (Dom (ns (listfn z))) (ns (upto (len z)))) (upto (suc (size (Dom (ns (listfn z)))))) (upto (len (cons y z))))
        (syl6eqr ((eqs (Dom (ns (listfn z))) (ns (upto (len z)))) (upto (suc (size (Dom (ns (listfn z)))))) (upto (suc (len z))) (upto (len (cons y z))))
          (ax_mp ((eq (len (cons y z)) (suc (len z))) (eq (upto (len (cons y z))) (upto (suc (len z)))))
            (uptoeq ((len (cons y z)) (suc (len z))))
            (lenS (y z)))
          (uptoeqd ((eqs (Dom (ns (listfn z))) (ns (upto (len z)))) (suc (size (Dom (ns (listfn z))))) (suc (len z)))
            (suceqd ((eqs (Dom (ns (listfn z))) (ns (upto (len z)))) (size (Dom (ns (listfn z)))) (len z))
              (syl6eq ((eqs (Dom (ns (listfn z))) (ns (upto (len z)))) (size (Dom (ns (listfn z)))) (size (ns (upto (len z)))) (len z))
                (sizeupto ((len z)))
                (sizeeq ((Dom (ns (listfn z))) (ns (upto (len z))))))))))))))

(local theorem listfnisf ((l nat ())) ()
  (isfun (ns (listfn l)))
((i nat))
(cases ((eq l (d0)) (isfun (ns (listfn l))))
  (mpbiri ((eq l (d0)) (isfun (ns (d0))) (isfun (ns (listfn l))))
    (isf0 ())
    (isfeqd ((eq l (d0)) (ns (listfn l)) (ns (d0)))
      (nseqd ((eq l (d0)) (listfn l) (d0))
        (syl6eq ((eq l (d0)) (listfn l) (listfn (d0)) (d0))
          (listfn0 ())
          (listfneq (l (d0)))))))
  (mpbii ((not (eq l (d0))) (isfun (res (lam i (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn (snd (sub l (d1)))))))))))) (isfun (ns (listfn l))))
    (ax_mp ((isfun (lam i (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1)))))) (isfun (res (lam i (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn (snd (sub l (d1)))))))))))))
      (resisf ((ns (upto (suc (size (Dom (ns (listfn (snd (sub l (d1)))))))))) (lam i (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1)))))))
      (lamisf (i (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1)))))))
    (isfeqd ((not (eq l (d0))) (res (lam i (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn (snd (sub l (d1))))))))))) (ns (listfn l)))
      (syl5eqsr ((res (lam i (if (eq i (d0)) (fst (sub l (d1))) (app (ns (listfn (snd (sub l (d1))))) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn (snd (sub l (d1))))))))))) (ns (listfn (cons (fst (sub l (d1))) (snd (sub l (d1)))))) (ns (listfn l)) (not (eq l (d0))))
        (listfnS2 ((fst (sub l (d1))) i (snd (sub l (d1)))))
        (nseqd ((not (eq l (d0))) (listfn (cons (fst (sub l (d1))) (snd (sub l (d1))))) (listfn l))
          (listfneqd ((not (eq l (d0))) (cons (fst (sub l (d1))) (snd (sub l (d1)))) l)
            (:conv (im (not (eq l (d0))) (eq (cons (fst (sub l (d1))) (snd (sub l (d1)))) l))
              (im
                (:sym (:unfold ne (l (d0)) ()
                  (not (eq l (d0)))))
                (eq (cons (fst (sub l (d1))) (snd (sub l (d1)))) l))
              (consfstsnd (l))))))))))

(local theorem listfnS ((a nat ()) (i nat) (l nat ())) ()
  (eqs (ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l))))))
()
(ax_mp ((eqs (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l)))))) (eqs (ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l)))))))
  (ax_mp ((eqs (ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))))) (im (eqs (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l)))))) (eqs (ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l))))))))
    (eqstr ((ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l)))))))
    (listfnS2 (a i l)))
  (ax_mp ((eqs (ns (upto (suc (size (Dom (ns (listfn l))))))) (ns (upto (suc (len l))))) (eqs (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l)))))))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l)))))))
    (reseq2 ((lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (size (Dom (ns (listfn l))))))) (ns (upto (suc (len l))))))
    (ax_mp ((eq (upto (suc (size (Dom (ns (listfn l)))))) (upto (suc (len l)))) (eqs (ns (upto (suc (size (Dom (ns (listfn l))))))) (ns (upto (suc (len l))))))
      (nseq ((upto (suc (size (Dom (ns (listfn l)))))) (upto (suc (len l)))))
      (ax_mp ((eq (suc (size (Dom (ns (listfn l))))) (suc (len l))) (eq (upto (suc (size (Dom (ns (listfn l)))))) (upto (suc (len l)))))
        (uptoeq ((suc (size (Dom (ns (listfn l))))) (suc (len l))))
        (ax_mp ((eq (size (Dom (ns (listfn l)))) (len l)) (eq (suc (size (Dom (ns (listfn l))))) (suc (len l))))
          (suceq ((size (Dom (ns (listfn l)))) (len l)))
          (ax_mp ((eq (size (ns (upto (len l)))) (len l)) (eq (size (Dom (ns (listfn l)))) (len l)))
            (ax_mp ((eq (size (Dom (ns (listfn l)))) (size (ns (upto (len l))))) (im (eq (size (ns (upto (len l)))) (len l)) (eq (size (Dom (ns (listfn l)))) (len l))))
              (eqtr ((size (Dom (ns (listfn l)))) (size (ns (upto (len l)))) (len l)))
              (ax_mp ((eqs (Dom (ns (listfn l))) (ns (upto (len l)))) (eq (size (Dom (ns (listfn l)))) (size (ns (upto (len l))))))
                (sizeeq ((Dom (ns (listfn l))) (ns (upto (len l)))))
                (dmlistfn (l))))
            (sizeupto ((len l))))))))))

(local theorem listfnSval ((a nat ()) (l nat ()) (n nat ())) ()
  (im (lt n (suc (len l))) (eq (app (ns (listfn (cons a l))) n) (if (eq n (d0)) a (app (ns (listfn l)) (sub n (d1))))))
((i nat))
(syl5eq ((lt n (suc (len l))) (app (ns (listfn (cons a l))) n) (app (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l))))) n) (if (eq n (d0)) a (app (ns (listfn l)) (sub n (d1)))))
  (ax_mp ((eqs (ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l)))))) (eq (app (ns (listfn (cons a l))) n) (app (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l))))) n)))
    (appeq1 ((ns (listfn (cons a l))) (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l))))) n))
    (listfnS (a i l)))
  (syl6eq ((lt n (suc (len l))) (app (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l))))) n) (app (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) n) (if (eq n (d0)) a (app (ns (listfn l)) (sub n (d1)))))
    (applame (n (if (eq n (d0)) a (app (ns (listfn l)) (sub n (d1)))) i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1)))))
      (ifeqd ((eq i n) (eq i (d0)) (eq n (d0)) a a (app (ns (listfn l)) (sub i (d1))) (app (ns (listfn l)) (sub n (d1))))
        (eqeq1 (i n (d0)))
        (eqidd ((eq i n) a))
        (appeq2d ((eq i n) (ns (listfn l)) (sub i (d1)) (sub n (d1)))
          (subeq1 (i n (d1))))))
    (sylbir ((lt n (suc (len l))) (el n (ns (upto (suc (len l))))) (eq (app (res (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) (ns (upto (suc (len l))))) n) (app (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) n)))
      (elupto (n (suc (len l))))
      (resapp ((ns (upto (suc (len l)))) (lam i (if (eq i (d0)) a (app (ns (listfn l)) (sub i (d1))))) n))))))

(local theorem listfnS0 ((a nat ()) (l nat ())) ()
  (eq (app (ns (listfn (cons a l))) (d0)) a)
()
(ax_mp ((eq (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))) a) (eq (app (ns (listfn (cons a l))) (d0)) a))
  (ax_mp ((eq (app (ns (listfn (cons a l))) (d0)) (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1))))) (im (eq (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))) a) (eq (app (ns (listfn (cons a l))) (d0)) a)))
    (eqtr ((app (ns (listfn (cons a l))) (d0)) (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))) a))
    (ax_mp ((lt (d0) (suc (len l))) (eq (app (ns (listfn (cons a l))) (d0)) (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1))))))
      (listfnSval (a l (d0)))
      (lt01S ((len l)))))
  (ax_mp ((eq (d0) (d0)) (eq (if (eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))) a))
    (ifpos ((eq (d0) (d0)) a (app (ns (listfn l)) (sub (d0) (d1)))))
    (eqid ((d0))))))

(local theorem listfnSS ((a nat ()) (l nat ()) (n nat ())) ()
  (eq (app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) n))
()
(:let H1 (ltsuc (n (len l)))
(cases ((lt n (len l)) (eq (app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) n)))
  (syl6eq ((lt n (len l)) (app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) (sub (suc n) (d1))) (app (ns (listfn l)) n))
    (ax_mp ((eq (sub (suc n) (d1)) n) (eq (app (ns (listfn l)) (sub (suc n) (d1))) (app (ns (listfn l)) n)))
      (appeq2 ((ns (listfn l)) (sub (suc n) (d1)) n))
      (sucsub1 (n)))
    (syl6eq ((lt n (len l)) (app (ns (listfn (cons a l))) (suc n)) (if (eq (suc n) (d0)) a (app (ns (listfn l)) (sub (suc n) (d1)))) (app (ns (listfn l)) (sub (suc n) (d1))))
      (ax_mp ((not (eq (suc n) (d0))) (eq (if (eq (suc n) (d0)) a (app (ns (listfn l)) (sub (suc n) (d1)))) (app (ns (listfn l)) (sub (suc n) (d1)))))
        (ifneg ((eq (suc n) (d0)) a (app (ns (listfn l)) (sub (suc n) (d1)))))
        (:conv (not (eq (suc n) (d0)))
          (:sym (:unfold ne ((suc n) (d0)) ()
            (not (eq (suc n) (d0)))))
          (peano1 (n))))
      (sylbi ((lt n (len l)) (lt (suc n) (suc (len l))) (eq (app (ns (listfn (cons a l))) (suc n)) (if (eq (suc n) (d0)) a (app (ns (listfn l)) (sub (suc n) (d1))))))
        H1
        (listfnSval (a l (suc n))))))
  (eqtr4d ((not (lt n (len l))) (app (ns (listfn (cons a l))) (suc n)) (d0) (app (ns (listfn l)) n))
    (sylbir ((not (lt n (len l))) (not (el (suc n) (Dom (ns (listfn (cons a l)))))) (eq (app (ns (listfn (cons a l))) (suc n)) (d0)))
      (ax_mp ((iff (el (suc n) (Dom (ns (listfn (cons a l))))) (lt n (len l))) (iff (not (el (suc n) (Dom (ns (listfn (cons a l)))))) (not (lt n (len l)))))
        (noteq ((el (suc n) (Dom (ns (listfn (cons a l))))) (lt n (len l))))
        (ax_mp ((iff (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l))) (iff (el (suc n) (Dom (ns (listfn (cons a l))))) (lt n (len l))))
          (ax_mp ((iff (el (suc n) (Dom (ns (listfn (cons a l))))) (el (suc n) (ns (upto (len (cons a l)))))) (im (iff (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l))) (iff (el (suc n) (Dom (ns (listfn (cons a l))))) (lt n (len l)))))
            (bitr ((el (suc n) (Dom (ns (listfn (cons a l))))) (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l))))
            (ax_mp ((eqs (Dom (ns (listfn (cons a l)))) (ns (upto (len (cons a l))))) (iff (el (suc n) (Dom (ns (listfn (cons a l))))) (el (suc n) (ns (upto (len (cons a l)))))))
              (eleq2 ((Dom (ns (listfn (cons a l)))) (ns (upto (len (cons a l)))) (suc n)))
              (dmlistfn ((cons a l)))))
          (ax_mp ((iff (lt (suc n) (len (cons a l))) (lt n (len l))) (iff (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l))))
            (ax_mp ((iff (el (suc n) (ns (upto (len (cons a l))))) (lt (suc n) (len (cons a l)))) (im (iff (lt (suc n) (len (cons a l))) (lt n (len l))) (iff (el (suc n) (ns (upto (len (cons a l))))) (lt n (len l)))))
              (bitr ((el (suc n) (ns (upto (len (cons a l))))) (lt (suc n) (len (cons a l))) (lt n (len l))))
              (elupto ((suc n) (len (cons a l)))))
            (ax_mp ((iff (lt n (len l)) (lt (suc n) (suc (len l)))) (iff (lt (suc n) (len (cons a l))) (lt n (len l))))
              (ax_mp ((iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))) (im (iff (lt n (len l)) (lt (suc n) (suc (len l)))) (iff (lt (suc n) (len (cons a l))) (lt n (len l)))))
                (bitr4 ((lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l))) (lt n (len l))))
                (ax_mp ((eq (len (cons a l)) (suc (len l))) (iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))))
                  (lteq2 ((suc n) (len (cons a l)) (suc (len l))))
                  (lenS (a l))))
              H1))))
      (ndmapp ((ns (listfn (cons a l))) (suc n))))
    (sylbir ((not (lt n (len l))) (not (el n (Dom (ns (listfn l))))) (eq (app (ns (listfn l)) n) (d0)))
      (ax_mp ((iff (el n (Dom (ns (listfn l)))) (lt n (len l))) (iff (not (el n (Dom (ns (listfn l))))) (not (lt n (len l)))))
        (noteq ((el n (Dom (ns (listfn l)))) (lt n (len l))))
        (ax_mp ((iff (el n (ns (upto (len l)))) (lt n (len l))) (iff (el n (Dom (ns (listfn l)))) (lt n (len l))))
          (ax_mp ((iff (el n (Dom (ns (listfn l)))) (el n (ns (upto (len l))))) (im (iff (el n (ns (upto (len l)))) (lt n (len l))) (iff (el n (Dom (ns (listfn l)))) (lt n (len l)))))
            (bitr ((el n (Dom (ns (listfn l)))) (el n (ns (upto (len l)))) (lt n (len l))))
            (ax_mp ((eqs (Dom (ns (listfn l))) (ns (upto (len l)))) (iff (el n (Dom (ns (listfn l)))) (el n (ns (upto (len l))))))
              (eleq2 ((Dom (ns (listfn l))) (ns (upto (len l))) n))
              (dmlistfn (l))))
          (elupto (n (len l)))))
      (ndmapp ((ns (listfn l)) n)))))))

(def nth ((n nat ()) (l nat ())) (nat ())
()
(if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))

(local theorem ntheqd ((_G wff ()) (n1 nat ()) (n2 nat ()) (l1 nat ()) (l2 nat ()))
  ((hn (im _G (eq n1 n2)))
   (hl (im _G (eq l1 l2))))
  (im _G (eq (nth n1 l1) (nth n2 l2)))
()
(:conv (im _G (eq (nth n1 l1) (nth n2 l2)))
  (im
    _G
    (eq
      (:unfold nth (n1 l1) ()
        (if (lt n1 (len l1)) (suc (app (ns (listfn l1)) n1)) (d0)))
      (:unfold nth (n2 l2) ()
        (if (lt n2 (len l2)) (suc (app (ns (listfn l2)) n2)) (d0)))))
  (ifeqd (_G (lt n1 (len l1)) (lt n2 (len l2)) (suc (app (ns (listfn l1)) n1)) (suc (app (ns (listfn l2)) n2)) (d0) (d0))
    (lteqd (_G n1 n2 (len l1) (len l2))
      hn
      (leneqd (_G l1 l2)
        hl))
    (suceqd (_G (app (ns (listfn l1)) n1) (app (ns (listfn l2)) n2))
      (appeqd (_G (ns (listfn l1)) (ns (listfn l2)) n1 n2)
        (nseqd (_G (listfn l1) (listfn l2))
          (listfneqd (_G l1 l2)
            hl))
        hn))
    (eqidd (_G (d0))))))

(local theorem ntheq ((n1 nat ()) (n2 nat ()) (l1 nat ()) (l2 nat ())) ()
  (im (eq n1 n2) (im (eq l1 l2) (eq (nth n1 l1) (nth n2 l2))))
()
(exp ((eq n1 n2) (eq l1 l2) (eq (nth n1 l1) (nth n2 l2)))
  (ntheqd ((an (eq n1 n2) (eq l1 l2)) n1 n2 l1 l2)
    (anl ((eq n1 n2) (eq l1 l2)))
    (anr ((eq n1 n2) (eq l1 l2))))))

(local theorem ntheq1d ((G wff ()) (n1 nat ()) (n2 nat ()) (l nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (nth n1 l) (nth n2 l)))
()
(ntheqd (G n1 n2 l l)
  h
  (eqidd (G l))))

(local theorem ntheq1 ((n1 nat ()) (n2 nat ()) (l nat ())) ()
  (im (eq n1 n2) (eq (nth n1 l) (nth n2 l)))
()
(ntheq1d ((eq n1 n2) n1 n2 l)
  (id ((eq n1 n2)))))

(local theorem ntheq2d ((G wff ()) (n nat ()) (l1 nat ()) (l2 nat ()))
  ((h (im G (eq l1 l2))))
  (im G (eq (nth n l1) (nth n l2)))
()
(ntheqd (G n n l1 l2)
  (eqidd (G n))
  h))

(local theorem ntheq2 ((n nat ()) (l1 nat ()) (l2 nat ())) ()
  (im (eq l1 l2) (eq (nth n l1) (nth n l2)))
()
(ntheq2d ((eq l1 l2) n l1 l2)
  (id ((eq l1 l2)))))

(theorem nth0 ((n nat ())) ()
  (eq (nth n (d0)) (d0))
()
(:conv (eq (nth n (d0)) (d0))
  (eq
    (:unfold nth (n (d0)) ()
      (if (lt n (len (d0))) (suc (app (ns (listfn (d0))) n)) (d0)))
    (d0))
  (ax_mp ((not (lt n (len (d0)))) (eq (if (lt n (len (d0))) (suc (app (ns (listfn (d0))) n)) (d0)) (d0)))
    (ifneg ((lt n (len (d0))) (suc (app (ns (listfn (d0))) n)) (d0)))
    (mtbir ((lt n (d0)) (lt n (len (d0))))
      (ax_mp ((eq (len (d0)) (d0)) (iff (lt n (len (d0))) (lt n (d0))))
        (lteq2 (n (len (d0)) (d0)))
        (len0 ()))
      (lt02 (n))))))

(theorem nthZ ((a nat ()) (l nat ())) ()
  (eq (nth (d0) (cons a l)) (suc a))
()
(:conv (eq (nth (d0) (cons a l)) (suc a))
  (eq
    (:unfold nth ((d0) (cons a l)) ()
      (if (lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0)))
    (suc a))
  (ax_mp ((eq (suc (app (ns (listfn (cons a l))) (d0))) (suc a)) (eq (if (lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0)) (suc a)))
    (ax_mp ((eq (if (lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0)) (suc (app (ns (listfn (cons a l))) (d0)))) (im (eq (suc (app (ns (listfn (cons a l))) (d0))) (suc a)) (eq (if (lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0)) (suc a))))
      (eqtr ((if (lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0)) (suc (app (ns (listfn (cons a l))) (d0))) (suc a)))
      (ax_mp ((lt (d0) (len (cons a l))) (eq (if (lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0)) (suc (app (ns (listfn (cons a l))) (d0)))))
        (ifpos ((lt (d0) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (d0))) (d0)))
        (mpbir ((lt (d0) (suc (len l))) (lt (d0) (len (cons a l))))
          (ax_mp ((eq (len (cons a l)) (suc (len l))) (iff (lt (d0) (len (cons a l))) (lt (d0) (suc (len l)))))
            (lteq2 ((d0) (len (cons a l)) (suc (len l))))
            (lenS (a l)))
          (lt01S ((len l))))))
    (ax_mp ((eq (app (ns (listfn (cons a l))) (d0)) a) (eq (suc (app (ns (listfn (cons a l))) (d0))) (suc a)))
      (suceq ((app (ns (listfn (cons a l))) (d0)) a))
      (listfnS0 (a l))))))

(theorem nthS ((n nat ()) (a nat ()) (l nat ())) ()
  (eq (nth (suc n) (cons a l)) (nth n l))
()
(:let H1 (bitr4 ((lt n (len l)) (lt (suc n) (suc (len l))) (lt (suc n) (len (cons a l)))))
(:let H2 (ltsuc (n (len l)))
(:let H3 (ax_mp ((iff (lt n (len l)) (lt (suc n) (suc (len l)))) (im (iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))) (iff (lt n (len l)) (lt (suc n) (len (cons a l))))))
  H1
  H2)
(:let H4 (lteq2 ((suc n) (len (cons a l)) (suc (len l))))
(:let H5 (lenS (a l))
(:let H6 (ax_mp ((eq (len (cons a l)) (suc (len l))) (iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))))
  H4
  H5)
(:let H7 (ax_mp ((iff (lt (suc n) (len (cons a l))) (lt (suc n) (suc (len l)))) (iff (lt n (len l)) (lt (suc n) (len (cons a l)))))
  H3
  H6)
(cases ((lt n (len l)) (eq (nth (suc n) (cons a l)) (nth n l)))
  (eqtr4d ((lt n (len l)) (nth (suc n) (cons a l)) (suc (app (ns (listfn (cons a l))) (suc n))) (nth n l))
    (sylbi ((lt n (len l)) (lt (suc n) (len (cons a l))) (eq (nth (suc n) (cons a l)) (suc (app (ns (listfn (cons a l))) (suc n)))))
      H7
      (:conv (im (lt (suc n) (len (cons a l))) (eq (nth (suc n) (cons a l)) (suc (app (ns (listfn (cons a l))) (suc n)))))
        (im
          (lt (suc n) (len (cons a l)))
          (eq
            (:unfold nth ((suc n) (cons a l)) ()
              (if (lt (suc n) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (suc n))) (d0)))
            (suc (app (ns (listfn (cons a l))) (suc n)))))
        (ifpos ((lt (suc n) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (suc n))) (d0)))))
    (syl6eqr ((lt n (len l)) (nth n l) (suc (app (ns (listfn l)) n)) (suc (app (ns (listfn (cons a l))) (suc n))))
      (ax_mp ((eq (app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) n)) (eq (suc (app (ns (listfn (cons a l))) (suc n))) (suc (app (ns (listfn l)) n))))
        (suceq ((app (ns (listfn (cons a l))) (suc n)) (app (ns (listfn l)) n)))
        (listfnSS (a l n)))
      (:conv (im (lt n (len l)) (eq (nth n l) (suc (app (ns (listfn l)) n))))
        (im
          (lt n (len l))
          (eq
            (:unfold nth (n l) ()
              (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))
            (suc (app (ns (listfn l)) n))))
        (ifpos ((lt n (len l)) (suc (app (ns (listfn l)) n)) (d0))))))
  (eqtr4d ((not (lt n (len l))) (nth (suc n) (cons a l)) (d0) (nth n l))
    (sylbi ((not (lt n (len l))) (not (lt (suc n) (len (cons a l)))) (eq (nth (suc n) (cons a l)) (d0)))
      (ax_mp ((iff (lt n (len l)) (lt (suc n) (len (cons a l)))) (iff (not (lt n (len l))) (not (lt (suc n) (len (cons a l))))))
        (noteq ((lt n (len l)) (lt (suc n) (len (cons a l)))))
        H7)
      (:conv (im (not (lt (suc n) (len (cons a l)))) (eq (nth (suc n) (cons a l)) (d0)))
        (im
          (not (lt (suc n) (len (cons a l))))
          (eq
            (:unfold nth ((suc n) (cons a l)) ()
              (if (lt (suc n) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (suc n))) (d0)))
            (d0)))
        (ifneg ((lt (suc n) (len (cons a l))) (suc (app (ns (listfn (cons a l))) (suc n))) (d0)))))
    (:conv (im (not (lt n (len l))) (eq (nth n l) (d0)))
      (im
        (not (lt n (len l)))
        (eq
          (:unfold nth (n l) ()
            (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))
          (d0)))
      (ifneg ((lt n (len l)) (suc (app (ns (listfn l)) n)) (d0))))))))))))))

(local theorem nthne0 ((l nat ()) (n nat ())) ()
  (iff (ne (nth n l) (d0)) (lt n (len l)))
()
(ibii ((ne (nth n l) (d0)) (lt n (len l)))
  (:conv (im (ne (nth n l) (d0)) (lt n (len l)))
    (im
      (:unfold ne ((nth n l) (d0)) ()
        (not
          (eq
            (:unfold nth (n l) ()
              (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))
            (d0))))
      (lt n (len l)))
    (ax_mp ((im (not (lt n (len l))) (eq (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)) (d0))) (im (not (eq (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)) (d0))) (lt n (len l))))
      (con1 ((lt n (len l)) (eq (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)) (d0))))
      (ifneg ((lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))))
  (syl ((lt n (len l)) (eq (nth n l) (suc (app (ns (listfn l)) n))) (ne (nth n l) (d0)))
    (sucne0 ((nth n l) (app (ns (listfn l)) n)))
    (:conv (im (lt n (len l)) (eq (nth n l) (suc (app (ns (listfn l)) n))))
      (im
        (lt n (len l))
        (eq
          (:unfold nth (n l) ()
            (if (lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))
          (suc (app (ns (listfn l)) n))))
      (ifpos ((lt n (len l)) (suc (app (ns (listfn l)) n)) (d0)))))))

(local theorem lmemnth ((a nat ()) (l nat ()) (n nat)) ()
  (iff (lmem a l) (ex n (eq (nth n l) (suc a))))
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(listind (x1 x2 x3 l (iff (lmem a x1) (ex n (eq (nth n x1) (suc a)))) (iff (lmem a (d0)) (ex n (eq (nth n (d0)) (suc a)))) (iff (lmem a l) (ex n (eq (nth n l) (suc a)))) (iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (iff (lmem a (cons x2 x3)) (ex n (eq (nth n (cons x2 x3)) (suc a)))))
  (bieqd ((eq x1 (d0)) (lmem a x1) (lmem a (d0)) (ex n (eq (nth n x1) (suc a))) (ex n (eq (nth n (d0)) (suc a))))
    (lmemeq2 (a x1 (d0)))
    (exeqd ((eq x1 (d0)) n (eq (nth n x1) (suc a)) (eq (nth n (d0)) (suc a)))
      (eqeq1d ((eq x1 (d0)) (nth n x1) (nth n (d0)) (suc a))
        (ntheq2 (n x1 (d0))))))
  (bieqd ((eq x1 x3) (lmem a x1) (lmem a x3) (ex n (eq (nth n x1) (suc a))) (ex n (eq (nth n x3) (suc a))))
    (lmemeq2 (a x1 x3))
    (exeqd ((eq x1 x3) n (eq (nth n x1) (suc a)) (eq (nth n x3) (suc a)))
      (eqeq1d ((eq x1 x3) (nth n x1) (nth n x3) (suc a))
        (ntheq2 (n x1 x3)))))
  (bieqd ((eq x1 (cons x2 x3)) (lmem a x1) (lmem a (cons x2 x3)) (ex n (eq (nth n x1) (suc a))) (ex n (eq (nth n (cons x2 x3)) (suc a))))
    (lmemeq2 (a x1 (cons x2 x3)))
    (exeqd ((eq x1 (cons x2 x3)) n (eq (nth n x1) (suc a)) (eq (nth n (cons x2 x3)) (suc a)))
      (eqeq1d ((eq x1 (cons x2 x3)) (nth n x1) (nth n (cons x2 x3)) (suc a))
        (ntheq2 (n x1 (cons x2 x3))))))
  (bieqd ((eq x1 l) (lmem a x1) (lmem a l) (ex n (eq (nth n x1) (suc a))) (ex n (eq (nth n l) (suc a))))
    (lmemeq2 (a x1 l))
    (exeqd ((eq x1 l) n (eq (nth n x1) (suc a)) (eq (nth n l) (suc a)))
      (eqeq1d ((eq x1 l) (nth n x1) (nth n l) (suc a))
        (ntheq2 (n x1 l)))))
  (ax_mp ((not (ex n (eq (nth n (d0)) (suc a)))) (iff (lmem a (d0)) (ex n (eq (nth n (d0)) (suc a)))))
    (ax_mp ((not (lmem a (d0))) (im (not (ex n (eq (nth n (d0)) (suc a)))) (iff (lmem a (d0)) (ex n (eq (nth n (d0)) (suc a))))))
      (binth ((lmem a (d0)) (ex n (eq (nth n (d0)) (suc a)))))
      (lmem0 (a)))
    (nexi (n (eq (nth n (d0)) (suc a)))
      (:conv (not (eq (nth n (d0)) (suc a)))
        (:sym (:unfold ne ((nth n (d0)) (suc a)) ()
          (not (eq (nth n (d0)) (suc a)))))
        (ax_mp ((ne (suc a) (nth n (d0))) (ne (nth n (d0)) (suc a)))
          (necom ((suc a) (nth n (d0))))
          (mpbir ((ne (suc a) (d0)) (ne (suc a) (nth n (d0))))
            (ax_mp ((eq (nth n (d0)) (d0)) (iff (ne (suc a) (nth n (d0))) (ne (suc a) (d0))))
              (neeq2 ((suc a) (nth n (d0)) (d0)))
              (nth0 (n)))
            (peano1 (a)))))))
  (syl5bb ((iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (lmem a (cons x2 x3)) (or (eq a x2) (lmem a x3)) (ex n (eq (nth n (cons x2 x3)) (suc a))))
    (lmemS (a x2 x3))
    (syl6bb ((iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (or (eq a x2) (lmem a x3)) (or (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (eq (nth n (cons x2 x3)) (suc a))))
      (ax_mp ((iff (ex n (or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (eq (nth n (cons x2 x3)) (suc a)))) (iff (or (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (eq (nth n (cons x2 x3)) (suc a)))))
        (ax_mp ((iff (ex n (or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (or (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a)))))) (im (iff (ex n (or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (eq (nth n (cons x2 x3)) (suc a)))) (iff (or (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (eq (nth n (cons x2 x3)) (suc a))))))
          (bitr3 ((or (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)))) (ex n (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (eq (nth n (cons x2 x3)) (suc a)))))
          (exor (n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))))
        (exeqi (n (or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a)))) (eq (nth n (cons x2 x3)) (suc a)))
          (ax_mp ((iff (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x2 x3)) (suc a))) (eq (nth n (cons x2 x3)) (suc a))) (iff (or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a)))) (eq (nth n (cons x2 x3)) (suc a))))
            (ax_mp ((iff (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x2 x3)) (suc a))) (or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))) (im (iff (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x2 x3)) (suc a))) (eq (nth n (cons x2 x3)) (suc a))) (iff (or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a)))) (eq (nth n (cons x2 x3)) (suc a)))))
              (bitr3 ((or (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a)))) (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x2 x3)) (suc a))) (eq (nth n (cons x2 x3)) (suc a))))
              (andir ((eq n (d0)) (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a)))))
            (ax_mp ((or (eq n (d0)) (not (eq n (d0)))) (iff (an (or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x2 x3)) (suc a))) (eq (nth n (cons x2 x3)) (suc a))))
              (bian1 ((or (eq n (d0)) (not (eq n (d0)))) (eq (nth n (cons x2 x3)) (suc a))))
              (em ((eq n (d0))))))))
      (oreqd ((iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (eq a x2) (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)))) (lmem a x3) (ex n (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a)))))
        (a1i ((iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (iff (eq a x2) (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
          (ax_mp ((iff (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)))) (eq a x2)) (iff (eq a x2) (ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
            (bicom ((ex n (an (eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)))) (eq a x2)))
            (exeqe (n (d0) (eq (nth n (cons x2 x3)) (suc a)) (eq a x2))
              (syl6bb ((eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)) (eq x2 a) (eq a x2))
                (eqcomb (x2 a))
                (syl6bb ((eq n (d0)) (eq (nth n (cons x2 x3)) (suc a)) (eq (suc x2) (suc a)) (eq x2 a))
                  (peano2 (x2 a))
                  (eqeq1d ((eq n (d0)) (nth n (cons x2 x3)) (suc x2) (suc a))
                    (syl6eq ((eq n (d0)) (nth n (cons x2 x3)) (nth (d0) (cons x2 x3)) (suc x2))
                      (nthZ (x2 x3))
                      (ntheq1 (n (d0) (cons x2 x3))))))))))
        (:conv (im (iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (iff (lmem a x3) (ex n (an (not (eq n (d0))) (eq (nth n (cons x2 x3)) (suc a))))))
          (im
            (iff (lmem a x3) (ex n (eq (nth n x3) (suc a))))
            (iff
              (lmem a x3)
              (ex
                n
                (an
                  (:sym (:unfold ne (n (d0)) ()
                    (not (eq n (d0)))))
                  (eq (nth n (cons x2 x3)) (suc a))))))
          (ax_mp ((iff (iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (iff (lmem a x3) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))) (im (iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (iff (lmem a x3) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))))
            (bi1 ((iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (iff (lmem a x3) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))))
            (ax_mp ((iff (ex n (eq (nth n x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))) (iff (iff (lmem a x3) (ex n (eq (nth n x3) (suc a)))) (iff (lmem a x3) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))))
              (bieq2 ((lmem a x3) (ex n (eq (nth n x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
              (ax_mp ((iff (ex x4 (eq (nth x4 x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))) (iff (ex n (eq (nth n x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
                (ax_mp ((iff (ex n (eq (nth n x3) (suc a))) (ex x4 (eq (nth x4 x3) (suc a)))) (im (iff (ex x4 (eq (nth x4 x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))) (iff (ex n (eq (nth n x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))))
                  (bitr ((ex n (eq (nth n x3) (suc a))) (ex x4 (eq (nth x4 x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
                  (cbvex (n x4 (eq (nth n x3) (suc a)) (eq (nth x4 x3) (suc a)))
                    (eqeq1d ((eq n x4) (nth n x3) (nth x4 x3) (suc a))
                      (ntheq1 (n x4 x3)))))
                (ax_mp ((iff (ex x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))) (iff (ex x4 (eq (nth x4 x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
                  (ax_mp ((iff (ex x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex x4 (eq (nth x4 x3) (suc a)))) (im (iff (ex x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))) (iff (ex x4 (eq (nth x4 x3) (suc a))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))))
                    (bitr3 ((ex x4 (eq (nth x4 x3) (suc a))) (ex x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
                    (exeqi (x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a)))) (eq (nth x4 x3) (suc a)))
                      (exeqe (n (suc x4) (eq (nth n (cons x2 x3)) (suc a)) (eq (nth x4 x3) (suc a)))
                        (eqeq1d ((eq n (suc x4)) (nth n (cons x2 x3)) (nth x4 x3) (suc a))
                          (syl6eq ((eq n (suc x4)) (nth n (cons x2 x3)) (nth (suc x4) (cons x2 x3)) (nth x4 x3))
                            (nthS (x4 x2 x3))
                            (ntheq1 (n (suc x4) (cons x2 x3))))))))
                  (ax_mp ((iff (ex n (ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))) (iff (ex x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
                    (ax_mp ((iff (ex x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a)))))) (im (iff (ex n (ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))) (iff (ex x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))))
                      (bitr ((ex x4 (ex n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))) (ex n (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
                      (excomb (x4 n (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a))))))
                    (exeqi (n (ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a)))) (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))
                      (ax_mp ((iff (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (ex x4 (eq n (suc x4))) (eq (nth n (cons x2 x3)) (suc a)))) (iff (ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a)))) (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))
                        (ax_mp ((iff (ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a)))) (an (ex x4 (eq n (suc x4))) (eq (nth n (cons x2 x3)) (suc a)))) (im (iff (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))) (an (ex x4 (eq n (suc x4))) (eq (nth n (cons x2 x3)) (suc a)))) (iff (ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a)))) (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a))))))
                          (bitr4 ((ex x4 (an (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a)))) (an (ex x4 (eq n (suc x4))) (eq (nth n (cons x2 x3)) (suc a))) (an (ne n (d0)) (eq (nth n (cons x2 x3)) (suc a)))))
                          (exan2 (x4 (eq n (suc x4)) (eq (nth n (cons x2 x3)) (suc a)))))
                        (aneq1i ((ne n (d0)) (ex x4 (eq n (suc x4))) (eq (nth n (cons x2 x3)) (suc a)))
                          (exsuc (x4 n))))))))))))))))

(local theorem nthlmem ((a nat ()) (l nat ()) (n nat ())) ()
  (im (eq (nth n l) (suc a)) (lmem a l))
((x1 nat))
(sylibr ((eq (nth n l) (suc a)) (ex x1 (eq (nth x1 l) (suc a))) (lmem a l))
  (lmemnth (a l x1))
  (iexe (x1 n (eq (nth x1 l) (suc a)) (eq (nth n l) (suc a)))
    (eqeq1d ((eq x1 n) (nth x1 l) (nth n l) (suc a))
      (ntheq1 (x1 n l))))))

(def repeat ((a nat ()) (n nat ())) (nat ())
((x nat))
(rec (d0) (lam x (cons a x)) n))

(local theorem repeateqd ((_G wff ()) (a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ()))
  ((ha (im _G (eq a1 a2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (repeat a1 n1) (repeat a2 n2)))
((x nat))
(:conv (im _G (eq (repeat a1 n1) (repeat a2 n2)))
  (im
    _G
    (eq
      (:unfold repeat (a1 n1) (x)
        (rec (d0) (lam x (cons a1 x)) n1))
      (:unfold repeat (a2 n2) (x)
        (rec (d0) (lam x (cons a2 x)) n2))))
  (receqd (_G (d0) (d0) (lam x (cons a1 x)) (lam x (cons a2 x)) n1 n2)
    (eqidd (_G (d0)))
    (lameqd (_G x (cons a1 x) (cons a2 x))
      (conseqd (_G a1 a2 x x)
        ha
        (eqidd (_G x))))
    hn)))

(local theorem repeateq ((a1 nat ()) (a2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq a1 a2) (im (eq n1 n2) (eq (repeat a1 n1) (repeat a2 n2))))
()
(exp ((eq a1 a2) (eq n1 n2) (eq (repeat a1 n1) (repeat a2 n2)))
  (repeateqd ((an (eq a1 a2) (eq n1 n2)) a1 a2 n1 n2)
    (anl ((eq a1 a2) (eq n1 n2)))
    (anr ((eq a1 a2) (eq n1 n2))))))

(local theorem repeateq1d ((G wff ()) (a1 nat ()) (a2 nat ()) (n nat ()))
  ((h (im G (eq a1 a2))))
  (im G (eq (repeat a1 n) (repeat a2 n)))
()
(repeateqd (G a1 a2 n n)
  h
  (eqidd (G n))))

(local theorem repeateq1 ((a1 nat ()) (a2 nat ()) (n nat ())) ()
  (im (eq a1 a2) (eq (repeat a1 n) (repeat a2 n)))
()
(repeateq1d ((eq a1 a2) a1 a2 n)
  (id ((eq a1 a2)))))

(local theorem repeateq2d ((G wff ()) (a nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (repeat a n1) (repeat a n2)))
()
(repeateqd (G a a n1 n2)
  (eqidd (G a))
  h))

(local theorem repeateq2 ((a nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (repeat a n1) (repeat a n2)))
()
(repeateq2d ((eq n1 n2) a n1 n2)
  (id ((eq n1 n2)))))

(theorem repeat0 ((a nat ())) ()
  (eq (repeat a (d0)) (d0))
((x1 nat))
(:conv (eq (repeat a (d0)) (d0))
  (eq
    (:unfold repeat (a (d0)) (x1)
      (rec (d0) (lam x1 (cons a x1)) (d0)))
    (d0))
  (rec0 ((d0) (lam x1 (cons a x1))))))

(theorem repeatS ((a nat ()) (n nat ())) ()
  (eq (repeat a (suc n)) (cons a (repeat a n)))
((x nat))
(:conv (eq (repeat a (suc n)) (cons a (repeat a n)))
  (eq
    (:unfold repeat (a (suc n)) (x)
      (rec (d0) (lam x (cons a x)) (suc n)))
    (cons a (repeat a n)))
  (ax_mp ((eq (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)) (cons a (repeat a n))) (eq (rec (d0) (lam x (cons a x)) (suc n)) (cons a (repeat a n))))
    (ax_mp ((eq (rec (d0) (lam x (cons a x)) (suc n)) (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n))) (im (eq (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)) (cons a (repeat a n))) (eq (rec (d0) (lam x (cons a x)) (suc n)) (cons a (repeat a n)))))
      (eqtr ((rec (d0) (lam x (cons a x)) (suc n)) (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)) (cons a (repeat a n))))
      (recS ((d0) (lam x (cons a x)) n)))
    (:conv (eq (app (lam x (cons a x)) (rec (d0) (lam x (cons a x)) n)) (cons a (repeat a n)))
      (eq
        (app
          (lam x (cons a x))
          (:sym (:unfold repeat (a n) (x)
            (rec (d0) (lam x (cons a x)) n))))
        (cons a (repeat a n)))
      (applame ((repeat a n) (cons a (repeat a n)) x (cons a x))
        (conseq2 (a x (repeat a n))))))))

(def sublistAt ((n nat ()) (L1 nat ()) (L2 nat ())) (wff ())
((l nat) (r nat))
(ex l (ex r (an (eq L1 (append (append l L2) r)) (eq (len l) n)))))

(local theorem sublistAteqd ((_G wff ()) (n1 nat ()) (n2 nat ()) (L11 nat ()) (L12 nat ()) (L21 nat ()) (L22 nat ()))
  ((hn (im _G (eq n1 n2)))
   (hL1 (im _G (eq L11 L12)))
   (hL2 (im _G (eq L21 L22))))
  (im _G (iff (sublistAt n1 L11 L21) (sublistAt n2 L12 L22)))
((l nat) (r nat))
(:conv (im _G (iff (sublistAt n1 L11 L21) (sublistAt n2 L12 L22)))
  (im
    _G
    (iff
      (:unfold sublistAt (n1 L11 L21) (l r)
        (ex l (ex r (an (eq L11 (append (append l L21) r)) (eq (len l) n1)))))
      (:unfold sublistAt (n2 L12 L22) (l r)
        (ex l (ex r (an (eq L12 (append (append l L22) r)) (eq (len l) n2)))))))
  (exeqd (_G l (ex r (an (eq L11 (append (append l L21) r)) (eq (len l) n1))) (ex r (an (eq L12 (append (append l L22) r)) (eq (len l) n2))))
    (exeqd (_G r (an (eq L11 (append (append l L21) r)) (eq (len l) n1)) (an (eq L12 (append (append l L22) r)) (eq (len l) n2)))
      (aneqd (_G (eq L11 (append (append l L21) r)) (eq L12 (append (append l L22) r)) (eq (len l) n1) (eq (len l) n2))
        (eqeqd (_G L11 L12 (append (append l L21) r) (append (append l L22) r))
          hL1
          (appendeqd (_G (append l L21) (append l L22) r r)
            (appendeqd (_G l l L21 L22)
              (eqidd (_G l))
              hL2)
            (eqidd (_G r))))
        (eqeqd (_G (len l) (len l) n1 n2)
          (eqidd (_G (len l)))
          hn))))))

(local theorem sublistAteq ((n1 nat ()) (n2 nat ()) (L11 nat ()) (L12 nat ()) (L21 nat ()) (L22 nat ())) ()
  (im (eq n1 n2) (im (eq L11 L12) (im (eq L21 L22) (iff (sublistAt n1 L11 L21) (sublistAt n2 L12 L22)))))
()
(exp ((eq n1 n2) (eq L11 L12) (im (eq L21 L22) (iff (sublistAt n1 L11 L21) (sublistAt n2 L12 L22))))
  (exp ((an (eq n1 n2) (eq L11 L12)) (eq L21 L22) (iff (sublistAt n1 L11 L21) (sublistAt n2 L12 L22)))
    (sublistAteqd ((an (an (eq n1 n2) (eq L11 L12)) (eq L21 L22)) n1 n2 L11 L12 L21 L22)
      (anwl ((an (eq n1 n2) (eq L11 L12)) (eq L21 L22) (eq n1 n2))
        (anl ((eq n1 n2) (eq L11 L12))))
      (anwl ((an (eq n1 n2) (eq L11 L12)) (eq L21 L22) (eq L11 L12))
        (anr ((eq n1 n2) (eq L11 L12))))
      (anr ((an (eq n1 n2) (eq L11 L12)) (eq L21 L22)))))))

(local theorem sublistAteq1d ((G wff ()) (n1 nat ()) (n2 nat ()) (L1 nat ()) (L2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (iff (sublistAt n1 L1 L2) (sublistAt n2 L1 L2)))
()
(sublistAteqd (G n1 n2 L1 L1 L2 L2)
  h
  (eqidd (G L1))
  (eqidd (G L2))))

(local theorem sublistAteq1 ((n1 nat ()) (n2 nat ()) (L1 nat ()) (L2 nat ())) ()
  (im (eq n1 n2) (iff (sublistAt n1 L1 L2) (sublistAt n2 L1 L2)))
()
(sublistAteq1d ((eq n1 n2) n1 n2 L1 L2)
  (id ((eq n1 n2)))))

(local theorem sublistAteq2d ((G wff ()) (n nat ()) (L11 nat ()) (L12 nat ()) (L2 nat ()))
  ((h (im G (eq L11 L12))))
  (im G (iff (sublistAt n L11 L2) (sublistAt n L12 L2)))
()
(sublistAteqd (G n n L11 L12 L2 L2)
  (eqidd (G n))
  h
  (eqidd (G L2))))

(local theorem sublistAteq2 ((n nat ()) (L11 nat ()) (L12 nat ()) (L2 nat ())) ()
  (im (eq L11 L12) (iff (sublistAt n L11 L2) (sublistAt n L12 L2)))
()
(sublistAteq2d ((eq L11 L12) n L11 L12 L2)
  (id ((eq L11 L12)))))

(local theorem sublistAteq3d ((G wff ()) (n nat ()) (L1 nat ()) (L21 nat ()) (L22 nat ()))
  ((h (im G (eq L21 L22))))
  (im G (iff (sublistAt n L1 L21) (sublistAt n L1 L22)))
()
(sublistAteqd (G n n L1 L1 L21 L22)
  (eqidd (G n))
  (eqidd (G L1))
  h))

(local theorem sublistAteq3 ((n nat ()) (L1 nat ()) (L21 nat ()) (L22 nat ())) ()
  (im (eq L21 L22) (iff (sublistAt n L1 L21) (sublistAt n L1 L22)))
()
(sublistAteq3d ((eq L21 L22) n L1 L21 L22)
  (id ((eq L21 L22)))))

(local def grecaux1 ((K set ()) (x nat ()) (z nat ()) (n nat ())) (nat ())
((i nat) (u nat))
(recn z (slam u (lam i (app K (pr (sub x (suc u)) i)))) n))

(local theorem grecaux1eqd ((_G wff ()) (K1 set ()) (K2 set ()) (x1 nat ()) (x2 nat ()) (z1 nat ()) (z2 nat ()) (n1 nat ()) (n2 nat ()))
  ((hK (im _G (eqs K1 K2)))
   (hx (im _G (eq x1 x2)))
   (hz (im _G (eq z1 z2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (grecaux1 K1 x1 z1 n1) (grecaux1 K2 x2 z2 n2)))
((i nat) (u nat))
(:conv (im _G (eq (grecaux1 K1 x1 z1 n1) (grecaux1 K2 x2 z2 n2)))
  (im
    _G
    (eq
      (:unfold grecaux1 (K1 x1 z1 n1) (i u)
        (recn z1 (slam u (lam i (app K1 (pr (sub x1 (suc u)) i)))) n1))
      (:unfold grecaux1 (K2 x2 z2 n2) (i u)
        (recn z2 (slam u (lam i (app K2 (pr (sub x2 (suc u)) i)))) n2))))
  (recneqd (_G z1 z2 (slam u (lam i (app K1 (pr (sub x1 (suc u)) i)))) (slam u (lam i (app K2 (pr (sub x2 (suc u)) i)))) n1 n2)
    hz
    (slameqd (_G u (lam i (app K1 (pr (sub x1 (suc u)) i))) (lam i (app K2 (pr (sub x2 (suc u)) i))))
      (lameqd (_G i (app K1 (pr (sub x1 (suc u)) i)) (app K2 (pr (sub x2 (suc u)) i)))
        (appeqd (_G K1 K2 (pr (sub x1 (suc u)) i) (pr (sub x2 (suc u)) i))
          hK
          (preqd (_G (sub x1 (suc u)) (sub x2 (suc u)) i i)
            (subeqd (_G x1 x2 (suc u) (suc u))
              hx
              (eqidd (_G (suc u))))
            (eqidd (_G i))))))
    hn)))

(local theorem grecaux1eq ((K1 set ()) (K2 set ()) (x1 nat ()) (x2 nat ()) (z1 nat ()) (z2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eqs K1 K2) (im (eq x1 x2) (im (eq z1 z2) (im (eq n1 n2) (eq (grecaux1 K1 x1 z1 n1) (grecaux1 K2 x2 z2 n2))))))
()
(exp ((eqs K1 K2) (eq x1 x2) (im (eq z1 z2) (im (eq n1 n2) (eq (grecaux1 K1 x1 z1 n1) (grecaux1 K2 x2 z2 n2)))))
  (exp ((an (eqs K1 K2) (eq x1 x2)) (eq z1 z2) (im (eq n1 n2) (eq (grecaux1 K1 x1 z1 n1) (grecaux1 K2 x2 z2 n2))))
    (exp ((an (an (eqs K1 K2) (eq x1 x2)) (eq z1 z2)) (eq n1 n2) (eq (grecaux1 K1 x1 z1 n1) (grecaux1 K2 x2 z2 n2)))
      (grecaux1eqd ((an (an (an (eqs K1 K2) (eq x1 x2)) (eq z1 z2)) (eq n1 n2)) K1 K2 x1 x2 z1 z2 n1 n2)
        (anwl ((an (an (eqs K1 K2) (eq x1 x2)) (eq z1 z2)) (eq n1 n2) (eqs K1 K2))
          (anwl ((an (eqs K1 K2) (eq x1 x2)) (eq z1 z2) (eqs K1 K2))
            (anl ((eqs K1 K2) (eq x1 x2)))))
        (anwl ((an (an (eqs K1 K2) (eq x1 x2)) (eq z1 z2)) (eq n1 n2) (eq x1 x2))
          (anwl ((an (eqs K1 K2) (eq x1 x2)) (eq z1 z2) (eq x1 x2))
            (anr ((eqs K1 K2) (eq x1 x2)))))
        (anwl ((an (an (eqs K1 K2) (eq x1 x2)) (eq z1 z2)) (eq n1 n2) (eq z1 z2))
          (anr ((an (eqs K1 K2) (eq x1 x2)) (eq z1 z2))))
        (anr ((an (an (eqs K1 K2) (eq x1 x2)) (eq z1 z2)) (eq n1 n2))))))))

(local theorem grecaux1eq1d ((G wff ()) (K1 set ()) (K2 set ()) (x nat ()) (z nat ()) (n nat ()))
  ((h (im G (eqs K1 K2))))
  (im G (eq (grecaux1 K1 x z n) (grecaux1 K2 x z n)))
()
(grecaux1eqd (G K1 K2 x x z z n n)
  h
  (eqidd (G x))
  (eqidd (G z))
  (eqidd (G n))))

(local theorem grecaux1eq1 ((K1 set ()) (K2 set ()) (x nat ()) (z nat ()) (n nat ())) ()
  (im (eqs K1 K2) (eq (grecaux1 K1 x z n) (grecaux1 K2 x z n)))
()
(grecaux1eq1d ((eqs K1 K2) K1 K2 x z n)
  (id ((eqs K1 K2)))))

(local theorem grecaux1eq2d ((G wff ()) (K set ()) (x1 nat ()) (x2 nat ()) (z nat ()) (n nat ()))
  ((h (im G (eq x1 x2))))
  (im G (eq (grecaux1 K x1 z n) (grecaux1 K x2 z n)))
()
(grecaux1eqd (G K K x1 x2 z z n n)
  (eqsidd (G K))
  h
  (eqidd (G z))
  (eqidd (G n))))

(local theorem grecaux1eq2 ((K set ()) (x1 nat ()) (x2 nat ()) (z nat ()) (n nat ())) ()
  (im (eq x1 x2) (eq (grecaux1 K x1 z n) (grecaux1 K x2 z n)))
()
(grecaux1eq2d ((eq x1 x2) K x1 x2 z n)
  (id ((eq x1 x2)))))

(local theorem grecaux1eq3d ((G wff ()) (K set ()) (x nat ()) (z1 nat ()) (z2 nat ()) (n nat ()))
  ((h (im G (eq z1 z2))))
  (im G (eq (grecaux1 K x z1 n) (grecaux1 K x z2 n)))
()
(grecaux1eqd (G K K x x z1 z2 n n)
  (eqsidd (G K))
  (eqidd (G x))
  h
  (eqidd (G n))))

(local theorem grecaux1eq3 ((K set ()) (x nat ()) (z1 nat ()) (z2 nat ()) (n nat ())) ()
  (im (eq z1 z2) (eq (grecaux1 K x z1 n) (grecaux1 K x z2 n)))
()
(grecaux1eq3d ((eq z1 z2) K x z1 z2 n)
  (id ((eq z1 z2)))))

(local theorem grecaux1eq4d ((G wff ()) (K set ()) (x nat ()) (z nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (grecaux1 K x z n1) (grecaux1 K x z n2)))
()
(grecaux1eqd (G K K x x z z n1 n2)
  (eqsidd (G K))
  (eqidd (G x))
  (eqidd (G z))
  h))

(local theorem grecaux1eq4 ((K set ()) (x nat ()) (z nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (grecaux1 K x z n1) (grecaux1 K x z n2)))
()
(grecaux1eq4d ((eq n1 n2) K x z n1 n2)
  (id ((eq n1 n2)))))

(local theorem grecaux10 ((K set ()) (k nat ()) (x nat ())) ()
  (eq (grecaux1 K x k (d0)) k)
((x1 nat) (x2 nat))
(:conv (eq (grecaux1 K x k (d0)) k)
  (eq
    (:unfold grecaux1 (K x k (d0)) (x2 x1)
      (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (d0)))
    k)
  (recn0 ((slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) k))))

(local theorem grecaux1S ((K set ()) (k nat ()) (n nat ()) (x nat ())) ()
  (eq (grecaux1 K x k (suc n)) (app K (pr (sub x (suc n)) (grecaux1 K x k n))))
((x1 nat) (x2 nat))
(:conv (eq (grecaux1 K x k (suc n)) (app K (pr (sub x (suc n)) (grecaux1 K x k n))))
  (eq
    (:unfold grecaux1 (K x k (suc n)) (x2 x1)
      (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (suc n)))
    (app K (pr (sub x (suc n)) (grecaux1 K x k n))))
  (ax_mp ((eq (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))) (app K (pr (sub x (suc n)) (grecaux1 K x k n)))) (eq (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (suc n)) (app K (pr (sub x (suc n)) (grecaux1 K x k n)))))
    (ax_mp ((eq (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (suc n)) (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n)))) (im (eq (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))) (app K (pr (sub x (suc n)) (grecaux1 K x k n)))) (eq (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (suc n)) (app K (pr (sub x (suc n)) (grecaux1 K x k n))))))
      (eqtr ((recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (suc n)) (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))) (app K (pr (sub x (suc n)) (grecaux1 K x k n)))))
      (recnS ((slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n k)))
    (:conv (eq (app (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) (pr n (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n))) (app K (pr (sub x (suc n)) (grecaux1 K x k n))))
      (eq
        (app
          (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2))))
          (pr
            n
            (:sym (:unfold grecaux1 (K x k n) (x2 x1)
              (recn k (slam x1 (lam x2 (app K (pr (sub x (suc x1)) x2)))) n)))))
        (app K (pr (sub x (suc n)) (grecaux1 K x k n))))
      (appslame (n (grecaux1 K x k n) (app K (pr (sub x (suc n)) (grecaux1 K x k n))) x1 (lam x2 (app K (pr (sub x (suc x1)) x2))))
        (applamed ((eq x1 n) (grecaux1 K x k n) (app K (pr (sub x (suc n)) (grecaux1 K x k n))) x2 (app K (pr (sub x (suc x1)) x2)))
          (appeq2d ((an (eq x1 n) (eq x2 (grecaux1 K x k n))) K (pr (sub x (suc x1)) x2) (pr (sub x (suc n)) (grecaux1 K x k n)))
            (preqd ((an (eq x1 n) (eq x2 (grecaux1 K x k n))) (sub x (suc x1)) (sub x (suc n)) x2 (grecaux1 K x k n))
              (subeq2d ((an (eq x1 n) (eq x2 (grecaux1 K x k n))) x (suc x1) (suc n))
                (suceqd ((an (eq x1 n) (eq x2 (grecaux1 K x k n))) x1 n)
                  (anl ((eq x1 n) (eq x2 (grecaux1 K x k n))))))
              (anr ((eq x1 n) (eq x2 (grecaux1 K x k n))))))))))))

(local theorem grecaux1Sx ((K set ()) (k nat ()) (n nat ()) (x nat ())) ()
  (eq (grecaux1 K (suc x) k (suc n)) (grecaux1 K x (app K (pr x k)) n))
((a nat) (b nat))
(ind (a b n (eq (grecaux1 K (suc x) k (suc a)) (grecaux1 K x (app K (pr x k)) a)) (eq (grecaux1 K (suc x) k (suc (d0))) (grecaux1 K x (app K (pr x k)) (d0))) (eq (grecaux1 K (suc x) k (suc n)) (grecaux1 K x (app K (pr x k)) n)) (eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) (eq (grecaux1 K (suc x) k (suc (suc b))) (grecaux1 K x (app K (pr x k)) (suc b))))
  (eqeqd ((eq a (d0)) (grecaux1 K (suc x) k (suc a)) (grecaux1 K (suc x) k (suc (d0))) (grecaux1 K x (app K (pr x k)) a) (grecaux1 K x (app K (pr x k)) (d0)))
    (grecaux1eq4d ((eq a (d0)) K (suc x) k (suc a) (suc (d0)))
      (suceq (a (d0))))
    (grecaux1eq4 (K x (app K (pr x k)) a (d0))))
  (eqeqd ((eq a b) (grecaux1 K (suc x) k (suc a)) (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) a) (grecaux1 K x (app K (pr x k)) b))
    (grecaux1eq4d ((eq a b) K (suc x) k (suc a) (suc b))
      (suceq (a b)))
    (grecaux1eq4 (K x (app K (pr x k)) a b)))
  (eqeqd ((eq a (suc b)) (grecaux1 K (suc x) k (suc a)) (grecaux1 K (suc x) k (suc (suc b))) (grecaux1 K x (app K (pr x k)) a) (grecaux1 K x (app K (pr x k)) (suc b)))
    (grecaux1eq4d ((eq a (suc b)) K (suc x) k (suc a) (suc (suc b)))
      (suceq (a (suc b))))
    (grecaux1eq4 (K x (app K (pr x k)) a (suc b))))
  (eqeqd ((eq a n) (grecaux1 K (suc x) k (suc a)) (grecaux1 K (suc x) k (suc n)) (grecaux1 K x (app K (pr x k)) a) (grecaux1 K x (app K (pr x k)) n))
    (grecaux1eq4d ((eq a n) K (suc x) k (suc a) (suc n))
      (suceq (a n)))
    (grecaux1eq4 (K x (app K (pr x k)) a n)))
  (ax_mp ((eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0))) (eq (grecaux1 K (suc x) k (suc (d0))) (grecaux1 K x (app K (pr x k)) (d0))))
    (ax_mp ((eq (grecaux1 K (suc x) k (suc (d0))) (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))))) (im (eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0))) (eq (grecaux1 K (suc x) k (suc (d0))) (grecaux1 K x (app K (pr x k)) (d0)))))
      (eqtr ((grecaux1 K (suc x) k (suc (d0))) (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0))))
      (grecaux1S (K k (d0) (suc x))))
    (ax_mp ((eq (grecaux1 K x (app K (pr x k)) (d0)) (app K (pr x k))) (eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0))))
      (ax_mp ((eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (app K (pr x k))) (im (eq (grecaux1 K x (app K (pr x k)) (d0)) (app K (pr x k))) (eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (grecaux1 K x (app K (pr x k)) (d0)))))
        (eqtr4 ((app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (app K (pr x k)) (grecaux1 K x (app K (pr x k)) (d0))))
        (ax_mp ((eq (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))) (pr x k)) (eq (app K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0)))) (app K (pr x k))))
          (appeq2 (K (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))) (pr x k)))
          (ax_mp ((eq (grecaux1 K (suc x) k (d0)) k) (eq (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))) (pr x k)))
            (ax_mp ((eq (sub (suc x) (suc (d0))) x) (im (eq (grecaux1 K (suc x) k (d0)) k) (eq (pr (sub (suc x) (suc (d0))) (grecaux1 K (suc x) k (d0))) (pr x k))))
              (preq ((sub (suc x) (suc (d0))) x (grecaux1 K (suc x) k (d0)) k))
              (ax_mp ((eq (sub x (d0)) x) (eq (sub (suc x) (suc (d0))) x))
                (ax_mp ((eq (sub (suc x) (suc (d0))) (sub x (d0))) (im (eq (sub x (d0)) x) (eq (sub (suc x) (suc (d0))) x)))
                  (eqtr ((sub (suc x) (suc (d0))) (sub x (d0)) x))
                  (subSS (x (d0))))
                (sub02 (x))))
            (grecaux10 (K k (suc x))))))
      (grecaux10 (K (app K (pr x k)) x))))
  (eqtr4g ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) (app K (pr (sub (suc x) (suc (suc b))) (grecaux1 K (suc x) k (suc b)))) (app K (pr (sub x (suc b)) (grecaux1 K x (app K (pr x k)) b))) (grecaux1 K (suc x) k (suc (suc b))) (grecaux1 K x (app K (pr x k)) (suc b)))
    (grecaux1S (K k (suc b) (suc x)))
    (grecaux1S (K (app K (pr x k)) b x))
    (appeq2d ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) K (pr (sub (suc x) (suc (suc b))) (grecaux1 K (suc x) k (suc b))) (pr (sub x (suc b)) (grecaux1 K x (app K (pr x k)) b)))
      (preqd ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) (sub (suc x) (suc (suc b))) (sub x (suc b)) (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b))
        (a1i ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)) (eq (sub (suc x) (suc (suc b))) (sub x (suc b))))
          (subSS (x (suc b))))
        (id ((eq (grecaux1 K (suc x) k (suc b)) (grecaux1 K x (app K (pr x k)) b)))))))))

(local def grecaux2 ((z nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (k nat ())) (nat ())
((i nat) (u nat))
(recn z (slam u (lam i (app F (pr u (pr (grecaux1 K x k (sub x (suc u))) i))))) n))

(local theorem grecaux2eqd ((_G wff ()) (z1 nat ()) (z2 nat ()) (K1 set ()) (K2 set ()) (F1 set ()) (F2 set ()) (x1 nat ()) (x2 nat ()) (n1 nat ()) (n2 nat ()) (k1 nat ()) (k2 nat ()))
  ((hz (im _G (eq z1 z2)))
   (hK (im _G (eqs K1 K2)))
   (hF (im _G (eqs F1 F2)))
   (hx (im _G (eq x1 x2)))
   (hn (im _G (eq n1 n2)))
   (hk (im _G (eq k1 k2))))
  (im _G (eq (grecaux2 z1 K1 F1 x1 n1 k1) (grecaux2 z2 K2 F2 x2 n2 k2)))
((i nat) (u nat))
(:conv (im _G (eq (grecaux2 z1 K1 F1 x1 n1 k1) (grecaux2 z2 K2 F2 x2 n2 k2)))
  (im
    _G
    (eq
      (:unfold grecaux2 (z1 K1 F1 x1 n1 k1) (i u)
        (recn z1 (slam u (lam i (app F1 (pr u (pr (grecaux1 K1 x1 k1 (sub x1 (suc u))) i))))) n1))
      (:unfold grecaux2 (z2 K2 F2 x2 n2 k2) (i u)
        (recn z2 (slam u (lam i (app F2 (pr u (pr (grecaux1 K2 x2 k2 (sub x2 (suc u))) i))))) n2))))
  (recneqd (_G z1 z2 (slam u (lam i (app F1 (pr u (pr (grecaux1 K1 x1 k1 (sub x1 (suc u))) i))))) (slam u (lam i (app F2 (pr u (pr (grecaux1 K2 x2 k2 (sub x2 (suc u))) i))))) n1 n2)
    hz
    (slameqd (_G u (lam i (app F1 (pr u (pr (grecaux1 K1 x1 k1 (sub x1 (suc u))) i)))) (lam i (app F2 (pr u (pr (grecaux1 K2 x2 k2 (sub x2 (suc u))) i)))))
      (lameqd (_G i (app F1 (pr u (pr (grecaux1 K1 x1 k1 (sub x1 (suc u))) i))) (app F2 (pr u (pr (grecaux1 K2 x2 k2 (sub x2 (suc u))) i))))
        (appeqd (_G F1 F2 (pr u (pr (grecaux1 K1 x1 k1 (sub x1 (suc u))) i)) (pr u (pr (grecaux1 K2 x2 k2 (sub x2 (suc u))) i)))
          hF
          (preqd (_G u u (pr (grecaux1 K1 x1 k1 (sub x1 (suc u))) i) (pr (grecaux1 K2 x2 k2 (sub x2 (suc u))) i))
            (eqidd (_G u))
            (preqd (_G (grecaux1 K1 x1 k1 (sub x1 (suc u))) (grecaux1 K2 x2 k2 (sub x2 (suc u))) i i)
              (grecaux1eqd (_G K1 K2 x1 x2 k1 k2 (sub x1 (suc u)) (sub x2 (suc u)))
                hK
                hx
                hk
                (subeqd (_G x1 x2 (suc u) (suc u))
                  hx
                  (eqidd (_G (suc u)))))
              (eqidd (_G i)))))))
    hn)))

(local theorem grecaux2eq ((z1 nat ()) (z2 nat ()) (K1 set ()) (K2 set ()) (F1 set ()) (F2 set ()) (x1 nat ()) (x2 nat ()) (n1 nat ()) (n2 nat ()) (k1 nat ()) (k2 nat ())) ()
  (im (eq z1 z2) (im (eqs K1 K2) (im (eqs F1 F2) (im (eq x1 x2) (im (eq n1 n2) (im (eq k1 k2) (eq (grecaux2 z1 K1 F1 x1 n1 k1) (grecaux2 z2 K2 F2 x2 n2 k2))))))))
()
(exp ((eq z1 z2) (eqs K1 K2) (im (eqs F1 F2) (im (eq x1 x2) (im (eq n1 n2) (im (eq k1 k2) (eq (grecaux2 z1 K1 F1 x1 n1 k1) (grecaux2 z2 K2 F2 x2 n2 k2)))))))
  (exp ((an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2) (im (eq x1 x2) (im (eq n1 n2) (im (eq k1 k2) (eq (grecaux2 z1 K1 F1 x1 n1 k1) (grecaux2 z2 K2 F2 x2 n2 k2))))))
    (exp ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2) (im (eq n1 n2) (im (eq k1 k2) (eq (grecaux2 z1 K1 F1 x1 n1 k1) (grecaux2 z2 K2 F2 x2 n2 k2)))))
      (exp ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2) (im (eq k1 k2) (eq (grecaux2 z1 K1 F1 x1 n1 k1) (grecaux2 z2 K2 F2 x2 n2 k2))))
        (exp ((an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2)) (eq k1 k2) (eq (grecaux2 z1 K1 F1 x1 n1 k1) (grecaux2 z2 K2 F2 x2 n2 k2)))
          (grecaux2eqd ((an (an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2)) (eq k1 k2)) z1 z2 K1 K2 F1 F2 x1 x2 n1 n2 k1 k2)
            (anwl ((an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2)) (eq k1 k2) (eq z1 z2))
              (anwl ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2) (eq z1 z2))
                (anwl ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2) (eq z1 z2))
                  (anwl ((an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2) (eq z1 z2))
                    (anl ((eq z1 z2) (eqs K1 K2)))))))
            (anwl ((an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2)) (eq k1 k2) (eqs K1 K2))
              (anwl ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2) (eqs K1 K2))
                (anwl ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2) (eqs K1 K2))
                  (anwl ((an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2) (eqs K1 K2))
                    (anr ((eq z1 z2) (eqs K1 K2)))))))
            (anwl ((an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2)) (eq k1 k2) (eqs F1 F2))
              (anwl ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2) (eqs F1 F2))
                (anwl ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2) (eqs F1 F2))
                  (anr ((an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2))))))
            (anwl ((an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2)) (eq k1 k2) (eq x1 x2))
              (anwl ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2) (eq x1 x2))
                (anr ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)))))
            (anwl ((an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2)) (eq k1 k2) (eq n1 n2))
              (anr ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2))))
            (anr ((an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq x1 x2)) (eq n1 n2)) (eq k1 k2))))))))))

(local theorem grecaux2eq1d ((G wff ()) (z1 nat ()) (z2 nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (k nat ()))
  ((h (im G (eq z1 z2))))
  (im G (eq (grecaux2 z1 K F x n k) (grecaux2 z2 K F x n k)))
()
(grecaux2eqd (G z1 z2 K K F F x x n n k k)
  h
  (eqsidd (G K))
  (eqsidd (G F))
  (eqidd (G x))
  (eqidd (G n))
  (eqidd (G k))))

(local theorem grecaux2eq1 ((z1 nat ()) (z2 nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (k nat ())) ()
  (im (eq z1 z2) (eq (grecaux2 z1 K F x n k) (grecaux2 z2 K F x n k)))
()
(grecaux2eq1d ((eq z1 z2) z1 z2 K F x n k)
  (id ((eq z1 z2)))))

(local theorem grecaux2eq2d ((G wff ()) (z nat ()) (K1 set ()) (K2 set ()) (F set ()) (x nat ()) (n nat ()) (k nat ()))
  ((h (im G (eqs K1 K2))))
  (im G (eq (grecaux2 z K1 F x n k) (grecaux2 z K2 F x n k)))
()
(grecaux2eqd (G z z K1 K2 F F x x n n k k)
  (eqidd (G z))
  h
  (eqsidd (G F))
  (eqidd (G x))
  (eqidd (G n))
  (eqidd (G k))))

(local theorem grecaux2eq2 ((z nat ()) (K1 set ()) (K2 set ()) (F set ()) (x nat ()) (n nat ()) (k nat ())) ()
  (im (eqs K1 K2) (eq (grecaux2 z K1 F x n k) (grecaux2 z K2 F x n k)))
()
(grecaux2eq2d ((eqs K1 K2) z K1 K2 F x n k)
  (id ((eqs K1 K2)))))

(local theorem grecaux2eq3d ((G wff ()) (z nat ()) (K set ()) (F1 set ()) (F2 set ()) (x nat ()) (n nat ()) (k nat ()))
  ((h (im G (eqs F1 F2))))
  (im G (eq (grecaux2 z K F1 x n k) (grecaux2 z K F2 x n k)))
()
(grecaux2eqd (G z z K K F1 F2 x x n n k k)
  (eqidd (G z))
  (eqsidd (G K))
  h
  (eqidd (G x))
  (eqidd (G n))
  (eqidd (G k))))

(local theorem grecaux2eq3 ((z nat ()) (K set ()) (F1 set ()) (F2 set ()) (x nat ()) (n nat ()) (k nat ())) ()
  (im (eqs F1 F2) (eq (grecaux2 z K F1 x n k) (grecaux2 z K F2 x n k)))
()
(grecaux2eq3d ((eqs F1 F2) z K F1 F2 x n k)
  (id ((eqs F1 F2)))))

(local theorem grecaux2eq4d ((G wff ()) (z nat ()) (K set ()) (F set ()) (x1 nat ()) (x2 nat ()) (n nat ()) (k nat ()))
  ((h (im G (eq x1 x2))))
  (im G (eq (grecaux2 z K F x1 n k) (grecaux2 z K F x2 n k)))
()
(grecaux2eqd (G z z K K F F x1 x2 n n k k)
  (eqidd (G z))
  (eqsidd (G K))
  (eqsidd (G F))
  h
  (eqidd (G n))
  (eqidd (G k))))

(local theorem grecaux2eq4 ((z nat ()) (K set ()) (F set ()) (x1 nat ()) (x2 nat ()) (n nat ()) (k nat ())) ()
  (im (eq x1 x2) (eq (grecaux2 z K F x1 n k) (grecaux2 z K F x2 n k)))
()
(grecaux2eq4d ((eq x1 x2) z K F x1 x2 n k)
  (id ((eq x1 x2)))))

(local theorem grecaux2eq5d ((G wff ()) (z nat ()) (K set ()) (F set ()) (x nat ()) (n1 nat ()) (n2 nat ()) (k nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (grecaux2 z K F x n1 k) (grecaux2 z K F x n2 k)))
()
(grecaux2eqd (G z z K K F F x x n1 n2 k k)
  (eqidd (G z))
  (eqsidd (G K))
  (eqsidd (G F))
  (eqidd (G x))
  h
  (eqidd (G k))))

(local theorem grecaux2eq5 ((z nat ()) (K set ()) (F set ()) (x nat ()) (n1 nat ()) (n2 nat ()) (k nat ())) ()
  (im (eq n1 n2) (eq (grecaux2 z K F x n1 k) (grecaux2 z K F x n2 k)))
()
(grecaux2eq5d ((eq n1 n2) z K F x n1 n2 k)
  (id ((eq n1 n2)))))

(local theorem grecaux2eq6d ((G wff ()) (z nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (k1 nat ()) (k2 nat ()))
  ((h (im G (eq k1 k2))))
  (im G (eq (grecaux2 z K F x n k1) (grecaux2 z K F x n k2)))
()
(grecaux2eqd (G z z K K F F x x n n k1 k2)
  (eqidd (G z))
  (eqsidd (G K))
  (eqsidd (G F))
  (eqidd (G x))
  (eqidd (G n))
  h))

(local theorem grecaux2eq6 ((z nat ()) (K set ()) (F set ()) (x nat ()) (n nat ()) (k1 nat ()) (k2 nat ())) ()
  (im (eq k1 k2) (eq (grecaux2 z K F x n k1) (grecaux2 z K F x n k2)))
()
(grecaux2eq6d ((eq k1 k2) z K F x n k1 k2)
  (id ((eq k1 k2)))))

(local theorem grecaux20 ((F set ()) (K set ()) (k nat ()) (x nat ()) (z nat ())) ()
  (eq (grecaux2 z K F x (d0) k) z)
((x1 nat) (x2 nat))
(:conv (eq (grecaux2 z K F x (d0) k) z)
  (eq
    (:unfold grecaux2 (z K F x (d0) k) (x2 x1)
      (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (d0)))
    z)
  (recn0 ((slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) z))))

(local theorem grecaux2S ((F set ()) (K set ()) (k nat ()) (n nat ()) (x nat ()) (z nat ())) ()
  (eq (grecaux2 z K F x (suc n) k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))
((x1 nat) (x2 nat))
(:let H1 (anl ((eq x1 n) (eq x2 (grecaux2 z K F x n k))))
(:conv (eq (grecaux2 z K F x (suc n) k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))
  (eq
    (:unfold grecaux2 (z K F x (suc n) k) (x2 x1)
      (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (suc n)))
    (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))
  (ax_mp ((eq (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))) (eq (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (suc n)) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))))
    (ax_mp ((eq (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (suc n)) (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n)))) (im (eq (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))) (eq (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (suc n)) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))))
      (eqtr ((recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (suc n)) (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))))
      (recnS ((slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n z)))
    (:conv (eq (app (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) (pr n (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n))) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))
      (eq
        (app
          (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2)))))
          (pr
            n
            (:sym (:unfold grecaux2 (z K F x n k) (x2 x1)
              (recn z (slam x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))) n)))))
        (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))))
      (appslame (n (grecaux2 z K F x n k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))) x1 (lam x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2)))))
        (applamed ((eq x1 n) (grecaux2 z K F x n k) (app F (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))) x2 (app F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2))))
          (appeq2d ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) F (pr x1 (pr (grecaux1 K x k (sub x (suc x1))) x2)) (pr n (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k))))
            (preqd ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) x1 n (pr (grecaux1 K x k (sub x (suc x1))) x2) (pr (grecaux1 K x k (sub x (suc n))) (grecaux2 z K F x n k)))
              H1
              (preqd ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) (grecaux1 K x k (sub x (suc x1))) (grecaux1 K x k (sub x (suc n))) x2 (grecaux2 z K F x n k))
                (grecaux1eq4d ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) K x k (sub x (suc x1)) (sub x (suc n)))
                  (subeq2d ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) x (suc x1) (suc n))
                    (suceqd ((an (eq x1 n) (eq x2 (grecaux2 z K F x n k))) x1 n)
                      H1)))
                (anr ((eq x1 n) (eq x2 (grecaux2 z K F x n k))))))))))))))

(local theorem grecaux2Sx ((F set ()) (K set ()) (k nat ()) (n nat ()) (x nat ()) (z nat ())) ()
  (im (le n x) (eq (grecaux2 z K F (suc x) n k) (grecaux2 z K F x n (app K (pr x k)))))
((a nat) (b nat))
(indlt ((le n x) a b n (eq (grecaux2 z K F (suc x) a k) (grecaux2 z K F x a (app K (pr x k)))) (eq (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x (d0) (app K (pr x k)))) (eq (grecaux2 z K F (suc x) n k) (grecaux2 z K F x n (app K (pr x k)))) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k)))) (eq (grecaux2 z K F (suc x) (suc b) k) (grecaux2 z K F x (suc b) (app K (pr x k)))))
  (eqeqd ((eq a (d0)) (grecaux2 z K F (suc x) a k) (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x a (app K (pr x k))) (grecaux2 z K F x (d0) (app K (pr x k))))
    (grecaux2eq5 (z K F (suc x) a (d0) k))
    (grecaux2eq5 (z K F x a (d0) (app K (pr x k)))))
  (eqeqd ((eq a b) (grecaux2 z K F (suc x) a k) (grecaux2 z K F (suc x) b k) (grecaux2 z K F x a (app K (pr x k))) (grecaux2 z K F x b (app K (pr x k))))
    (grecaux2eq5 (z K F (suc x) a b k))
    (grecaux2eq5 (z K F x a b (app K (pr x k)))))
  (eqeqd ((eq a (suc b)) (grecaux2 z K F (suc x) a k) (grecaux2 z K F (suc x) (suc b) k) (grecaux2 z K F x a (app K (pr x k))) (grecaux2 z K F x (suc b) (app K (pr x k))))
    (grecaux2eq5 (z K F (suc x) a (suc b) k))
    (grecaux2eq5 (z K F x a (suc b) (app K (pr x k)))))
  (eqeqd ((eq a n) (grecaux2 z K F (suc x) a k) (grecaux2 z K F (suc x) n k) (grecaux2 z K F x a (app K (pr x k))) (grecaux2 z K F x n (app K (pr x k))))
    (grecaux2eq5 (z K F (suc x) a n k))
    (grecaux2eq5 (z K F x a n (app K (pr x k)))))
  (a1i ((le n x) (eq (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x (d0) (app K (pr x k)))))
    (ax_mp ((eq (grecaux2 z K F x (d0) (app K (pr x k))) z) (eq (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x (d0) (app K (pr x k)))))
      (ax_mp ((eq (grecaux2 z K F (suc x) (d0) k) z) (im (eq (grecaux2 z K F x (d0) (app K (pr x k))) z) (eq (grecaux2 z K F (suc x) (d0) k) (grecaux2 z K F x (d0) (app K (pr x k))))))
        (eqtr4 ((grecaux2 z K F (suc x) (d0) k) z (grecaux2 z K F x (d0) (app K (pr x k)))))
        (grecaux20 (F K k (suc x) z)))
      (grecaux20 (F K (app K (pr x k)) x z))))
  (eqtr4g ((an (an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))) (app F (pr b (pr (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux2 z K F (suc x) b k)))) (app F (pr b (pr (grecaux1 K x (app K (pr x k)) (sub x (suc b))) (grecaux2 z K F x b (app K (pr x k)))))) (grecaux2 z K F (suc x) (suc b) k) (grecaux2 z K F x (suc b) (app K (pr x k))))
    (grecaux2S (F K k b (suc x) z))
    (grecaux2S (F K (app K (pr x k)) b x z))
    (appeq2d ((an (an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))) F (pr b (pr (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux2 z K F (suc x) b k))) (pr b (pr (grecaux1 K x (app K (pr x k)) (sub x (suc b))) (grecaux2 z K F x b (app K (pr x k))))))
      (preq2d ((an (an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))) b (pr (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux2 z K F (suc x) b k)) (pr (grecaux1 K x (app K (pr x k)) (sub x (suc b))) (grecaux2 z K F x b (app K (pr x k)))))
        (preqd ((an (an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))) (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux1 K x (app K (pr x k)) (sub x (suc b))) (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))
          (anwl ((an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k)))) (eq (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux1 K x (app K (pr x k)) (sub x (suc b)))))
            (syl6eq ((an (le n x) (lt b n)) (grecaux1 K (suc x) k (sub (suc x) (suc b))) (grecaux1 K (suc x) k (suc (sub x (suc b)))) (grecaux1 K x (app K (pr x k)) (sub x (suc b))))
              (grecaux1Sx (K k (sub x (suc b)) x))
              (grecaux1eq4d ((an (le n x) (lt b n)) K (suc x) k (sub (suc x) (suc b)) (suc (sub x (suc b))))
                (syl5eq ((an (le n x) (lt b n)) (sub (suc x) (suc b)) (sub x b) (suc (sub x (suc b))))
                  (subSS (x b))
                  (syl ((an (le n x) (lt b n)) (eq (add (suc (sub x (suc b))) b) x) (eq (sub x b) (suc (sub x (suc b)))))
                    (eqsub1 ((suc (sub x (suc b))) b x))
                    (syl5eq ((an (le n x) (lt b n)) (add (suc (sub x (suc b))) b) (add (sub x (suc b)) (suc b)) x)
                      (addSass ((sub x (suc b)) b))
                      (syl ((an (le n x) (lt b n)) (le (suc b) x) (eq (add (sub x (suc b)) (suc b)) x))
                        (npcan (x (suc b)))
                        (impcom ((lt b n) (le n x) (le (suc b) x))
                          (:conv (im (lt b n) (im (le n x) (le (suc b) x)))
                            (im
                              (:unfold lt (b n) ()
                                (le (suc b) n))
                              (im (le n x) (le (suc b) x)))
                            (letr ((suc b) n x)))))))))))
          (anr ((an (le n x) (lt b n)) (eq (grecaux2 z K F (suc x) b k) (grecaux2 z K F x b (app K (pr x k))))))))))))

(local def grec ((z nat ()) (K set ()) (F set ()) (n nat ()) (k nat ())) (nat ())
()
(grecaux2 z K F n n k))

(local theorem greceqd ((_G wff ()) (z1 nat ()) (z2 nat ()) (K1 set ()) (K2 set ()) (F1 set ()) (F2 set ()) (n1 nat ()) (n2 nat ()) (k1 nat ()) (k2 nat ()))
  ((hz (im _G (eq z1 z2)))
   (hK (im _G (eqs K1 K2)))
   (hF (im _G (eqs F1 F2)))
   (hn (im _G (eq n1 n2)))
   (hk (im _G (eq k1 k2))))
  (im _G (eq (grec z1 K1 F1 n1 k1) (grec z2 K2 F2 n2 k2)))
()
(:conv (im _G (eq (grec z1 K1 F1 n1 k1) (grec z2 K2 F2 n2 k2)))
  (im
    _G
    (eq
      (:unfold grec (z1 K1 F1 n1 k1) ()
        (grecaux2 z1 K1 F1 n1 n1 k1))
      (:unfold grec (z2 K2 F2 n2 k2) ()
        (grecaux2 z2 K2 F2 n2 n2 k2))))
  (grecaux2eqd (_G z1 z2 K1 K2 F1 F2 n1 n2 n1 n2 k1 k2)
    hz
    hK
    hF
    hn
    hn
    hk)))

(local theorem greceq ((z1 nat ()) (z2 nat ()) (K1 set ()) (K2 set ()) (F1 set ()) (F2 set ()) (n1 nat ()) (n2 nat ()) (k1 nat ()) (k2 nat ())) ()
  (im (eq z1 z2) (im (eqs K1 K2) (im (eqs F1 F2) (im (eq n1 n2) (im (eq k1 k2) (eq (grec z1 K1 F1 n1 k1) (grec z2 K2 F2 n2 k2)))))))
()
(exp ((eq z1 z2) (eqs K1 K2) (im (eqs F1 F2) (im (eq n1 n2) (im (eq k1 k2) (eq (grec z1 K1 F1 n1 k1) (grec z2 K2 F2 n2 k2))))))
  (exp ((an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2) (im (eq n1 n2) (im (eq k1 k2) (eq (grec z1 K1 F1 n1 k1) (grec z2 K2 F2 n2 k2)))))
    (exp ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2) (im (eq k1 k2) (eq (grec z1 K1 F1 n1 k1) (grec z2 K2 F2 n2 k2))))
      (exp ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2)) (eq k1 k2) (eq (grec z1 K1 F1 n1 k1) (grec z2 K2 F2 n2 k2)))
        (greceqd ((an (an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2)) (eq k1 k2)) z1 z2 K1 K2 F1 F2 n1 n2 k1 k2)
          (anwl ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2)) (eq k1 k2) (eq z1 z2))
            (anwl ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2) (eq z1 z2))
              (anwl ((an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2) (eq z1 z2))
                (anl ((eq z1 z2) (eqs K1 K2))))))
          (anwl ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2)) (eq k1 k2) (eqs K1 K2))
            (anwl ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2) (eqs K1 K2))
              (anwl ((an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2) (eqs K1 K2))
                (anr ((eq z1 z2) (eqs K1 K2))))))
          (anwl ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2)) (eq k1 k2) (eqs F1 F2))
            (anwl ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2) (eqs F1 F2))
              (anr ((an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)))))
          (anwl ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2)) (eq k1 k2) (eq n1 n2))
            (anr ((an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2))))
          (anr ((an (an (an (eq z1 z2) (eqs K1 K2)) (eqs F1 F2)) (eq n1 n2)) (eq k1 k2)))))))))

(local theorem greceq1d ((G wff ()) (z1 nat ()) (z2 nat ()) (K set ()) (F set ()) (n nat ()) (k nat ()))
  ((h (im G (eq z1 z2))))
  (im G (eq (grec z1 K F n k) (grec z2 K F n k)))
()
(greceqd (G z1 z2 K K F F n n k k)
  h
  (eqsidd (G K))
  (eqsidd (G F))
  (eqidd (G n))
  (eqidd (G k))))

(local theorem greceq1 ((z1 nat ()) (z2 nat ()) (K set ()) (F set ()) (n nat ()) (k nat ())) ()
  (im (eq z1 z2) (eq (grec z1 K F n k) (grec z2 K F n k)))
()
(greceq1d ((eq z1 z2) z1 z2 K F n k)
  (id ((eq z1 z2)))))

(local theorem greceq2d ((G wff ()) (z nat ()) (K1 set ()) (K2 set ()) (F set ()) (n nat ()) (k nat ()))
  ((h (im G (eqs K1 K2))))
  (im G (eq (grec z K1 F n k) (grec z K2 F n k)))
()
(greceqd (G z z K1 K2 F F n n k k)
  (eqidd (G z))
  h
  (eqsidd (G F))
  (eqidd (G n))
  (eqidd (G k))))

(local theorem greceq2 ((z nat ()) (K1 set ()) (K2 set ()) (F set ()) (n nat ()) (k nat ())) ()
  (im (eqs K1 K2) (eq (grec z K1 F n k) (grec z K2 F n k)))
()
(greceq2d ((eqs K1 K2) z K1 K2 F n k)
  (id ((eqs K1 K2)))))

(local theorem greceq3d ((G wff ()) (z nat ()) (K set ()) (F1 set ()) (F2 set ()) (n nat ()) (k nat ()))
  ((h (im G (eqs F1 F2))))
  (im G (eq (grec z K F1 n k) (grec z K F2 n k)))
()
(greceqd (G z z K K F1 F2 n n k k)
  (eqidd (G z))
  (eqsidd (G K))
  h
  (eqidd (G n))
  (eqidd (G k))))

(local theorem greceq3 ((z nat ()) (K set ()) (F1 set ()) (F2 set ()) (n nat ()) (k nat ())) ()
  (im (eqs F1 F2) (eq (grec z K F1 n k) (grec z K F2 n k)))
()
(greceq3d ((eqs F1 F2) z K F1 F2 n k)
  (id ((eqs F1 F2)))))

(local theorem greceq4d ((G wff ()) (z nat ()) (K set ()) (F set ()) (n1 nat ()) (n2 nat ()) (k nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (grec z K F n1 k) (grec z K F n2 k)))
()
(greceqd (G z z K K F F n1 n2 k k)
  (eqidd (G z))
  (eqsidd (G K))
  (eqsidd (G F))
  h
  (eqidd (G k))))

(local theorem greceq4 ((z nat ()) (K set ()) (F set ()) (n1 nat ()) (n2 nat ()) (k nat ())) ()
  (im (eq n1 n2) (eq (grec z K F n1 k) (grec z K F n2 k)))
()
(greceq4d ((eq n1 n2) z K F n1 n2 k)
  (id ((eq n1 n2)))))

(local theorem greceq5d ((G wff ()) (z nat ()) (K set ()) (F set ()) (n nat ()) (k1 nat ()) (k2 nat ()))
  ((h (im G (eq k1 k2))))
  (im G (eq (grec z K F n k1) (grec z K F n k2)))
()
(greceqd (G z z K K F F n n k1 k2)
  (eqidd (G z))
  (eqsidd (G K))
  (eqsidd (G F))
  (eqidd (G n))
  h))

(local theorem greceq5 ((z nat ()) (K set ()) (F set ()) (n nat ()) (k1 nat ()) (k2 nat ())) ()
  (im (eq k1 k2) (eq (grec z K F n k1) (grec z K F n k2)))
()
(greceq5d ((eq k1 k2) z K F n k1 k2)
  (id ((eq k1 k2)))))

(local theorem grec0 ((F set ()) (K set ()) (k nat ()) (z nat ())) ()
  (eq (grec z K F (d0) k) z)
()
(:conv (eq (grec z K F (d0) k) z)
  (eq
    (:unfold grec (z K F (d0) k) ()
      (grecaux2 z K F (d0) (d0) k))
    z)
  (grecaux20 (F K k (d0) z))))

(local theorem grecS ((F set ()) (K set ()) (k nat ()) (n nat ()) (z nat ())) ()
  (eq (grec z K F (suc n) k) (app F (pr n (pr k (grec z K F n (app K (pr n k)))))))
()
(:conv (eq (grec z K F (suc n) k) (app F (pr n (pr k (grec z K F n (app K (pr n k)))))))
  (eq
    (:unfold grec (z K F (suc n) k) ()
      (grecaux2 z K F (suc n) (suc n) k))
    (app
      F
      (pr
        n
        (pr
          k
          (:unfold grec (z K F n (app K (pr n k))) ()
            (grecaux2 z K F n n (app K (pr n k))))))))
  (ax_mp ((eq (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))) (app F (pr n (pr k (grecaux2 z K F n n (app K (pr n k))))))) (eq (grecaux2 z K F (suc n) (suc n) k) (app F (pr n (pr k (grecaux2 z K F n n (app K (pr n k))))))))
    (ax_mp ((eq (grecaux2 z K F (suc n) (suc n) k) (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k))))) (im (eq (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))) (app F (pr n (pr k (grecaux2 z K F n n (app K (pr n k))))))) (eq (grecaux2 z K F (suc n) (suc n) k) (app F (pr n (pr k (grecaux2 z K F n n (app K (pr n k)))))))))
      (eqtr ((grecaux2 z K F (suc n) (suc n) k) (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))) (app F (pr n (pr k (grecaux2 z K F n n (app K (pr n k))))))))
      (grecaux2S (F K k n (suc n) z)))
    (ax_mp ((eq (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k))) (pr n (pr k (grecaux2 z K F n n (app K (pr n k)))))) (eq (app F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)))) (app F (pr n (pr k (grecaux2 z K F n n (app K (pr n k))))))))
      (appeq2 (F (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k))) (pr n (pr k (grecaux2 z K F n n (app K (pr n k)))))))
      (ax_mp ((eq (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)) (pr k (grecaux2 z K F n n (app K (pr n k))))) (eq (pr n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k))) (pr n (pr k (grecaux2 z K F n n (app K (pr n k)))))))
        (preq2 (n (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)) (pr k (grecaux2 z K F n n (app K (pr n k))))))
        (ax_mp ((eq (grecaux2 z K F (suc n) n k) (grecaux2 z K F n n (app K (pr n k)))) (eq (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)) (pr k (grecaux2 z K F n n (app K (pr n k))))))
          (ax_mp ((eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) k) (im (eq (grecaux2 z K F (suc n) n k) (grecaux2 z K F n n (app K (pr n k)))) (eq (pr (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux2 z K F (suc n) n k)) (pr k (grecaux2 z K F n n (app K (pr n k)))))))
            (preq ((grecaux1 K (suc n) k (sub (suc n) (suc n))) k (grecaux2 z K F (suc n) n k) (grecaux2 z K F n n (app K (pr n k)))))
            (ax_mp ((eq (grecaux1 K (suc n) k (d0)) k) (eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) k))
              (ax_mp ((eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux1 K (suc n) k (d0))) (im (eq (grecaux1 K (suc n) k (d0)) k) (eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) k)))
                (eqtr ((grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux1 K (suc n) k (d0)) k))
                (ax_mp ((eq (sub (suc n) (suc n)) (d0)) (eq (grecaux1 K (suc n) k (sub (suc n) (suc n))) (grecaux1 K (suc n) k (d0))))
                  (grecaux1eq4 (K (suc n) k (sub (suc n) (suc n)) (d0)))
                  (subid ((suc n)))))
              (grecaux10 (K k (suc n)))))
          (ax_mp ((le n n) (eq (grecaux2 z K F (suc n) n k) (grecaux2 z K F n n (app K (pr n k)))))
            (grecaux2Sx (F K k n n z))
            (leid (n)))))))))

(local def rev ((l nat ())) (nat ())
((a nat) (ih nat) (z nat))
(lrec (d0) (slam a (slam z (lam ih (snoc ih a)))) l))

(local theorem reveqd ((_G wff ()) (l1 nat ()) (l2 nat ()))
  ((hl (im _G (eq l1 l2))))
  (im _G (eq (rev l1) (rev l2)))
((a nat) (ih nat) (z nat))
(:conv (im _G (eq (rev l1) (rev l2)))
  (im
    _G
    (eq
      (:unfold rev (l1) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (snoc ih a)))) l1))
      (:unfold rev (l2) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (snoc ih a)))) l2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam ih (snoc ih a)))) (slam a (slam z (lam ih (snoc ih a)))) l1 l2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam a (slam z (lam ih (snoc ih a))))))
    hl)))

(local theorem reveq ((l1 nat ()) (l2 nat ())) ()
  (im (eq l1 l2) (eq (rev l1) (rev l2)))
()
(reveqd ((eq l1 l2) l1 l2)
  (id ((eq l1 l2)))))

(local theorem rev0 () ()
  (eq (rev (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (rev (d0)) (d0))
  (eq
    (:unfold rev ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1))))))))

(local theorem revS ((a nat ()) (l nat ())) ()
  (eq (rev (cons a l)) (snoc (rev l) a))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (rev (cons a l)) (snoc (rev l) a))
  (eq
    (:unfold rev ((cons a l)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (cons a l)))
    (snoc (rev l) a))
  (ax_mp ((eq (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l)))) (snoc (rev l) a)) (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (cons a l)) (snoc (rev l) a)))
    (ax_mp ((eq (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (cons a l)) (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l))))) (im (eq (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l)))) (snoc (rev l) a)) (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (cons a l)) (snoc (rev l) a))))
      (eqtr ((lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (cons a l)) (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l)))) (snoc (rev l) a)))
      (:conv (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (cons a l)) (app (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (pr a (pr l (rev l)))))
        (eq
          (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) (cons a l))
          (app
            (slam x1 (slam x2 (lam x3 (snoc x3 x1))))
            (pr
              a
              (pr
                l
                (:unfold rev (l) (x1 x3 x2)
                  (lrec (d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) l))))))
        (lrecS ((d0) (slam x1 (slam x2 (lam x3 (snoc x3 x1)))) a l))))
    (appslame (a (pr l (rev l)) (snoc (rev l) a) x1 (slam x2 (lam x3 (snoc x3 x1))))
      (appslamed ((eq x1 a) l (rev l) (snoc (rev l) a) x2 (lam x3 (snoc x3 x1)))
        (applamed ((an (eq x1 a) (eq x2 l)) (rev l) (snoc (rev l) a) x3 (snoc x3 x1))
          (snoceqd ((an (an (eq x1 a) (eq x2 l)) (eq x3 (rev l))) x3 (rev l) x1 a)
            (anr ((an (eq x1 a) (eq x2 l)) (eq x3 (rev l))))
            (anll ((eq x1 a) (eq x2 l) (eq x3 (rev l)))))))))))

(local theorem revsn ((a nat ())) ()
  (eq (rev (cons a (d0))) (cons a (d0)))
()
(ax_mp ((eq (snoc (rev (d0)) a) (cons a (d0))) (eq (rev (cons a (d0))) (cons a (d0))))
  (ax_mp ((eq (rev (cons a (d0))) (snoc (rev (d0)) a)) (im (eq (snoc (rev (d0)) a) (cons a (d0))) (eq (rev (cons a (d0))) (cons a (d0)))))
    (eqtr ((rev (cons a (d0))) (snoc (rev (d0)) a) (cons a (d0))))
    (revS (a (d0))))
  (ax_mp ((eq (snoc (d0) a) (cons a (d0))) (eq (snoc (rev (d0)) a) (cons a (d0))))
    (ax_mp ((eq (snoc (rev (d0)) a) (snoc (d0) a)) (im (eq (snoc (d0) a) (cons a (d0))) (eq (snoc (rev (d0)) a) (cons a (d0)))))
      (eqtr ((snoc (rev (d0)) a) (snoc (d0) a) (cons a (d0))))
      (ax_mp ((eq (rev (d0)) (d0)) (eq (snoc (rev (d0)) a) (snoc (d0) a)))
        (snoceq1 ((rev (d0)) (d0) a))
        (rev0 ())))
    (snoc0 (a)))))

(local theorem revappend ((l1 nat ()) (l2 nat ())) ()
  (eq (rev (append l1 l2)) (append (rev l2) (rev l1)))
((x1 nat) (x2 nat) (x3 nat))
(listind (x1 x3 x2 l1 (eq (rev (append x1 l2)) (append (rev l2) (rev x1))) (eq (rev (append (d0) l2)) (append (rev l2) (rev (d0)))) (eq (rev (append l1 l2)) (append (rev l2) (rev l1))) (eq (rev (append x2 l2)) (append (rev l2) (rev x2))) (eq (rev (append (cons x3 x2) l2)) (append (rev l2) (rev (cons x3 x2)))))
  (eqeqd ((eq x1 (d0)) (rev (append x1 l2)) (rev (append (d0) l2)) (append (rev l2) (rev x1)) (append (rev l2) (rev (d0))))
    (reveqd ((eq x1 (d0)) (append x1 l2) (append (d0) l2))
      (appendeq1 (x1 (d0) l2)))
    (appendeq2d ((eq x1 (d0)) (rev l2) (rev x1) (rev (d0)))
      (reveq (x1 (d0)))))
  (eqeqd ((eq x1 x2) (rev (append x1 l2)) (rev (append x2 l2)) (append (rev l2) (rev x1)) (append (rev l2) (rev x2)))
    (reveqd ((eq x1 x2) (append x1 l2) (append x2 l2))
      (appendeq1 (x1 x2 l2)))
    (appendeq2d ((eq x1 x2) (rev l2) (rev x1) (rev x2))
      (reveq (x1 x2))))
  (eqeqd ((eq x1 (cons x3 x2)) (rev (append x1 l2)) (rev (append (cons x3 x2) l2)) (append (rev l2) (rev x1)) (append (rev l2) (rev (cons x3 x2))))
    (reveqd ((eq x1 (cons x3 x2)) (append x1 l2) (append (cons x3 x2) l2))
      (appendeq1 (x1 (cons x3 x2) l2)))
    (appendeq2d ((eq x1 (cons x3 x2)) (rev l2) (rev x1) (rev (cons x3 x2)))
      (reveq (x1 (cons x3 x2)))))
  (eqeqd ((eq x1 l1) (rev (append x1 l2)) (rev (append l1 l2)) (append (rev l2) (rev x1)) (append (rev l2) (rev l1)))
    (reveqd ((eq x1 l1) (append x1 l2) (append l1 l2))
      (appendeq1 (x1 l1 l2)))
    (appendeq2d ((eq x1 l1) (rev l2) (rev x1) (rev l1))
      (reveq (x1 l1))))
  (ax_mp ((eq (append (rev l2) (rev (d0))) (rev l2)) (eq (rev (append (d0) l2)) (append (rev l2) (rev (d0)))))
    (ax_mp ((eq (rev (append (d0) l2)) (rev l2)) (im (eq (append (rev l2) (rev (d0))) (rev l2)) (eq (rev (append (d0) l2)) (append (rev l2) (rev (d0))))))
      (eqtr4 ((rev (append (d0) l2)) (rev l2) (append (rev l2) (rev (d0)))))
      (ax_mp ((eq (append (d0) l2) l2) (eq (rev (append (d0) l2)) (rev l2)))
        (reveq ((append (d0) l2) l2))
        (append0 (l2))))
    (ax_mp ((eq (append (rev l2) (d0)) (rev l2)) (eq (append (rev l2) (rev (d0))) (rev l2)))
      (ax_mp ((eq (append (rev l2) (rev (d0))) (append (rev l2) (d0))) (im (eq (append (rev l2) (d0)) (rev l2)) (eq (append (rev l2) (rev (d0))) (rev l2))))
        (eqtr ((append (rev l2) (rev (d0))) (append (rev l2) (d0)) (rev l2)))
        (ax_mp ((eq (rev (d0)) (d0)) (eq (append (rev l2) (rev (d0))) (append (rev l2) (d0))))
          (appendeq2 ((rev l2) (rev (d0)) (d0)))
          (rev0 ())))
      (append02 ((rev l2)))))
  (syl5eq ((eq (rev (append x2 l2)) (append (rev l2) (rev x2))) (rev (append (cons x3 x2) l2)) (snoc (rev (append x2 l2)) x3) (append (rev l2) (rev (cons x3 x2))))
    (ax_mp ((eq (rev (cons x3 (append x2 l2))) (snoc (rev (append x2 l2)) x3)) (eq (rev (append (cons x3 x2) l2)) (snoc (rev (append x2 l2)) x3)))
      (ax_mp ((eq (rev (append (cons x3 x2) l2)) (rev (cons x3 (append x2 l2)))) (im (eq (rev (cons x3 (append x2 l2))) (snoc (rev (append x2 l2)) x3)) (eq (rev (append (cons x3 x2) l2)) (snoc (rev (append x2 l2)) x3))))
        (eqtr ((rev (append (cons x3 x2) l2)) (rev (cons x3 (append x2 l2))) (snoc (rev (append x2 l2)) x3)))
        (ax_mp ((eq (append (cons x3 x2) l2) (cons x3 (append x2 l2))) (eq (rev (append (cons x3 x2) l2)) (rev (cons x3 (append x2 l2)))))
          (reveq ((append (cons x3 x2) l2) (cons x3 (append x2 l2))))
          (appendS (x3 x2 l2))))
      (revS (x3 (append x2 l2))))
    (syl6eqr ((eq (rev (append x2 l2)) (append (rev l2) (rev x2))) (snoc (rev (append x2 l2)) x3) (append (rev l2) (snoc (rev x2) x3)) (append (rev l2) (rev (cons x3 x2))))
      (ax_mp ((eq (rev (cons x3 x2)) (snoc (rev x2) x3)) (eq (append (rev l2) (rev (cons x3 x2))) (append (rev l2) (snoc (rev x2) x3))))
        (appendeq2 ((rev l2) (rev (cons x3 x2)) (snoc (rev x2) x3)))
        (revS (x3 x2)))
      (syl6eqr ((eq (rev (append x2 l2)) (append (rev l2) (rev x2))) (snoc (rev (append x2 l2)) x3) (snoc (append (rev l2) (rev x2)) x3) (append (rev l2) (snoc (rev x2) x3)))
        (appendsnoc (x3 (rev l2) (rev x2)))
        (snoceq1 ((rev (append x2 l2)) (append (rev l2) (rev x2)) x3)))))))

(local theorem revsnoc ((a nat ()) (l nat ())) ()
  (eq (rev (snoc l a)) (cons a (rev l)))
()
(:conv (eq (rev (snoc l a)) (cons a (rev l)))
  (eq
    (rev
      (:unfold snoc (l a) ()
        (append l (cons a (d0)))))
    (cons a (rev l)))
  (ax_mp ((eq (append (rev (cons a (d0))) (rev l)) (cons a (rev l))) (eq (rev (append l (cons a (d0)))) (cons a (rev l))))
    (ax_mp ((eq (rev (append l (cons a (d0)))) (append (rev (cons a (d0))) (rev l))) (im (eq (append (rev (cons a (d0))) (rev l)) (cons a (rev l))) (eq (rev (append l (cons a (d0)))) (cons a (rev l)))))
      (eqtr ((rev (append l (cons a (d0)))) (append (rev (cons a (d0))) (rev l)) (cons a (rev l))))
      (revappend (l (cons a (d0)))))
    (ax_mp ((eq (append (cons a (d0)) (rev l)) (cons a (rev l))) (eq (append (rev (cons a (d0))) (rev l)) (cons a (rev l))))
      (ax_mp ((eq (append (rev (cons a (d0))) (rev l)) (append (cons a (d0)) (rev l))) (im (eq (append (cons a (d0)) (rev l)) (cons a (rev l))) (eq (append (rev (cons a (d0))) (rev l)) (cons a (rev l)))))
        (eqtr ((append (rev (cons a (d0))) (rev l)) (append (cons a (d0)) (rev l)) (cons a (rev l))))
        (ax_mp ((eq (rev (cons a (d0))) (cons a (d0))) (eq (append (rev (cons a (d0))) (rev l)) (append (cons a (d0)) (rev l))))
          (appendeq1 ((rev (cons a (d0))) (cons a (d0)) (rev l)))
          (revsn (a))))
      (ax_mp ((eq (cons a (append (d0) (rev l))) (cons a (rev l))) (eq (append (cons a (d0)) (rev l)) (cons a (rev l))))
        (ax_mp ((eq (append (cons a (d0)) (rev l)) (cons a (append (d0) (rev l)))) (im (eq (cons a (append (d0) (rev l))) (cons a (rev l))) (eq (append (cons a (d0)) (rev l)) (cons a (rev l)))))
          (eqtr ((append (cons a (d0)) (rev l)) (cons a (append (d0) (rev l))) (cons a (rev l))))
          (appendS (a (d0) (rev l))))
        (ax_mp ((eq (append (d0) (rev l)) (rev l)) (eq (cons a (append (d0) (rev l))) (cons a (rev l))))
          (conseq2 (a (append (d0) (rev l)) (rev l)))
          (append0 ((rev l)))))))))

(local theorem revrev ((l nat ())) ()
  (eq (rev (rev l)) l)
((x1 nat) (x2 nat) (x3 nat))
(:let H1 (rev0 ())
(listind (x1 x2 x3 l (eq (rev (rev x1)) x1) (eq (rev (rev (d0))) (d0)) (eq (rev (rev l)) l) (eq (rev (rev x3)) x3) (eq (rev (rev (cons x2 x3))) (cons x2 x3)))
  (eqeqd ((eq x1 (d0)) (rev (rev x1)) (rev (rev (d0))) x1 (d0))
    (reveqd ((eq x1 (d0)) (rev x1) (rev (d0)))
      (reveq (x1 (d0))))
    (id ((eq x1 (d0)))))
  (eqeqd ((eq x1 x3) (rev (rev x1)) (rev (rev x3)) x1 x3)
    (reveqd ((eq x1 x3) (rev x1) (rev x3))
      (reveq (x1 x3)))
    (id ((eq x1 x3))))
  (eqeqd ((eq x1 (cons x2 x3)) (rev (rev x1)) (rev (rev (cons x2 x3))) x1 (cons x2 x3))
    (reveqd ((eq x1 (cons x2 x3)) (rev x1) (rev (cons x2 x3)))
      (reveq (x1 (cons x2 x3))))
    (id ((eq x1 (cons x2 x3)))))
  (eqeqd ((eq x1 l) (rev (rev x1)) (rev (rev l)) x1 l)
    (reveqd ((eq x1 l) (rev x1) (rev l))
      (reveq (x1 l)))
    (id ((eq x1 l))))
  (ax_mp ((eq (rev (d0)) (d0)) (eq (rev (rev (d0))) (d0)))
    (ax_mp ((eq (rev (rev (d0))) (rev (d0))) (im (eq (rev (d0)) (d0)) (eq (rev (rev (d0))) (d0))))
      (eqtr ((rev (rev (d0))) (rev (d0)) (d0)))
      (ax_mp ((eq (rev (d0)) (d0)) (eq (rev (rev (d0))) (rev (d0))))
        (reveq ((rev (d0)) (d0)))
        H1))
    H1)
  (syl5eq ((eq (rev (rev x3)) x3) (rev (rev (cons x2 x3))) (rev (snoc (rev x3) x2)) (cons x2 x3))
    (ax_mp ((eq (rev (cons x2 x3)) (snoc (rev x3) x2)) (eq (rev (rev (cons x2 x3))) (rev (snoc (rev x3) x2))))
      (reveq ((rev (cons x2 x3)) (snoc (rev x3) x2)))
      (revS (x2 x3)))
    (syl5eq ((eq (rev (rev x3)) x3) (rev (snoc (rev x3) x2)) (cons x2 (rev (rev x3))) (cons x2 x3))
      (revsnoc (x2 (rev x3)))
      (conseq2 (x2 (rev (rev x3)) x3)))))))

(def map ((F set ()) (l nat ())) (nat ())
((a nat) (ih nat) (z nat))
(lrec (d0) (slam a (slam z (lam ih (cons (app F a) ih)))) l))

(local theorem mapeqd ((_G wff ()) (F1 set ()) (F2 set ()) (l1 nat ()) (l2 nat ()))
  ((hF (im _G (eqs F1 F2)))
   (hl (im _G (eq l1 l2))))
  (im _G (eq (map F1 l1) (map F2 l2)))
((a nat) (ih nat) (z nat))
(:conv (im _G (eq (map F1 l1) (map F2 l2)))
  (im
    _G
    (eq
      (:unfold map (F1 l1) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (cons (app F1 a) ih)))) l1))
      (:unfold map (F2 l2) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (cons (app F2 a) ih)))) l2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam ih (cons (app F1 a) ih)))) (slam a (slam z (lam ih (cons (app F2 a) ih)))) l1 l2)
    (eqidd (_G (d0)))
    (slameqd (_G a (slam z (lam ih (cons (app F1 a) ih))) (slam z (lam ih (cons (app F2 a) ih))))
      (slameqd (_G z (lam ih (cons (app F1 a) ih)) (lam ih (cons (app F2 a) ih)))
        (lameqd (_G ih (cons (app F1 a) ih) (cons (app F2 a) ih))
          (conseqd (_G (app F1 a) (app F2 a) ih ih)
            (appeqd (_G F1 F2 a a)
              hF
              (eqidd (_G a)))
            (eqidd (_G ih))))))
    hl)))

(local theorem mapeq ((F1 set ()) (F2 set ()) (l1 nat ()) (l2 nat ())) ()
  (im (eqs F1 F2) (im (eq l1 l2) (eq (map F1 l1) (map F2 l2))))
()
(exp ((eqs F1 F2) (eq l1 l2) (eq (map F1 l1) (map F2 l2)))
  (mapeqd ((an (eqs F1 F2) (eq l1 l2)) F1 F2 l1 l2)
    (anl ((eqs F1 F2) (eq l1 l2)))
    (anr ((eqs F1 F2) (eq l1 l2))))))

(local theorem mapeq1d ((G wff ()) (F1 set ()) (F2 set ()) (l nat ()))
  ((h (im G (eqs F1 F2))))
  (im G (eq (map F1 l) (map F2 l)))
()
(mapeqd (G F1 F2 l l)
  h
  (eqidd (G l))))

(local theorem mapeq1 ((F1 set ()) (F2 set ()) (l nat ())) ()
  (im (eqs F1 F2) (eq (map F1 l) (map F2 l)))
()
(mapeq1d ((eqs F1 F2) F1 F2 l)
  (id ((eqs F1 F2)))))

(local theorem mapeq2d ((G wff ()) (F set ()) (l1 nat ()) (l2 nat ()))
  ((h (im G (eq l1 l2))))
  (im G (eq (map F l1) (map F l2)))
()
(mapeqd (G F F l1 l2)
  (eqsidd (G F))
  h))

(local theorem mapeq2 ((F set ()) (l1 nat ()) (l2 nat ())) ()
  (im (eq l1 l2) (eq (map F l1) (map F l2)))
()
(mapeq2d ((eq l1 l2) F l1 l2)
  (id ((eq l1 l2)))))

(theorem map0 ((F set ())) ()
  (eq (map F (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (map F (d0)) (d0))
  (eq
    (:unfold map (F (d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3))))))))

(theorem mapS ((F set ()) (a nat ()) (l nat ())) ()
  (eq (map F (cons a l)) (cons (app F a) (map F l)))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (map F (cons a l)) (cons (app F a) (map F l)))
  (eq
    (:unfold map (F (cons a l)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (cons a l)))
    (cons (app F a) (map F l)))
  (ax_mp ((eq (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l)))) (cons (app F a) (map F l))) (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (cons a l)) (cons (app F a) (map F l))))
    (ax_mp ((eq (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (cons a l)) (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l))))) (im (eq (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l)))) (cons (app F a) (map F l))) (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (cons a l)) (cons (app F a) (map F l)))))
      (eqtr ((lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (cons a l)) (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l)))) (cons (app F a) (map F l))))
      (:conv (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (cons a l)) (app (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (pr a (pr l (map F l)))))
        (eq
          (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) (cons a l))
          (app
            (slam x1 (slam x2 (lam x3 (cons (app F x1) x3))))
            (pr
              a
              (pr
                l
                (:unfold map (F l) (x1 x3 x2)
                  (lrec (d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) l))))))
        (lrecS ((d0) (slam x1 (slam x2 (lam x3 (cons (app F x1) x3)))) a l))))
    (appslame (a (pr l (map F l)) (cons (app F a) (map F l)) x1 (slam x2 (lam x3 (cons (app F x1) x3))))
      (appslamed ((eq x1 a) l (map F l) (cons (app F a) (map F l)) x2 (lam x3 (cons (app F x1) x3)))
        (applamed ((an (eq x1 a) (eq x2 l)) (map F l) (cons (app F a) (map F l)) x3 (cons (app F x1) x3))
          (conseqd ((an (an (eq x1 a) (eq x2 l)) (eq x3 (map F l))) (app F x1) (app F a) x3 (map F l))
            (appeq2d ((an (an (eq x1 a) (eq x2 l)) (eq x3 (map F l))) F x1 a)
              (anll ((eq x1 a) (eq x2 l) (eq x3 (map F l)))))
            (anr ((an (eq x1 a) (eq x2 l)) (eq x3 (map F l)))))))))))

(local theorem maplen ((F set ()) (l nat ())) ()
  (eq (len (map F l)) (len l))
((x1 nat) (x2 nat) (x3 nat))
(listind (x1 x2 x3 l (eq (len (map F x1)) (len x1)) (eq (len (map F (d0))) (len (d0))) (eq (len (map F l)) (len l)) (eq (len (map F x3)) (len x3)) (eq (len (map F (cons x2 x3))) (len (cons x2 x3))))
  (eqeqd ((eq x1 (d0)) (len (map F x1)) (len (map F (d0))) (len x1) (len (d0)))
    (leneqd ((eq x1 (d0)) (map F x1) (map F (d0)))
      (mapeq2 (F x1 (d0))))
    (leneq (x1 (d0))))
  (eqeqd ((eq x1 x3) (len (map F x1)) (len (map F x3)) (len x1) (len x3))
    (leneqd ((eq x1 x3) (map F x1) (map F x3))
      (mapeq2 (F x1 x3)))
    (leneq (x1 x3)))
  (eqeqd ((eq x1 (cons x2 x3)) (len (map F x1)) (len (map F (cons x2 x3))) (len x1) (len (cons x2 x3)))
    (leneqd ((eq x1 (cons x2 x3)) (map F x1) (map F (cons x2 x3)))
      (mapeq2 (F x1 (cons x2 x3))))
    (leneq (x1 (cons x2 x3))))
  (eqeqd ((eq x1 l) (len (map F x1)) (len (map F l)) (len x1) (len l))
    (leneqd ((eq x1 l) (map F x1) (map F l))
      (mapeq2 (F x1 l)))
    (leneq (x1 l)))
  (ax_mp ((eq (map F (d0)) (d0)) (eq (len (map F (d0))) (len (d0))))
    (leneq ((map F (d0)) (d0)))
    (map0 (F)))
  (eqtr4g ((eq (len (map F x3)) (len x3)) (suc (len (map F x3))) (suc (len x3)) (len (map F (cons x2 x3))) (len (cons x2 x3)))
    (ax_mp ((eq (len (cons (app F x2) (map F x3))) (suc (len (map F x3)))) (eq (len (map F (cons x2 x3))) (suc (len (map F x3)))))
      (ax_mp ((eq (len (map F (cons x2 x3))) (len (cons (app F x2) (map F x3)))) (im (eq (len (cons (app F x2) (map F x3))) (suc (len (map F x3)))) (eq (len (map F (cons x2 x3))) (suc (len (map F x3))))))
        (eqtr ((len (map F (cons x2 x3))) (len (cons (app F x2) (map F x3))) (suc (len (map F x3)))))
        (ax_mp ((eq (map F (cons x2 x3)) (cons (app F x2) (map F x3))) (eq (len (map F (cons x2 x3))) (len (cons (app F x2) (map F x3)))))
          (leneq ((map F (cons x2 x3)) (cons (app F x2) (map F x3))))
          (mapS (F x2 x3))))
      (lenS ((app F x2) (map F x3))))
    (lenS (x2 x3))
    (suceq ((len (map F x3)) (len x3))))))

(local theorem mapnth ((F set ()) (a nat ()) (l nat ()) (n nat ())) ()
  (im (eq (nth n l) (suc a)) (eq (nth n (map F l)) (suc (app F a))))
((x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat))
(:let H1 (mapS (F x2 x3))
(ax_mp ((al x4 (im (eq (nth x4 l) (suc a)) (eq (nth x4 (map F l)) (suc (app F a))))) (im (eq (nth n l) (suc a)) (eq (nth n (map F l)) (suc (app F a)))))
  (eale (x4 n (im (eq (nth x4 l) (suc a)) (eq (nth x4 (map F l)) (suc (app F a)))) (im (eq (nth n l) (suc a)) (eq (nth n (map F l)) (suc (app F a)))))
    (imeqd ((eq x4 n) (eq (nth x4 l) (suc a)) (eq (nth n l) (suc a)) (eq (nth x4 (map F l)) (suc (app F a))) (eq (nth n (map F l)) (suc (app F a))))
      (eqeq1d ((eq x4 n) (nth x4 l) (nth n l) (suc a))
        (ntheq1 (x4 n l)))
      (eqeq1d ((eq x4 n) (nth x4 (map F l)) (nth n (map F l)) (suc (app F a)))
        (ntheq1 (x4 n (map F l))))))
  (listind (x1 x2 x3 l (al x4 (im (eq (nth x4 x1) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a))))) (al x4 (im (eq (nth x4 (d0)) (suc a)) (eq (nth x4 (map F (d0))) (suc (app F a))))) (al x4 (im (eq (nth x4 l) (suc a)) (eq (nth x4 (map F l)) (suc (app F a))))) (al x4 (im (eq (nth x4 x3) (suc a)) (eq (nth x4 (map F x3)) (suc (app F a))))) (al x4 (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a))))))
    (aleqd ((eq x1 (d0)) x4 (im (eq (nth x4 x1) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a)))) (im (eq (nth x4 (d0)) (suc a)) (eq (nth x4 (map F (d0))) (suc (app F a)))))
      (imeqd ((eq x1 (d0)) (eq (nth x4 x1) (suc a)) (eq (nth x4 (d0)) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a))) (eq (nth x4 (map F (d0))) (suc (app F a))))
        (eqeq1d ((eq x1 (d0)) (nth x4 x1) (nth x4 (d0)) (suc a))
          (ntheq2 (x4 x1 (d0))))
        (eqeq1d ((eq x1 (d0)) (nth x4 (map F x1)) (nth x4 (map F (d0))) (suc (app F a)))
          (ntheq2d ((eq x1 (d0)) x4 (map F x1) (map F (d0)))
            (mapeq2 (F x1 (d0)))))))
    (aleqd ((eq x1 x3) x4 (im (eq (nth x4 x1) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a)))) (im (eq (nth x4 x3) (suc a)) (eq (nth x4 (map F x3)) (suc (app F a)))))
      (imeqd ((eq x1 x3) (eq (nth x4 x1) (suc a)) (eq (nth x4 x3) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a))) (eq (nth x4 (map F x3)) (suc (app F a))))
        (eqeq1d ((eq x1 x3) (nth x4 x1) (nth x4 x3) (suc a))
          (ntheq2 (x4 x1 x3)))
        (eqeq1d ((eq x1 x3) (nth x4 (map F x1)) (nth x4 (map F x3)) (suc (app F a)))
          (ntheq2d ((eq x1 x3) x4 (map F x1) (map F x3))
            (mapeq2 (F x1 x3))))))
    (aleqd ((eq x1 (cons x2 x3)) x4 (im (eq (nth x4 x1) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a)))) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))))
      (imeqd ((eq x1 (cons x2 x3)) (eq (nth x4 x1) (suc a)) (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a))) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a))))
        (eqeq1d ((eq x1 (cons x2 x3)) (nth x4 x1) (nth x4 (cons x2 x3)) (suc a))
          (ntheq2 (x4 x1 (cons x2 x3))))
        (eqeq1d ((eq x1 (cons x2 x3)) (nth x4 (map F x1)) (nth x4 (map F (cons x2 x3))) (suc (app F a)))
          (ntheq2d ((eq x1 (cons x2 x3)) x4 (map F x1) (map F (cons x2 x3)))
            (mapeq2 (F x1 (cons x2 x3)))))))
    (aleqd ((eq x1 l) x4 (im (eq (nth x4 x1) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a)))) (im (eq (nth x4 l) (suc a)) (eq (nth x4 (map F l)) (suc (app F a)))))
      (imeqd ((eq x1 l) (eq (nth x4 x1) (suc a)) (eq (nth x4 l) (suc a)) (eq (nth x4 (map F x1)) (suc (app F a))) (eq (nth x4 (map F l)) (suc (app F a))))
        (eqeq1d ((eq x1 l) (nth x4 x1) (nth x4 l) (suc a))
          (ntheq2 (x4 x1 l)))
        (eqeq1d ((eq x1 l) (nth x4 (map F x1)) (nth x4 (map F l)) (suc (app F a)))
          (ntheq2d ((eq x1 l) x4 (map F x1) (map F l))
            (mapeq2 (F x1 l))))))
    (ax_gen (x4 (im (eq (nth x4 (d0)) (suc a)) (eq (nth x4 (map F (d0))) (suc (app F a)))))
      (ax_mp ((not (eq (nth x4 (d0)) (suc a))) (im (eq (nth x4 (d0)) (suc a)) (eq (nth x4 (map F (d0))) (suc (app F a)))))
        (absurd ((eq (nth x4 (d0)) (suc a)) (eq (nth x4 (map F (d0))) (suc (app F a)))))
        (mt2 ((eq (nth x4 (d0)) (d0)) (eq (nth x4 (d0)) (suc a)))
          (:conv (im (eq (nth x4 (d0)) (suc a)) (not (eq (nth x4 (d0)) (d0))))
            (im
              (eq (nth x4 (d0)) (suc a))
              (:sym (:unfold ne ((nth x4 (d0)) (d0)) ()
                (not (eq (nth x4 (d0)) (d0))))))
            (sucne0 ((nth x4 (d0)) a)))
          (nth0 (x4)))))
    (sylbi ((al x4 (im (eq (nth x4 x3) (suc a)) (eq (nth x4 (map F x3)) (suc (app F a))))) (al x5 (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a))))) (al x4 (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a))))))
      (cbval (x4 x5 (im (eq (nth x4 x3) (suc a)) (eq (nth x4 (map F x3)) (suc (app F a)))) (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a)))))
        (imeqd ((eq x4 x5) (eq (nth x4 x3) (suc a)) (eq (nth x5 x3) (suc a)) (eq (nth x4 (map F x3)) (suc (app F a))) (eq (nth x5 (map F x3)) (suc (app F a))))
          (eqeq1d ((eq x4 x5) (nth x4 x3) (nth x5 x3) (suc a))
            (ntheq1 (x4 x5 x3)))
          (eqeq1d ((eq x4 x5) (nth x4 (map F x3)) (nth x5 (map F x3)) (suc (app F a)))
            (ntheq1 (x4 x5 (map F x3))))))
      (iald (x4 (al x5 (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a))))) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))))
        (casesd ((al x5 (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a))))) (eq x4 (d0)) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))))
          (a1i ((al x5 (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a))))) (im (eq x4 (d0)) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a))))))
            (mpbiri ((eq x4 (d0)) (im (eq (suc x2) (suc a)) (eq (nth (d0) (cons (app F x2) (map F x3))) (suc (app F a)))) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))))
              (syl5eq ((eq (suc x2) (suc a)) (nth (d0) (cons (app F x2) (map F x3))) (suc (app F x2)) (suc (app F a)))
                (nthZ ((app F x2) (map F x3)))
                (sylbi ((eq (suc x2) (suc a)) (eq x2 a) (eq (suc (app F x2)) (suc (app F a))))
                  (peano2 (x2 a))
                  (suceqd ((eq x2 a) (app F x2) (app F a))
                    (appeq2 (F x2 a)))))
              (imeqd ((eq x4 (d0)) (eq (nth x4 (cons x2 x3)) (suc a)) (eq (suc x2) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a))) (eq (nth (d0) (cons (app F x2) (map F x3))) (suc (app F a))))
                (eqeq1d ((eq x4 (d0)) (nth x4 (cons x2 x3)) (suc x2) (suc a))
                  (syl6eq ((eq x4 (d0)) (nth x4 (cons x2 x3)) (nth (d0) (cons x2 x3)) (suc x2))
                    (nthZ (x2 x3))
                    (ntheq1 (x4 (d0) (cons x2 x3)))))
                (eqeq1d ((eq x4 (d0)) (nth x4 (map F (cons x2 x3))) (nth (d0) (cons (app F x2) (map F x3))) (suc (app F a)))
                  (syl6eq ((eq x4 (d0)) (nth x4 (map F (cons x2 x3))) (nth (d0) (map F (cons x2 x3))) (nth (d0) (cons (app F x2) (map F x3))))
                    (ax_mp ((eq (map F (cons x2 x3)) (cons (app F x2) (map F x3))) (eq (nth (d0) (map F (cons x2 x3))) (nth (d0) (cons (app F x2) (map F x3)))))
                      (ntheq2 ((d0) (map F (cons x2 x3)) (cons (app F x2) (map F x3))))
                      H1)
                    (ntheq1 (x4 (d0) (map F (cons x2 x3)))))))))
          (syl5bi ((al x5 (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a))))) (not (eq x4 (d0))) (ex x5 (eq x4 (suc x5))) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))))
            (:conv (iff (not (eq x4 (d0))) (ex x5 (eq x4 (suc x5))))
              (iff
                (:sym (:unfold ne (x4 (d0)) ()
                  (not (eq x4 (d0)))))
                (ex x5 (eq x4 (suc x5))))
              (exsuc (x5 x4)))
            (syl6 ((al x5 (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a))))) (ex x5 (eq x4 (suc x5))) (ex x5 (an (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a)))) (eq x4 (suc x5)))) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))))
              (eex (x5 (an (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a)))) (eq x4 (suc x5))) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))))
                (rsyl ((an (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a)))) (eq x4 (suc x5))) (an (eq x4 (suc x5)) (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a))))) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))))
                  (ancom ((im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a)))) (eq x4 (suc x5))))
                  (bi2a ((eq x4 (suc x5)) (im (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a)))) (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a)))))
                    (imeqd ((eq x4 (suc x5)) (eq (nth x4 (cons x2 x3)) (suc a)) (eq (nth x5 x3) (suc a)) (eq (nth x4 (map F (cons x2 x3))) (suc (app F a))) (eq (nth x5 (map F x3)) (suc (app F a))))
                      (eqeq1d ((eq x4 (suc x5)) (nth x4 (cons x2 x3)) (nth x5 x3) (suc a))
                        (syl6eq ((eq x4 (suc x5)) (nth x4 (cons x2 x3)) (nth (suc x5) (cons x2 x3)) (nth x5 x3))
                          (nthS (x5 x2 x3))
                          (ntheq1 (x4 (suc x5) (cons x2 x3)))))
                      (eqeq1d ((eq x4 (suc x5)) (nth x4 (map F (cons x2 x3))) (nth x5 (map F x3)) (suc (app F a)))
                        (syl5eq ((eq x4 (suc x5)) (nth x4 (map F (cons x2 x3))) (nth x4 (cons (app F x2) (map F x3))) (nth x5 (map F x3)))
                          (ax_mp ((eq (map F (cons x2 x3)) (cons (app F x2) (map F x3))) (eq (nth x4 (map F (cons x2 x3))) (nth x4 (cons (app F x2) (map F x3)))))
                            (ntheq2 (x4 (map F (cons x2 x3)) (cons (app F x2) (map F x3))))
                            H1)
                          (syl6eq ((eq x4 (suc x5)) (nth x4 (cons (app F x2) (map F x3))) (nth (suc x5) (cons (app F x2) (map F x3))) (nth x5 (map F x3)))
                            (nthS (x5 (app F x2) (map F x3)))
                            (ntheq1 (x4 (suc x5) (cons (app F x2) (map F x3)))))))))))
              (alexan (x5 (im (eq (nth x5 x3) (suc a)) (eq (nth x5 (map F x3)) (suc (app F a)))) (eq x4 (suc x5)))))))))))))

(local theorem mapnthb ((F set ()) (a nat) (b nat ()) (l nat ()) (n nat ())) ()
  (iff (eq (nth n (map F l)) (suc b)) (ex a (an (eq (nth n l) (suc a)) (eq b (app F a)))))
()
(:let H1 (mapnth (F a l n))
(ibii ((eq (nth n (map F l)) (suc b)) (ex a (an (eq (nth n l) (suc a)) (eq b (app F a)))))
  (mpd ((eq (nth n (map F l)) (suc b)) (ex a (eq (nth n l) (suc a))) (ex a (an (eq (nth n l) (suc a)) (eq b (app F a)))))
    (sylib ((eq (nth n (map F l)) (suc b)) (ne (nth n l) (d0)) (ex a (eq (nth n l) (suc a))))
      (exsuc (a (nth n l)))
      (sylibr ((eq (nth n (map F l)) (suc b)) (lt n (len l)) (ne (nth n l) (d0)))
        (nthne0 (l n))
        (sylib ((eq (nth n (map F l)) (suc b)) (lt n (len (map F l))) (lt n (len l)))
          (ax_mp ((eq (len (map F l)) (len l)) (iff (lt n (len (map F l))) (lt n (len l))))
            (lteq2 (n (len (map F l)) (len l)))
            (maplen (F l)))
          (sylib ((eq (nth n (map F l)) (suc b)) (ne (nth n (map F l)) (d0)) (lt n (len (map F l))))
            (nthne0 ((map F l) n))
            (sucne0 ((nth n (map F l)) b))))))
    (eximd (a (eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a)) (an (eq (nth n l) (suc a)) (eq b (app F a))))
      (exp ((eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a)) (an (eq (nth n l) (suc a)) (eq b (app F a))))
        (iand ((an (eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))) (eq (nth n l) (suc a)) (eq b (app F a)))
          (anr ((eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))))
          (sylib ((an (eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))) (eq (suc b) (suc (app F a))) (eq b (app F a)))
            (peano2 (b (app F a)))
            (eqtr3d ((an (eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))) (suc b) (nth n (map F l)) (suc (app F a)))
              (anl ((eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a))))
              (anwr ((eq (nth n (map F l)) (suc b)) (eq (nth n l) (suc a)) (eq (nth n (map F l)) (suc (app F a))))
                H1)))))))
  (eex (a (an (eq (nth n l) (suc a)) (eq b (app F a))) (eq (nth n (map F l)) (suc b)))
    (eqtr4d ((an (eq (nth n l) (suc a)) (eq b (app F a))) (nth n (map F l)) (suc (app F a)) (suc b))
      (anwl ((eq (nth n l) (suc a)) (eq b (app F a)) (eq (nth n (map F l)) (suc (app F a))))
        H1)
      (suceqd ((an (eq (nth n l) (suc a)) (eq b (app F a))) b (app F a))
        (anr ((eq (nth n l) (suc a)) (eq b (app F a))))))))))

(local theorem lmemmapi ((F set ()) (a nat ()) (l nat ())) ()
  (im (lmem a l) (lmem (app F a) (map F l)))
((x1 nat))
(sylbi ((lmem a l) (ex x1 (eq (nth x1 l) (suc a))) (lmem (app F a) (map F l)))
  (lmemnth (a l x1))
  (eex (x1 (eq (nth x1 l) (suc a)) (lmem (app F a) (map F l)))
    (syl ((eq (nth x1 l) (suc a)) (eq (nth x1 (map F l)) (suc (app F a))) (lmem (app F a) (map F l)))
      (nthlmem ((app F a) (map F l) x1))
      (mapnth (F a l x1))))))

(local theorem lmemmap ((F set ()) (a nat) (b nat ()) (l nat ())) ()
  (iff (lmem b (map F l)) (ex a (an (lmem a l) (eq b (app F a)))))
((x1 nat))
(ax_mp ((iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a))))) (iff (lmem b (map F l)) (ex a (an (lmem a l) (eq b (app F a))))))
  (ax_mp ((iff (lmem b (map F l)) (ex x1 (eq (nth x1 (map F l)) (suc b)))) (im (iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a))))) (iff (lmem b (map F l)) (ex a (an (lmem a l) (eq b (app F a)))))))
    (bitr ((lmem b (map F l)) (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a))))))
    (lmemnth (b (map F l) x1)))
  (ax_mp ((iff (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a))))) (iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a))))))
    (ax_mp ((iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a)))))) (im (iff (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a))))) (iff (ex x1 (eq (nth x1 (map F l)) (suc b))) (ex a (an (lmem a l) (eq b (app F a)))))))
      (bitr ((ex x1 (eq (nth x1 (map F l)) (suc b))) (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a))))))
      (exeqi (x1 (eq (nth x1 (map F l)) (suc b)) (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a)))))
        (mapnthb (F a b l x1))))
    (ax_mp ((iff (ex a (ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a))))) (iff (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a))))))
      (ax_mp ((iff (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a)))))) (im (iff (ex a (ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a))))) (iff (ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a)))))))
        (bitr ((ex x1 (ex a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a))))) (ex a (an (lmem a l) (eq b (app F a))))))
        (excomb (x1 a (an (eq (nth x1 l) (suc a)) (eq b (app F a))))))
      (exeqi (a (ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a)))) (an (lmem a l) (eq b (app F a))))
        (ax_mp ((iff (an (lmem a l) (eq b (app F a))) (an (ex x1 (eq (nth x1 l) (suc a))) (eq b (app F a)))) (iff (ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a)))) (an (lmem a l) (eq b (app F a)))))
          (ax_mp ((iff (ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a)))) (an (ex x1 (eq (nth x1 l) (suc a))) (eq b (app F a)))) (im (iff (an (lmem a l) (eq b (app F a))) (an (ex x1 (eq (nth x1 l) (suc a))) (eq b (app F a)))) (iff (ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a)))) (an (lmem a l) (eq b (app F a))))))
            (bitr4 ((ex x1 (an (eq (nth x1 l) (suc a)) (eq b (app F a)))) (an (ex x1 (eq (nth x1 l) (suc a))) (eq b (app F a))) (an (lmem a l) (eq b (app F a)))))
            (exan2 (x1 (eq (nth x1 l) (suc a)) (eq b (app F a)))))
          (aneq1i ((lmem a l) (ex x1 (eq (nth x1 l) (suc a))) (eq b (app F a)))
            (lmemnth (a l x1)))))))))

(def ljoin ((L nat ())) (nat ())
((a nat) (ih nat) (z nat))
(lrec (d0) (slam a (slam z (lam ih (append a ih)))) L))

(local theorem ljoineqd ((_G wff ()) (L1 nat ()) (L2 nat ()))
  ((hL (im _G (eq L1 L2))))
  (im _G (eq (ljoin L1) (ljoin L2)))
((a nat) (ih nat) (z nat))
(:conv (im _G (eq (ljoin L1) (ljoin L2)))
  (im
    _G
    (eq
      (:unfold ljoin (L1) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (append a ih)))) L1))
      (:unfold ljoin (L2) (a ih z)
        (lrec (d0) (slam a (slam z (lam ih (append a ih)))) L2))))
  (lreceqd (_G (d0) (d0) (slam a (slam z (lam ih (append a ih)))) (slam a (slam z (lam ih (append a ih)))) L1 L2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam a (slam z (lam ih (append a ih))))))
    hL)))

(local theorem ljoineq ((L1 nat ()) (L2 nat ())) ()
  (im (eq L1 L2) (eq (ljoin L1) (ljoin L2)))
()
(ljoineqd ((eq L1 L2) L1 L2)
  (id ((eq L1 L2)))))

(theorem ljoin0 () ()
  (eq (ljoin (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (ljoin (d0)) (d0))
  (eq
    (:unfold ljoin ((d0)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (d0)))
    (d0))
  (lrec0 ((d0) (slam x1 (slam x2 (lam x3 (append x1 x3))))))))

(theorem ljoinS ((l nat ()) (L nat ())) ()
  (eq (ljoin (cons l L)) (append l (ljoin L)))
((x1 nat) (x2 nat) (x3 nat))
(:conv (eq (ljoin (cons l L)) (append l (ljoin L)))
  (eq
    (:unfold ljoin ((cons l L)) (x1 x3 x2)
      (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (cons l L)))
    (append l (ljoin L)))
  (ax_mp ((eq (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L)))) (append l (ljoin L))) (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (cons l L)) (append l (ljoin L))))
    (ax_mp ((eq (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (cons l L)) (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L))))) (im (eq (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L)))) (append l (ljoin L))) (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (cons l L)) (append l (ljoin L)))))
      (eqtr ((lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (cons l L)) (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L)))) (append l (ljoin L))))
      (:conv (eq (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (cons l L)) (app (slam x1 (slam x2 (lam x3 (append x1 x3)))) (pr l (pr L (ljoin L)))))
        (eq
          (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) (cons l L))
          (app
            (slam x1 (slam x2 (lam x3 (append x1 x3))))
            (pr
              l
              (pr
                L
                (:unfold ljoin (L) (x1 x3 x2)
                  (lrec (d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) L))))))
        (lrecS ((d0) (slam x1 (slam x2 (lam x3 (append x1 x3)))) l L))))
    (appslame (l (pr L (ljoin L)) (append l (ljoin L)) x1 (slam x2 (lam x3 (append x1 x3))))
      (appslamed ((eq x1 l) L (ljoin L) (append l (ljoin L)) x2 (lam x3 (append x1 x3)))
        (applamed ((an (eq x1 l) (eq x2 L)) (ljoin L) (append l (ljoin L)) x3 (append x1 x3))
          (appendeqd ((an (an (eq x1 l) (eq x2 L)) (eq x3 (ljoin L))) x1 l x3 (ljoin L))
            (anll ((eq x1 l) (eq x2 L) (eq x3 (ljoin L))))
            (anr ((an (eq x1 l) (eq x2 L)) (eq x3 (ljoin L)))))))))))

(local def lfnaux ((F set ()) (k nat ()) (n nat ())) (nat ())
((_1 nat) (_2 nat) (i nat) (ih nat) (x nat))
(grec (d0) (slam _1 (lam x (suc x))) (slam _2 (slam i (lam ih (cons (app F i) ih)))) n k))

(local theorem lfnauxeqd ((_G wff ()) (F1 set ()) (F2 set ()) (k1 nat ()) (k2 nat ()) (n1 nat ()) (n2 nat ()))
  ((hF (im _G (eqs F1 F2)))
   (hk (im _G (eq k1 k2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (lfnaux F1 k1 n1) (lfnaux F2 k2 n2)))
((_1 nat) (_2 nat) (i nat) (ih nat) (x nat))
(:conv (im _G (eq (lfnaux F1 k1 n1) (lfnaux F2 k2 n2)))
  (im
    _G
    (eq
      (:unfold lfnaux (F1 k1 n1) (_1 _2 i ih x)
        (grec (d0) (slam _1 (lam x (suc x))) (slam _2 (slam i (lam ih (cons (app F1 i) ih)))) n1 k1))
      (:unfold lfnaux (F2 k2 n2) (_1 _2 i ih x)
        (grec (d0) (slam _1 (lam x (suc x))) (slam _2 (slam i (lam ih (cons (app F2 i) ih)))) n2 k2))))
  (greceqd (_G (d0) (d0) (slam _1 (lam x (suc x))) (slam _1 (lam x (suc x))) (slam _2 (slam i (lam ih (cons (app F1 i) ih)))) (slam _2 (slam i (lam ih (cons (app F2 i) ih)))) n1 n2 k1 k2)
    (eqidd (_G (d0)))
    (eqsidd (_G (slam _1 (lam x (suc x)))))
    (slameqd (_G _2 (slam i (lam ih (cons (app F1 i) ih))) (slam i (lam ih (cons (app F2 i) ih))))
      (slameqd (_G i (lam ih (cons (app F1 i) ih)) (lam ih (cons (app F2 i) ih)))
        (lameqd (_G ih (cons (app F1 i) ih) (cons (app F2 i) ih))
          (conseqd (_G (app F1 i) (app F2 i) ih ih)
            (appeqd (_G F1 F2 i i)
              hF
              (eqidd (_G i)))
            (eqidd (_G ih))))))
    hn
    hk)))

(local theorem lfnauxeq ((F1 set ()) (F2 set ()) (k1 nat ()) (k2 nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eqs F1 F2) (im (eq k1 k2) (im (eq n1 n2) (eq (lfnaux F1 k1 n1) (lfnaux F2 k2 n2)))))
()
(exp ((eqs F1 F2) (eq k1 k2) (im (eq n1 n2) (eq (lfnaux F1 k1 n1) (lfnaux F2 k2 n2))))
  (exp ((an (eqs F1 F2) (eq k1 k2)) (eq n1 n2) (eq (lfnaux F1 k1 n1) (lfnaux F2 k2 n2)))
    (lfnauxeqd ((an (an (eqs F1 F2) (eq k1 k2)) (eq n1 n2)) F1 F2 k1 k2 n1 n2)
      (anwl ((an (eqs F1 F2) (eq k1 k2)) (eq n1 n2) (eqs F1 F2))
        (anl ((eqs F1 F2) (eq k1 k2))))
      (anwl ((an (eqs F1 F2) (eq k1 k2)) (eq n1 n2) (eq k1 k2))
        (anr ((eqs F1 F2) (eq k1 k2))))
      (anr ((an (eqs F1 F2) (eq k1 k2)) (eq n1 n2)))))))

(local theorem lfnauxeq1d ((G wff ()) (F1 set ()) (F2 set ()) (k nat ()) (n nat ()))
  ((h (im G (eqs F1 F2))))
  (im G (eq (lfnaux F1 k n) (lfnaux F2 k n)))
()
(lfnauxeqd (G F1 F2 k k n n)
  h
  (eqidd (G k))
  (eqidd (G n))))

(local theorem lfnauxeq1 ((F1 set ()) (F2 set ()) (k nat ()) (n nat ())) ()
  (im (eqs F1 F2) (eq (lfnaux F1 k n) (lfnaux F2 k n)))
()
(lfnauxeq1d ((eqs F1 F2) F1 F2 k n)
  (id ((eqs F1 F2)))))

(local theorem lfnauxeq2d ((G wff ()) (F set ()) (k1 nat ()) (k2 nat ()) (n nat ()))
  ((h (im G (eq k1 k2))))
  (im G (eq (lfnaux F k1 n) (lfnaux F k2 n)))
()
(lfnauxeqd (G F F k1 k2 n n)
  (eqsidd (G F))
  h
  (eqidd (G n))))

(local theorem lfnauxeq2 ((F set ()) (k1 nat ()) (k2 nat ()) (n nat ())) ()
  (im (eq k1 k2) (eq (lfnaux F k1 n) (lfnaux F k2 n)))
()
(lfnauxeq2d ((eq k1 k2) F k1 k2 n)
  (id ((eq k1 k2)))))

(local theorem lfnauxeq3d ((G wff ()) (F set ()) (k nat ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (lfnaux F k n1) (lfnaux F k n2)))
()
(lfnauxeqd (G F F k k n1 n2)
  (eqsidd (G F))
  (eqidd (G k))
  h))

(local theorem lfnauxeq3 ((F set ()) (k nat ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (lfnaux F k n1) (lfnaux F k n2)))
()
(lfnauxeq3d ((eq n1 n2) F k n1 n2)
  (id ((eq n1 n2)))))

(local theorem lfnaux0 ((F set ()) (k nat ())) ()
  (eq (lfnaux F k (d0)) (d0))
((x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat))
(:conv (eq (lfnaux F k (d0)) (d0))
  (eq
    (:unfold lfnaux (F k (d0)) (x1 x3 x4 x5 x2)
      (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (d0) k))
    (d0))
  (grec0 ((slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (slam x1 (lam x2 (suc x2))) k (d0)))))

(local theorem lfnauxS ((F set ()) (k nat ()) (n nat ())) ()
  (eq (lfnaux F k (suc n)) (cons (app F k) (lfnaux F (suc k) n)))
((x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat))
(:conv (eq (lfnaux F k (suc n)) (cons (app F k) (lfnaux F (suc k) n)))
  (eq
    (:unfold lfnaux (F k (suc n)) (x1 x3 x4 x5 x2)
      (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (suc n) k))
    (cons (app F k) (lfnaux F (suc k) n)))
  (ax_mp ((eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n))) (eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (suc n) k) (cons (app F k) (lfnaux F (suc k) n))))
    (ax_mp ((eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (suc n) k) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))))))) (im (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n))) (eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (suc n) k) (cons (app F k) (lfnaux F (suc k) n)))))
      (eqtr ((grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (suc n) k) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n))))
      (grecS ((slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (slam x1 (lam x2 (suc x2))) k n (d0))))
    (ax_mp ((eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n)))) (cons (app F k) (lfnaux F (suc k) n))) (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n))))
      (ax_mp ((eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n))))) (im (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n)))) (cons (app F k) (lfnaux F (suc k) n))) (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (cons (app F k) (lfnaux F (suc k) n)))))
        (eqtr ((app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n)))) (cons (app F k) (lfnaux F (suc k) n))))
        (ax_mp ((eq (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))))) (pr n (pr k (lfnaux F (suc k) n)))) (eq (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))))) (app (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (lfnaux F (suc k) n))))))
          (appeq2 ((slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))))) (pr n (pr k (lfnaux F (suc k) n)))))
          (ax_mp ((eq (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))) (pr k (lfnaux F (suc k) n))) (eq (pr n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))))) (pr n (pr k (lfnaux F (suc k) n)))))
            (preq2 (n (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))) (pr k (lfnaux F (suc k) n))))
            (ax_mp ((eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))) (lfnaux F (suc k) n)) (eq (pr k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))) (pr k (lfnaux F (suc k) n))))
              (preq2 (k (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))) (lfnaux F (suc k) n)))
              (:conv (eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))) (lfnaux F (suc k) n))
                (eq
                  (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)))
                  (:unfold lfnaux (F (suc k) n) (x1 x3 x4 x5 x2)
                    (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (suc k))))
                (ax_mp ((eq (app (slam x1 (lam x2 (suc x2))) (pr n k)) (suc k)) (eq (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k))) (grec (d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (suc k))))
                  (greceq5 ((d0) (slam x1 (lam x2 (suc x2))) (slam x3 (slam x4 (lam x5 (cons (app F x4) x5)))) n (app (slam x1 (lam x2 (suc x2))) (pr n k)) (suc k)))
                  (appslame (n k (suc k) x1 (lam x2 (suc x2)))
                    (applamed ((eq x1 n) k (suc k) x2 (suc x2))
                      (suceqd ((an (eq x1 n) (eq x2 k)) x2 k)
                        (anr ((eq x1 n) (eq x2 k))))))))))))
      (appslame (n (pr k (lfnaux F (suc k) n)) (cons (app F k) (lfnaux F (suc k) n)) x3 (slam x4 (lam x5 (cons (app F x4) x5))))
        (appslamed ((eq x3 n) k (lfnaux F (suc k) n) (cons (app F k) (lfnaux F (suc k) n)) x4 (lam x5 (cons (app F x4) x5)))
          (applamed ((an (eq x3 n) (eq x4 k)) (lfnaux F (suc k) n) (cons (app F k) (lfnaux F (suc k) n)) x5 (cons (app F x4) x5))
            (conseqd ((an (an (eq x3 n) (eq x4 k)) (eq x5 (lfnaux F (suc k) n))) (app F x4) (app F k) x5 (lfnaux F (suc k) n))
              (appeq2d ((an (an (eq x3 n) (eq x4 k)) (eq x5 (lfnaux F (suc k) n))) F x4 k)
                (anlr ((eq x3 n) (eq x4 k) (eq x5 (lfnaux F (suc k) n)))))
              (anr ((an (eq x3 n) (eq x4 k)) (eq x5 (lfnaux F (suc k) n))))))))))))

(local theorem lfnauxshift ((F1 set ()) (F2 set ()) (i nat) (k1 nat ()) (k2 nat ()) (n nat ())) ()
  (im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n)))
((x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat) (x6 nat) (x7 nat))
(:let H1 (anl ((eq x6 k1) (eq x7 k2)))
(:let H2 (anr ((eq x6 k1) (eq x7 k2)))
(:let H3 (anl ((eq x6 x2) (eq x7 x3)))
(:let H4 (anr ((eq x6 x2) (eq x7 x3)))
(:let H5 (anl ((eq x2 (suc x6)) (eq x3 (suc x7))))
(:let H6 (anr ((eq x2 (suc x6)) (eq x3 (suc x7))))
(ax_mp ((al x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n))))) (im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n))))
  (ealie ((im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n))) x6 k1 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n)))))
    (ealde ((im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n))) x7 (eq x6 k1) k2 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n))))
      (bi1d ((an (eq x6 k1) (eq x7 k2)) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n))) (im (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n))))
        (imeqd ((an (eq x6 k1) (eq x7 k2)) (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (al i (eq (app F1 (add k1 i)) (app F2 (add k2 i)))) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n)) (eq (lfnaux F1 k1 n) (lfnaux F2 k2 n)))
          (aleqd ((an (eq x6 k1) (eq x7 k2)) i (eq (app F1 (add x6 i)) (app F2 (add x7 i))) (eq (app F1 (add k1 i)) (app F2 (add k2 i))))
            (eqeqd ((an (eq x6 k1) (eq x7 k2)) (app F1 (add x6 i)) (app F1 (add k1 i)) (app F2 (add x7 i)) (app F2 (add k2 i)))
              (appeq2d ((an (eq x6 k1) (eq x7 k2)) F1 (add x6 i) (add k1 i))
                (addeq1d ((an (eq x6 k1) (eq x7 k2)) x6 k1 i)
                  H1))
              (appeq2d ((an (eq x6 k1) (eq x7 k2)) F2 (add x7 i) (add k2 i))
                (addeq1d ((an (eq x6 k1) (eq x7 k2)) x7 k2 i)
                  H2))))
          (eqeqd ((an (eq x6 k1) (eq x7 k2)) (lfnaux F1 x6 n) (lfnaux F1 k1 n) (lfnaux F2 x7 n) (lfnaux F2 k2 n))
            (lfnauxeq2d ((an (eq x6 k1) (eq x7 k2)) F1 x6 k1 n)
              H1)
            (lfnauxeq2d ((an (eq x6 k1) (eq x7 k2)) F2 x7 k2 n)
              H2))))))
  (ind (x1 x5 n (al x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1))))) (al x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0)))))) (al x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n))))) (al x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x5) (lfnaux F2 x7 x5))))) (al x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5)))))))
    (aleqd ((eq x1 (d0)) x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1)))) (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0))))))
      (aleqd ((eq x1 (d0)) x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1))) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0)))))
        (imeq2d ((eq x1 (d0)) (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1)) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0))))
          (eqeqd ((eq x1 (d0)) (lfnaux F1 x6 x1) (lfnaux F1 x6 (d0)) (lfnaux F2 x7 x1) (lfnaux F2 x7 (d0)))
            (lfnauxeq3 (F1 x6 x1 (d0)))
            (lfnauxeq3 (F2 x7 x1 (d0)))))))
    (aleqd ((eq x1 x5) x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1)))) (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x5) (lfnaux F2 x7 x5)))))
      (aleqd ((eq x1 x5) x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1))) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x5) (lfnaux F2 x7 x5))))
        (imeq2d ((eq x1 x5) (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1)) (eq (lfnaux F1 x6 x5) (lfnaux F2 x7 x5)))
          (eqeqd ((eq x1 x5) (lfnaux F1 x6 x1) (lfnaux F1 x6 x5) (lfnaux F2 x7 x1) (lfnaux F2 x7 x5))
            (lfnauxeq3 (F1 x6 x1 x5))
            (lfnauxeq3 (F2 x7 x1 x5))))))
    (aleqd ((eq x1 (suc x5)) x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1)))) (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5))))))
      (aleqd ((eq x1 (suc x5)) x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1))) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5)))))
        (imeq2d ((eq x1 (suc x5)) (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1)) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5))))
          (eqeqd ((eq x1 (suc x5)) (lfnaux F1 x6 x1) (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 x1) (lfnaux F2 x7 (suc x5)))
            (lfnauxeq3 (F1 x6 x1 (suc x5)))
            (lfnauxeq3 (F2 x7 x1 (suc x5)))))))
    (aleqd ((eq x1 n) x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1)))) (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n)))))
      (aleqd ((eq x1 n) x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1))) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n))))
        (imeq2d ((eq x1 n) (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x1) (lfnaux F2 x7 x1)) (eq (lfnaux F1 x6 n) (lfnaux F2 x7 n)))
          (eqeqd ((eq x1 n) (lfnaux F1 x6 x1) (lfnaux F1 x6 n) (lfnaux F2 x7 x1) (lfnaux F2 x7 n))
            (lfnauxeq3 (F1 x6 x1 n))
            (lfnauxeq3 (F2 x7 x1 n))))))
    (ax_gen (x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0))))))
      (ax_gen (x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0)))))
        (a1i ((al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0))))
          (ax_mp ((eq (lfnaux F2 x7 (d0)) (d0)) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0))))
            (ax_mp ((eq (lfnaux F1 x6 (d0)) (d0)) (im (eq (lfnaux F2 x7 (d0)) (d0)) (eq (lfnaux F1 x6 (d0)) (lfnaux F2 x7 (d0)))))
              (eqtr4 ((lfnaux F1 x6 (d0)) (d0) (lfnaux F2 x7 (d0))))
              (lfnaux0 (F1 x6)))
            (lfnaux0 (F2 x7))))))
    (sylbi ((al x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x5) (lfnaux F2 x7 x5))))) (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5))))) (al x6 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5)))))))
      (cbval (x6 x2 (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x5) (lfnaux F2 x7 x5)))) (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5)))))
        (cbvald (x7 x3 (eq x6 x2) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 x5) (lfnaux F2 x7 x5))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5))))
          (imeqd ((an (eq x6 x2) (eq x7 x3)) (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x6 x5) (lfnaux F2 x7 x5)) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5)))
            (aleqd ((an (eq x6 x2) (eq x7 x3)) i (eq (app F1 (add x6 i)) (app F2 (add x7 i))) (eq (app F1 (add x2 i)) (app F2 (add x3 i))))
              (eqeqd ((an (eq x6 x2) (eq x7 x3)) (app F1 (add x6 i)) (app F1 (add x2 i)) (app F2 (add x7 i)) (app F2 (add x3 i)))
                (appeq2d ((an (eq x6 x2) (eq x7 x3)) F1 (add x6 i) (add x2 i))
                  (addeq1d ((an (eq x6 x2) (eq x7 x3)) x6 x2 i)
                    H3))
                (appeq2d ((an (eq x6 x2) (eq x7 x3)) F2 (add x7 i) (add x3 i))
                  (addeq1d ((an (eq x6 x2) (eq x7 x3)) x7 x3 i)
                    H4))))
            (eqeqd ((an (eq x6 x2) (eq x7 x3)) (lfnaux F1 x6 x5) (lfnaux F1 x2 x5) (lfnaux F2 x7 x5) (lfnaux F2 x3 x5))
              (lfnauxeq2d ((an (eq x6 x2) (eq x7 x3)) F1 x6 x2 x5)
                H3)
              (lfnauxeq2d ((an (eq x6 x2) (eq x7 x3)) F2 x7 x3 x5)
                H4)))))
      (iald (x6 (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5))))) (al x7 (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5))))))
        (iald (x7 (al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5))))) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5)))))
          (rsyl ((al x2 (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5))))) (im (al i (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5)))))
            (ealie ((im (al i (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))) x2 (suc x6) (al x3 (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5)))))
              (ealde ((im (al i (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))) x3 (eq x2 (suc x6)) (suc x7) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5))))
                (bi1d ((an (eq x2 (suc x6)) (eq x3 (suc x7))) (im (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5))) (im (al i (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))))
                  (imeqd ((an (eq x2 (suc x6)) (eq x3 (suc x7))) (al i (eq (app F1 (add x2 i)) (app F2 (add x3 i)))) (al i (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i)))) (eq (lfnaux F1 x2 x5) (lfnaux F2 x3 x5)) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5)))
                    (aleqd ((an (eq x2 (suc x6)) (eq x3 (suc x7))) i (eq (app F1 (add x2 i)) (app F2 (add x3 i))) (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i))))
                      (eqeqd ((an (eq x2 (suc x6)) (eq x3 (suc x7))) (app F1 (add x2 i)) (app F1 (add (suc x6) i)) (app F2 (add x3 i)) (app F2 (add (suc x7) i)))
                        (appeq2d ((an (eq x2 (suc x6)) (eq x3 (suc x7))) F1 (add x2 i) (add (suc x6) i))
                          (addeq1d ((an (eq x2 (suc x6)) (eq x3 (suc x7))) x2 (suc x6) i)
                            H5))
                        (appeq2d ((an (eq x2 (suc x6)) (eq x3 (suc x7))) F2 (add x3 i) (add (suc x7) i))
                          (addeq1d ((an (eq x2 (suc x6)) (eq x3 (suc x7))) x3 (suc x7) i)
                            H6))))
                    (eqeqd ((an (eq x2 (suc x6)) (eq x3 (suc x7))) (lfnaux F1 x2 x5) (lfnaux F1 (suc x6) x5) (lfnaux F2 x3 x5) (lfnaux F2 (suc x7) x5))
                      (lfnauxeq2d ((an (eq x2 (suc x6)) (eq x3 (suc x7))) F1 x2 (suc x6) x5)
                        H5)
                      (lfnauxeq2d ((an (eq x2 (suc x6)) (eq x3 (suc x7))) F2 x3 (suc x7) x5)
                        H6))))))
            (rsyl ((im (al i (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))) (im (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5)))))
              (imim1i ((al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (al i (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5)))
                (sylbi ((al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (al x4 (eq (app F1 (add x6 x4)) (app F2 (add x7 x4)))) (al i (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i)))))
                  (cbval (i x4 (eq (app F1 (add x6 i)) (app F2 (add x7 i))) (eq (app F1 (add x6 x4)) (app F2 (add x7 x4))))
                    (eqeqd ((eq i x4) (app F1 (add x6 i)) (app F1 (add x6 x4)) (app F2 (add x7 i)) (app F2 (add x7 x4)))
                      (appeq2d ((eq i x4) F1 (add x6 i) (add x6 x4))
                        (addeq2 (x6 i x4)))
                      (appeq2d ((eq i x4) F2 (add x7 i) (add x7 x4))
                        (addeq2 (x7 i x4)))))
                  (iald (i (al x4 (eq (app F1 (add x6 x4)) (app F2 (add x7 x4)))) (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i))))
                    (sylibr ((al x4 (eq (app F1 (add x6 x4)) (app F2 (add x7 x4)))) (eq (app F1 (add x6 (suc i))) (app F2 (add x7 (suc i)))) (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i))))
                      (ax_mp ((eq (app F2 (add (suc x7) i)) (app F2 (add x7 (suc i)))) (iff (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i))) (eq (app F1 (add x6 (suc i))) (app F2 (add x7 (suc i))))))
                        (ax_mp ((eq (app F1 (add (suc x6) i)) (app F1 (add x6 (suc i)))) (im (eq (app F2 (add (suc x7) i)) (app F2 (add x7 (suc i)))) (iff (eq (app F1 (add (suc x6) i)) (app F2 (add (suc x7) i))) (eq (app F1 (add x6 (suc i))) (app F2 (add x7 (suc i)))))))
                          (eqeq ((app F1 (add (suc x6) i)) (app F1 (add x6 (suc i))) (app F2 (add (suc x7) i)) (app F2 (add x7 (suc i)))))
                          (ax_mp ((eq (add (suc x6) i) (add x6 (suc i))) (eq (app F1 (add (suc x6) i)) (app F1 (add x6 (suc i)))))
                            (appeq2 (F1 (add (suc x6) i) (add x6 (suc i))))
                            (addSass (x6 i))))
                        (ax_mp ((eq (add (suc x7) i) (add x7 (suc i))) (eq (app F2 (add (suc x7) i)) (app F2 (add x7 (suc i)))))
                          (appeq2 (F2 (add (suc x7) i) (add x7 (suc i))))
                          (addSass (x7 i))))
                      (eale (x4 (suc i) (eq (app F1 (add x6 x4)) (app F2 (add x7 x4))) (eq (app F1 (add x6 (suc i))) (app F2 (add x7 (suc i)))))
                        (eqeqd ((eq x4 (suc i)) (app F1 (add x6 x4)) (app F1 (add x6 (suc i))) (app F2 (add x7 x4)) (app F2 (add x7 (suc i))))
                          (appeq2d ((eq x4 (suc i)) F1 (add x6 x4) (add x6 (suc i)))
                            (addeq2 (x6 x4 (suc i))))
                          (appeq2d ((eq x4 (suc i)) F2 (add x7 x4) (add x7 (suc i)))
                            (addeq2 (x7 x4 (suc i))))))))))
              (a2i ((al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5)) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5))))
                (exp ((al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5)) (eq (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5))))
                  (eqtr4g ((an (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))) (cons (app F1 x6) (lfnaux F1 (suc x6) x5)) (cons (app F2 x7) (lfnaux F2 (suc x7) x5)) (lfnaux F1 x6 (suc x5)) (lfnaux F2 x7 (suc x5)))
                    (lfnauxS (F1 x6 x5))
                    (lfnauxS (F2 x7 x5))
                    (conseqd ((an (al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))) (app F1 x6) (app F2 x7) (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))
                      (anwl ((al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5)) (eq (app F1 x6) (app F2 x7)))
                        (eale (i (d0) (eq (app F1 (add x6 i)) (app F2 (add x7 i))) (eq (app F1 x6) (app F2 x7)))
                          (eqeqd ((eq i (d0)) (app F1 (add x6 i)) (app F1 x6) (app F2 (add x7 i)) (app F2 x7))
                            (appeq2d ((eq i (d0)) F1 (add x6 i) x6)
                              (syl6eq ((eq i (d0)) (add x6 i) (add x6 (d0)) x6)
                                (add0 (x6))
                                (addeq2 (x6 i (d0)))))
                            (appeq2d ((eq i (d0)) F2 (add x7 i) x7)
                              (syl6eq ((eq i (d0)) (add x7 i) (add x7 (d0)) x7)
                                (add0 (x7))
                                (addeq2 (x7 i (d0))))))))
                      (anr ((al i (eq (app F1 (add x6 i)) (app F2 (add x7 i)))) (eq (lfnaux F1 (suc x6) x5) (lfnaux F2 (suc x7) x5))))))))))))))))))))))

(local theorem lfnauxlen ((F set ()) (k nat ()) (n nat ())) ()
  (eq (len (lfnaux F k n)) n)
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(ax_mp ((al x2 (eq (len (lfnaux F x2 n)) n)) (eq (len (lfnaux F k n)) n))
  (eale (x2 k (eq (len (lfnaux F x2 n)) n) (eq (len (lfnaux F k n)) n))
    (eqeq1d ((eq x2 k) (len (lfnaux F x2 n)) (len (lfnaux F k n)) n)
      (leneqd ((eq x2 k) (lfnaux F x2 n) (lfnaux F k n))
        (lfnauxeq2 (F x2 k n)))))
  (ind (x1 x4 n (al x2 (eq (len (lfnaux F x2 x1)) x1)) (al x2 (eq (len (lfnaux F x2 (d0))) (d0))) (al x2 (eq (len (lfnaux F x2 n)) n)) (al x2 (eq (len (lfnaux F x2 x4)) x4)) (al x2 (eq (len (lfnaux F x2 (suc x4))) (suc x4))))
    (aleqd ((eq x1 (d0)) x2 (eq (len (lfnaux F x2 x1)) x1) (eq (len (lfnaux F x2 (d0))) (d0)))
      (eqeqd ((eq x1 (d0)) (len (lfnaux F x2 x1)) (len (lfnaux F x2 (d0))) x1 (d0))
        (leneqd ((eq x1 (d0)) (lfnaux F x2 x1) (lfnaux F x2 (d0)))
          (lfnauxeq3 (F x2 x1 (d0))))
        (id ((eq x1 (d0))))))
    (aleqd ((eq x1 x4) x2 (eq (len (lfnaux F x2 x1)) x1) (eq (len (lfnaux F x2 x4)) x4))
      (eqeqd ((eq x1 x4) (len (lfnaux F x2 x1)) (len (lfnaux F x2 x4)) x1 x4)
        (leneqd ((eq x1 x4) (lfnaux F x2 x1) (lfnaux F x2 x4))
          (lfnauxeq3 (F x2 x1 x4)))
        (id ((eq x1 x4)))))
    (aleqd ((eq x1 (suc x4)) x2 (eq (len (lfnaux F x2 x1)) x1) (eq (len (lfnaux F x2 (suc x4))) (suc x4)))
      (eqeqd ((eq x1 (suc x4)) (len (lfnaux F x2 x1)) (len (lfnaux F x2 (suc x4))) x1 (suc x4))
        (leneqd ((eq x1 (suc x4)) (lfnaux F x2 x1) (lfnaux F x2 (suc x4)))
          (lfnauxeq3 (F x2 x1 (suc x4))))
        (id ((eq x1 (suc x4))))))
    (aleqd ((eq x1 n) x2 (eq (len (lfnaux F x2 x1)) x1) (eq (len (lfnaux F x2 n)) n))
      (eqeqd ((eq x1 n) (len (lfnaux F x2 x1)) (len (lfnaux F x2 n)) x1 n)
        (leneqd ((eq x1 n) (lfnaux F x2 x1) (lfnaux F x2 n))
          (lfnauxeq3 (F x2 x1 n)))
        (id ((eq x1 n)))))
    (ax_gen (x2 (eq (len (lfnaux F x2 (d0))) (d0)))
      (ax_mp ((eq (len (d0)) (d0)) (eq (len (lfnaux F x2 (d0))) (d0)))
        (ax_mp ((eq (len (lfnaux F x2 (d0))) (len (d0))) (im (eq (len (d0)) (d0)) (eq (len (lfnaux F x2 (d0))) (d0))))
          (eqtr ((len (lfnaux F x2 (d0))) (len (d0)) (d0)))
          (ax_mp ((eq (lfnaux F x2 (d0)) (d0)) (eq (len (lfnaux F x2 (d0))) (len (d0))))
            (leneq ((lfnaux F x2 (d0)) (d0)))
            (lfnaux0 (F x2))))
        (len0 ())))
    (sylbi ((al x2 (eq (len (lfnaux F x2 x4)) x4)) (al x3 (eq (len (lfnaux F x3 x4)) x4)) (al x2 (eq (len (lfnaux F x2 (suc x4))) (suc x4))))
      (cbval (x2 x3 (eq (len (lfnaux F x2 x4)) x4) (eq (len (lfnaux F x3 x4)) x4))
        (eqeq1d ((eq x2 x3) (len (lfnaux F x2 x4)) (len (lfnaux F x3 x4)) x4)
          (leneqd ((eq x2 x3) (lfnaux F x2 x4) (lfnaux F x3 x4))
            (lfnauxeq2 (F x2 x3 x4)))))
      (iald (x2 (al x3 (eq (len (lfnaux F x3 x4)) x4)) (eq (len (lfnaux F x2 (suc x4))) (suc x4)))
        (syl5eq ((al x3 (eq (len (lfnaux F x3 x4)) x4)) (len (lfnaux F x2 (suc x4))) (len (cons (app F x2) (lfnaux F (suc x2) x4))) (suc x4))
          (ax_mp ((eq (lfnaux F x2 (suc x4)) (cons (app F x2) (lfnaux F (suc x2) x4))) (eq (len (lfnaux F x2 (suc x4))) (len (cons (app F x2) (lfnaux F (suc x2) x4)))))
            (leneq ((lfnaux F x2 (suc x4)) (cons (app F x2) (lfnaux F (suc x2) x4))))
            (lfnauxS (F x2 x4)))
          (syl5eq ((al x3 (eq (len (lfnaux F x3 x4)) x4)) (len (cons (app F x2) (lfnaux F (suc x2) x4))) (suc (len (lfnaux F (suc x2) x4))) (suc x4))
            (lenS ((app F x2) (lfnaux F (suc x2) x4)))
            (suceqd ((al x3 (eq (len (lfnaux F x3 x4)) x4)) (len (lfnaux F (suc x2) x4)) x4)
              (eale (x3 (suc x2) (eq (len (lfnaux F x3 x4)) x4) (eq (len (lfnaux F (suc x2) x4)) x4))
                (eqeq1d ((eq x3 (suc x2)) (len (lfnaux F x3 x4)) (len (lfnaux F (suc x2) x4)) x4)
                  (leneqd ((eq x3 (suc x2)) (lfnaux F x3 x4) (lfnaux F (suc x2) x4))
                    (lfnauxeq2 (F x3 (suc x2) x4)))))))))))))

(local theorem lfnauxnth ((F set ()) (i nat ()) (k nat ()) (n nat ())) ()
  (im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i)))))
((x1 nat) (x2 nat) (x3 nat) (x4 nat) (x5 nat) (x6 nat))
(:let H1 (anl ((eq x6 i) (eq x5 k)))
(:let H2 (anr ((eq x6 i) (eq x5 k)))
(:let H3 (anl ((eq x6 x4) (eq x5 x3)))
(:let H4 (anr ((eq x6 x4) (eq x5 x3)))
(:let H5 (anr ((an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0))))
(:let H6 (anr ((an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))))
(ax_mp ((al x6 (al x5 (im (lt x6 n) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6))))))) (im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i))))))
  (ealie ((im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i))))) x6 i (al x5 (im (lt x6 n) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6)))))))
    (ealde ((im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i))))) x5 (eq x6 i) k (im (lt x6 n) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6))))))
      (bi1d ((an (eq x6 i) (eq x5 k)) (im (lt x6 n) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6))))) (im (lt i n) (eq (nth i (lfnaux F k n)) (suc (app F (add k i))))))
        (imeqd ((an (eq x6 i) (eq x5 k)) (lt x6 n) (lt i n) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6)))) (eq (nth i (lfnaux F k n)) (suc (app F (add k i)))))
          (lteq1d ((an (eq x6 i) (eq x5 k)) x6 i n)
            H1)
          (eqeqd ((an (eq x6 i) (eq x5 k)) (nth x6 (lfnaux F x5 n)) (nth i (lfnaux F k n)) (suc (app F (add x5 x6))) (suc (app F (add k i))))
            (ntheqd ((an (eq x6 i) (eq x5 k)) x6 i (lfnaux F x5 n) (lfnaux F k n))
              H1
              (lfnauxeq2d ((an (eq x6 i) (eq x5 k)) F x5 k n)
                H2))
            (suceqd ((an (eq x6 i) (eq x5 k)) (app F (add x5 x6)) (app F (add k i)))
              (appeq2d ((an (eq x6 i) (eq x5 k)) F (add x5 x6) (add k i))
                (addeqd ((an (eq x6 i) (eq x5 k)) x5 k x6 i)
                  H2
                  H1))))))))
  (ind (x1 x2 n (al x6 (al x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6))))))) (al x6 (al x5 (im (lt x6 (d0)) (eq (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6))))))) (al x6 (al x5 (im (lt x6 n) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6))))))) (al x6 (al x5 (im (lt x6 x2) (eq (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6))))))) (al x6 (al x5 (im (lt x6 (suc x2)) (eq (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6))))))))
    (aleqd ((eq x1 (d0)) x6 (al x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6)))))) (al x5 (im (lt x6 (d0)) (eq (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6)))))))
      (aleqd ((eq x1 (d0)) x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6))))) (im (lt x6 (d0)) (eq (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6))))))
        (imeqd ((eq x1 (d0)) (lt x6 x1) (lt x6 (d0)) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6)))) (eq (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6)))))
          (lteq2 (x6 x1 (d0)))
          (eqeq1d ((eq x1 (d0)) (nth x6 (lfnaux F x5 x1)) (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6))))
            (ntheq2d ((eq x1 (d0)) x6 (lfnaux F x5 x1) (lfnaux F x5 (d0)))
              (lfnauxeq3 (F x5 x1 (d0))))))))
    (aleqd ((eq x1 x2) x6 (al x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6)))))) (al x5 (im (lt x6 x2) (eq (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6)))))))
      (aleqd ((eq x1 x2) x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6))))) (im (lt x6 x2) (eq (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6))))))
        (imeqd ((eq x1 x2) (lt x6 x1) (lt x6 x2) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6)))) (eq (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6)))))
          (lteq2 (x6 x1 x2))
          (eqeq1d ((eq x1 x2) (nth x6 (lfnaux F x5 x1)) (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6))))
            (ntheq2d ((eq x1 x2) x6 (lfnaux F x5 x1) (lfnaux F x5 x2))
              (lfnauxeq3 (F x5 x1 x2)))))))
    (aleqd ((eq x1 (suc x2)) x6 (al x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6)))))) (al x5 (im (lt x6 (suc x2)) (eq (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6)))))))
      (aleqd ((eq x1 (suc x2)) x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6))))) (im (lt x6 (suc x2)) (eq (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6))))))
        (imeqd ((eq x1 (suc x2)) (lt x6 x1) (lt x6 (suc x2)) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6)))) (eq (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6)))))
          (lteq2 (x6 x1 (suc x2)))
          (eqeq1d ((eq x1 (suc x2)) (nth x6 (lfnaux F x5 x1)) (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6))))
            (ntheq2d ((eq x1 (suc x2)) x6 (lfnaux F x5 x1) (lfnaux F x5 (suc x2)))
              (lfnauxeq3 (F x5 x1 (suc x2))))))))
    (aleqd ((eq x1 n) x6 (al x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6)))))) (al x5 (im (lt x6 n) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6)))))))
      (aleqd ((eq x1 n) x5 (im (lt x6 x1) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6))))) (im (lt x6 n) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6))))))
        (imeqd ((eq x1 n) (lt x6 x1) (lt x6 n) (eq (nth x6 (lfnaux F x5 x1)) (suc (app F (add x5 x6)))) (eq (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6)))))
          (lteq2 (x6 x1 n))
          (eqeq1d ((eq x1 n) (nth x6 (lfnaux F x5 x1)) (nth x6 (lfnaux F x5 n)) (suc (app F (add x5 x6))))
            (ntheq2d ((eq x1 n) x6 (lfnaux F x5 x1) (lfnaux F x5 n))
              (lfnauxeq3 (F x5 x1 n)))))))
    (ax_gen (x6 (al x5 (im (lt x6 (d0)) (eq (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6)))))))
      (ax_gen (x5 (im (lt x6 (d0)) (eq (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6))))))
        (ax_mp ((not (lt x6 (d0))) (im (lt x6 (d0)) (eq (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6))))))
          (absurd ((lt x6 (d0)) (eq (nth x6 (lfnaux F x5 (d0))) (suc (app F (add x5 x6))))))
          (lt02 (x6)))))
    (sylbi ((al x6 (al x5 (im (lt x6 x2) (eq (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6))))))) (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (al x6 (al x5 (im (lt x6 (suc x2)) (eq (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6))))))))
      (cbval (x6 x4 (al x5 (im (lt x6 x2) (eq (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6)))))) (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4)))))))
        (cbvald (x5 x3 (eq x6 x4) (im (lt x6 x2) (eq (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6))))) (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))
          (imeqd ((an (eq x6 x4) (eq x5 x3)) (lt x6 x2) (lt x4 x2) (eq (nth x6 (lfnaux F x5 x2)) (suc (app F (add x5 x6)))) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4)))))
            (lteq1d ((an (eq x6 x4) (eq x5 x3)) x6 x4 x2)
              H3)
            (eqeqd ((an (eq x6 x4) (eq x5 x3)) (nth x6 (lfnaux F x5 x2)) (nth x4 (lfnaux F x3 x2)) (suc (app F (add x5 x6))) (suc (app F (add x3 x4))))
              (ntheqd ((an (eq x6 x4) (eq x5 x3)) x6 x4 (lfnaux F x5 x2) (lfnaux F x3 x2))
                H3
                (lfnauxeq2d ((an (eq x6 x4) (eq x5 x3)) F x5 x3 x2)
                  H4))
              (suceqd ((an (eq x6 x4) (eq x5 x3)) (app F (add x5 x6)) (app F (add x3 x4)))
                (appeq2d ((an (eq x6 x4) (eq x5 x3)) F (add x5 x6) (add x3 x4))
                  (addeqd ((an (eq x6 x4) (eq x5 x3)) x5 x3 x6 x4)
                    H4
                    H3)))))))
      (iald (x6 (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (al x5 (im (lt x6 (suc x2)) (eq (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6)))))))
        (iald (x5 (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (im (lt x6 (suc x2)) (eq (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6))))))
          (exp ((al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2)) (eq (nth x6 (lfnaux F x5 (suc x2))) (suc (app F (add x5 x6)))))
            (syl5eq ((an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (nth x6 (lfnaux F x5 (suc x2))) (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F (add x5 x6))))
              (ax_mp ((eq (lfnaux F x5 (suc x2)) (cons (app F x5) (lfnaux F (suc x5) x2))) (eq (nth x6 (lfnaux F x5 (suc x2))) (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2)))))
                (ntheq2 (x6 (lfnaux F x5 (suc x2)) (cons (app F x5) (lfnaux F (suc x5) x2))))
                (lfnauxS (F x5 x2)))
              (casesd ((an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0)) (eq (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F (add x5 x6)))))
                (exp ((an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0)) (eq (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F (add x5 x6)))))
                  (eqtr4d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0))) (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F x5)) (suc (app F (add x5 x6))))
                    (syl6eq ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0))) (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (nth (d0) (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F x5)))
                      (nthZ ((app F x5) (lfnaux F (suc x5) x2)))
                      (ntheq1d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0))) x6 (d0) (cons (app F x5) (lfnaux F (suc x5) x2)))
                        H5))
                    (suceqd ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0))) (app F (add x5 x6)) (app F x5))
                      (appeq2d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0))) F (add x5 x6) x5)
                        (syl6eq ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0))) (add x5 x6) (add x5 (d0)) x5)
                          (add02 (x5))
                          (addeq2d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (d0))) x5 x6 (d0))
                            H5))))))
                (syl5bi ((an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (not (eq x6 (d0))) (ex x4 (eq x6 (suc x4))) (eq (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F (add x5 x6)))))
                  (:conv (iff (not (eq x6 (d0))) (ex x4 (eq x6 (suc x4))))
                    (iff
                      (:sym (:unfold ne (x6 (d0)) ()
                        (not (eq x6 (d0)))))
                      (ex x4 (eq x6 (suc x4))))
                    (exsuc (x4 x6)))
                  (eexdh (x4 (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4)) (eq (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F (add x5 x6)))))
                    (nfan (x4 (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2)))
                      (nfal1 (x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))))
                      (nfv ((lt x6 (suc x2)) x4)))
                    (nfv ((eq (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F (add x5 x6)))) x4))
                    (exp ((an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4)) (eq (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F (add x5 x6)))))
                      (eqtrd ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (nth x6 (cons (app F x5) (lfnaux F (suc x5) x2))) (nth (suc x4) (cons (app F x5) (lfnaux F (suc x5) x2))) (suc (app F (add x5 x6))))
                        (ntheq1d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) x6 (suc x4) (cons (app F x5) (lfnaux F (suc x5) x2)))
                          H6)
                        (syl5eq ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (nth (suc x4) (cons (app F x5) (lfnaux F (suc x5) x2))) (nth x4 (lfnaux F (suc x5) x2)) (suc (app F (add x5 x6))))
                          (nthS (x4 (app F x5) (lfnaux F (suc x5) x2)))
                          (eqtr4d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (nth x4 (lfnaux F (suc x5) x2)) (suc (app F (add (suc x5) x4))) (suc (app F (add x5 x6))))
                            (mpd ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (lt x4 x2) (eq (nth x4 (lfnaux F (suc x5) x2)) (suc (app F (add (suc x5) x4)))))
                              (sylibr ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (lt (suc x4) (suc x2)) (lt x4 x2))
                                (ltsuc (x4 x2))
                                (mpbid ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (lt x6 (suc x2)) (lt (suc x4) (suc x2)))
                                  (lteq1d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) x6 (suc x4) (suc x2))
                                    H6)
                                  (anlr ((al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2)) (eq x6 (suc x4))))))
                              (rsyl ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4)))))) (im (lt x4 x2) (eq (nth x4 (lfnaux F (suc x5) x2)) (suc (app F (add (suc x5) x4))))))
                                (anwll ((al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2)) (eq x6 (suc x4)) (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4)))))))
                                  (eal (x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4)))))))))
                                (eale (x3 (suc x5) (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))) (im (lt x4 x2) (eq (nth x4 (lfnaux F (suc x5) x2)) (suc (app F (add (suc x5) x4))))))
                                  (imeq2d ((eq x3 (suc x5)) (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4)))) (eq (nth x4 (lfnaux F (suc x5) x2)) (suc (app F (add (suc x5) x4)))))
                                    (eqeqd ((eq x3 (suc x5)) (nth x4 (lfnaux F x3 x2)) (nth x4 (lfnaux F (suc x5) x2)) (suc (app F (add x3 x4))) (suc (app F (add (suc x5) x4))))
                                      (ntheq2d ((eq x3 (suc x5)) x4 (lfnaux F x3 x2) (lfnaux F (suc x5) x2))
                                        (lfnauxeq2 (F x3 (suc x5) x2)))
                                      (suceqd ((eq x3 (suc x5)) (app F (add x3 x4)) (app F (add (suc x5) x4)))
                                        (appeq2d ((eq x3 (suc x5)) F (add x3 x4) (add (suc x5) x4))
                                          (addeq1 (x3 (suc x5) x4)))))))))
                            (suceqd ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (app F (add x5 x6)) (app F (add (suc x5) x4)))
                              (appeq2d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) F (add x5 x6) (add (suc x5) x4))
                                (syl6eqr ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) (add x5 x6) (add x5 (suc x4)) (add (suc x5) x4))
                                  (addSass (x5 x4))
                                  (addeq2d ((an (an (al x4 (al x3 (im (lt x4 x2) (eq (nth x4 (lfnaux F x3 x2)) (suc (app F (add x3 x4))))))) (lt x6 (suc x2))) (eq x6 (suc x4))) x5 x6 (suc x4))
                                    H6)))))))))))))))))))))))))

(local def lfn ((F set ()) (n nat ())) (nat ())
()
(lfnaux F (d0) n))

(local theorem lfneqd ((_G wff ()) (F1 set ()) (F2 set ()) (n1 nat ()) (n2 nat ()))
  ((hF (im _G (eqs F1 F2)))
   (hn (im _G (eq n1 n2))))
  (im _G (eq (lfn F1 n1) (lfn F2 n2)))
()
(:conv (im _G (eq (lfn F1 n1) (lfn F2 n2)))
  (im
    _G
    (eq
      (:unfold lfn (F1 n1) ()
        (lfnaux F1 (d0) n1))
      (:unfold lfn (F2 n2) ()
        (lfnaux F2 (d0) n2))))
  (lfnauxeqd (_G F1 F2 (d0) (d0) n1 n2)
    hF
    (eqidd (_G (d0)))
    hn)))

(local theorem lfneq ((F1 set ()) (F2 set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eqs F1 F2) (im (eq n1 n2) (eq (lfn F1 n1) (lfn F2 n2))))
()
(exp ((eqs F1 F2) (eq n1 n2) (eq (lfn F1 n1) (lfn F2 n2)))
  (lfneqd ((an (eqs F1 F2) (eq n1 n2)) F1 F2 n1 n2)
    (anl ((eqs F1 F2) (eq n1 n2)))
    (anr ((eqs F1 F2) (eq n1 n2))))))

(local theorem lfneq1d ((G wff ()) (F1 set ()) (F2 set ()) (n nat ()))
  ((h (im G (eqs F1 F2))))
  (im G (eq (lfn F1 n) (lfn F2 n)))
()
(lfneqd (G F1 F2 n n)
  h
  (eqidd (G n))))

(local theorem lfneq1 ((F1 set ()) (F2 set ()) (n nat ())) ()
  (im (eqs F1 F2) (eq (lfn F1 n) (lfn F2 n)))
()
(lfneq1d ((eqs F1 F2) F1 F2 n)
  (id ((eqs F1 F2)))))

(local theorem lfneq2d ((G wff ()) (F set ()) (n1 nat ()) (n2 nat ()))
  ((h (im G (eq n1 n2))))
  (im G (eq (lfn F n1) (lfn F n2)))
()
(lfneqd (G F F n1 n2)
  (eqsidd (G F))
  h))

(local theorem lfneq2 ((F set ()) (n1 nat ()) (n2 nat ())) ()
  (im (eq n1 n2) (eq (lfn F n1) (lfn F n2)))
()
(lfneq2d ((eq n1 n2) F n1 n2)
  (id ((eq n1 n2)))))

(local theorem lfn0 ((F set ())) ()
  (eq (lfn F (d0)) (d0))
()
(:conv (eq (lfn F (d0)) (d0))
  (eq
    (:unfold lfn (F (d0)) ()
      (lfnaux F (d0) (d0)))
    (d0))
  (lfnaux0 (F (d0)))))

(local theorem lfnS ((F set ()) (i nat) (n nat ())) ()
  (eq (lfn F (suc n)) (cons (app F (d0)) (lfn (lam i (app F (suc i))) n)))
((x1 nat))
(:conv (eq (lfn F (suc n)) (cons (app F (d0)) (lfn (lam i (app F (suc i))) n)))
  (eq
    (:unfold lfn (F (suc n)) ()
      (lfnaux F (d0) (suc n)))
    (cons
      (app F (d0))
      (:unfold lfn ((lam i (app F (suc i))) n) ()
        (lfnaux (lam i (app F (suc i))) (d0) n))))
  (ax_mp ((eq (cons (app F (d0)) (lfnaux (lam i (app F (suc i))) (d0) n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n))) (eq (lfnaux F (d0) (suc n)) (cons (app F (d0)) (lfnaux (lam i (app F (suc i))) (d0) n))))
    (ax_mp ((eq (lfnaux F (d0) (suc n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n))) (im (eq (cons (app F (d0)) (lfnaux (lam i (app F (suc i))) (d0) n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n))) (eq (lfnaux F (d0) (suc n)) (cons (app F (d0)) (lfnaux (lam i (app F (suc i))) (d0) n)))))
      (eqtr4 ((lfnaux F (d0) (suc n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n)) (cons (app F (d0)) (lfnaux (lam i (app F (suc i))) (d0) n))))
      (lfnauxS (F (d0) n)))
    (ax_mp ((eq (lfnaux (lam i (app F (suc i))) (d0) n) (lfnaux F (suc (d0)) n)) (eq (cons (app F (d0)) (lfnaux (lam i (app F (suc i))) (d0) n)) (cons (app F (d0)) (lfnaux F (suc (d0)) n))))
      (conseq2 ((app F (d0)) (lfnaux (lam i (app F (suc i))) (d0) n) (lfnaux F (suc (d0)) n)))
      (ax_mp ((al x1 (eq (app (lam i (app F (suc i))) (add (d0) x1)) (app F (add (suc (d0)) x1)))) (eq (lfnaux (lam i (app F (suc i))) (d0) n) (lfnaux F (suc (d0)) n)))
        (lfnauxshift ((lam i (app F (suc i))) F x1 (d0) (suc (d0)) n))
        (ax_gen (x1 (eq (app (lam i (app F (suc i))) (add (d0) x1)) (app F (add (suc (d0)) x1))))
          (applame ((add (d0) x1) (app F (add (suc (d0)) x1)) i (app F (suc i)))
            (appeq2d ((eq i (add (d0) x1)) F (suc i) (add (suc (d0)) x1))
              (syl6eqr ((eq i (add (d0) x1)) (suc i) (suc (add (d0) x1)) (add (suc (d0)) x1))
                (addS1 ((d0) x1))
                (suceq (i (add (d0) x1))))))))))))

(local theorem lenlfn ((F set ()) (n nat ())) ()
  (eq (len (lfn F n)) n)
()
(:conv (eq (len (lfn F n)) n)
  (eq
    (len
      (:unfold lfn (F n) ()
        (lfnaux F (d0) n)))
    n)
  (lfnauxlen (F (d0) n))))

(local theorem nthlfn ((F set ()) (i nat ()) (n nat ())) ()
  (im (lt i n) (eq (nth i (lfn F n)) (suc (app F i))))
()
(syl6eq ((lt i n) (nth i (lfn F n)) (suc (app F (add (d0) i))) (suc (app F i)))
  (ax_mp ((eq (app F (add (d0) i)) (app F i)) (eq (suc (app F (add (d0) i))) (suc (app F i))))
    (suceq ((app F (add (d0) i)) (app F i)))
    (ax_mp ((eq (add (d0) i) i) (eq (app F (add (d0) i)) (app F i)))
      (appeq2 (F (add (d0) i) i))
      (add01 (i))))
  (:conv (im (lt i n) (eq (nth i (lfn F n)) (suc (app F (add (d0) i)))))
    (im
      (lt i n)
      (eq
        (nth
          i
          (:unfold lfn (F n) ()
            (lfnaux F (d0) n)))
        (suc (app F (add (d0) i)))))
    (lfnauxnth (F i (d0) n)))))

(local theorem lfnnth ((i nat) (l nat ())) ()
  (eq (lfn (lam i (sub (nth i l) (d1))) (len l)) l)
((x1 nat) (x2 nat) (x3 nat) (x4 nat))
(listind (x1 x3 x4 l (eq (lfn (lam i (sub (nth i x1) (d1))) (len x1)) x1) (eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (d0)) (eq (lfn (lam i (sub (nth i l) (d1))) (len l)) l) (eq (lfn (lam i (sub (nth i x4) (d1))) (len x4)) x4) (eq (lfn (lam i (sub (nth i (cons x3 x4)) (d1))) (len (cons x3 x4))) (cons x3 x4)))
  (eqeqd ((eq x1 (d0)) (lfn (lam i (sub (nth i x1) (d1))) (len x1)) (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) x1 (d0))
    (lfneqd ((eq x1 (d0)) (lam i (sub (nth i x1) (d1))) (lam i (sub (nth i (d0)) (d1))) (len x1) (len (d0)))
      (lameqd ((eq x1 (d0)) i (sub (nth i x1) (d1)) (sub (nth i (d0)) (d1)))
        (subeq1d ((eq x1 (d0)) (nth i x1) (nth i (d0)) (d1))
          (ntheq2 (i x1 (d0)))))
      (leneq (x1 (d0))))
    (id ((eq x1 (d0)))))
  (eqeqd ((eq x1 x4) (lfn (lam i (sub (nth i x1) (d1))) (len x1)) (lfn (lam i (sub (nth i x4) (d1))) (len x4)) x1 x4)
    (lfneqd ((eq x1 x4) (lam i (sub (nth i x1) (d1))) (lam i (sub (nth i x4) (d1))) (len x1) (len x4))
      (lameqd ((eq x1 x4) i (sub (nth i x1) (d1)) (sub (nth i x4) (d1)))
        (subeq1d ((eq x1 x4) (nth i x1) (nth i x4) (d1))
          (ntheq2 (i x1 x4))))
      (leneq (x1 x4)))
    (id ((eq x1 x4))))
  (eqeqd ((eq x1 (cons x3 x4)) (lfn (lam i (sub (nth i x1) (d1))) (len x1)) (lfn (lam i (sub (nth i (cons x3 x4)) (d1))) (len (cons x3 x4))) x1 (cons x3 x4))
    (lfneqd ((eq x1 (cons x3 x4)) (lam i (sub (nth i x1) (d1))) (lam i (sub (nth i (cons x3 x4)) (d1))) (len x1) (len (cons x3 x4)))
      (lameqd ((eq x1 (cons x3 x4)) i (sub (nth i x1) (d1)) (sub (nth i (cons x3 x4)) (d1)))
        (subeq1d ((eq x1 (cons x3 x4)) (nth i x1) (nth i (cons x3 x4)) (d1))
          (ntheq2 (i x1 (cons x3 x4)))))
      (leneq (x1 (cons x3 x4))))
    (id ((eq x1 (cons x3 x4)))))
  (eqeqd ((eq x1 l) (lfn (lam i (sub (nth i x1) (d1))) (len x1)) (lfn (lam i (sub (nth i l) (d1))) (len l)) x1 l)
    (lfneqd ((eq x1 l) (lam i (sub (nth i x1) (d1))) (lam i (sub (nth i l) (d1))) (len x1) (len l))
      (lameqd ((eq x1 l) i (sub (nth i x1) (d1)) (sub (nth i l) (d1)))
        (subeq1d ((eq x1 l) (nth i x1) (nth i l) (d1))
          (ntheq2 (i x1 l))))
      (leneq (x1 l)))
    (id ((eq x1 l))))
  (ax_mp ((eq (lfn (lam i (sub (nth i (d0)) (d1))) (d0)) (d0)) (eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (d0)))
    (ax_mp ((eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (lfn (lam i (sub (nth i (d0)) (d1))) (d0))) (im (eq (lfn (lam i (sub (nth i (d0)) (d1))) (d0)) (d0)) (eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (d0))))
      (eqtr ((lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (lfn (lam i (sub (nth i (d0)) (d1))) (d0)) (d0)))
      (ax_mp ((eq (len (d0)) (d0)) (eq (lfn (lam i (sub (nth i (d0)) (d1))) (len (d0))) (lfn (lam i (sub (nth i (d0)) (d1))) (d0))))
        (lfneq2 ((lam i (sub (nth i (d0)) (d1))) (len (d0)) (d0)))
        (len0 ())))
    (:conv (eq (lfn (lam i (sub (nth i (d0)) (d1))) (d0)) (d0))
      (eq
        (:unfold lfn ((lam i (sub (nth i (d0)) (d1))) (d0)) ()
          (lfnaux (lam i (sub (nth i (d0)) (d1))) (d0) (d0)))
        (d0))
      (lfnaux0 ((lam i (sub (nth i (d0)) (d1))) (d0)))))
  (syl5eq ((eq (lfn (lam i (sub (nth i x4) (d1))) (len x4)) x4) (lfn (lam i (sub (nth i (cons x3 x4)) (d1))) (len (cons x3 x4))) (lfn (lam i (sub (nth i (cons x3 x4)) (d1))) (suc (len x4))) (cons x3 x4))
    (ax_mp ((eq (len (cons x3 x4)) (suc (len x4))) (eq (lfn (lam i (sub (nth i (cons x3 x4)) (d1))) (len (cons x3 x4))) (lfn (lam i (sub (nth i (cons x3 x4)) (d1))) (suc (len x4)))))
      (lfneq2 ((lam i (sub (nth i (cons x3 x4)) (d1))) (len (cons x3 x4)) (suc (len x4))))
      (lenS (x3 x4)))
    (syl5eq ((eq (lfn (lam i (sub (nth i x4) (d1))) (len x4)) x4) (lfn (lam i (sub (nth i (cons x3 x4)) (d1))) (suc (len x4))) (cons (app (lam i (sub (nth i (cons x3 x4)) (d1))) (d0)) (lfn (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (len x4))) (cons x3 x4))
      (lfnS ((lam i (sub (nth i (cons x3 x4)) (d1))) x2 (len x4)))
      (syl5eq ((eq (lfn (lam i (sub (nth i x4) (d1))) (len x4)) x4) (cons (app (lam i (sub (nth i (cons x3 x4)) (d1))) (d0)) (lfn (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (len x4))) (cons x3 (lfn (lam i (sub (nth i x4) (d1))) (len x4))) (cons x3 x4))
        (ax_mp ((eq (lfn (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (len x4)) (lfn (lam i (sub (nth i x4) (d1))) (len x4))) (eq (cons (app (lam i (sub (nth i (cons x3 x4)) (d1))) (d0)) (lfn (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (len x4))) (cons x3 (lfn (lam i (sub (nth i x4) (d1))) (len x4)))))
          (ax_mp ((eq (app (lam i (sub (nth i (cons x3 x4)) (d1))) (d0)) x3) (im (eq (lfn (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (len x4)) (lfn (lam i (sub (nth i x4) (d1))) (len x4))) (eq (cons (app (lam i (sub (nth i (cons x3 x4)) (d1))) (d0)) (lfn (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (len x4))) (cons x3 (lfn (lam i (sub (nth i x4) (d1))) (len x4))))))
            (conseq ((app (lam i (sub (nth i (cons x3 x4)) (d1))) (d0)) x3 (lfn (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (len x4)) (lfn (lam i (sub (nth i x4) (d1))) (len x4))))
            (applame ((d0) x3 i (sub (nth i (cons x3 x4)) (d1)))
              (syl6eq ((eq i (d0)) (sub (nth i (cons x3 x4)) (d1)) (sub (suc x3) (d1)) x3)
                (sucsub1 (x3))
                (subeq1d ((eq i (d0)) (nth i (cons x3 x4)) (suc x3) (d1))
                  (syl6eq ((eq i (d0)) (nth i (cons x3 x4)) (nth (d0) (cons x3 x4)) (suc x3))
                    (nthZ (x3 x4))
                    (ntheq1 (i (d0) (cons x3 x4))))))))
          (ax_mp ((eqs (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (lam i (sub (nth i x4) (d1)))) (eq (lfn (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (len x4)) (lfn (lam i (sub (nth i x4) (d1))) (len x4))))
            (lfneq1 ((lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (lam i (sub (nth i x4) (d1))) (len x4)))
            (ax_mp ((eqs (lam x2 (sub (nth x2 x4) (d1))) (lam i (sub (nth i x4) (d1)))) (eqs (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (lam i (sub (nth i x4) (d1)))))
              (ax_mp ((eqs (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (lam x2 (sub (nth x2 x4) (d1)))) (im (eqs (lam x2 (sub (nth x2 x4) (d1))) (lam i (sub (nth i x4) (d1)))) (eqs (lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (lam i (sub (nth i x4) (d1))))))
                (eqstr ((lam x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2))) (lam x2 (sub (nth x2 x4) (d1))) (lam i (sub (nth i x4) (d1)))))
                (lameqi (x2 (app (lam i (sub (nth i (cons x3 x4)) (d1))) (suc x2)) (sub (nth x2 x4) (d1)))
                  (applame ((suc x2) (sub (nth x2 x4) (d1)) i (sub (nth i (cons x3 x4)) (d1)))
                    (subeq1d ((eq i (suc x2)) (nth i (cons x3 x4)) (nth x2 x4) (d1))
                      (syl6eq ((eq i (suc x2)) (nth i (cons x3 x4)) (nth (suc x2) (cons x3 x4)) (nth x2 x4))
                        (nthS (x2 x3 x4))
                        (ntheq1 (i (suc x2) (cons x3 x4))))))))
              (cbvlam (x2 i (sub (nth x2 x4) (d1)) (sub (nth i x4) (d1)))
                (subeq1d ((eq x2 i) (nth x2 x4) (nth i x4) (d1))
                  (ntheq1 (x2 i x4)))))))
        (conseq2 (x3 (lfn (lam i (sub (nth i x4) (d1))) (len x4)) x4)))))))

(local theorem nthext2d ((G wff ()) (l1 nat ()) (l2 nat ()) (n nat ()) (i nat))
  ((h1 (im G (eq (len l1) n)))
   (h2 (im G (eq (len l2) n)))
   (h3 (im (an G (lt i n)) (eq (nth i l1) (nth i l2)))))
  (im G (eq l1 l2))
()
(eqtr3g (G (lfn (lam i (sub (nth i l1) (d1))) (len l1)) (lfn (lam i (sub (nth i l2) (d1))) (len l2)) l1 l2)
  (lfnnth (i l1))
  (lfnnth (i l2))
  (lfneqd (G (lam i (sub (nth i l1) (d1))) (lam i (sub (nth i l2) (d1))) (len l1) (len l2))
    (lameqd (G i (sub (nth i l1) (d1)) (sub (nth i l2) (d1)))
      (subeq1d (G (nth i l1) (nth i l2) (d1))
        (casesda (G (lt i n) (eq (nth i l1) (nth i l2)))
          h3
          (eqtr4d ((an G (not (lt i n))) (nth i l1) (d0) (nth i l2))
            (imp (G (not (lt i n)) (eq (nth i l1) (d0)))
              (con1d (G (eq (nth i l1) (d0)) (lt i n))
                (syl5bi (G (not (eq (nth i l1) (d0))) (lt i (len l1)) (lt i n))
                  (:conv (iff (not (eq (nth i l1) (d0))) (lt i (len l1)))
                    (iff
                      (:sym (:unfold ne ((nth i l1) (d0)) ()
                        (not (eq (nth i l1) (d0)))))
                      (lt i (len l1)))
                    (nthne0 (l1 i)))
                  (bi1d (G (lt i (len l1)) (lt i n))
                    (lteq2d (G i (len l1) n)
                      h1)))))
            (imp (G (not (lt i n)) (eq (nth i l2) (d0)))
              (con1d (G (eq (nth i l2) (d0)) (lt i n))
                (syl5bi (G (not (eq (nth i l2) (d0))) (lt i (len l2)) (lt i n))
                  (:conv (iff (not (eq (nth i l2) (d0))) (lt i (len l2)))
                    (iff
                      (:sym (:unfold ne ((nth i l2) (d0)) ()
                        (not (eq (nth i l2) (d0)))))
                      (lt i (len l2)))
                    (nthne0 (l2 i)))
                  (bi1d (G (lt i (len l2)) (lt i n))
                    (lteq2d (G i (len l2) n)
                      h2)))))))))
    (eqtr4d (G (len l1) n (len l2))
      h1
      h2))))

(local theorem nthext ((l1 nat ()) (l2 nat ()) (n nat)) ()
  (iff (eq l1 l2) (al n (eq (nth n l1) (nth n l2))))
((x1 nat))
(ibii ((eq l1 l2) (al n (eq (nth n l1) (nth n l2))))
  (iald (n (eq l1 l2) (eq (nth n l1) (nth n l2)))
    (ntheq2 (n l1 l2)))
  (nthext2d ((al n (eq (nth n l1) (nth n l2))) l1 l2 (len l2) x1)
    (sylibr ((al n (eq (nth n l1) (nth n l2))) (al n (iff (lt n (len l1)) (lt n (len l2)))) (eq (len l1) (len l2)))
      (eqallt1 ((len l1) (len l2) n))
      (alimi (n (eq (nth n l1) (nth n l2)) (iff (lt n (len l1)) (lt n (len l2))))
        (bitr3g ((eq (nth n l1) (nth n l2)) (ne (nth n l1) (d0)) (ne (nth n l2) (d0)) (lt n (len l1)) (lt n (len l2)))
          (nthne0 (l1 n))
          (nthne0 (l2 n))
          (neeq1 ((nth n l1) (nth n l2) (d0))))))
    (eqidd ((al n (eq (nth n l1) (nth n l2))) (len l2)))
    (anwl ((al n (eq (nth n l1) (nth n l2))) (lt x1 (len l2)) (eq (nth x1 l1) (nth x1 l2)))
      (eale (n x1 (eq (nth n l1) (nth n l2)) (eq (nth x1 l1) (nth x1 l2)))
        (eqeqd ((eq n x1) (nth n l1) (nth x1 l1) (nth n l2) (nth x1 l2))
          (ntheq1 (n x1 l1))
          (ntheq1 (n x1 l2))))))))

(local def zip ((l1 nat ()) (l2 nat ())) (nat ())
((i nat))
(lfn (lam i (pr (sub (nth i l1) (d1)) (sub (nth i l2) (d1)))) (min (len l1) (len l2))))

(local theorem zipeqd ((_G wff ()) (l11 nat ()) (l12 nat ()) (l21 nat ()) (l22 nat ()))
  ((hl1 (im _G (eq l11 l12)))
   (hl2 (im _G (eq l21 l22))))
  (im _G (eq (zip l11 l21) (zip l12 l22)))
((i nat))
(:let H1 (eqidd (_G i))
(:let H2 (eqidd (_G (d1)))
(:conv (im _G (eq (zip l11 l21) (zip l12 l22)))
  (im
    _G
    (eq
      (:unfold zip (l11 l21) (i)
        (lfn (lam i (pr (sub (nth i l11) (d1)) (sub (nth i l21) (d1)))) (min (len l11) (len l21))))
      (:unfold zip (l12 l22) (i)
        (lfn (lam i (pr (sub (nth i l12) (d1)) (sub (nth i l22) (d1)))) (min (len l12) (len l22))))))
  (lfneqd (_G (lam i (pr (sub (nth i l11) (d1)) (sub (nth i l21) (d1)))) (lam i (pr (sub (nth i l12) (d1)) (sub (nth i l22) (d1)))) (min (len l11) (len l21)) (min (len l12) (len l22)))
    (lameqd (_G i (pr (sub (nth i l11) (d1)) (sub (nth i l21) (d1))) (pr (sub (nth i l12) (d1)) (sub (nth i l22) (d1))))
      (preqd (_G (sub (nth i l11) (d1)) (sub (nth i l12) (d1)) (sub (nth i l21) (d1)) (sub (nth i l22) (d1)))
        (subeqd (_G (nth i l11) (nth i l12) (d1) (d1))
          (ntheqd (_G i i l11 l12)
            H1
            hl1)
          H2)
        (subeqd (_G (nth i l21) (nth i l22) (d1) (d1))
          (ntheqd (_G i i l21 l22)
            H1
            hl2)
          H2)))
    (mineqd (_G (len l11) (len l12) (len l21) (len l22))
      (leneqd (_G l11 l12)
        hl1)
      (leneqd (_G l21 l22)
        hl2)))))))

(local theorem zipeq ((l11 nat ()) (l12 nat ()) (l21 nat ()) (l22 nat ())) ()
  (im (eq l11 l12) (im (eq l21 l22) (eq (zip l11 l21) (zip l12 l22))))
()
(exp ((eq l11 l12) (eq l21 l22) (eq (zip l11 l21) (zip l12 l22)))
  (zipeqd ((an (eq l11 l12) (eq l21 l22)) l11 l12 l21 l22)
    (anl ((eq l11 l12) (eq l21 l22)))
    (anr ((eq l11 l12) (eq l21 l22))))))

(local theorem zipeq1d ((G wff ()) (l11 nat ()) (l12 nat ()) (l2 nat ()))
  ((h (im G (eq l11 l12))))
  (im G (eq (zip l11 l2) (zip l12 l2)))
()
(zipeqd (G l11 l12 l2 l2)
  h
  (eqidd (G l2))))

(local theorem zipeq1 ((l11 nat ()) (l12 nat ()) (l2 nat ())) ()
  (im (eq l11 l12) (eq (zip l11 l2) (zip l12 l2)))
()
(zipeq1d ((eq l11 l12) l11 l12 l2)
  (id ((eq l11 l12)))))

(local theorem zipeq2d ((G wff ()) (l1 nat ()) (l21 nat ()) (l22 nat ()))
  ((h (im G (eq l21 l22))))
  (im G (eq (zip l1 l21) (zip l1 l22)))
()
(zipeqd (G l1 l1 l21 l22)
  (eqidd (G l1))
  h))

(local theorem zipeq2 ((l1 nat ()) (l21 nat ()) (l22 nat ())) ()
  (im (eq l21 l22) (eq (zip l1 l21) (zip l1 l22)))
()
(zipeq2d ((eq l21 l22) l1 l21 l22)
  (id ((eq l21 l22)))))

(local theorem ziplen ((l1 nat ()) (l2 nat ())) ()
  (eq (len (zip l1 l2)) (min (len l1) (len l2)))
((x1 nat))
(:conv (eq (len (zip l1 l2)) (min (len l1) (len l2)))
  (eq
    (len
      (:unfold zip (l1 l2) (x1)
        (lfn (lam x1 (pr (sub (nth x1 l1) (d1)) (sub (nth x1 l2) (d1)))) (min (len l1) (len l2)))))
    (min (len l1) (len l2)))
  (lenlfn ((lam x1 (pr (sub (nth x1 l1) (d1)) (sub (nth x1 l2) (d1)))) (min (len l1) (len l2))))))

(local theorem zipnth ((G wff ()) (a nat ()) (b nat ()) (i nat ()) (l1 nat ()) (l2 nat ()))
  ((h1 (im G (eq (nth i l1) (suc a))))
   (h2 (im G (eq (nth i l2) (suc b)))))
  (im G (eq (nth i (zip l1 l2)) (suc (pr a b))))
((x nat))
(:let H1 (anr (G (eq x i)))
(eqtrd (G (nth i (zip l1 l2)) (suc (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i)) (suc (pr a b)))
  (syl (G (lt i (min (len l1) (len l2))) (eq (nth i (zip l1 l2)) (suc (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i))))
    (:conv (im (lt i (min (len l1) (len l2))) (eq (nth i (zip l1 l2)) (suc (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i))))
      (im
        (lt i (min (len l1) (len l2)))
        (eq
          (nth
            i
            (:unfold zip (l1 l2) (x)
              (lfn (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) (min (len l1) (len l2)))))
          (suc (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i))))
      (nthlfn ((lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i (min (len l1) (len l2)))))
    (sylibr (G (an (lt i (len l1)) (lt i (len l2))) (lt i (min (len l1) (len l2))))
      (ltmin (i (len l1) (len l2)))
      (iand (G (lt i (len l1)) (lt i (len l2)))
        (sylib (G (ne (nth i l1) (d0)) (lt i (len l1)))
          (nthne0 (l1 i))
          (syl (G (eq (nth i l1) (suc a)) (ne (nth i l1) (d0)))
            (sucne0 ((nth i l1) a))
            h1))
        (sylib (G (ne (nth i l2) (d0)) (lt i (len l2)))
          (nthne0 (l2 i))
          (syl (G (eq (nth i l2) (suc b)) (ne (nth i l2) (d0)))
            (sucne0 ((nth i l2) b))
            h2)))))
  (suceqd (G (app (lam x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1)))) i) (pr a b))
    (applamed (G i (pr a b) x (pr (sub (nth x l1) (d1)) (sub (nth x l2) (d1))))
      (preqd ((an G (eq x i)) (sub (nth x l1) (d1)) a (sub (nth x l2) (d1)) b)
        (syl6eq ((an G (eq x i)) (sub (nth x l1) (d1)) (sub (suc a) (d1)) a)
          (sucsub1 (a))
          (subeq1d ((an G (eq x i)) (nth x l1) (suc a) (d1))
            (eqtrd ((an G (eq x i)) (nth x l1) (nth i l1) (suc a))
              (ntheq1d ((an G (eq x i)) x i l1)
                H1)
              (anwl (G (eq x i) (eq (nth i l1) (suc a)))
                h1))))
        (syl6eq ((an G (eq x i)) (sub (nth x l2) (d1)) (sub (suc b) (d1)) b)
          (sucsub1 (b))
          (subeq1d ((an G (eq x i)) (nth x l2) (suc b) (d1))
            (eqtrd ((an G (eq x i)) (nth x l2) (nth i l2) (suc b))
              (ntheq1d ((an G (eq x i)) x i l2)
                H1)
              (anwl (G (eq x i) (eq (nth i l2) (suc b)))
                h2))))))))))

(local theorem zip01 ((l nat ())) ()
  (eq (zip (d0) l) (d0))
()
(mpbi ((eq (len (zip (d0) l)) (d0)) (eq (zip (d0) l) (d0)))
  (leneq0 ((zip (d0) l)))
  (ax_mp ((eq (min (len (d0)) (len l)) (d0)) (eq (len (zip (d0) l)) (d0)))
    (ax_mp ((eq (len (zip (d0) l)) (min (len (d0)) (len l))) (im (eq (min (len (d0)) (len l)) (d0)) (eq (len (zip (d0) l)) (d0))))
      (eqtr ((len (zip (d0) l)) (min (len (d0)) (len l)) (d0)))
      (ziplen ((d0) l)))
    (ax_mp ((eq (min (d0) (len l)) (d0)) (eq (min (len (d0)) (len l)) (d0)))
      (ax_mp ((eq (min (len (d0)) (len l)) (min (d0) (len l))) (im (eq (min (d0) (len l)) (d0)) (eq (min (len (d0)) (len l)) (d0))))
        (eqtr ((min (len (d0)) (len l)) (min (d0) (len l)) (d0)))
        (ax_mp ((eq (len (d0)) (d0)) (eq (min (len (d0)) (len l)) (min (d0) (len l))))
          (mineq1 ((len (d0)) (d0) (len l)))
          (len0 ())))
      (ax_mp ((le (d0) (len l)) (eq (min (d0) (len l)) (d0)))
        (eqmin1 ((d0) (len l)))
        (le01 ((len l))))))))

(local theorem zip02 ((l nat ())) ()
  (eq (zip l (d0)) (d0))
()
(mpbi ((eq (len (zip l (d0))) (d0)) (eq (zip l (d0)) (d0)))
  (leneq0 ((zip l (d0))))
  (ax_mp ((eq (min (len l) (len (d0))) (d0)) (eq (len (zip l (d0))) (d0)))
    (ax_mp ((eq (len (zip l (d0))) (min (len l) (len (d0)))) (im (eq (min (len l) (len (d0))) (d0)) (eq (len (zip l (d0))) (d0))))
      (eqtr ((len (zip l (d0))) (min (len l) (len (d0))) (d0)))
      (ziplen (l (d0))))
    (ax_mp ((eq (min (len l) (d0)) (d0)) (eq (min (len l) (len (d0))) (d0)))
      (ax_mp ((eq (min (len l) (len (d0))) (min (len l) (d0))) (im (eq (min (len l) (d0)) (d0)) (eq (min (len l) (len (d0))) (d0))))
        (eqtr ((min (len l) (len (d0))) (min (len l) (d0)) (d0)))
        (ax_mp ((eq (len (d0)) (d0)) (eq (min (len l) (len (d0))) (min (len l) (d0))))
          (mineq2 ((len l) (len (d0)) (d0)))
          (len0 ())))
      (ax_mp ((le (d0) (len l)) (eq (min (len l) (d0)) (d0)))
        (eqmin2 ((len l) (d0)))
        (le01 ((len l))))))))

(local theorem zipS ((a nat ()) (b nat ()) (l1 nat ()) (l2 nat ())) ()
  (eq (zip (cons a l1) (cons b l2)) (cons (pr a b) (zip l1 l2)))
((m nat) (n nat))
(:let H1 (lteq1 (m n (suc (min (len l1) (len l2)))))
(:let H2 (ntheq1 (m n (zip (cons a l1) (cons b l2))))
(:let H3 (ntheq1 (m n (cons (pr a b) (zip l1 l2))))
(:let H4 (eqeqd ((eq m n) (nth m (zip (cons a l1) (cons b l2))) (nth n (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2))) (nth n (cons (pr a b) (zip l1 l2))))
  H2
  H3)
(:let H5 (imeqd ((eq m n) (lt m (suc (min (len l1) (len l2)))) (lt n (suc (min (len l1) (len l2)))) (eq (nth m (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2)))))
  H1
  H4)
(:let H6 (eqcomd ((an (lt n (len l1)) (lt n (len l2))) (suc (sub (nth n l1) (d1))) (nth n l1))
  (syl ((an (lt n (len l1)) (lt n (len l2))) (ne (nth n l1) (d0)) (eq (suc (sub (nth n l1) (d1))) (nth n l1)))
    (sub1can ((nth n l1)))
    (sylibr ((an (lt n (len l1)) (lt n (len l2))) (lt n (len l1)) (ne (nth n l1) (d0)))
      (nthne0 (l1 n))
      (anl ((lt n (len l1)) (lt n (len l2)))))))
(:let H7 (eqcomd ((an (lt n (len l1)) (lt n (len l2))) (suc (sub (nth n l2) (d1))) (nth n l2))
  (syl ((an (lt n (len l1)) (lt n (len l2))) (ne (nth n l2) (d0)) (eq (suc (sub (nth n l2) (d1))) (nth n l2)))
    (sub1can ((nth n l2)))
    (sylibr ((an (lt n (len l1)) (lt n (len l2))) (lt n (len l2)) (ne (nth n l2) (d0)))
      (nthne0 (l2 n))
      (anr ((lt n (len l1)) (lt n (len l2)))))))
(trud ((eq (zip (cons a l1) (cons b l2)) (cons (pr a b) (zip l1 l2))))
  (nthext2d ((wtru) (zip (cons a l1) (cons b l2)) (cons (pr a b) (zip l1 l2)) (suc (min (len l1) (len l2))) n)
    (a1i ((wtru) (eq (len (zip (cons a l1) (cons b l2))) (suc (min (len l1) (len l2)))))
      (ax_mp ((eq (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2)))) (eq (len (zip (cons a l1) (cons b l2))) (suc (min (len l1) (len l2)))))
        (ax_mp ((eq (len (zip (cons a l1) (cons b l2))) (min (len (cons a l1)) (len (cons b l2)))) (im (eq (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2)))) (eq (len (zip (cons a l1) (cons b l2))) (suc (min (len l1) (len l2))))))
          (eqtr ((len (zip (cons a l1) (cons b l2))) (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2)))))
          (ziplen ((cons a l1) (cons b l2))))
        (ax_mp ((eq (suc (min (len l1) (len l2))) (min (suc (len l1)) (suc (len l2)))) (eq (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2)))))
          (ax_mp ((eq (min (len (cons a l1)) (len (cons b l2))) (min (suc (len l1)) (suc (len l2)))) (im (eq (suc (min (len l1) (len l2))) (min (suc (len l1)) (suc (len l2)))) (eq (min (len (cons a l1)) (len (cons b l2))) (suc (min (len l1) (len l2))))))
            (eqtr4 ((min (len (cons a l1)) (len (cons b l2))) (min (suc (len l1)) (suc (len l2))) (suc (min (len l1) (len l2)))))
            (ax_mp ((eq (len (cons b l2)) (suc (len l2))) (eq (min (len (cons a l1)) (len (cons b l2))) (min (suc (len l1)) (suc (len l2)))))
              (ax_mp ((eq (len (cons a l1)) (suc (len l1))) (im (eq (len (cons b l2)) (suc (len l2))) (eq (min (len (cons a l1)) (len (cons b l2))) (min (suc (len l1)) (suc (len l2))))))
                (mineq ((len (cons a l1)) (suc (len l1)) (len (cons b l2)) (suc (len l2))))
                (lenS (a l1)))
              (lenS (b l2))))
          (minS ((len l1) (len l2))))))
    (a1i ((wtru) (eq (len (cons (pr a b) (zip l1 l2))) (suc (min (len l1) (len l2)))))
      (ax_mp ((eq (suc (len (zip l1 l2))) (suc (min (len l1) (len l2)))) (eq (len (cons (pr a b) (zip l1 l2))) (suc (min (len l1) (len l2)))))
        (ax_mp ((eq (len (cons (pr a b) (zip l1 l2))) (suc (len (zip l1 l2)))) (im (eq (suc (len (zip l1 l2))) (suc (min (len l1) (len l2)))) (eq (len (cons (pr a b) (zip l1 l2))) (suc (min (len l1) (len l2))))))
          (eqtr ((len (cons (pr a b) (zip l1 l2))) (suc (len (zip l1 l2))) (suc (min (len l1) (len l2)))))
          (lenS ((pr a b) (zip l1 l2))))
        (ax_mp ((eq (len (zip l1 l2)) (min (len l1) (len l2))) (eq (suc (len (zip l1 l2))) (suc (min (len l1) (len l2)))))
          (suceq ((len (zip l1 l2)) (min (len l1) (len l2))))
          (ziplen (l1 l2)))))
    (anwr ((wtru) (lt n (suc (min (len l1) (len l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2)))))
      (ind (m n n (im (lt m (suc (min (len l1) (len l2)))) (eq (nth m (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2))))) (im (lt (d0) (suc (min (len l1) (len l2)))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2))))) (im (lt n (suc (min (len l1) (len l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2))))) (im (lt n (suc (min (len l1) (len l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2))))) (im (lt (suc n) (suc (min (len l1) (len l2)))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth (suc n) (cons (pr a b) (zip l1 l2))))))
        (imeqd ((eq m (d0)) (lt m (suc (min (len l1) (len l2)))) (lt (d0) (suc (min (len l1) (len l2)))) (eq (nth m (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2)))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2)))))
          (lteq1 (m (d0) (suc (min (len l1) (len l2)))))
          (eqeqd ((eq m (d0)) (nth m (zip (cons a l1) (cons b l2))) (nth (d0) (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2))) (nth (d0) (cons (pr a b) (zip l1 l2))))
            (ntheq1 (m (d0) (zip (cons a l1) (cons b l2))))
            (ntheq1 (m (d0) (cons (pr a b) (zip l1 l2))))))
        H5
        (imeqd ((eq m (suc n)) (lt m (suc (min (len l1) (len l2)))) (lt (suc n) (suc (min (len l1) (len l2)))) (eq (nth m (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2)))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth (suc n) (cons (pr a b) (zip l1 l2)))))
          (lteq1 (m (suc n) (suc (min (len l1) (len l2)))))
          (eqeqd ((eq m (suc n)) (nth m (zip (cons a l1) (cons b l2))) (nth (suc n) (zip (cons a l1) (cons b l2))) (nth m (cons (pr a b) (zip l1 l2))) (nth (suc n) (cons (pr a b) (zip l1 l2))))
            (ntheq1 (m (suc n) (zip (cons a l1) (cons b l2))))
            (ntheq1 (m (suc n) (cons (pr a b) (zip l1 l2))))))
        H5
        (a1i ((lt (d0) (suc (min (len l1) (len l2)))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2)))))
          (ax_mp ((eq (nth (d0) (cons (pr a b) (zip l1 l2))) (suc (pr a b))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2)))))
            (ax_mp ((eq (nth (d0) (zip (cons a l1) (cons b l2))) (suc (pr a b))) (im (eq (nth (d0) (cons (pr a b) (zip l1 l2))) (suc (pr a b))) (eq (nth (d0) (zip (cons a l1) (cons b l2))) (nth (d0) (cons (pr a b) (zip l1 l2))))))
              (eqtr4 ((nth (d0) (zip (cons a l1) (cons b l2))) (suc (pr a b)) (nth (d0) (cons (pr a b) (zip l1 l2)))))
              (trud ((eq (nth (d0) (zip (cons a l1) (cons b l2))) (suc (pr a b))))
                (zipnth ((wtru) a b (d0) (cons a l1) (cons b l2))
                  (a1i ((wtru) (eq (nth (d0) (cons a l1)) (suc a)))
                    (nthZ (a l1)))
                  (a1i ((wtru) (eq (nth (d0) (cons b l2)) (suc b)))
                    (nthZ (b l2))))))
            (nthZ ((pr a b) (zip l1 l2)))))
        (a1i ((im (lt n (suc (min (len l1) (len l2)))) (eq (nth n (zip (cons a l1) (cons b l2))) (nth n (cons (pr a b) (zip l1 l2))))) (im (lt (suc n) (suc (min (len l1) (len l2)))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth (suc n) (cons (pr a b) (zip l1 l2))))))
          (sylbir ((lt (suc n) (suc (min (len l1) (len l2)))) (lt n (min (len l1) (len l2))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth (suc n) (cons (pr a b) (zip l1 l2)))))
            (ltsuc (n (min (len l1) (len l2))))
            (syl6eqr ((lt n (min (len l1) (len l2))) (nth (suc n) (zip (cons a l1) (cons b l2))) (nth n (zip l1 l2)) (nth (suc n) (cons (pr a b) (zip l1 l2))))
              (nthS (n (pr a b) (zip l1 l2)))
              (sylbi ((lt n (min (len l1) (len l2))) (an (lt n (len l1)) (lt n (len l2))) (eq (nth (suc n) (zip (cons a l1) (cons b l2))) (nth n (zip l1 l2))))
                (ltmin (n (len l1) (len l2)))
                (eqtr4d ((an (lt n (len l1)) (lt n (len l2))) (nth (suc n) (zip (cons a l1) (cons b l2))) (suc (pr (sub (nth n l1) (d1)) (sub (nth n l2) (d1)))) (nth n (zip l1 l2)))
                  (zipnth ((an (lt n (len l1)) (lt n (len l2))) (sub (nth n l1) (d1)) (sub (nth n l2) (d1)) (suc n) (cons a l1) (cons b l2))
                    (syl5eq ((an (lt n (len l1)) (lt n (len l2))) (nth (suc n) (cons a l1)) (nth n l1) (suc (sub (nth n l1) (d1))))
                      (nthS (n a l1))
                      H6)
                    (syl5eq ((an (lt n (len l1)) (lt n (len l2))) (nth (suc n) (cons b l2)) (nth n l2) (suc (sub (nth n l2) (d1))))
                      (nthS (n b l2))
                      H7))
                  (zipnth ((an (lt n (len l1)) (lt n (len l2))) (sub (nth n l1) (d1)) (sub (nth n l2) (d1)) n l1 l2)
                    H6
                    H7))))))))))))))))))

