import "peano.mm0";

-- The string preamble. This is used for interfacing with
-- the real world, making concrete inputs and outputs.
strict free sort hex;
term x0: hex; term x1: hex; term x2: hex; term x3: hex;
term x4: hex; term x5: hex; term x6: hex; term x7: hex;
term x8: hex; term x9: hex; term xa: hex; term xb: hex;
term xc: hex; term xd: hex; term xe: hex; term xf: hex;

strict free sort char;
term ch: hex > hex > char;

strict free sort string;
term s0: string;
term s1: char > string;
term sadd: string > string > string; infixr sadd: $'+$ prec 51;

def scons (c: char) (s: string): string = $ s1 c '+ s $;
infixr scons: $':$ prec 53;

-- Peano translation functions. The sorts `hex`, `char`, `string`
-- are closed classes, but we can embed them in `nat` as lists
-- of numbers less than 256, and prove theorems on `nat` instead.
-- We have to introduce some axioms to deal with the coercion
-- functions though.

def d11: nat = $suc 10$; prefix d11: $11$ prec max;
def d12: nat = $suc 11$; prefix d12: $12$ prec max;
def d13: nat = $suc 12$; prefix d13: $13$ prec max;
def d14: nat = $suc 13$; prefix d14: $14$ prec max;
def d15: nat = $suc 14$; prefix d15: $15$ prec max;
def d16: nat = $suc 15$; prefix d16: $16$ prec max;

term h2n: hex > nat; coercion h2n: hex > nat;
axiom h2n0: $ x0 = 0 $;   axiom h2n1: $ x1 = 1 $;
axiom h2n2: $ x2 = 2 $;   axiom h2n3: $ x3 = 3 $;
axiom h2n4: $ x4 = 4 $;   axiom h2n5: $ x5 = 5 $;
axiom h2n6: $ x6 = 6 $;   axiom h2n7: $ x7 = 7 $;
axiom h2n8: $ x8 = 8 $;   axiom h2n9: $ x9 = 9 $;
axiom h2na: $ xa = 10 $;  axiom h2nb: $ xb = 11 $;
axiom h2nc: $ xc = 12 $;  axiom h2nd: $ xd = 13 $;
axiom h2ne: $ xe = 14 $;  axiom h2nf: $ xf = 15 $;

-- This allows us to prove facts about hex digits by case analysis.
-- It is not provable from the above axioms because the fact that the "hex"
-- sort has only the given 16 constructors is only observable from outside the theory.
axiom h2nlt (h: hex): $ h < 16 $;

term c2n: char > nat; coercion c2n: char > nat;
axiom c2nch (h1 h2: hex): $ ch h1 h2 = h1 * 16 + h2 $;
axiom c2nlt (c: char): $ c < 16 * 16 $;

term s2n: string > nat; coercion s2n: string > nat;
axiom s2ns0: $ s0 = 0 $;
axiom s2ns1 (c: char): $ s1 c = c : 0 $;
axiom s2nsadd (s t: string): $ s '+ t = s ++ t $;
