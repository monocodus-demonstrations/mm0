import "compiler.mm1";
import "mm0.mm1";

---------------------------------------
-- Specification of a valid verifier --
---------------------------------------

-- -- The actual verifier ELF
-- def Verifier: string;

-- -- The parsed ELF file
-- def VerifierElf: nat;

-- -- The verifier file is a valid ELF file
-- theorem Verifier_basicElf: $ basicElf Verifier VerifierElf $;

-- -- The verifier always terminates, on any input
-- theorem Verifier_terminates (k s: nat):
--   $ initialConfig VerifierElf k -> alwaysTerminates k s 0 $;

-- -- If the verifier succeeds, then the theorems in the input are derivable
-- theorem Verifier_Valid (k s: nat):
--   $ initialConfig VerifierElf k /\ succeeds k s 0 -> Valid s $;

term pointsto: nat > nat > wff;
infixl pointsto: $=>$ prec 25;
term istype: nat > nat > wff;
infixl istype: $:>$ prec 25;

term Ex {x: nat} (ph: wff x): wff;
prefix Ex: $EX$ prec 41;

do {
  -- This is just a scratchpad for now, some thoughts on MMC syntax and primitives.
  (def {a ^ b} (if {b <= 1} (match b [0 1] [1 a]) @ begin
    (def c {b // 2}) {{a ^ c} * {a ^ {b - c}}}))
  (mmc-add '(
    (struct CStr
      {(ghost len) : nat}
      {buf : (array u8 {len + 1})}
      {eq0 : $ A. i (i <= n -> (index buf i = 0 <-> i = n)) $})

    (typedef Stat (array u8 80))
    (intrinsic (sys_fstat {fd : u32} {buf : (&mut Stat)} : u32))
    (intrinsic (sys_open
      {fname : (& CStr)}
      {flags : $ O_RDONLY ; sn (O_WRONLY + O_CREAT + O_TRUNC) $} :
      u32))
    (intrinsic (sys_mmap {pos : (sn {0 : u64})} {len : u64} {prot : Prot}
      {flags : (sn {$ MAP_PRIVATE + nat (fd = bitsNeg 32 1) * MAP_ANONYMOUS $ : u64})}
      {fd : u64} {off : (sn {0 : u64})} :
      {ret : (or (sn {MAP_FAILED : u64})
        (list {ret : (own (array u8 len))}
          $ fd = bitsNeg 32 1 -> all (sn 0) ,'(* ret) $))}))

    (proc (main
        {argc : u32}
        {args : (& (array (& CStr) argc))}
        {(ghost input) : Input} :
        {(ghost output) : Output}
        $ output = 0 /\ Valid input $)
      (assert {0 <= (sys_open (index args 1) O_RDONLY)})
      {buf : Stat}
      (assert {0 <= (sys_fstat fd (&mut buf))})
      {(ptr h) := (typeof! (sys_mmap 0 len PROT_READ {MAP_FILE bor MAP_PRIVATE}))}
      {{ptr : (own (array u8 len))} :=
        (pun ptr (entail h (assert {ptr != MAP_FAILED})
          -- proof of
          -- ptr :> (union (sn {MAP_FAILED : u64})
          --   (list {ret : (own (array u8 len))}
          --     $ fd = bitsNeg 32 1 -> all (sn 0) (* ret) $)) /\
          -- ptr != MAP_FAILED
          -- |- (ptr :> (own (array u8 len))
          _))}
      (return 0 (ian rfl (verify len ptr))))

    (global {g_file : u64})
    (global {g_end : u64})

    (struct Header0
      {magic : u32} {version : u8} {num_sorts : u8} {_ : u16}
      {num_terms : u32} {num_thms : u32}
      {p_terms : u32} {p_thms : u32}
      {p_proof : u32} {_ : u32}
      {p_index : u64})

    (struct Header {h : Header0} {sorts : (array u8 (h . num_sorts))})

    (const {{MM0B_MAGIC : u32} := 0x42304D4D})
    (const {{MM0B_VERSION : u8} := 1})
    (const {{MAX_SORTS : u8} := 128})

    (struct Term0 {num_args : u16} {sort : u8} {_ : u8} {p_args : u32})
    (struct Thm0 {num_args : u16} {_ : u16} {p_args : u32})

    (global {{g_num_sorts : u32} := 0}) (global {g_sorts : u64})
    (global {{g_num_terms : u32} := 0}) (global {g_terms : u64})
    (global {{g_num_thms : u32} := 0}) (global {g_thms : u64})

    (const {{CMD_END : u8} := 0})

    (func (cmd_unpack {cmd : (& (array u8 5))} : u8 u8 u32)
      {v := (index cmd 0)}
      {w := {v band 0x3F}}
      (switch {v >> 6}
        {0 => (return w 1 0)}
        {1 => (return w 2 (* (slice (& u8) {cmd + 1})))}
        {2 => (return w 3 (* (slice (& u16) {cmd + 1})))}
        {3 => (return w 5 (* (slice (& u32) {cmd + 1})))}))

    (proc (verify
        {len : u64}
        {file : (& (array u8 len))}
        {(ghost input) : Input}
        (mut g_file g_end g_num_sorts g_sorts
          g_num_terms g_terms g_num_thms g_thms) :
        $ Valid input $)
      {g_file := file}
      {{g_end : u64} := (cast {file + len})}
      {{p : (& Header0)} :=
        (pun file (using (assert {(sizeof Header0) <= len})))}
      (assert {(p . magic) = MM0B_MAGIC})
      (assert {(p . version) = MM0B_VERSION})
      {nsorts := (p . num_sorts)}
      {h2 := (assert {nsorts <= MAX_SORTS})}
      {g_num_sorts := 0}
      {{g_sorts : (& (array u8 nsorts))} := (slice {file + (sizeof Header)})}
      {g_num_terms := 0}
      {p_terms := (p . p_terms)} {nterms := (p . num_terms)}
      {{g_terms : (& (array Term0 nterms))} := (slice {file + p_terms})}
      {p_thms := (p . p_thms)} {nthms := (p . num_thms)}
      {{g_thms : (& (array Thm0 nthms))} := (slice {file + p_thms})}
      {(ghost remainder) := {len - (p . p_proof)}}
      {h := (assert {{(p . p_proof) + 5} <= len})}
      {{remainder_bd : {5 <= remainder}} := (entail h _)}
      {{stmt : (& (array u8 remainder))} := (slice {file + (p . p_proof)} (entail h _))}

      (while {(index stmt 0 (entail remainder_bd _)) != CMD_END}
        (variant remainder)
        (invariant
          (mut g_num_sorts g_num_terms g_num_thms remainder remainder_bd)
          {h_sorts : {{g_num_sorts <= nsorts} and {g_sorts :> (& (array Sort g_num_sorts))}}}
          {h_terms : {{g_num_terms <= nterms} and {g_terms :> (& (array Term g_num_terms))}}}
          {h_thms : {{g_num_thms <= nthms} and {g_thms :> (& (array Thm g_num_thms))}}}
          {suff : {{stmt + remainder} = g_end}}
          {(ghost env) : Env} {(ghost env2) : Env}
          {ext : (EnvExtends env env2)}
          {repr : (Represents env2 (* (<: h_sorts)) (* (<: h_terms)) (* (<: h_thms)))})

        {h_unpack := {(w sz data) := (cmd_unpack stmt)}}
        {(ghost remainder2) := {remainder - data}}
        {next_stmt_bd := (assert {{stmt + data + 5} <= g_end})}
        {{next_stmt : (& (array u8 remainder2))} := (slice {stmt + data}
          (entail next_stmt_bd suff _))}

        (switch w
          {CMD_STMT_SORT => (begin
            (assert {data = sz})
            {h := (assert {g_num_sorts < nsorts})}
            {(h_sorts repr2) :=
              (parse_until CMD_STMT_SORT h (&mut env env2 ext) repr)}
            {(g_num_sorts _) := (succ_lt g_num_sorts h)}
            {h_sorts := (pun h_sorts _)})}

          {{CMD_STMT_DEF or CMD_STMT_LOCAL_DEF} => (begin
              _ -- this marks unfinished code, the compiler will give an error
                -- and provide the current type context
            )}
        )

        (continue
          {remainder := remainder2}
          {remainder_bd := (entail next_stmt_bd _)}
          {stmt := next_stmt}
          {suff := (entail suff _)}
          (variant (entail h_unpack remainder2
            -- proof of
            -- w <> sz <> data = cmd_unpack (* stmt),
            -- remainder2 = remainder - data |- remainder2 < remainder
            _))))
      (assert {g_num_sorts = nsorts})
      (assert {g_num_terms = nterms})
      (assert {g_num_thms = nthms})
      (entail (parse_until CMD_END) _))
  ))
};
