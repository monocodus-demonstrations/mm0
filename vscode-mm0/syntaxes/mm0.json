{
	"name": "Metamath Zero",
	"patterns": [
		{"include": "#comment"},
		{"include": "#lisp-annot"},
		{
			"match": "(?:(pure)\\s+)?(?:(strict)\\s+)?(?:(provable)\\s+)?(?:(free)\\s+)?(sort)\\s+(\\w+)(;)",
			"captures": {
				"1": {"name": "keyword.control.modifier.mm0"},
				"2": {"name": "keyword.control.modifier.mm0"},
				"3": {"name": "keyword.control.modifier.mm0"},
				"4": {"name": "keyword.control.modifier.mm0"},
				"5": {"name": "keyword.other.command.mm0"},
				"6": {"name": "entity.name.type.mm0"},
				"7": {"name": "punctuation.terminator.statement.mm0"}
			},
			"name": "meta.statement.mm0"
		},
		{
			"begin": "(?:(pub|abstract|local)\\s+)?(term|def|axiom|theorem)\\s+(\\w+)",
			"beginCaptures": {
				"1": {"name": "keyword.control.modifier.mm0"},
				"2": {"name": "keyword.other.command.mm0"},
				"3": {"name": "entity.name.function.mm0"}
			},
			"end": ";",
			"endCaptures": {"0": {"name": "punctuation.terminator.statement.mm0"}},
			"patterns": [
				{"include": "#comment"},
				{"include": "#binder"},
				{"include": "#return-type"},
				{
					"begin": "=",
					"end": "(?=;)",
					"patterns": [{"include": "#lisp-val"}]
				}
			],
			"name": "meta.statement.mm0"
		},
		{
			"match": "(exit)\\s*(;)",
			"captures": {
				"1": {"name": "keyword.other.command.mm0"},
				"2": {"name": "punctuation.terminator.statement.mm0"}
			},
			"name": "meta.statement.mm0"
		},
		{
			"begin": "import",
			"beginCaptures": {"0": {"name": "keyword.other.notation.mm0"}},
			"end": ";",
			"endCaptures": {"0": {"name": "punctuation.terminator.statement.mm0"}},
			"patterns": [
				{"include": "#comment"},
				{"include": "#string"}
			],
			"name": "meta.statement.mm0"
		},
		{
			"begin": "delimiter",
			"beginCaptures": {"0": {"name": "keyword.other.notation.mm0"}},
			"end": ";",
			"endCaptures": {"0": {"name": "punctuation.terminator.statement.mm0"}},
			"patterns": [
				{"include": "#comment"},
				{"include": "#math-string"}
			],
			"name": "meta.statement.mm0"
		},
		{
			"match": "(coercion)\\s+(\\w+)\\s*(:)\\s*(\\w+)\\s*>\\s*(\\w+)\\s*(;)",
			"captures": {
				"1": {"name": "keyword.other.notation.mm0"},
				"2": {"name": "entity.name.function.mm0"},
				"3": {"name": "keyword.operator.colon.mm0"},
				"4": {"name": "entity.name.type.mm0"},
				"5": {"name": "entity.name.type.mm0"},
				"6": {"name": "punctuation.terminator.statement.mm0"}
			},
			"name": "meta.statement.mm0"
		},
		{
			"match": "(infix[lr]|prefix)\\s+(\\w+)\\s*(:)\\s*(\\$\\s*[^\\s\\$]+\\s*\\$)\\s*(prec)\\s*([0-9]+|max)\\s*(;)",
			"captures": {
				"1": {"name": "keyword.other.notation.mm0"},
				"2": {"name": "entity.name.function.mm0"},
				"3": {"name": "keyword.operator.colon.mm0"},
				"4": {"name": "string.quoted.single.constant.mm0"},
				"5": {"name": "keyword.other.mm0"},
				"6": {"name": "constant.numeric.mm0"},
				"7": {"name": "punctuation.terminator.statement.mm0"}
			},
			"name": "meta.statement.mm0"
		},
		{
			"begin": "(notation)\\s+(\\w+)",
			"beginCaptures": {
				"1": {"name": "keyword.other.notation.mm0"},
				"2": {"name": "entity.name.function.mm0"}
			},
			"end": ";",
			"endCaptures": {"0": {"name": "punctuation.terminator.statement.mm0"}},
			"patterns": [
				{"include": "#comment"},
				{"include": "#binder"},
				{"include": "#return-type"},
				{
					"begin": "=",
					"end": "(?=;)",
					"patterns": [
						{"match": "\\$\\s*[^\\s\\$]+\\s*\\$", "name": "string.quoted.single.constant.mm0"},
						{"include": "#number"},
						{"match": "\\w+", "name": "variable.other.unknown.mm0"}
					]
				}
			],
			"name": "meta.statement.mm0"
		},
		{
			"begin": "(input|output)\\s+(\\w+)\\s*(:)",
			"beginCaptures": {
				"1": {"name": "keyword.other.command.mm0"},
				"2": {"name": "support.function.mm0"},
				"3": {"name": "keyword.operator.colon.mm0"}
			},
			"end": ";",
			"endCaptures": {"0": {"name": "punctuation.terminator.statement.mm0"}},
			"patterns": [{"include": "#lisp-val"}],
			"name": "meta.statement.mm0"
		},
		{
			"begin": "theorems",
			"beginCaptures": {"0": {"name": "keyword.other.command.mm0"}},
			"end": "\\}\\s*;",
			"patterns": [
				{"include": "#comment"},
				{"include": "#binder"},
				{
					"begin": "=\\s*\\{",
					"end": "(?=\\}\\s*;)",
					"patterns": [{"include": "#lisp-val"}]
				}
			],
			"name": "meta.statement.mm0"
		},
		{
			"begin": "(do)\\s*\\{",
			"beginCaptures": {"1": {"name": "keyword.other.command.mm0"}},
			"end": "\\}\\s*;",
			"patterns": [{"include": "#lisp-val"}],
			"name": "meta.statement.mm0"
		},
		{
			"begin": "do",
			"beginCaptures": {"0": {"name": "keyword.other.command.mm0"}},
			"end": ";",
			"endCaptures": {"0": {"name": "punctuation.terminator.statement.mm0"}},
			"patterns": [{"include": "#lisp-val"}],
			"name": "meta.statement.mm0"
		}
	],
	"repository": {
		"comment": {
			"patterns": [{
				"begin": "--\\|",
				"beginCaptures": {"0": {"name": "punctuation.definition.comment.mm0"}},
				"end": "$",
				"name": "comment.special.mm0"
			}, {
				"begin": "--",
				"beginCaptures": {"0": {"name": "punctuation.definition.comment.mm0"}},
				"end": "$",
				"name": "comment.line.double-dash.mm0"
			}]
		},
		"math-string": {
			"begin": "\\$",
			"beginCaptures": {"0": {"name": "punctuation.definition.math-string.begin.mm0"}},
			"end": "\\$",
			"endCaptures": {"0": {"name": "punctuation.definition.math-string.end.mm0"}}
		},
		"string": {
			"begin": "\"",
			"end": "\"",
			"name": "string.quoted.double.mm0.lisp",
			"patterns": [{
				"match": "\\\\[\\\\\"nr]",
				"name": "constant.character.escape.mm0.lisp"
			}]
		},
		"binder": {
			"patterns": [{
				"begin": "\\{",
				"beginCaptures": {"0": {"name": "meta.brace.curly.begin.mm0"}},
				"end": "\\}",
				"endCaptures": {"0": {"name": "meta.brace.curly.end.mm0"}},
				"patterns": [{
					"match": "\\w+",
					"name": "variable.parameter.bound.mm0"
				}, {
					"begin": "(:)\\s*(\\w+)",
					"beginCaptures": {
						"1": {"name": "keyword.operator.colon.mm0"},
						"2": {"name": "entity.name.type.mm0"}
					},
					"end": "(?=\\})",
					"patterns": [
						{"match": "\\w+", "name": "invalid.illegal.mm0"}
					]
				}]
			}, {
				"begin": "\\(",
				"beginCaptures": {"0": {"name": "meta.brace.round.begin.mm0"}},
				"end": "\\)",
				"endCaptures": {"0": {"name": "meta.brace.round.end.mm0"}},
				"patterns": [{
					"match": "\\.(\\w+)",
					"captures": {
						"1": {"name": "variable.parameter.dummy.mm0"}
					}
				}, {
					"match": "\\w+",
					"name": "variable.other.regular.mm0"
				}, {
					"begin": ":",
					"beginCaptures": {"0": {"name": "keyword.operator.colon.mm0"}},
					"end": "(?=\\))",
					"patterns": [
						{"include": "#math-string"},
						{
							"begin": "\\w+",
							"beginCaptures": {"0": {"name": "entity.name.type.mm0"}},
							"end": "(?!\\w|\\s)",
							"patterns": [{"match": "\\w+", "name": "variable.parameter.bound.mm0"}]
						}
					]
				}]
			}]
		},
		"return-type": {
			"begin": ":",
			"beginCaptures": {"0": {"name": "keyword.operator.colon.mm0"}},
			"end": "(?=[;=])",
			"patterns": [
				{"include": "#math-string"},
				{
					"begin": "\\w+",
					"beginCaptures": {"0": {"name": "entity.name.type.mm0"}},
					"end": "(?!\\w|\\s)",
					"patterns": [{"match": "\\w+", "name": "variable.parameter.bound.mm0"}]
				}
			]
		},
		"number": {"match": "[0-9]+|max", "name": "constant.numeric.mm0"},
		"lisp-val": {
			"patterns": [
				{"include": "#comment"},
				{
					"match": "(@)(\\s+([\\w!%&*+\\-./:<=>?@^_~]+)?)",
					"captures": {
						"1": {"name": "keyword.operator.mm0.lisp"},
						"3": {"name": "entity.name.function.mm0.lisp"}
					}
				},
				{
					"begin": "\\(\\s*(if|def|fn|let|letrec|match(-fn\\*?)?|focus)(?![\\w!%&*+\\-./:<=>?@^_~])",
					"beginCaptures": {"1": {"name": "keyword.other.command.mm0.lisp"}},
					"end": "\\)",
					"patterns": [{"include": "#lisp-val"}]
				},
				{
					"begin": "\\(\\s*(\\+|\\*|\\-|<=?|>=?|=|->string|string-(>atom|append)|display|error|print|begin|apply|min|max|not|or|list|cons|hd|tl|lookup|insert|async|set-timeout|goal|goal-type|infer-type|pp|[gs]et-goals|to-expr|refine|stat|have|get-decl|(pair|null|int|bool|atom|string|fn|number|ref|atom-map|def|goal|mvar)\\?|(ref|get|set|atom-map|insert|mvar|add-(decl|term|thm))\\!|refine-extra-args)(?![\\w!%&*+\\-./:<=>?@^_~])",
					"beginCaptures": {"1": {"name": "support.function.mm0.lisp"}},
					"end": "\\)",
					"patterns": [{"include": "#lisp-val"}]
				},
				{
					"begin": "\\(\\s*([\\w!%&*+\\-./:<=>?@^_~]+)?",
					"beginCaptures": {"1": {"name": "entity.name.function.mm0.lisp"}},
					"end": "\\)",
					"patterns": [{"include": "#lisp-val"}]
				},
				{"include": "#math-string"},
				{"match": "[0-9]+", "name": "constant.numeric.mm0.lisp"},
				{"match": "#(t|f|undef)(?!\\w)", "name": "constant.language.mm0.lisp"},
				{"include": "#string"},
				{
					"begin": "('+)\\(\\s*([\\w!%&*+\\-./:<=>?@^_~]+)?",
					"beginCaptures": {
						"1": {"name": "string.quoted.other.mm0.lisp"},
						"2": {"name": "entity.name.function.quoted.mm0.lisp"}},
					"end": "\\)",
					"patterns": [{"include": "#lisp-val"}]
				},
				{
					"match": "[\\w!%&*/:<=>?^_~+.@-]+",
					"name": "variable.other.unknown.mm0.lisp"
				}
			]
		},
		"lisp-annot": {
			"patterns": [
				{
					"begin": "@\\s*\\(\\s*([\\w!%&*/:<=>?^_~+.@-]+)?",
					"beginCaptures": {"1": {"name": "entity.name.function.mm0.lisp"}},
					"end": "\\)",
					"patterns": [{"include": "#lisp-val"}]
				},
				{
					"begin": "@\\s*'+\\(",
					"end": "\\)",
					"name": "string.quoted.other.mm0.lisp",
					"patterns": [{"include": "#lisp-val"}]
				},
				{
					"match": "@\\s*([0-9]+)",
					"captures": {"1": {"name": "constant.numeric.mm0.lisp"}}
				},
				{
					"match": "@\\s*(#[tf])",
					"captures": {"1": {"name": "constant.language.mm0.lisp"}}
				},
				{
					"match": "@\\s*([\\w!%&*/:<=>?^_~+.@-]+)",
					"captures": {"1": {"name": "variable.other.unknown.mm0.lisp"}}
				}
			]
		}
	},
	"scopeName": "source.mm0"
}
